
stm32f7508_LCD_TS_Demo_Cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  90000000  90000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006494  900001d0  900001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fe8  90006664  90006664  00016664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  9000864c  9000864c  0001864c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  90008654  90008654  00018654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  90008658  90008658  00018658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000ac  20000000  9000865c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000030c  200000ac  90008708  000200ac  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  200003b8  90008708  000203b8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016199  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003495  00000000  00000000  00036275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001268  00000000  00000000  00039710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000010d0  00000000  00000000  0003a978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002e432  00000000  00000000  0003ba48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001729a  00000000  00000000  00069e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0010f5a1  00000000  00000000  00081114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001906b5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004f2c  00000000  00000000  00190708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900001d0 <__do_global_dtors_aux>:
900001d0:	b510      	push	{r4, lr}
900001d2:	4c05      	ldr	r4, [pc, #20]	; (900001e8 <__do_global_dtors_aux+0x18>)
900001d4:	7823      	ldrb	r3, [r4, #0]
900001d6:	b933      	cbnz	r3, 900001e6 <__do_global_dtors_aux+0x16>
900001d8:	4b04      	ldr	r3, [pc, #16]	; (900001ec <__do_global_dtors_aux+0x1c>)
900001da:	b113      	cbz	r3, 900001e2 <__do_global_dtors_aux+0x12>
900001dc:	4804      	ldr	r0, [pc, #16]	; (900001f0 <__do_global_dtors_aux+0x20>)
900001de:	f3af 8000 	nop.w
900001e2:	2301      	movs	r3, #1
900001e4:	7023      	strb	r3, [r4, #0]
900001e6:	bd10      	pop	{r4, pc}
900001e8:	200000ac 	.word	0x200000ac
900001ec:	00000000 	.word	0x00000000
900001f0:	9000664c 	.word	0x9000664c

900001f4 <frame_dummy>:
900001f4:	b508      	push	{r3, lr}
900001f6:	4b03      	ldr	r3, [pc, #12]	; (90000204 <frame_dummy+0x10>)
900001f8:	b11b      	cbz	r3, 90000202 <frame_dummy+0xe>
900001fa:	4903      	ldr	r1, [pc, #12]	; (90000208 <frame_dummy+0x14>)
900001fc:	4803      	ldr	r0, [pc, #12]	; (9000020c <frame_dummy+0x18>)
900001fe:	f3af 8000 	nop.w
90000202:	bd08      	pop	{r3, pc}
90000204:	00000000 	.word	0x00000000
90000208:	200000b0 	.word	0x200000b0
9000020c:	9000664c 	.word	0x9000664c

90000210 <memchr>:
90000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
90000214:	2a10      	cmp	r2, #16
90000216:	db2b      	blt.n	90000270 <memchr+0x60>
90000218:	f010 0f07 	tst.w	r0, #7
9000021c:	d008      	beq.n	90000230 <memchr+0x20>
9000021e:	f810 3b01 	ldrb.w	r3, [r0], #1
90000222:	3a01      	subs	r2, #1
90000224:	428b      	cmp	r3, r1
90000226:	d02d      	beq.n	90000284 <memchr+0x74>
90000228:	f010 0f07 	tst.w	r0, #7
9000022c:	b342      	cbz	r2, 90000280 <memchr+0x70>
9000022e:	d1f6      	bne.n	9000021e <memchr+0xe>
90000230:	b4f0      	push	{r4, r5, r6, r7}
90000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000023a:	f022 0407 	bic.w	r4, r2, #7
9000023e:	f07f 0700 	mvns.w	r7, #0
90000242:	2300      	movs	r3, #0
90000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000248:	3c08      	subs	r4, #8
9000024a:	ea85 0501 	eor.w	r5, r5, r1
9000024e:	ea86 0601 	eor.w	r6, r6, r1
90000252:	fa85 f547 	uadd8	r5, r5, r7
90000256:	faa3 f587 	sel	r5, r3, r7
9000025a:	fa86 f647 	uadd8	r6, r6, r7
9000025e:	faa5 f687 	sel	r6, r5, r7
90000262:	b98e      	cbnz	r6, 90000288 <memchr+0x78>
90000264:	d1ee      	bne.n	90000244 <memchr+0x34>
90000266:	bcf0      	pop	{r4, r5, r6, r7}
90000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
9000026c:	f002 0207 	and.w	r2, r2, #7
90000270:	b132      	cbz	r2, 90000280 <memchr+0x70>
90000272:	f810 3b01 	ldrb.w	r3, [r0], #1
90000276:	3a01      	subs	r2, #1
90000278:	ea83 0301 	eor.w	r3, r3, r1
9000027c:	b113      	cbz	r3, 90000284 <memchr+0x74>
9000027e:	d1f8      	bne.n	90000272 <memchr+0x62>
90000280:	2000      	movs	r0, #0
90000282:	4770      	bx	lr
90000284:	3801      	subs	r0, #1
90000286:	4770      	bx	lr
90000288:	2d00      	cmp	r5, #0
9000028a:	bf06      	itte	eq
9000028c:	4635      	moveq	r5, r6
9000028e:	3803      	subeq	r0, #3
90000290:	3807      	subne	r0, #7
90000292:	f015 0f01 	tst.w	r5, #1
90000296:	d107      	bne.n	900002a8 <memchr+0x98>
90000298:	3001      	adds	r0, #1
9000029a:	f415 7f80 	tst.w	r5, #256	; 0x100
9000029e:	bf02      	ittt	eq
900002a0:	3001      	addeq	r0, #1
900002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
900002a6:	3001      	addeq	r0, #1
900002a8:	bcf0      	pop	{r4, r5, r6, r7}
900002aa:	3801      	subs	r0, #1
900002ac:	4770      	bx	lr
900002ae:	bf00      	nop

900002b0 <__aeabi_uldivmod>:
900002b0:	b953      	cbnz	r3, 900002c8 <__aeabi_uldivmod+0x18>
900002b2:	b94a      	cbnz	r2, 900002c8 <__aeabi_uldivmod+0x18>
900002b4:	2900      	cmp	r1, #0
900002b6:	bf08      	it	eq
900002b8:	2800      	cmpeq	r0, #0
900002ba:	bf1c      	itt	ne
900002bc:	f04f 31ff 	movne.w	r1, #4294967295
900002c0:	f04f 30ff 	movne.w	r0, #4294967295
900002c4:	f000 b96e 	b.w	900005a4 <__aeabi_idiv0>
900002c8:	f1ad 0c08 	sub.w	ip, sp, #8
900002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
900002d0:	f000 f806 	bl	900002e0 <__udivmoddi4>
900002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
900002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
900002dc:	b004      	add	sp, #16
900002de:	4770      	bx	lr

900002e0 <__udivmoddi4>:
900002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900002e4:	9d08      	ldr	r5, [sp, #32]
900002e6:	4604      	mov	r4, r0
900002e8:	468c      	mov	ip, r1
900002ea:	2b00      	cmp	r3, #0
900002ec:	f040 8083 	bne.w	900003f6 <__udivmoddi4+0x116>
900002f0:	428a      	cmp	r2, r1
900002f2:	4617      	mov	r7, r2
900002f4:	d947      	bls.n	90000386 <__udivmoddi4+0xa6>
900002f6:	fab2 f282 	clz	r2, r2
900002fa:	b142      	cbz	r2, 9000030e <__udivmoddi4+0x2e>
900002fc:	f1c2 0020 	rsb	r0, r2, #32
90000300:	fa24 f000 	lsr.w	r0, r4, r0
90000304:	4091      	lsls	r1, r2
90000306:	4097      	lsls	r7, r2
90000308:	ea40 0c01 	orr.w	ip, r0, r1
9000030c:	4094      	lsls	r4, r2
9000030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
90000312:	0c23      	lsrs	r3, r4, #16
90000314:	fbbc f6f8 	udiv	r6, ip, r8
90000318:	fa1f fe87 	uxth.w	lr, r7
9000031c:	fb08 c116 	mls	r1, r8, r6, ip
90000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
90000324:	fb06 f10e 	mul.w	r1, r6, lr
90000328:	4299      	cmp	r1, r3
9000032a:	d909      	bls.n	90000340 <__udivmoddi4+0x60>
9000032c:	18fb      	adds	r3, r7, r3
9000032e:	f106 30ff 	add.w	r0, r6, #4294967295
90000332:	f080 8119 	bcs.w	90000568 <__udivmoddi4+0x288>
90000336:	4299      	cmp	r1, r3
90000338:	f240 8116 	bls.w	90000568 <__udivmoddi4+0x288>
9000033c:	3e02      	subs	r6, #2
9000033e:	443b      	add	r3, r7
90000340:	1a5b      	subs	r3, r3, r1
90000342:	b2a4      	uxth	r4, r4
90000344:	fbb3 f0f8 	udiv	r0, r3, r8
90000348:	fb08 3310 	mls	r3, r8, r0, r3
9000034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
90000350:	fb00 fe0e 	mul.w	lr, r0, lr
90000354:	45a6      	cmp	lr, r4
90000356:	d909      	bls.n	9000036c <__udivmoddi4+0x8c>
90000358:	193c      	adds	r4, r7, r4
9000035a:	f100 33ff 	add.w	r3, r0, #4294967295
9000035e:	f080 8105 	bcs.w	9000056c <__udivmoddi4+0x28c>
90000362:	45a6      	cmp	lr, r4
90000364:	f240 8102 	bls.w	9000056c <__udivmoddi4+0x28c>
90000368:	3802      	subs	r0, #2
9000036a:	443c      	add	r4, r7
9000036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
90000370:	eba4 040e 	sub.w	r4, r4, lr
90000374:	2600      	movs	r6, #0
90000376:	b11d      	cbz	r5, 90000380 <__udivmoddi4+0xa0>
90000378:	40d4      	lsrs	r4, r2
9000037a:	2300      	movs	r3, #0
9000037c:	e9c5 4300 	strd	r4, r3, [r5]
90000380:	4631      	mov	r1, r6
90000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000386:	b902      	cbnz	r2, 9000038a <__udivmoddi4+0xaa>
90000388:	deff      	udf	#255	; 0xff
9000038a:	fab2 f282 	clz	r2, r2
9000038e:	2a00      	cmp	r2, #0
90000390:	d150      	bne.n	90000434 <__udivmoddi4+0x154>
90000392:	1bcb      	subs	r3, r1, r7
90000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
90000398:	fa1f f887 	uxth.w	r8, r7
9000039c:	2601      	movs	r6, #1
9000039e:	fbb3 fcfe 	udiv	ip, r3, lr
900003a2:	0c21      	lsrs	r1, r4, #16
900003a4:	fb0e 331c 	mls	r3, lr, ip, r3
900003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
900003ac:	fb08 f30c 	mul.w	r3, r8, ip
900003b0:	428b      	cmp	r3, r1
900003b2:	d907      	bls.n	900003c4 <__udivmoddi4+0xe4>
900003b4:	1879      	adds	r1, r7, r1
900003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
900003ba:	d202      	bcs.n	900003c2 <__udivmoddi4+0xe2>
900003bc:	428b      	cmp	r3, r1
900003be:	f200 80e9 	bhi.w	90000594 <__udivmoddi4+0x2b4>
900003c2:	4684      	mov	ip, r0
900003c4:	1ac9      	subs	r1, r1, r3
900003c6:	b2a3      	uxth	r3, r4
900003c8:	fbb1 f0fe 	udiv	r0, r1, lr
900003cc:	fb0e 1110 	mls	r1, lr, r0, r1
900003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
900003d4:	fb08 f800 	mul.w	r8, r8, r0
900003d8:	45a0      	cmp	r8, r4
900003da:	d907      	bls.n	900003ec <__udivmoddi4+0x10c>
900003dc:	193c      	adds	r4, r7, r4
900003de:	f100 33ff 	add.w	r3, r0, #4294967295
900003e2:	d202      	bcs.n	900003ea <__udivmoddi4+0x10a>
900003e4:	45a0      	cmp	r8, r4
900003e6:	f200 80d9 	bhi.w	9000059c <__udivmoddi4+0x2bc>
900003ea:	4618      	mov	r0, r3
900003ec:	eba4 0408 	sub.w	r4, r4, r8
900003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
900003f4:	e7bf      	b.n	90000376 <__udivmoddi4+0x96>
900003f6:	428b      	cmp	r3, r1
900003f8:	d909      	bls.n	9000040e <__udivmoddi4+0x12e>
900003fa:	2d00      	cmp	r5, #0
900003fc:	f000 80b1 	beq.w	90000562 <__udivmoddi4+0x282>
90000400:	2600      	movs	r6, #0
90000402:	e9c5 0100 	strd	r0, r1, [r5]
90000406:	4630      	mov	r0, r6
90000408:	4631      	mov	r1, r6
9000040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000040e:	fab3 f683 	clz	r6, r3
90000412:	2e00      	cmp	r6, #0
90000414:	d14a      	bne.n	900004ac <__udivmoddi4+0x1cc>
90000416:	428b      	cmp	r3, r1
90000418:	d302      	bcc.n	90000420 <__udivmoddi4+0x140>
9000041a:	4282      	cmp	r2, r0
9000041c:	f200 80b8 	bhi.w	90000590 <__udivmoddi4+0x2b0>
90000420:	1a84      	subs	r4, r0, r2
90000422:	eb61 0103 	sbc.w	r1, r1, r3
90000426:	2001      	movs	r0, #1
90000428:	468c      	mov	ip, r1
9000042a:	2d00      	cmp	r5, #0
9000042c:	d0a8      	beq.n	90000380 <__udivmoddi4+0xa0>
9000042e:	e9c5 4c00 	strd	r4, ip, [r5]
90000432:	e7a5      	b.n	90000380 <__udivmoddi4+0xa0>
90000434:	f1c2 0320 	rsb	r3, r2, #32
90000438:	fa20 f603 	lsr.w	r6, r0, r3
9000043c:	4097      	lsls	r7, r2
9000043e:	fa01 f002 	lsl.w	r0, r1, r2
90000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
90000446:	40d9      	lsrs	r1, r3
90000448:	4330      	orrs	r0, r6
9000044a:	0c03      	lsrs	r3, r0, #16
9000044c:	fbb1 f6fe 	udiv	r6, r1, lr
90000450:	fa1f f887 	uxth.w	r8, r7
90000454:	fb0e 1116 	mls	r1, lr, r6, r1
90000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000045c:	fb06 f108 	mul.w	r1, r6, r8
90000460:	4299      	cmp	r1, r3
90000462:	fa04 f402 	lsl.w	r4, r4, r2
90000466:	d909      	bls.n	9000047c <__udivmoddi4+0x19c>
90000468:	18fb      	adds	r3, r7, r3
9000046a:	f106 3cff 	add.w	ip, r6, #4294967295
9000046e:	f080 808d 	bcs.w	9000058c <__udivmoddi4+0x2ac>
90000472:	4299      	cmp	r1, r3
90000474:	f240 808a 	bls.w	9000058c <__udivmoddi4+0x2ac>
90000478:	3e02      	subs	r6, #2
9000047a:	443b      	add	r3, r7
9000047c:	1a5b      	subs	r3, r3, r1
9000047e:	b281      	uxth	r1, r0
90000480:	fbb3 f0fe 	udiv	r0, r3, lr
90000484:	fb0e 3310 	mls	r3, lr, r0, r3
90000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
9000048c:	fb00 f308 	mul.w	r3, r0, r8
90000490:	428b      	cmp	r3, r1
90000492:	d907      	bls.n	900004a4 <__udivmoddi4+0x1c4>
90000494:	1879      	adds	r1, r7, r1
90000496:	f100 3cff 	add.w	ip, r0, #4294967295
9000049a:	d273      	bcs.n	90000584 <__udivmoddi4+0x2a4>
9000049c:	428b      	cmp	r3, r1
9000049e:	d971      	bls.n	90000584 <__udivmoddi4+0x2a4>
900004a0:	3802      	subs	r0, #2
900004a2:	4439      	add	r1, r7
900004a4:	1acb      	subs	r3, r1, r3
900004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
900004aa:	e778      	b.n	9000039e <__udivmoddi4+0xbe>
900004ac:	f1c6 0c20 	rsb	ip, r6, #32
900004b0:	fa03 f406 	lsl.w	r4, r3, r6
900004b4:	fa22 f30c 	lsr.w	r3, r2, ip
900004b8:	431c      	orrs	r4, r3
900004ba:	fa20 f70c 	lsr.w	r7, r0, ip
900004be:	fa01 f306 	lsl.w	r3, r1, r6
900004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
900004c6:	fa21 f10c 	lsr.w	r1, r1, ip
900004ca:	431f      	orrs	r7, r3
900004cc:	0c3b      	lsrs	r3, r7, #16
900004ce:	fbb1 f9fe 	udiv	r9, r1, lr
900004d2:	fa1f f884 	uxth.w	r8, r4
900004d6:	fb0e 1119 	mls	r1, lr, r9, r1
900004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
900004de:	fb09 fa08 	mul.w	sl, r9, r8
900004e2:	458a      	cmp	sl, r1
900004e4:	fa02 f206 	lsl.w	r2, r2, r6
900004e8:	fa00 f306 	lsl.w	r3, r0, r6
900004ec:	d908      	bls.n	90000500 <__udivmoddi4+0x220>
900004ee:	1861      	adds	r1, r4, r1
900004f0:	f109 30ff 	add.w	r0, r9, #4294967295
900004f4:	d248      	bcs.n	90000588 <__udivmoddi4+0x2a8>
900004f6:	458a      	cmp	sl, r1
900004f8:	d946      	bls.n	90000588 <__udivmoddi4+0x2a8>
900004fa:	f1a9 0902 	sub.w	r9, r9, #2
900004fe:	4421      	add	r1, r4
90000500:	eba1 010a 	sub.w	r1, r1, sl
90000504:	b2bf      	uxth	r7, r7
90000506:	fbb1 f0fe 	udiv	r0, r1, lr
9000050a:	fb0e 1110 	mls	r1, lr, r0, r1
9000050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
90000512:	fb00 f808 	mul.w	r8, r0, r8
90000516:	45b8      	cmp	r8, r7
90000518:	d907      	bls.n	9000052a <__udivmoddi4+0x24a>
9000051a:	19e7      	adds	r7, r4, r7
9000051c:	f100 31ff 	add.w	r1, r0, #4294967295
90000520:	d22e      	bcs.n	90000580 <__udivmoddi4+0x2a0>
90000522:	45b8      	cmp	r8, r7
90000524:	d92c      	bls.n	90000580 <__udivmoddi4+0x2a0>
90000526:	3802      	subs	r0, #2
90000528:	4427      	add	r7, r4
9000052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
9000052e:	eba7 0708 	sub.w	r7, r7, r8
90000532:	fba0 8902 	umull	r8, r9, r0, r2
90000536:	454f      	cmp	r7, r9
90000538:	46c6      	mov	lr, r8
9000053a:	4649      	mov	r1, r9
9000053c:	d31a      	bcc.n	90000574 <__udivmoddi4+0x294>
9000053e:	d017      	beq.n	90000570 <__udivmoddi4+0x290>
90000540:	b15d      	cbz	r5, 9000055a <__udivmoddi4+0x27a>
90000542:	ebb3 020e 	subs.w	r2, r3, lr
90000546:	eb67 0701 	sbc.w	r7, r7, r1
9000054a:	fa07 fc0c 	lsl.w	ip, r7, ip
9000054e:	40f2      	lsrs	r2, r6
90000550:	ea4c 0202 	orr.w	r2, ip, r2
90000554:	40f7      	lsrs	r7, r6
90000556:	e9c5 2700 	strd	r2, r7, [r5]
9000055a:	2600      	movs	r6, #0
9000055c:	4631      	mov	r1, r6
9000055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000562:	462e      	mov	r6, r5
90000564:	4628      	mov	r0, r5
90000566:	e70b      	b.n	90000380 <__udivmoddi4+0xa0>
90000568:	4606      	mov	r6, r0
9000056a:	e6e9      	b.n	90000340 <__udivmoddi4+0x60>
9000056c:	4618      	mov	r0, r3
9000056e:	e6fd      	b.n	9000036c <__udivmoddi4+0x8c>
90000570:	4543      	cmp	r3, r8
90000572:	d2e5      	bcs.n	90000540 <__udivmoddi4+0x260>
90000574:	ebb8 0e02 	subs.w	lr, r8, r2
90000578:	eb69 0104 	sbc.w	r1, r9, r4
9000057c:	3801      	subs	r0, #1
9000057e:	e7df      	b.n	90000540 <__udivmoddi4+0x260>
90000580:	4608      	mov	r0, r1
90000582:	e7d2      	b.n	9000052a <__udivmoddi4+0x24a>
90000584:	4660      	mov	r0, ip
90000586:	e78d      	b.n	900004a4 <__udivmoddi4+0x1c4>
90000588:	4681      	mov	r9, r0
9000058a:	e7b9      	b.n	90000500 <__udivmoddi4+0x220>
9000058c:	4666      	mov	r6, ip
9000058e:	e775      	b.n	9000047c <__udivmoddi4+0x19c>
90000590:	4630      	mov	r0, r6
90000592:	e74a      	b.n	9000042a <__udivmoddi4+0x14a>
90000594:	f1ac 0c02 	sub.w	ip, ip, #2
90000598:	4439      	add	r1, r7
9000059a:	e713      	b.n	900003c4 <__udivmoddi4+0xe4>
9000059c:	3802      	subs	r0, #2
9000059e:	443c      	add	r4, r7
900005a0:	e724      	b.n	900003ec <__udivmoddi4+0x10c>
900005a2:	bf00      	nop

900005a4 <__aeabi_idiv0>:
900005a4:	4770      	bx	lr
900005a6:	bf00      	nop

900005a8 <MainTask>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void MainTask(void)
{
900005a8:	b590      	push	{r4, r7, lr}
900005aa:	b09b      	sub	sp, #108	; 0x6c
900005ac:	af02      	add	r7, sp, #8

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


  /* USER CODE BEGIN SysInit */
	LCD_DISCO_F7508 lcd;
900005ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
900005b2:	4618      	mov	r0, r3
900005b4:	f005 fb06 	bl	90005bc4 <_ZN15LCD_DISCO_F7508C1Ev>
	TS_DISCO_F7508 ts;
900005b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
900005bc:	4618      	mov	r0, r3
900005be:	f005 fbb7 	bl	90005d30 <_ZN14TS_DISCO_F7508C1Ev>
	TS_StateTypeDef TS_State;
	    uint16_t x, y;
	    uint8_t text[30];
	    uint8_t status;
	    uint8_t idx;
	    uint8_t cleared = 0;
900005c2:	2300      	movs	r3, #0
900005c4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	    uint8_t prev_nb_touches = 0;
900005c8:	2300      	movs	r3, #0
900005ca:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	    lcd.DisplayStringAt(0, LINE(5), (uint8_t *)"TOUCHSCREEN DEMO", CENTER_MODE);
900005ce:	f001 f847 	bl	90001660 <BSP_LCD_GetFont>
900005d2:	4603      	mov	r3, r0
900005d4:	88db      	ldrh	r3, [r3, #6]
900005d6:	461a      	mov	r2, r3
900005d8:	0092      	lsls	r2, r2, #2
900005da:	4413      	add	r3, r2
900005dc:	b29a      	uxth	r2, r3
900005de:	f107 0054 	add.w	r0, r7, #84	; 0x54
900005e2:	2301      	movs	r3, #1
900005e4:	9300      	str	r3, [sp, #0]
900005e6:	4b95      	ldr	r3, [pc, #596]	; (9000083c <MainTask+0x294>)
900005e8:	2100      	movs	r1, #0
900005ea:	f005 fb8e 	bl	90005d0a <_ZN15LCD_DISCO_F750815DisplayStringAtEttPh20Text_AlignModeTypdef>
	    // wait(1);
	    status = ts.Init(lcd.GetXSize(), lcd.GetYSize());
900005ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
900005f2:	4618      	mov	r0, r3
900005f4:	f005 fb24 	bl	90005c40 <_ZN15LCD_DISCO_F75088GetXSizeEv>
900005f8:	4603      	mov	r3, r0
900005fa:	b29c      	uxth	r4, r3
900005fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
90000600:	4618      	mov	r0, r3
90000602:	f005 fb28 	bl	90005c56 <_ZN15LCD_DISCO_F75088GetYSizeEv>
90000606:	4603      	mov	r3, r0
90000608:	b29a      	uxth	r2, r3
9000060a:	f107 0350 	add.w	r3, r7, #80	; 0x50
9000060e:	4621      	mov	r1, r4
90000610:	4618      	mov	r0, r3
90000612:	f005 fb9a 	bl	90005d4a <_ZN14TS_DISCO_F75084InitEtt>
90000616:	4603      	mov	r3, r0
90000618:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

	    if (status != TS_OK) {
9000061c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
90000620:	2b00      	cmp	r3, #0
90000622:	d023      	beq.n	9000066c <MainTask+0xc4>
	        lcd.Clear(LCD_COLOR_RED);
90000624:	f107 0354 	add.w	r3, r7, #84	; 0x54
90000628:	4985      	ldr	r1, [pc, #532]	; (90000840 <MainTask+0x298>)
9000062a:	4618      	mov	r0, r3
9000062c:	f005 fb55 	bl	90005cda <_ZN15LCD_DISCO_F75085ClearEm>
	        lcd.SetBackColor(LCD_COLOR_RED);
90000630:	f107 0354 	add.w	r3, r7, #84	; 0x54
90000634:	4982      	ldr	r1, [pc, #520]	; (90000840 <MainTask+0x298>)
90000636:	4618      	mov	r0, r3
90000638:	f005 fb24 	bl	90005c84 <_ZN15LCD_DISCO_F750812SetBackColorEm>
	        lcd.SetTextColor(LCD_COLOR_WHITE);
9000063c:	f107 0354 	add.w	r3, r7, #84	; 0x54
90000640:	f04f 31ff 	mov.w	r1, #4294967295
90000644:	4618      	mov	r0, r3
90000646:	f005 fb11 	bl	90005c6c <_ZN15LCD_DISCO_F750812SetTextColorEm>
	        lcd.DisplayStringAt(0, LINE(5), (uint8_t *)"TOUCHSCREEN INIT FAIL", CENTER_MODE);
9000064a:	f001 f809 	bl	90001660 <BSP_LCD_GetFont>
9000064e:	4603      	mov	r3, r0
90000650:	88db      	ldrh	r3, [r3, #6]
90000652:	461a      	mov	r2, r3
90000654:	0092      	lsls	r2, r2, #2
90000656:	4413      	add	r3, r2
90000658:	b29a      	uxth	r2, r3
9000065a:	f107 0054 	add.w	r0, r7, #84	; 0x54
9000065e:	2301      	movs	r3, #1
90000660:	9300      	str	r3, [sp, #0]
90000662:	4b78      	ldr	r3, [pc, #480]	; (90000844 <MainTask+0x29c>)
90000664:	2100      	movs	r1, #0
90000666:	f005 fb50 	bl	90005d0a <_ZN15LCD_DISCO_F750815DisplayStringAtEttPh20Text_AlignModeTypdef>
9000066a:	e024      	b.n	900006b6 <MainTask+0x10e>
	    } else {
	        lcd.Clear(LCD_COLOR_GREEN);
9000066c:	f107 0354 	add.w	r3, r7, #84	; 0x54
90000670:	f04f 21ff 	mov.w	r1, #4278255360	; 0xff00ff00
90000674:	4618      	mov	r0, r3
90000676:	f005 fb30 	bl	90005cda <_ZN15LCD_DISCO_F75085ClearEm>
	        lcd.SetBackColor(LCD_COLOR_GREEN);
9000067a:	f107 0354 	add.w	r3, r7, #84	; 0x54
9000067e:	f04f 21ff 	mov.w	r1, #4278255360	; 0xff00ff00
90000682:	4618      	mov	r0, r3
90000684:	f005 fafe 	bl	90005c84 <_ZN15LCD_DISCO_F750812SetBackColorEm>
	        lcd.SetTextColor(LCD_COLOR_WHITE);
90000688:	f107 0354 	add.w	r3, r7, #84	; 0x54
9000068c:	f04f 31ff 	mov.w	r1, #4294967295
90000690:	4618      	mov	r0, r3
90000692:	f005 faeb 	bl	90005c6c <_ZN15LCD_DISCO_F750812SetTextColorEm>
	        lcd.DisplayStringAt(0, LINE(5), (uint8_t *)"TOUCHSCREEN INIT OK", CENTER_MODE);
90000696:	f000 ffe3 	bl	90001660 <BSP_LCD_GetFont>
9000069a:	4603      	mov	r3, r0
9000069c:	88db      	ldrh	r3, [r3, #6]
9000069e:	461a      	mov	r2, r3
900006a0:	0092      	lsls	r2, r2, #2
900006a2:	4413      	add	r3, r2
900006a4:	b29a      	uxth	r2, r3
900006a6:	f107 0054 	add.w	r0, r7, #84	; 0x54
900006aa:	2301      	movs	r3, #1
900006ac:	9300      	str	r3, [sp, #0]
900006ae:	4b66      	ldr	r3, [pc, #408]	; (90000848 <MainTask+0x2a0>)
900006b0:	2100      	movs	r1, #0
900006b2:	f005 fb2a 	bl	90005d0a <_ZN15LCD_DISCO_F750815DisplayStringAtEttPh20Text_AlignModeTypdef>
	    }

	    // wait(1);
	    lcd.SetFont(&Font12);
900006b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
900006ba:	4964      	ldr	r1, [pc, #400]	; (9000084c <MainTask+0x2a4>)
900006bc:	4618      	mov	r0, r3
900006be:	f005 faed 	bl	90005c9c <_ZN15LCD_DISCO_F75087SetFontEP6_tFont>
	    lcd.SetBackColor(LCD_COLOR_BLUE);
900006c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
900006c6:	4962      	ldr	r1, [pc, #392]	; (90000850 <MainTask+0x2a8>)
900006c8:	4618      	mov	r0, r3
900006ca:	f005 fadb 	bl	90005c84 <_ZN15LCD_DISCO_F750812SetBackColorEm>
	    lcd.SetTextColor(LCD_COLOR_WHITE);/* USER CODE END 2 */
900006ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
900006d2:	f04f 31ff 	mov.w	r1, #4294967295
900006d6:	4618      	mov	r0, r3
900006d8:	f005 fac8 	bl	90005c6c <_ZN15LCD_DISCO_F750812SetTextColorEm>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ts.GetState(&TS_State);
900006dc:	f107 0224 	add.w	r2, r7, #36	; 0x24
900006e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
900006e4:	4611      	mov	r1, r2
900006e6:	4618      	mov	r0, r3
900006e8:	f005 fb42 	bl	90005d70 <_ZN14TS_DISCO_F75088GetStateEP15TS_StateTypeDef>

	          if (TS_State.touchDetected) {
900006ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
900006f0:	2b00      	cmp	r3, #0
900006f2:	f000 8083 	beq.w	900007fc <MainTask+0x254>
	              // Clear lines corresponding to old touches coordinates
	              if (TS_State.touchDetected < prev_nb_touches) {
900006f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
900006fa:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
900006fe:	429a      	cmp	r2, r3
90000700:	d916      	bls.n	90000730 <MainTask+0x188>
	                  for (idx = (TS_State.touchDetected + 1); idx <= 5; idx++) {
90000702:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
90000706:	3301      	adds	r3, #1
90000708:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
9000070c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
90000710:	2b05      	cmp	r3, #5
90000712:	d80d      	bhi.n	90000730 <MainTask+0x188>
	                      lcd.ClearStringLine(idx);
90000714:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
90000718:	f107 0354 	add.w	r3, r7, #84	; 0x54
9000071c:	4611      	mov	r1, r2
9000071e:	4618      	mov	r0, r3
90000720:	f005 fae7 	bl	90005cf2 <_ZN15LCD_DISCO_F750815ClearStringLineEm>
	                  for (idx = (TS_State.touchDetected + 1); idx <= 5; idx++) {
90000724:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
90000728:	3301      	adds	r3, #1
9000072a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
9000072e:	e7ed      	b.n	9000070c <MainTask+0x164>
	                  }
	              }

	              prev_nb_touches = TS_State.touchDetected;
90000730:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
90000734:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	              cleared = 0;
90000738:	2300      	movs	r3, #0
9000073a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	              sprintf((char *)text, "Touches: %d", TS_State.touchDetected);
9000073e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
90000742:	461a      	mov	r2, r3
90000744:	1d3b      	adds	r3, r7, #4
90000746:	4943      	ldr	r1, [pc, #268]	; (90000854 <MainTask+0x2ac>)
90000748:	4618      	mov	r0, r3
9000074a:	f005 fb51 	bl	90005df0 <siprintf>
	              lcd.DisplayStringAt(0, LINE(0), (uint8_t *)&text, LEFT_MODE);
9000074e:	f000 ff87 	bl	90001660 <BSP_LCD_GetFont>
90000752:	1d3b      	adds	r3, r7, #4
90000754:	f107 0054 	add.w	r0, r7, #84	; 0x54
90000758:	2203      	movs	r2, #3
9000075a:	9200      	str	r2, [sp, #0]
9000075c:	2200      	movs	r2, #0
9000075e:	2100      	movs	r1, #0
90000760:	f005 fad3 	bl	90005d0a <_ZN15LCD_DISCO_F750815DisplayStringAtEttPh20Text_AlignModeTypdef>

	              for (idx = 0; idx < TS_State.touchDetected; idx++) {
90000764:	2300      	movs	r3, #0
90000766:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
9000076a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
9000076e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
90000772:	429a      	cmp	r2, r3
90000774:	d23a      	bcs.n	900007ec <MainTask+0x244>
	                  x = TS_State.touchX[idx];
90000776:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
9000077a:	005b      	lsls	r3, r3, #1
9000077c:	f107 0260 	add.w	r2, r7, #96	; 0x60
90000780:	4413      	add	r3, r2
90000782:	f833 3c3a 	ldrh.w	r3, [r3, #-58]
90000786:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	                  y = TS_State.touchY[idx];
9000078a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
9000078e:	3304      	adds	r3, #4
90000790:	005b      	lsls	r3, r3, #1
90000792:	f107 0260 	add.w	r2, r7, #96	; 0x60
90000796:	4413      	add	r3, r2
90000798:	f833 3c38 	ldrh.w	r3, [r3, #-56]
9000079c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	                  sprintf((char *)text, "Touch %d: x=%d y=%d    ", idx + 1, x, y);
900007a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
900007a4:	1c5a      	adds	r2, r3, #1
900007a6:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
900007aa:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
900007ae:	1d38      	adds	r0, r7, #4
900007b0:	9300      	str	r3, [sp, #0]
900007b2:	460b      	mov	r3, r1
900007b4:	4928      	ldr	r1, [pc, #160]	; (90000858 <MainTask+0x2b0>)
900007b6:	f005 fb1b 	bl	90005df0 <siprintf>
	                  lcd.DisplayStringAt(0, LINE(idx + 1), (uint8_t *)&text, LEFT_MODE);
900007ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
900007be:	3301      	adds	r3, #1
900007c0:	b29c      	uxth	r4, r3
900007c2:	f000 ff4d 	bl	90001660 <BSP_LCD_GetFont>
900007c6:	4603      	mov	r3, r0
900007c8:	88db      	ldrh	r3, [r3, #6]
900007ca:	fb14 f303 	smulbb	r3, r4, r3
900007ce:	b29a      	uxth	r2, r3
900007d0:	1d3b      	adds	r3, r7, #4
900007d2:	f107 0054 	add.w	r0, r7, #84	; 0x54
900007d6:	2103      	movs	r1, #3
900007d8:	9100      	str	r1, [sp, #0]
900007da:	2100      	movs	r1, #0
900007dc:	f005 fa95 	bl	90005d0a <_ZN15LCD_DISCO_F750815DisplayStringAtEttPh20Text_AlignModeTypdef>
	              for (idx = 0; idx < TS_State.touchDetected; idx++) {
900007e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
900007e4:	3301      	adds	r3, #1
900007e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
900007ea:	e7be      	b.n	9000076a <MainTask+0x1c2>
	              }

	              lcd.DrawPixel(TS_State.touchX[0], TS_State.touchY[0], LCD_COLOR_ORANGE);
900007ec:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
900007ee:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
900007f0:	f107 0054 	add.w	r0, r7, #84	; 0x54
900007f4:	4b19      	ldr	r3, [pc, #100]	; (9000085c <MainTask+0x2b4>)
900007f6:	f005 fa5d 	bl	90005cb4 <_ZN15LCD_DISCO_F75089DrawPixelEttm>
900007fa:	e76f      	b.n	900006dc <MainTask+0x134>
	          } else {
	              if (!cleared) {
900007fc:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
90000800:	2b00      	cmp	r3, #0
90000802:	f47f af6b 	bne.w	900006dc <MainTask+0x134>
	                  lcd.Clear(LCD_COLOR_BLUE);
90000806:	f107 0354 	add.w	r3, r7, #84	; 0x54
9000080a:	4911      	ldr	r1, [pc, #68]	; (90000850 <MainTask+0x2a8>)
9000080c:	4618      	mov	r0, r3
9000080e:	f005 fa64 	bl	90005cda <_ZN15LCD_DISCO_F75085ClearEm>
	                  sprintf((char *)text, "Touches: 0");
90000812:	1d3b      	adds	r3, r7, #4
90000814:	4912      	ldr	r1, [pc, #72]	; (90000860 <MainTask+0x2b8>)
90000816:	4618      	mov	r0, r3
90000818:	f005 faea 	bl	90005df0 <siprintf>
	                  lcd.DisplayStringAt(0, LINE(0), (uint8_t *)&text, LEFT_MODE);
9000081c:	f000 ff20 	bl	90001660 <BSP_LCD_GetFont>
90000820:	1d3b      	adds	r3, r7, #4
90000822:	f107 0054 	add.w	r0, r7, #84	; 0x54
90000826:	2203      	movs	r2, #3
90000828:	9200      	str	r2, [sp, #0]
9000082a:	2200      	movs	r2, #0
9000082c:	2100      	movs	r1, #0
9000082e:	f005 fa6c 	bl	90005d0a <_ZN15LCD_DISCO_F750815DisplayStringAtEttPh20Text_AlignModeTypdef>
	                  cleared = 1;
90000832:	2301      	movs	r3, #1
90000834:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	  ts.GetState(&TS_State);
90000838:	e750      	b.n	900006dc <MainTask+0x134>
9000083a:	bf00      	nop
9000083c:	90006664 	.word	0x90006664
90000840:	ffff0000 	.word	0xffff0000
90000844:	90006678 	.word	0x90006678
90000848:	90006690 	.word	0x90006690
9000084c:	20000034 	.word	0x20000034
90000850:	ff0000ff 	.word	0xff0000ff
90000854:	900066a4 	.word	0x900066a4
90000858:	900066b0 	.word	0x900066b0
9000085c:	ffffa500 	.word	0xffffa500
90000860:	900066c8 	.word	0x900066c8

90000864 <main>:

void SystemClock_Config(void);
static void MX_GPIO_Init(void);

int main()
{
90000864:	b580      	push	{r7, lr}
90000866:	af00      	add	r7, sp, #0
	 HAL_Init();
90000868:	f001 ffd0 	bl	9000280c <HAL_Init>
	  /* USER CODE BEGIN Init */

	  /* USER CODE END Init */

	  /* Configure the system clock */
	  SystemClock_Config();
9000086c:	f000 f806 	bl	9000087c <SystemClock_Config>



	MainTask();
90000870:	f7ff fe9a 	bl	900005a8 <MainTask>
90000874:	2300      	movs	r3, #0
}
90000876:	4618      	mov	r0, r3
90000878:	bd80      	pop	{r7, pc}
	...

9000087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
9000087c:	b580      	push	{r7, lr}
9000087e:	b094      	sub	sp, #80	; 0x50
90000880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
90000882:	f107 0320 	add.w	r3, r7, #32
90000886:	2230      	movs	r2, #48	; 0x30
90000888:	2100      	movs	r1, #0
9000088a:	4618      	mov	r0, r3
9000088c:	f005 faa8 	bl	90005de0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
90000890:	f107 030c 	add.w	r3, r7, #12
90000894:	2200      	movs	r2, #0
90000896:	601a      	str	r2, [r3, #0]
90000898:	605a      	str	r2, [r3, #4]
9000089a:	609a      	str	r2, [r3, #8]
9000089c:	60da      	str	r2, [r3, #12]
9000089e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
900008a0:	4b2b      	ldr	r3, [pc, #172]	; (90000950 <SystemClock_Config+0xd4>)
900008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900008a4:	4a2a      	ldr	r2, [pc, #168]	; (90000950 <SystemClock_Config+0xd4>)
900008a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
900008aa:	6413      	str	r3, [r2, #64]	; 0x40
900008ac:	4b28      	ldr	r3, [pc, #160]	; (90000950 <SystemClock_Config+0xd4>)
900008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900008b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
900008b4:	60bb      	str	r3, [r7, #8]
900008b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
900008b8:	4b26      	ldr	r3, [pc, #152]	; (90000954 <SystemClock_Config+0xd8>)
900008ba:	681b      	ldr	r3, [r3, #0]
900008bc:	4a25      	ldr	r2, [pc, #148]	; (90000954 <SystemClock_Config+0xd8>)
900008be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
900008c2:	6013      	str	r3, [r2, #0]
900008c4:	4b23      	ldr	r3, [pc, #140]	; (90000954 <SystemClock_Config+0xd8>)
900008c6:	681b      	ldr	r3, [r3, #0]
900008c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
900008cc:	607b      	str	r3, [r7, #4]
900008ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
900008d0:	2301      	movs	r3, #1
900008d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
900008d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
900008d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
900008da:	2302      	movs	r3, #2
900008dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
900008de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
900008e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
900008e4:	2319      	movs	r3, #25
900008e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
900008e8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
900008ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
900008ee:	2302      	movs	r3, #2
900008f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
900008f2:	2302      	movs	r3, #2
900008f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
900008f6:	f107 0320 	add.w	r3, r7, #32
900008fa:	4618      	mov	r0, r3
900008fc:	f003 ff78 	bl	900047f0 <HAL_RCC_OscConfig>
90000900:	4603      	mov	r3, r0
90000902:	2b00      	cmp	r3, #0
90000904:	d001      	beq.n	9000090a <SystemClock_Config+0x8e>
  {
    Error_Handler();
90000906:	f000 f827 	bl	90000958 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
9000090a:	f003 ff21 	bl	90004750 <HAL_PWREx_EnableOverDrive>
9000090e:	4603      	mov	r3, r0
90000910:	2b00      	cmp	r3, #0
90000912:	d001      	beq.n	90000918 <SystemClock_Config+0x9c>
  {
    Error_Handler();
90000914:	f000 f820 	bl	90000958 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
90000918:	230f      	movs	r3, #15
9000091a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
9000091c:	2302      	movs	r3, #2
9000091e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
90000920:	2300      	movs	r3, #0
90000922:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
90000924:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
90000928:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
9000092a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
9000092e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
90000930:	f107 030c 	add.w	r3, r7, #12
90000934:	2107      	movs	r1, #7
90000936:	4618      	mov	r0, r3
90000938:	f004 f9fe 	bl	90004d38 <HAL_RCC_ClockConfig>
9000093c:	4603      	mov	r3, r0
9000093e:	2b00      	cmp	r3, #0
90000940:	d001      	beq.n	90000946 <SystemClock_Config+0xca>
  {
    Error_Handler();
90000942:	f000 f809 	bl	90000958 <Error_Handler>
  }
}
90000946:	bf00      	nop
90000948:	3750      	adds	r7, #80	; 0x50
9000094a:	46bd      	mov	sp, r7
9000094c:	bd80      	pop	{r7, pc}
9000094e:	bf00      	nop
90000950:	40023800 	.word	0x40023800
90000954:	40007000 	.word	0x40007000

90000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
90000958:	b480      	push	{r7}
9000095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
9000095c:	b672      	cpsid	i
}
9000095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
90000960:	e7fe      	b.n	90000960 <Error_Handler+0x8>
	...

90000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
90000964:	b480      	push	{r7}
90000966:	b083      	sub	sp, #12
90000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
9000096a:	4b0f      	ldr	r3, [pc, #60]	; (900009a8 <HAL_MspInit+0x44>)
9000096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000096e:	4a0e      	ldr	r2, [pc, #56]	; (900009a8 <HAL_MspInit+0x44>)
90000970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90000974:	6413      	str	r3, [r2, #64]	; 0x40
90000976:	4b0c      	ldr	r3, [pc, #48]	; (900009a8 <HAL_MspInit+0x44>)
90000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000097a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
9000097e:	607b      	str	r3, [r7, #4]
90000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
90000982:	4b09      	ldr	r3, [pc, #36]	; (900009a8 <HAL_MspInit+0x44>)
90000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90000986:	4a08      	ldr	r2, [pc, #32]	; (900009a8 <HAL_MspInit+0x44>)
90000988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
9000098c:	6453      	str	r3, [r2, #68]	; 0x44
9000098e:	4b06      	ldr	r3, [pc, #24]	; (900009a8 <HAL_MspInit+0x44>)
90000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90000992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90000996:	603b      	str	r3, [r7, #0]
90000998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
9000099a:	bf00      	nop
9000099c:	370c      	adds	r7, #12
9000099e:	46bd      	mov	sp, r7
900009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
900009a4:	4770      	bx	lr
900009a6:	bf00      	nop
900009a8:	40023800 	.word	0x40023800

900009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
900009ac:	b480      	push	{r7}
900009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
900009b0:	e7fe      	b.n	900009b0 <NMI_Handler+0x4>

900009b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
900009b2:	b480      	push	{r7}
900009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
900009b6:	e7fe      	b.n	900009b6 <HardFault_Handler+0x4>

900009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
900009b8:	b480      	push	{r7}
900009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
900009bc:	e7fe      	b.n	900009bc <MemManage_Handler+0x4>

900009be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
900009be:	b480      	push	{r7}
900009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
900009c2:	e7fe      	b.n	900009c2 <BusFault_Handler+0x4>

900009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
900009c4:	b480      	push	{r7}
900009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
900009c8:	e7fe      	b.n	900009c8 <UsageFault_Handler+0x4>

900009ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
900009ca:	b480      	push	{r7}
900009cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
900009ce:	bf00      	nop
900009d0:	46bd      	mov	sp, r7
900009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
900009d6:	4770      	bx	lr

900009d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
900009d8:	b480      	push	{r7}
900009da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
900009dc:	bf00      	nop
900009de:	46bd      	mov	sp, r7
900009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
900009e4:	4770      	bx	lr

900009e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
900009e6:	b480      	push	{r7}
900009e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
900009ea:	bf00      	nop
900009ec:	46bd      	mov	sp, r7
900009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
900009f2:	4770      	bx	lr

900009f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
900009f4:	b580      	push	{r7, lr}
900009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
900009f8:	f001 ff4e 	bl	90002898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
900009fc:	bf00      	nop
900009fe:	bd80      	pop	{r7, pc}

90000a00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
90000a00:	b580      	push	{r7, lr}
90000a02:	b086      	sub	sp, #24
90000a04:	af00      	add	r7, sp, #0
90000a06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
90000a08:	4a14      	ldr	r2, [pc, #80]	; (90000a5c <_sbrk+0x5c>)
90000a0a:	4b15      	ldr	r3, [pc, #84]	; (90000a60 <_sbrk+0x60>)
90000a0c:	1ad3      	subs	r3, r2, r3
90000a0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
90000a10:	697b      	ldr	r3, [r7, #20]
90000a12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
90000a14:	4b13      	ldr	r3, [pc, #76]	; (90000a64 <_sbrk+0x64>)
90000a16:	681b      	ldr	r3, [r3, #0]
90000a18:	2b00      	cmp	r3, #0
90000a1a:	d102      	bne.n	90000a22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
90000a1c:	4b11      	ldr	r3, [pc, #68]	; (90000a64 <_sbrk+0x64>)
90000a1e:	4a12      	ldr	r2, [pc, #72]	; (90000a68 <_sbrk+0x68>)
90000a20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
90000a22:	4b10      	ldr	r3, [pc, #64]	; (90000a64 <_sbrk+0x64>)
90000a24:	681a      	ldr	r2, [r3, #0]
90000a26:	687b      	ldr	r3, [r7, #4]
90000a28:	4413      	add	r3, r2
90000a2a:	693a      	ldr	r2, [r7, #16]
90000a2c:	429a      	cmp	r2, r3
90000a2e:	d207      	bcs.n	90000a40 <_sbrk+0x40>
  {
    errno = ENOMEM;
90000a30:	f005 f9ac 	bl	90005d8c <__errno>
90000a34:	4603      	mov	r3, r0
90000a36:	220c      	movs	r2, #12
90000a38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
90000a3a:	f04f 33ff 	mov.w	r3, #4294967295
90000a3e:	e009      	b.n	90000a54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
90000a40:	4b08      	ldr	r3, [pc, #32]	; (90000a64 <_sbrk+0x64>)
90000a42:	681b      	ldr	r3, [r3, #0]
90000a44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
90000a46:	4b07      	ldr	r3, [pc, #28]	; (90000a64 <_sbrk+0x64>)
90000a48:	681a      	ldr	r2, [r3, #0]
90000a4a:	687b      	ldr	r3, [r7, #4]
90000a4c:	4413      	add	r3, r2
90000a4e:	4a05      	ldr	r2, [pc, #20]	; (90000a64 <_sbrk+0x64>)
90000a50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
90000a52:	68fb      	ldr	r3, [r7, #12]
}
90000a54:	4618      	mov	r0, r3
90000a56:	3718      	adds	r7, #24
90000a58:	46bd      	mov	sp, r7
90000a5a:	bd80      	pop	{r7, pc}
90000a5c:	20050000 	.word	0x20050000
90000a60:	00000800 	.word	0x00000800
90000a64:	200000c8 	.word	0x200000c8
90000a68:	200003b8 	.word	0x200003b8

90000a6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
90000a6c:	b480      	push	{r7}
90000a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
90000a70:	4b15      	ldr	r3, [pc, #84]	; (90000ac8 <SystemInit+0x5c>)
90000a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90000a76:	4a14      	ldr	r2, [pc, #80]	; (90000ac8 <SystemInit+0x5c>)
90000a78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
90000a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
90000a80:	4b12      	ldr	r3, [pc, #72]	; (90000acc <SystemInit+0x60>)
90000a82:	681b      	ldr	r3, [r3, #0]
90000a84:	4a11      	ldr	r2, [pc, #68]	; (90000acc <SystemInit+0x60>)
90000a86:	f043 0301 	orr.w	r3, r3, #1
90000a8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90000a8c:	4b0f      	ldr	r3, [pc, #60]	; (90000acc <SystemInit+0x60>)
90000a8e:	2200      	movs	r2, #0
90000a90:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
90000a92:	4b0e      	ldr	r3, [pc, #56]	; (90000acc <SystemInit+0x60>)
90000a94:	681a      	ldr	r2, [r3, #0]
90000a96:	490d      	ldr	r1, [pc, #52]	; (90000acc <SystemInit+0x60>)
90000a98:	4b0d      	ldr	r3, [pc, #52]	; (90000ad0 <SystemInit+0x64>)
90000a9a:	4013      	ands	r3, r2
90000a9c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
90000a9e:	4b0b      	ldr	r3, [pc, #44]	; (90000acc <SystemInit+0x60>)
90000aa0:	4a0c      	ldr	r2, [pc, #48]	; (90000ad4 <SystemInit+0x68>)
90000aa2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
90000aa4:	4b09      	ldr	r3, [pc, #36]	; (90000acc <SystemInit+0x60>)
90000aa6:	681b      	ldr	r3, [r3, #0]
90000aa8:	4a08      	ldr	r2, [pc, #32]	; (90000acc <SystemInit+0x60>)
90000aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90000aae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
90000ab0:	4b06      	ldr	r3, [pc, #24]	; (90000acc <SystemInit+0x60>)
90000ab2:	2200      	movs	r2, #0
90000ab4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = APPLICATION_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation to APPLICATION_ADDRESS in preprocessor defines */
90000ab6:	4b04      	ldr	r3, [pc, #16]	; (90000ac8 <SystemInit+0x5c>)
90000ab8:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
90000abc:	609a      	str	r2, [r3, #8]
#endif
}
90000abe:	bf00      	nop
90000ac0:	46bd      	mov	sp, r7
90000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
90000ac6:	4770      	bx	lr
90000ac8:	e000ed00 	.word	0xe000ed00
90000acc:	40023800 	.word	0x40023800
90000ad0:	fef6ffff 	.word	0xfef6ffff
90000ad4:	24003010 	.word	0x24003010

90000ad8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
90000ad8:	f8df d034 	ldr.w	sp, [pc, #52]	; 90000b10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
90000adc:	480d      	ldr	r0, [pc, #52]	; (90000b14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
90000ade:	490e      	ldr	r1, [pc, #56]	; (90000b18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
90000ae0:	4a0e      	ldr	r2, [pc, #56]	; (90000b1c <LoopFillZerobss+0x1e>)
  movs r3, #0
90000ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
90000ae4:	e002      	b.n	90000aec <LoopCopyDataInit>

90000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
90000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
90000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
90000aea:	3304      	adds	r3, #4

90000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
90000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
90000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
90000af0:	d3f9      	bcc.n	90000ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
90000af2:	4a0b      	ldr	r2, [pc, #44]	; (90000b20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
90000af4:	4c0b      	ldr	r4, [pc, #44]	; (90000b24 <LoopFillZerobss+0x26>)
  movs r3, #0
90000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
90000af8:	e001      	b.n	90000afe <LoopFillZerobss>

90000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
90000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
90000afc:	3204      	adds	r2, #4

90000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
90000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
90000b00:	d3fb      	bcc.n	90000afa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
90000b02:	f7ff ffb3 	bl	90000a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
90000b06:	f005 f947 	bl	90005d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
90000b0a:	f7ff feab 	bl	90000864 <main>
  bx  lr    
90000b0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
90000b10:	20050000 	.word	0x20050000
  ldr r0, =_sdata
90000b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
90000b18:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
90000b1c:	9000865c 	.word	0x9000865c
  ldr r2, =_sbss
90000b20:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
90000b24:	200003b8 	.word	0x200003b8

90000b28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
90000b28:	e7fe      	b.n	90000b28 <ADC_IRQHandler>

90000b2a <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
90000b2a:	b580      	push	{r7, lr}
90000b2c:	b082      	sub	sp, #8
90000b2e:	af00      	add	r7, sp, #0
90000b30:	4603      	mov	r3, r0
90000b32:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
90000b34:	20c8      	movs	r0, #200	; 0xc8
90000b36:	f000 fc33 	bl	900013a0 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
90000b3a:	f000 fa7b 	bl	90001034 <ft5336_I2C_InitializeIfRequired>
}
90000b3e:	bf00      	nop
90000b40:	3708      	adds	r7, #8
90000b42:	46bd      	mov	sp, r7
90000b44:	bd80      	pop	{r7, pc}

90000b46 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
90000b46:	b480      	push	{r7}
90000b48:	b083      	sub	sp, #12
90000b4a:	af00      	add	r7, sp, #0
90000b4c:	4603      	mov	r3, r0
90000b4e:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
90000b50:	bf00      	nop
90000b52:	370c      	adds	r7, #12
90000b54:	46bd      	mov	sp, r7
90000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
90000b5a:	4770      	bx	lr

90000b5c <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
90000b5c:	b580      	push	{r7, lr}
90000b5e:	b084      	sub	sp, #16
90000b60:	af00      	add	r7, sp, #0
90000b62:	4603      	mov	r3, r0
90000b64:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
90000b66:	2300      	movs	r3, #0
90000b68:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
90000b6a:	2300      	movs	r3, #0
90000b6c:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
90000b6e:	2300      	movs	r3, #0
90000b70:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
90000b72:	f000 fa5f 	bl	90001034 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
90000b76:	2300      	movs	r3, #0
90000b78:	73fb      	strb	r3, [r7, #15]
90000b7a:	e010      	b.n	90000b9e <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
90000b7c:	88fb      	ldrh	r3, [r7, #6]
90000b7e:	b2db      	uxtb	r3, r3
90000b80:	21a8      	movs	r1, #168	; 0xa8
90000b82:	4618      	mov	r0, r3
90000b84:	f000 fbee 	bl	90001364 <TS_IO_Read>
90000b88:	4603      	mov	r3, r0
90000b8a:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
90000b8c:	7b7b      	ldrb	r3, [r7, #13]
90000b8e:	b2db      	uxtb	r3, r3
90000b90:	2b51      	cmp	r3, #81	; 0x51
90000b92:	d101      	bne.n	90000b98 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
90000b94:	2301      	movs	r3, #1
90000b96:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
90000b98:	7bfb      	ldrb	r3, [r7, #15]
90000b9a:	3301      	adds	r3, #1
90000b9c:	73fb      	strb	r3, [r7, #15]
90000b9e:	7bfb      	ldrb	r3, [r7, #15]
90000ba0:	2b02      	cmp	r3, #2
90000ba2:	d802      	bhi.n	90000baa <ft5336_ReadID+0x4e>
90000ba4:	7bbb      	ldrb	r3, [r7, #14]
90000ba6:	2b00      	cmp	r3, #0
90000ba8:	d0e8      	beq.n	90000b7c <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
90000baa:	7b7b      	ldrb	r3, [r7, #13]
90000bac:	b2db      	uxtb	r3, r3
90000bae:	b29b      	uxth	r3, r3
}
90000bb0:	4618      	mov	r0, r3
90000bb2:	3710      	adds	r7, #16
90000bb4:	46bd      	mov	sp, r7
90000bb6:	bd80      	pop	{r7, pc}

90000bb8 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
90000bb8:	b580      	push	{r7, lr}
90000bba:	b082      	sub	sp, #8
90000bbc:	af00      	add	r7, sp, #0
90000bbe:	4603      	mov	r3, r0
90000bc0:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
90000bc2:	88fb      	ldrh	r3, [r7, #6]
90000bc4:	4618      	mov	r0, r3
90000bc6:	f000 fa45 	bl	90001054 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
90000bca:	88fb      	ldrh	r3, [r7, #6]
90000bcc:	4618      	mov	r0, r3
90000bce:	f000 f933 	bl	90000e38 <ft5336_TS_DisableIT>
}
90000bd2:	bf00      	nop
90000bd4:	3708      	adds	r7, #8
90000bd6:	46bd      	mov	sp, r7
90000bd8:	bd80      	pop	{r7, pc}
	...

90000bdc <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
90000bdc:	b580      	push	{r7, lr}
90000bde:	b084      	sub	sp, #16
90000be0:	af00      	add	r7, sp, #0
90000be2:	4603      	mov	r3, r0
90000be4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
90000be6:	2300      	movs	r3, #0
90000be8:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
90000bea:	88fb      	ldrh	r3, [r7, #6]
90000bec:	b2db      	uxtb	r3, r3
90000bee:	2102      	movs	r1, #2
90000bf0:	4618      	mov	r0, r3
90000bf2:	f000 fbb7 	bl	90001364 <TS_IO_Read>
90000bf6:	4603      	mov	r3, r0
90000bf8:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
90000bfa:	7bfb      	ldrb	r3, [r7, #15]
90000bfc:	b2db      	uxtb	r3, r3
90000bfe:	f003 030f 	and.w	r3, r3, #15
90000c02:	b2db      	uxtb	r3, r3
90000c04:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
90000c06:	7bfb      	ldrb	r3, [r7, #15]
90000c08:	b2db      	uxtb	r3, r3
90000c0a:	2b05      	cmp	r3, #5
90000c0c:	d901      	bls.n	90000c12 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
90000c0e:	2300      	movs	r3, #0
90000c10:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
90000c12:	7bfb      	ldrb	r3, [r7, #15]
90000c14:	b2da      	uxtb	r2, r3
90000c16:	4b05      	ldr	r3, [pc, #20]	; (90000c2c <ft5336_TS_DetectTouch+0x50>)
90000c18:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
90000c1a:	4b04      	ldr	r3, [pc, #16]	; (90000c2c <ft5336_TS_DetectTouch+0x50>)
90000c1c:	2200      	movs	r2, #0
90000c1e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
90000c20:	7bfb      	ldrb	r3, [r7, #15]
90000c22:	b2db      	uxtb	r3, r3
}
90000c24:	4618      	mov	r0, r3
90000c26:	3710      	adds	r7, #16
90000c28:	46bd      	mov	sp, r7
90000c2a:	bd80      	pop	{r7, pc}
90000c2c:	200000cc 	.word	0x200000cc

90000c30 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
90000c30:	b580      	push	{r7, lr}
90000c32:	b086      	sub	sp, #24
90000c34:	af00      	add	r7, sp, #0
90000c36:	4603      	mov	r3, r0
90000c38:	60b9      	str	r1, [r7, #8]
90000c3a:	607a      	str	r2, [r7, #4]
90000c3c:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
90000c3e:	2300      	movs	r3, #0
90000c40:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
90000c42:	2300      	movs	r3, #0
90000c44:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
90000c46:	2300      	movs	r3, #0
90000c48:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
90000c4a:	2300      	movs	r3, #0
90000c4c:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
90000c4e:	2300      	movs	r3, #0
90000c50:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
90000c52:	4b6d      	ldr	r3, [pc, #436]	; (90000e08 <ft5336_TS_GetXY+0x1d8>)
90000c54:	789a      	ldrb	r2, [r3, #2]
90000c56:	4b6c      	ldr	r3, [pc, #432]	; (90000e08 <ft5336_TS_GetXY+0x1d8>)
90000c58:	785b      	ldrb	r3, [r3, #1]
90000c5a:	429a      	cmp	r2, r3
90000c5c:	f080 80cf 	bcs.w	90000dfe <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
90000c60:	4b69      	ldr	r3, [pc, #420]	; (90000e08 <ft5336_TS_GetXY+0x1d8>)
90000c62:	789b      	ldrb	r3, [r3, #2]
90000c64:	2b09      	cmp	r3, #9
90000c66:	d871      	bhi.n	90000d4c <ft5336_TS_GetXY+0x11c>
90000c68:	a201      	add	r2, pc, #4	; (adr r2, 90000c70 <ft5336_TS_GetXY+0x40>)
90000c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90000c6e:	bf00      	nop
90000c70:	90000c99 	.word	0x90000c99
90000c74:	90000cab 	.word	0x90000cab
90000c78:	90000cbd 	.word	0x90000cbd
90000c7c:	90000ccf 	.word	0x90000ccf
90000c80:	90000ce1 	.word	0x90000ce1
90000c84:	90000cf3 	.word	0x90000cf3
90000c88:	90000d05 	.word	0x90000d05
90000c8c:	90000d17 	.word	0x90000d17
90000c90:	90000d29 	.word	0x90000d29
90000c94:	90000d3b 	.word	0x90000d3b
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
90000c98:	2304      	movs	r3, #4
90000c9a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
90000c9c:	2303      	movs	r3, #3
90000c9e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
90000ca0:	2306      	movs	r3, #6
90000ca2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
90000ca4:	2305      	movs	r3, #5
90000ca6:	753b      	strb	r3, [r7, #20]
      break;
90000ca8:	e051      	b.n	90000d4e <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
90000caa:	230a      	movs	r3, #10
90000cac:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
90000cae:	2309      	movs	r3, #9
90000cb0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
90000cb2:	230c      	movs	r3, #12
90000cb4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
90000cb6:	230b      	movs	r3, #11
90000cb8:	753b      	strb	r3, [r7, #20]
      break;
90000cba:	e048      	b.n	90000d4e <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
90000cbc:	2310      	movs	r3, #16
90000cbe:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
90000cc0:	230f      	movs	r3, #15
90000cc2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
90000cc4:	2312      	movs	r3, #18
90000cc6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
90000cc8:	2311      	movs	r3, #17
90000cca:	753b      	strb	r3, [r7, #20]
      break;
90000ccc:	e03f      	b.n	90000d4e <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
90000cce:	2316      	movs	r3, #22
90000cd0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
90000cd2:	2315      	movs	r3, #21
90000cd4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
90000cd6:	2318      	movs	r3, #24
90000cd8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
90000cda:	2317      	movs	r3, #23
90000cdc:	753b      	strb	r3, [r7, #20]
      break;
90000cde:	e036      	b.n	90000d4e <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
90000ce0:	231c      	movs	r3, #28
90000ce2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
90000ce4:	231b      	movs	r3, #27
90000ce6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
90000ce8:	231e      	movs	r3, #30
90000cea:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
90000cec:	231d      	movs	r3, #29
90000cee:	753b      	strb	r3, [r7, #20]
      break;
90000cf0:	e02d      	b.n	90000d4e <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
90000cf2:	2322      	movs	r3, #34	; 0x22
90000cf4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
90000cf6:	2321      	movs	r3, #33	; 0x21
90000cf8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
90000cfa:	2324      	movs	r3, #36	; 0x24
90000cfc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
90000cfe:	2323      	movs	r3, #35	; 0x23
90000d00:	753b      	strb	r3, [r7, #20]
      break;
90000d02:	e024      	b.n	90000d4e <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
90000d04:	2328      	movs	r3, #40	; 0x28
90000d06:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
90000d08:	2327      	movs	r3, #39	; 0x27
90000d0a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
90000d0c:	232a      	movs	r3, #42	; 0x2a
90000d0e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
90000d10:	2329      	movs	r3, #41	; 0x29
90000d12:	753b      	strb	r3, [r7, #20]
      break;
90000d14:	e01b      	b.n	90000d4e <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
90000d16:	232e      	movs	r3, #46	; 0x2e
90000d18:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
90000d1a:	232d      	movs	r3, #45	; 0x2d
90000d1c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
90000d1e:	2330      	movs	r3, #48	; 0x30
90000d20:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
90000d22:	232f      	movs	r3, #47	; 0x2f
90000d24:	753b      	strb	r3, [r7, #20]
      break;
90000d26:	e012      	b.n	90000d4e <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
90000d28:	2334      	movs	r3, #52	; 0x34
90000d2a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
90000d2c:	2333      	movs	r3, #51	; 0x33
90000d2e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
90000d30:	2336      	movs	r3, #54	; 0x36
90000d32:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
90000d34:	2335      	movs	r3, #53	; 0x35
90000d36:	753b      	strb	r3, [r7, #20]
      break;
90000d38:	e009      	b.n	90000d4e <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
90000d3a:	233a      	movs	r3, #58	; 0x3a
90000d3c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
90000d3e:	2339      	movs	r3, #57	; 0x39
90000d40:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
90000d42:	233c      	movs	r3, #60	; 0x3c
90000d44:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
90000d46:	233b      	movs	r3, #59	; 0x3b
90000d48:	753b      	strb	r3, [r7, #20]
      break;
90000d4a:	e000      	b.n	90000d4e <ft5336_TS_GetXY+0x11e>

    default :
      break;
90000d4c:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
90000d4e:	89fb      	ldrh	r3, [r7, #14]
90000d50:	b2db      	uxtb	r3, r3
90000d52:	7dfa      	ldrb	r2, [r7, #23]
90000d54:	4611      	mov	r1, r2
90000d56:	4618      	mov	r0, r3
90000d58:	f000 fb04 	bl	90001364 <TS_IO_Read>
90000d5c:	4603      	mov	r3, r0
90000d5e:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
90000d60:	7cfb      	ldrb	r3, [r7, #19]
90000d62:	b2db      	uxtb	r3, r3
90000d64:	b29a      	uxth	r2, r3
90000d66:	4b29      	ldr	r3, [pc, #164]	; (90000e0c <ft5336_TS_GetXY+0x1dc>)
90000d68:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
90000d6a:	89fb      	ldrh	r3, [r7, #14]
90000d6c:	b2db      	uxtb	r3, r3
90000d6e:	7dba      	ldrb	r2, [r7, #22]
90000d70:	4611      	mov	r1, r2
90000d72:	4618      	mov	r0, r3
90000d74:	f000 faf6 	bl	90001364 <TS_IO_Read>
90000d78:	4603      	mov	r3, r0
90000d7a:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
90000d7c:	7cfb      	ldrb	r3, [r7, #19]
90000d7e:	b2db      	uxtb	r3, r3
90000d80:	021b      	lsls	r3, r3, #8
90000d82:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
90000d86:	b21a      	sxth	r2, r3
90000d88:	4b20      	ldr	r3, [pc, #128]	; (90000e0c <ft5336_TS_GetXY+0x1dc>)
90000d8a:	881b      	ldrh	r3, [r3, #0]
90000d8c:	b21b      	sxth	r3, r3
90000d8e:	4313      	orrs	r3, r2
90000d90:	b21b      	sxth	r3, r3
90000d92:	b29a      	uxth	r2, r3
90000d94:	4b1d      	ldr	r3, [pc, #116]	; (90000e0c <ft5336_TS_GetXY+0x1dc>)
90000d96:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
90000d98:	4b1c      	ldr	r3, [pc, #112]	; (90000e0c <ft5336_TS_GetXY+0x1dc>)
90000d9a:	881a      	ldrh	r2, [r3, #0]
90000d9c:	68bb      	ldr	r3, [r7, #8]
90000d9e:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
90000da0:	89fb      	ldrh	r3, [r7, #14]
90000da2:	b2db      	uxtb	r3, r3
90000da4:	7d7a      	ldrb	r2, [r7, #21]
90000da6:	4611      	mov	r1, r2
90000da8:	4618      	mov	r0, r3
90000daa:	f000 fadb 	bl	90001364 <TS_IO_Read>
90000dae:	4603      	mov	r3, r0
90000db0:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
90000db2:	7cfb      	ldrb	r3, [r7, #19]
90000db4:	b2db      	uxtb	r3, r3
90000db6:	b29a      	uxth	r2, r3
90000db8:	4b14      	ldr	r3, [pc, #80]	; (90000e0c <ft5336_TS_GetXY+0x1dc>)
90000dba:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
90000dbc:	89fb      	ldrh	r3, [r7, #14]
90000dbe:	b2db      	uxtb	r3, r3
90000dc0:	7d3a      	ldrb	r2, [r7, #20]
90000dc2:	4611      	mov	r1, r2
90000dc4:	4618      	mov	r0, r3
90000dc6:	f000 facd 	bl	90001364 <TS_IO_Read>
90000dca:	4603      	mov	r3, r0
90000dcc:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
90000dce:	7cfb      	ldrb	r3, [r7, #19]
90000dd0:	b2db      	uxtb	r3, r3
90000dd2:	021b      	lsls	r3, r3, #8
90000dd4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
90000dd8:	b21a      	sxth	r2, r3
90000dda:	4b0c      	ldr	r3, [pc, #48]	; (90000e0c <ft5336_TS_GetXY+0x1dc>)
90000ddc:	881b      	ldrh	r3, [r3, #0]
90000dde:	b21b      	sxth	r3, r3
90000de0:	4313      	orrs	r3, r2
90000de2:	b21b      	sxth	r3, r3
90000de4:	b29a      	uxth	r2, r3
90000de6:	4b09      	ldr	r3, [pc, #36]	; (90000e0c <ft5336_TS_GetXY+0x1dc>)
90000de8:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
90000dea:	4b08      	ldr	r3, [pc, #32]	; (90000e0c <ft5336_TS_GetXY+0x1dc>)
90000dec:	881a      	ldrh	r2, [r3, #0]
90000dee:	687b      	ldr	r3, [r7, #4]
90000df0:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
90000df2:	4b05      	ldr	r3, [pc, #20]	; (90000e08 <ft5336_TS_GetXY+0x1d8>)
90000df4:	789b      	ldrb	r3, [r3, #2]
90000df6:	3301      	adds	r3, #1
90000df8:	b2da      	uxtb	r2, r3
90000dfa:	4b03      	ldr	r3, [pc, #12]	; (90000e08 <ft5336_TS_GetXY+0x1d8>)
90000dfc:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
90000dfe:	bf00      	nop
90000e00:	3718      	adds	r7, #24
90000e02:	46bd      	mov	sp, r7
90000e04:	bd80      	pop	{r7, pc}
90000e06:	bf00      	nop
90000e08:	200000cc 	.word	0x200000cc
90000e0c:	200000d0 	.word	0x200000d0

90000e10 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
90000e10:	b580      	push	{r7, lr}
90000e12:	b084      	sub	sp, #16
90000e14:	af00      	add	r7, sp, #0
90000e16:	4603      	mov	r3, r0
90000e18:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
90000e1a:	2300      	movs	r3, #0
90000e1c:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
90000e1e:	2301      	movs	r3, #1
90000e20:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
90000e22:	88fb      	ldrh	r3, [r7, #6]
90000e24:	b2db      	uxtb	r3, r3
90000e26:	7bfa      	ldrb	r2, [r7, #15]
90000e28:	21a4      	movs	r1, #164	; 0xa4
90000e2a:	4618      	mov	r0, r3
90000e2c:	f000 fa80 	bl	90001330 <TS_IO_Write>
}
90000e30:	bf00      	nop
90000e32:	3710      	adds	r7, #16
90000e34:	46bd      	mov	sp, r7
90000e36:	bd80      	pop	{r7, pc}

90000e38 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
90000e38:	b580      	push	{r7, lr}
90000e3a:	b084      	sub	sp, #16
90000e3c:	af00      	add	r7, sp, #0
90000e3e:	4603      	mov	r3, r0
90000e40:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
90000e42:	2300      	movs	r3, #0
90000e44:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
90000e46:	2300      	movs	r3, #0
90000e48:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
90000e4a:	88fb      	ldrh	r3, [r7, #6]
90000e4c:	b2db      	uxtb	r3, r3
90000e4e:	7bfa      	ldrb	r2, [r7, #15]
90000e50:	21a4      	movs	r1, #164	; 0xa4
90000e52:	4618      	mov	r0, r3
90000e54:	f000 fa6c 	bl	90001330 <TS_IO_Write>
}
90000e58:	bf00      	nop
90000e5a:	3710      	adds	r7, #16
90000e5c:	46bd      	mov	sp, r7
90000e5e:	bd80      	pop	{r7, pc}

90000e60 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
90000e60:	b480      	push	{r7}
90000e62:	b083      	sub	sp, #12
90000e64:	af00      	add	r7, sp, #0
90000e66:	4603      	mov	r3, r0
90000e68:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
90000e6a:	2300      	movs	r3, #0
}
90000e6c:	4618      	mov	r0, r3
90000e6e:	370c      	adds	r7, #12
90000e70:	46bd      	mov	sp, r7
90000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
90000e76:	4770      	bx	lr

90000e78 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
90000e78:	b480      	push	{r7}
90000e7a:	b083      	sub	sp, #12
90000e7c:	af00      	add	r7, sp, #0
90000e7e:	4603      	mov	r3, r0
90000e80:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
90000e82:	bf00      	nop
90000e84:	370c      	adds	r7, #12
90000e86:	46bd      	mov	sp, r7
90000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
90000e8c:	4770      	bx	lr

90000e8e <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
90000e8e:	b580      	push	{r7, lr}
90000e90:	b084      	sub	sp, #16
90000e92:	af00      	add	r7, sp, #0
90000e94:	4603      	mov	r3, r0
90000e96:	6039      	str	r1, [r7, #0]
90000e98:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
90000e9a:	2300      	movs	r3, #0
90000e9c:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
90000e9e:	88fb      	ldrh	r3, [r7, #6]
90000ea0:	b2db      	uxtb	r3, r3
90000ea2:	2101      	movs	r1, #1
90000ea4:	4618      	mov	r0, r3
90000ea6:	f000 fa5d 	bl	90001364 <TS_IO_Read>
90000eaa:	4603      	mov	r3, r0
90000eac:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
90000eae:	7bfb      	ldrb	r3, [r7, #15]
90000eb0:	b2db      	uxtb	r3, r3
90000eb2:	461a      	mov	r2, r3
90000eb4:	683b      	ldr	r3, [r7, #0]
90000eb6:	601a      	str	r2, [r3, #0]
}
90000eb8:	bf00      	nop
90000eba:	3710      	adds	r7, #16
90000ebc:	46bd      	mov	sp, r7
90000ebe:	bd80      	pop	{r7, pc}

90000ec0 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
90000ec0:	b580      	push	{r7, lr}
90000ec2:	b086      	sub	sp, #24
90000ec4:	af00      	add	r7, sp, #0
90000ec6:	60b9      	str	r1, [r7, #8]
90000ec8:	607a      	str	r2, [r7, #4]
90000eca:	603b      	str	r3, [r7, #0]
90000ecc:	4603      	mov	r3, r0
90000ece:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
90000ed0:	2300      	movs	r3, #0
90000ed2:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
90000ed4:	2300      	movs	r3, #0
90000ed6:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
90000ed8:	2300      	movs	r3, #0
90000eda:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
90000edc:	2300      	movs	r3, #0
90000ede:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
90000ee0:	4b4d      	ldr	r3, [pc, #308]	; (90001018 <ft5336_TS_GetTouchInfo+0x158>)
90000ee2:	785b      	ldrb	r3, [r3, #1]
90000ee4:	461a      	mov	r2, r3
90000ee6:	68bb      	ldr	r3, [r7, #8]
90000ee8:	4293      	cmp	r3, r2
90000eea:	f080 8090 	bcs.w	9000100e <ft5336_TS_GetTouchInfo+0x14e>
90000eee:	68bb      	ldr	r3, [r7, #8]
90000ef0:	2b09      	cmp	r3, #9
90000ef2:	d85d      	bhi.n	90000fb0 <ft5336_TS_GetTouchInfo+0xf0>
90000ef4:	a201      	add	r2, pc, #4	; (adr r2, 90000efc <ft5336_TS_GetTouchInfo+0x3c>)
90000ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90000efa:	bf00      	nop
90000efc:	90000f25 	.word	0x90000f25
90000f00:	90000f33 	.word	0x90000f33
90000f04:	90000f41 	.word	0x90000f41
90000f08:	90000f4f 	.word	0x90000f4f
90000f0c:	90000f5d 	.word	0x90000f5d
90000f10:	90000f6b 	.word	0x90000f6b
90000f14:	90000f79 	.word	0x90000f79
90000f18:	90000f87 	.word	0x90000f87
90000f1c:	90000f95 	.word	0x90000f95
90000f20:	90000fa3 	.word	0x90000fa3
  {
    switch(touchIdx)
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
90000f24:	2303      	movs	r3, #3
90000f26:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
90000f28:	2307      	movs	r3, #7
90000f2a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
90000f2c:	2308      	movs	r3, #8
90000f2e:	757b      	strb	r3, [r7, #21]
      break;
90000f30:	e03f      	b.n	90000fb2 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
90000f32:	2309      	movs	r3, #9
90000f34:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
90000f36:	230d      	movs	r3, #13
90000f38:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
90000f3a:	230e      	movs	r3, #14
90000f3c:	757b      	strb	r3, [r7, #21]
      break;
90000f3e:	e038      	b.n	90000fb2 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
90000f40:	230f      	movs	r3, #15
90000f42:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
90000f44:	2313      	movs	r3, #19
90000f46:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
90000f48:	2314      	movs	r3, #20
90000f4a:	757b      	strb	r3, [r7, #21]
      break;
90000f4c:	e031      	b.n	90000fb2 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
90000f4e:	2315      	movs	r3, #21
90000f50:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
90000f52:	2319      	movs	r3, #25
90000f54:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
90000f56:	231a      	movs	r3, #26
90000f58:	757b      	strb	r3, [r7, #21]
      break;
90000f5a:	e02a      	b.n	90000fb2 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
90000f5c:	231b      	movs	r3, #27
90000f5e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
90000f60:	231f      	movs	r3, #31
90000f62:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
90000f64:	2320      	movs	r3, #32
90000f66:	757b      	strb	r3, [r7, #21]
      break;
90000f68:	e023      	b.n	90000fb2 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
90000f6a:	2321      	movs	r3, #33	; 0x21
90000f6c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
90000f6e:	2325      	movs	r3, #37	; 0x25
90000f70:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
90000f72:	2326      	movs	r3, #38	; 0x26
90000f74:	757b      	strb	r3, [r7, #21]
      break;
90000f76:	e01c      	b.n	90000fb2 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
90000f78:	2327      	movs	r3, #39	; 0x27
90000f7a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
90000f7c:	232b      	movs	r3, #43	; 0x2b
90000f7e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
90000f80:	232c      	movs	r3, #44	; 0x2c
90000f82:	757b      	strb	r3, [r7, #21]
      break;
90000f84:	e015      	b.n	90000fb2 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
90000f86:	232d      	movs	r3, #45	; 0x2d
90000f88:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
90000f8a:	2331      	movs	r3, #49	; 0x31
90000f8c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
90000f8e:	2332      	movs	r3, #50	; 0x32
90000f90:	757b      	strb	r3, [r7, #21]
      break;
90000f92:	e00e      	b.n	90000fb2 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
90000f94:	2333      	movs	r3, #51	; 0x33
90000f96:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
90000f98:	2337      	movs	r3, #55	; 0x37
90000f9a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
90000f9c:	2338      	movs	r3, #56	; 0x38
90000f9e:	757b      	strb	r3, [r7, #21]
      break;
90000fa0:	e007      	b.n	90000fb2 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
90000fa2:	2339      	movs	r3, #57	; 0x39
90000fa4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
90000fa6:	233d      	movs	r3, #61	; 0x3d
90000fa8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
90000faa:	233e      	movs	r3, #62	; 0x3e
90000fac:	757b      	strb	r3, [r7, #21]
      break;
90000fae:	e000      	b.n	90000fb2 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
90000fb0:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
90000fb2:	89fb      	ldrh	r3, [r7, #14]
90000fb4:	b2db      	uxtb	r3, r3
90000fb6:	7dfa      	ldrb	r2, [r7, #23]
90000fb8:	4611      	mov	r1, r2
90000fba:	4618      	mov	r0, r3
90000fbc:	f000 f9d2 	bl	90001364 <TS_IO_Read>
90000fc0:	4603      	mov	r3, r0
90000fc2:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
90000fc4:	7d3b      	ldrb	r3, [r7, #20]
90000fc6:	b2db      	uxtb	r3, r3
90000fc8:	119b      	asrs	r3, r3, #6
90000fca:	f003 0203 	and.w	r2, r3, #3
90000fce:	6a3b      	ldr	r3, [r7, #32]
90000fd0:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
90000fd2:	89fb      	ldrh	r3, [r7, #14]
90000fd4:	b2db      	uxtb	r3, r3
90000fd6:	7dba      	ldrb	r2, [r7, #22]
90000fd8:	4611      	mov	r1, r2
90000fda:	4618      	mov	r0, r3
90000fdc:	f000 f9c2 	bl	90001364 <TS_IO_Read>
90000fe0:	4603      	mov	r3, r0
90000fe2:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
90000fe4:	7d3b      	ldrb	r3, [r7, #20]
90000fe6:	b2db      	uxtb	r3, r3
90000fe8:	461a      	mov	r2, r3
90000fea:	687b      	ldr	r3, [r7, #4]
90000fec:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
90000fee:	89fb      	ldrh	r3, [r7, #14]
90000ff0:	b2db      	uxtb	r3, r3
90000ff2:	7d7a      	ldrb	r2, [r7, #21]
90000ff4:	4611      	mov	r1, r2
90000ff6:	4618      	mov	r0, r3
90000ff8:	f000 f9b4 	bl	90001364 <TS_IO_Read>
90000ffc:	4603      	mov	r3, r0
90000ffe:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
90001000:	7d3b      	ldrb	r3, [r7, #20]
90001002:	b2db      	uxtb	r3, r3
90001004:	111b      	asrs	r3, r3, #4
90001006:	f003 0204 	and.w	r2, r3, #4
9000100a:	683b      	ldr	r3, [r7, #0]
9000100c:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
9000100e:	bf00      	nop
90001010:	3718      	adds	r7, #24
90001012:	46bd      	mov	sp, r7
90001014:	bd80      	pop	{r7, pc}
90001016:	bf00      	nop
90001018:	200000cc 	.word	0x200000cc

9000101c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
9000101c:	b480      	push	{r7}
9000101e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
90001020:	4b03      	ldr	r3, [pc, #12]	; (90001030 <ft5336_Get_I2C_InitializedStatus+0x14>)
90001022:	781b      	ldrb	r3, [r3, #0]
}
90001024:	4618      	mov	r0, r3
90001026:	46bd      	mov	sp, r7
90001028:	f85d 7b04 	ldr.w	r7, [sp], #4
9000102c:	4770      	bx	lr
9000102e:	bf00      	nop
90001030:	200000cc 	.word	0x200000cc

90001034 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
90001034:	b580      	push	{r7, lr}
90001036:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
90001038:	f7ff fff0 	bl	9000101c <ft5336_Get_I2C_InitializedStatus>
9000103c:	4603      	mov	r3, r0
9000103e:	2b00      	cmp	r3, #0
90001040:	d104      	bne.n	9000104c <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
90001042:	f000 f96b 	bl	9000131c <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
90001046:	4b02      	ldr	r3, [pc, #8]	; (90001050 <ft5336_I2C_InitializeIfRequired+0x1c>)
90001048:	2201      	movs	r2, #1
9000104a:	701a      	strb	r2, [r3, #0]
  }
}
9000104c:	bf00      	nop
9000104e:	bd80      	pop	{r7, pc}
90001050:	200000cc 	.word	0x200000cc

90001054 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
90001054:	b480      	push	{r7}
90001056:	b085      	sub	sp, #20
90001058:	af00      	add	r7, sp, #0
9000105a:	4603      	mov	r3, r0
9000105c:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
9000105e:	2300      	movs	r3, #0
90001060:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
90001062:	68fb      	ldr	r3, [r7, #12]
}
90001064:	4618      	mov	r0, r3
90001066:	3714      	adds	r7, #20
90001068:	46bd      	mov	sp, r7
9000106a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000106e:	4770      	bx	lr

90001070 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
90001070:	b580      	push	{r7, lr}
90001072:	b08c      	sub	sp, #48	; 0x30
90001074:	af00      	add	r7, sp, #0
90001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
90001078:	687b      	ldr	r3, [r7, #4]
9000107a:	4a51      	ldr	r2, [pc, #324]	; (900011c0 <I2Cx_MspInit+0x150>)
9000107c:	4293      	cmp	r3, r2
9000107e:	d14d      	bne.n	9000111c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
90001080:	4b50      	ldr	r3, [pc, #320]	; (900011c4 <I2Cx_MspInit+0x154>)
90001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001084:	4a4f      	ldr	r2, [pc, #316]	; (900011c4 <I2Cx_MspInit+0x154>)
90001086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000108a:	6313      	str	r3, [r2, #48]	; 0x30
9000108c:	4b4d      	ldr	r3, [pc, #308]	; (900011c4 <I2Cx_MspInit+0x154>)
9000108e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001090:	f003 0380 	and.w	r3, r3, #128	; 0x80
90001094:	61bb      	str	r3, [r7, #24]
90001096:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
90001098:	2380      	movs	r3, #128	; 0x80
9000109a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
9000109c:	2312      	movs	r3, #18
9000109e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
900010a0:	2300      	movs	r3, #0
900010a2:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
900010a4:	2302      	movs	r3, #2
900010a6:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
900010a8:	2304      	movs	r3, #4
900010aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
900010ac:	f107 031c 	add.w	r3, r7, #28
900010b0:	4619      	mov	r1, r3
900010b2:	4845      	ldr	r0, [pc, #276]	; (900011c8 <I2Cx_MspInit+0x158>)
900010b4:	f002 f99a 	bl	900033ec <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
900010b8:	f44f 7380 	mov.w	r3, #256	; 0x100
900010bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
900010be:	f107 031c 	add.w	r3, r7, #28
900010c2:	4619      	mov	r1, r3
900010c4:	4840      	ldr	r0, [pc, #256]	; (900011c8 <I2Cx_MspInit+0x158>)
900010c6:	f002 f991 	bl	900033ec <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
900010ca:	4b3e      	ldr	r3, [pc, #248]	; (900011c4 <I2Cx_MspInit+0x154>)
900010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900010ce:	4a3d      	ldr	r2, [pc, #244]	; (900011c4 <I2Cx_MspInit+0x154>)
900010d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
900010d4:	6413      	str	r3, [r2, #64]	; 0x40
900010d6:	4b3b      	ldr	r3, [pc, #236]	; (900011c4 <I2Cx_MspInit+0x154>)
900010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900010da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
900010de:	617b      	str	r3, [r7, #20]
900010e0:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
900010e2:	4b38      	ldr	r3, [pc, #224]	; (900011c4 <I2Cx_MspInit+0x154>)
900010e4:	6a1b      	ldr	r3, [r3, #32]
900010e6:	4a37      	ldr	r2, [pc, #220]	; (900011c4 <I2Cx_MspInit+0x154>)
900010e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
900010ec:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
900010ee:	4b35      	ldr	r3, [pc, #212]	; (900011c4 <I2Cx_MspInit+0x154>)
900010f0:	6a1b      	ldr	r3, [r3, #32]
900010f2:	4a34      	ldr	r2, [pc, #208]	; (900011c4 <I2Cx_MspInit+0x154>)
900010f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
900010f8:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
900010fa:	2200      	movs	r2, #0
900010fc:	210f      	movs	r1, #15
900010fe:	2048      	movs	r0, #72	; 0x48
90001100:	f001 fce9 	bl	90002ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
90001104:	2048      	movs	r0, #72	; 0x48
90001106:	f001 fd02 	bl	90002b0e <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
9000110a:	2200      	movs	r2, #0
9000110c:	210f      	movs	r1, #15
9000110e:	2049      	movs	r0, #73	; 0x49
90001110:	f001 fce1 	bl	90002ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
90001114:	2049      	movs	r0, #73	; 0x49
90001116:	f001 fcfa 	bl	90002b0e <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
9000111a:	e04d      	b.n	900011b8 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
9000111c:	4b29      	ldr	r3, [pc, #164]	; (900011c4 <I2Cx_MspInit+0x154>)
9000111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001120:	4a28      	ldr	r2, [pc, #160]	; (900011c4 <I2Cx_MspInit+0x154>)
90001122:	f043 0302 	orr.w	r3, r3, #2
90001126:	6313      	str	r3, [r2, #48]	; 0x30
90001128:	4b26      	ldr	r3, [pc, #152]	; (900011c4 <I2Cx_MspInit+0x154>)
9000112a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000112c:	f003 0302 	and.w	r3, r3, #2
90001130:	613b      	str	r3, [r7, #16]
90001132:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
90001134:	f44f 7380 	mov.w	r3, #256	; 0x100
90001138:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
9000113a:	2312      	movs	r3, #18
9000113c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
9000113e:	2300      	movs	r3, #0
90001140:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
90001142:	2302      	movs	r3, #2
90001144:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
90001146:	2304      	movs	r3, #4
90001148:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
9000114a:	f107 031c 	add.w	r3, r7, #28
9000114e:	4619      	mov	r1, r3
90001150:	481e      	ldr	r0, [pc, #120]	; (900011cc <I2Cx_MspInit+0x15c>)
90001152:	f002 f94b 	bl	900033ec <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
90001156:	f44f 7300 	mov.w	r3, #512	; 0x200
9000115a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
9000115c:	f107 031c 	add.w	r3, r7, #28
90001160:	4619      	mov	r1, r3
90001162:	481a      	ldr	r0, [pc, #104]	; (900011cc <I2Cx_MspInit+0x15c>)
90001164:	f002 f942 	bl	900033ec <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
90001168:	4b16      	ldr	r3, [pc, #88]	; (900011c4 <I2Cx_MspInit+0x154>)
9000116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000116c:	4a15      	ldr	r2, [pc, #84]	; (900011c4 <I2Cx_MspInit+0x154>)
9000116e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
90001172:	6413      	str	r3, [r2, #64]	; 0x40
90001174:	4b13      	ldr	r3, [pc, #76]	; (900011c4 <I2Cx_MspInit+0x154>)
90001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90001178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
9000117c:	60fb      	str	r3, [r7, #12]
9000117e:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
90001180:	4b10      	ldr	r3, [pc, #64]	; (900011c4 <I2Cx_MspInit+0x154>)
90001182:	6a1b      	ldr	r3, [r3, #32]
90001184:	4a0f      	ldr	r2, [pc, #60]	; (900011c4 <I2Cx_MspInit+0x154>)
90001186:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
9000118a:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
9000118c:	4b0d      	ldr	r3, [pc, #52]	; (900011c4 <I2Cx_MspInit+0x154>)
9000118e:	6a1b      	ldr	r3, [r3, #32]
90001190:	4a0c      	ldr	r2, [pc, #48]	; (900011c4 <I2Cx_MspInit+0x154>)
90001192:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
90001196:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
90001198:	2200      	movs	r2, #0
9000119a:	210f      	movs	r1, #15
9000119c:	201f      	movs	r0, #31
9000119e:	f001 fc9a 	bl	90002ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
900011a2:	201f      	movs	r0, #31
900011a4:	f001 fcb3 	bl	90002b0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
900011a8:	2200      	movs	r2, #0
900011aa:	210f      	movs	r1, #15
900011ac:	2020      	movs	r0, #32
900011ae:	f001 fc92 	bl	90002ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
900011b2:	2020      	movs	r0, #32
900011b4:	f001 fcab 	bl	90002b0e <HAL_NVIC_EnableIRQ>
}
900011b8:	bf00      	nop
900011ba:	3730      	adds	r7, #48	; 0x30
900011bc:	46bd      	mov	sp, r7
900011be:	bd80      	pop	{r7, pc}
900011c0:	200000d4 	.word	0x200000d4
900011c4:	40023800 	.word	0x40023800
900011c8:	40021c00 	.word	0x40021c00
900011cc:	40020400 	.word	0x40020400

900011d0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
900011d0:	b580      	push	{r7, lr}
900011d2:	b082      	sub	sp, #8
900011d4:	af00      	add	r7, sp, #0
900011d6:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
900011d8:	6878      	ldr	r0, [r7, #4]
900011da:	f002 fdcf 	bl	90003d7c <HAL_I2C_GetState>
900011de:	4603      	mov	r3, r0
900011e0:	2b00      	cmp	r3, #0
900011e2:	d125      	bne.n	90001230 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
900011e4:	687b      	ldr	r3, [r7, #4]
900011e6:	4a14      	ldr	r2, [pc, #80]	; (90001238 <I2Cx_Init+0x68>)
900011e8:	4293      	cmp	r3, r2
900011ea:	d103      	bne.n	900011f4 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
900011ec:	687b      	ldr	r3, [r7, #4]
900011ee:	4a13      	ldr	r2, [pc, #76]	; (9000123c <I2Cx_Init+0x6c>)
900011f0:	601a      	str	r2, [r3, #0]
900011f2:	e002      	b.n	900011fa <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
900011f4:	687b      	ldr	r3, [r7, #4]
900011f6:	4a12      	ldr	r2, [pc, #72]	; (90001240 <I2Cx_Init+0x70>)
900011f8:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
900011fa:	687b      	ldr	r3, [r7, #4]
900011fc:	4a11      	ldr	r2, [pc, #68]	; (90001244 <I2Cx_Init+0x74>)
900011fe:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
90001200:	687b      	ldr	r3, [r7, #4]
90001202:	2200      	movs	r2, #0
90001204:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
90001206:	687b      	ldr	r3, [r7, #4]
90001208:	2201      	movs	r2, #1
9000120a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
9000120c:	687b      	ldr	r3, [r7, #4]
9000120e:	2200      	movs	r2, #0
90001210:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
90001212:	687b      	ldr	r3, [r7, #4]
90001214:	2200      	movs	r2, #0
90001216:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
90001218:	687b      	ldr	r3, [r7, #4]
9000121a:	2200      	movs	r2, #0
9000121c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
9000121e:	687b      	ldr	r3, [r7, #4]
90001220:	2200      	movs	r2, #0
90001222:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
90001224:	6878      	ldr	r0, [r7, #4]
90001226:	f7ff ff23 	bl	90001070 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
9000122a:	6878      	ldr	r0, [r7, #4]
9000122c:	f002 faa4 	bl	90003778 <HAL_I2C_Init>
  }
}
90001230:	bf00      	nop
90001232:	3708      	adds	r7, #8
90001234:	46bd      	mov	sp, r7
90001236:	bd80      	pop	{r7, pc}
90001238:	200000d4 	.word	0x200000d4
9000123c:	40005c00 	.word	0x40005c00
90001240:	40005400 	.word	0x40005400
90001244:	40912732 	.word	0x40912732

90001248 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
90001248:	b580      	push	{r7, lr}
9000124a:	b08a      	sub	sp, #40	; 0x28
9000124c:	af04      	add	r7, sp, #16
9000124e:	60f8      	str	r0, [r7, #12]
90001250:	4608      	mov	r0, r1
90001252:	4611      	mov	r1, r2
90001254:	461a      	mov	r2, r3
90001256:	4603      	mov	r3, r0
90001258:	72fb      	strb	r3, [r7, #11]
9000125a:	460b      	mov	r3, r1
9000125c:	813b      	strh	r3, [r7, #8]
9000125e:	4613      	mov	r3, r2
90001260:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
90001262:	2300      	movs	r3, #0
90001264:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
90001266:	7afb      	ldrb	r3, [r7, #11]
90001268:	b299      	uxth	r1, r3
9000126a:	88f8      	ldrh	r0, [r7, #6]
9000126c:	893a      	ldrh	r2, [r7, #8]
9000126e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
90001272:	9302      	str	r3, [sp, #8]
90001274:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
90001276:	9301      	str	r3, [sp, #4]
90001278:	6a3b      	ldr	r3, [r7, #32]
9000127a:	9300      	str	r3, [sp, #0]
9000127c:	4603      	mov	r3, r0
9000127e:	68f8      	ldr	r0, [r7, #12]
90001280:	f002 fc62 	bl	90003b48 <HAL_I2C_Mem_Read>
90001284:	4603      	mov	r3, r0
90001286:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
90001288:	7dfb      	ldrb	r3, [r7, #23]
9000128a:	2b00      	cmp	r3, #0
9000128c:	d004      	beq.n	90001298 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
9000128e:	7afb      	ldrb	r3, [r7, #11]
90001290:	4619      	mov	r1, r3
90001292:	68f8      	ldr	r0, [r7, #12]
90001294:	f000 f832 	bl	900012fc <I2Cx_Error>
  }
  return status;    
90001298:	7dfb      	ldrb	r3, [r7, #23]
}
9000129a:	4618      	mov	r0, r3
9000129c:	3718      	adds	r7, #24
9000129e:	46bd      	mov	sp, r7
900012a0:	bd80      	pop	{r7, pc}

900012a2 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
900012a2:	b580      	push	{r7, lr}
900012a4:	b08a      	sub	sp, #40	; 0x28
900012a6:	af04      	add	r7, sp, #16
900012a8:	60f8      	str	r0, [r7, #12]
900012aa:	4608      	mov	r0, r1
900012ac:	4611      	mov	r1, r2
900012ae:	461a      	mov	r2, r3
900012b0:	4603      	mov	r3, r0
900012b2:	72fb      	strb	r3, [r7, #11]
900012b4:	460b      	mov	r3, r1
900012b6:	813b      	strh	r3, [r7, #8]
900012b8:	4613      	mov	r3, r2
900012ba:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
900012bc:	2300      	movs	r3, #0
900012be:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
900012c0:	7afb      	ldrb	r3, [r7, #11]
900012c2:	b299      	uxth	r1, r3
900012c4:	88f8      	ldrh	r0, [r7, #6]
900012c6:	893a      	ldrh	r2, [r7, #8]
900012c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
900012cc:	9302      	str	r3, [sp, #8]
900012ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
900012d0:	9301      	str	r3, [sp, #4]
900012d2:	6a3b      	ldr	r3, [r7, #32]
900012d4:	9300      	str	r3, [sp, #0]
900012d6:	4603      	mov	r3, r0
900012d8:	68f8      	ldr	r0, [r7, #12]
900012da:	f002 fb21 	bl	90003920 <HAL_I2C_Mem_Write>
900012de:	4603      	mov	r3, r0
900012e0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
900012e2:	7dfb      	ldrb	r3, [r7, #23]
900012e4:	2b00      	cmp	r3, #0
900012e6:	d004      	beq.n	900012f2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
900012e8:	7afb      	ldrb	r3, [r7, #11]
900012ea:	4619      	mov	r1, r3
900012ec:	68f8      	ldr	r0, [r7, #12]
900012ee:	f000 f805 	bl	900012fc <I2Cx_Error>
  }
  return status;
900012f2:	7dfb      	ldrb	r3, [r7, #23]
}
900012f4:	4618      	mov	r0, r3
900012f6:	3718      	adds	r7, #24
900012f8:	46bd      	mov	sp, r7
900012fa:	bd80      	pop	{r7, pc}

900012fc <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
900012fc:	b580      	push	{r7, lr}
900012fe:	b082      	sub	sp, #8
90001300:	af00      	add	r7, sp, #0
90001302:	6078      	str	r0, [r7, #4]
90001304:	460b      	mov	r3, r1
90001306:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
90001308:	6878      	ldr	r0, [r7, #4]
9000130a:	f002 fac5 	bl	90003898 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
9000130e:	6878      	ldr	r0, [r7, #4]
90001310:	f7ff ff5e 	bl	900011d0 <I2Cx_Init>
}
90001314:	bf00      	nop
90001316:	3708      	adds	r7, #8
90001318:	46bd      	mov	sp, r7
9000131a:	bd80      	pop	{r7, pc}

9000131c <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
9000131c:	b580      	push	{r7, lr}
9000131e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
90001320:	4802      	ldr	r0, [pc, #8]	; (9000132c <TS_IO_Init+0x10>)
90001322:	f7ff ff55 	bl	900011d0 <I2Cx_Init>
}
90001326:	bf00      	nop
90001328:	bd80      	pop	{r7, pc}
9000132a:	bf00      	nop
9000132c:	200000d4 	.word	0x200000d4

90001330 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
90001330:	b580      	push	{r7, lr}
90001332:	b084      	sub	sp, #16
90001334:	af02      	add	r7, sp, #8
90001336:	4603      	mov	r3, r0
90001338:	71fb      	strb	r3, [r7, #7]
9000133a:	460b      	mov	r3, r1
9000133c:	71bb      	strb	r3, [r7, #6]
9000133e:	4613      	mov	r3, r2
90001340:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
90001342:	79bb      	ldrb	r3, [r7, #6]
90001344:	b29a      	uxth	r2, r3
90001346:	79f9      	ldrb	r1, [r7, #7]
90001348:	2301      	movs	r3, #1
9000134a:	9301      	str	r3, [sp, #4]
9000134c:	1d7b      	adds	r3, r7, #5
9000134e:	9300      	str	r3, [sp, #0]
90001350:	2301      	movs	r3, #1
90001352:	4803      	ldr	r0, [pc, #12]	; (90001360 <TS_IO_Write+0x30>)
90001354:	f7ff ffa5 	bl	900012a2 <I2Cx_WriteMultiple>
}
90001358:	bf00      	nop
9000135a:	3708      	adds	r7, #8
9000135c:	46bd      	mov	sp, r7
9000135e:	bd80      	pop	{r7, pc}
90001360:	200000d4 	.word	0x200000d4

90001364 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
90001364:	b580      	push	{r7, lr}
90001366:	b086      	sub	sp, #24
90001368:	af02      	add	r7, sp, #8
9000136a:	4603      	mov	r3, r0
9000136c:	460a      	mov	r2, r1
9000136e:	71fb      	strb	r3, [r7, #7]
90001370:	4613      	mov	r3, r2
90001372:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
90001374:	2300      	movs	r3, #0
90001376:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
90001378:	79bb      	ldrb	r3, [r7, #6]
9000137a:	b29a      	uxth	r2, r3
9000137c:	79f9      	ldrb	r1, [r7, #7]
9000137e:	2301      	movs	r3, #1
90001380:	9301      	str	r3, [sp, #4]
90001382:	f107 030f 	add.w	r3, r7, #15
90001386:	9300      	str	r3, [sp, #0]
90001388:	2301      	movs	r3, #1
9000138a:	4804      	ldr	r0, [pc, #16]	; (9000139c <TS_IO_Read+0x38>)
9000138c:	f7ff ff5c 	bl	90001248 <I2Cx_ReadMultiple>

  return read_value;
90001390:	7bfb      	ldrb	r3, [r7, #15]
}
90001392:	4618      	mov	r0, r3
90001394:	3710      	adds	r7, #16
90001396:	46bd      	mov	sp, r7
90001398:	bd80      	pop	{r7, pc}
9000139a:	bf00      	nop
9000139c:	200000d4 	.word	0x200000d4

900013a0 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
900013a0:	b580      	push	{r7, lr}
900013a2:	b082      	sub	sp, #8
900013a4:	af00      	add	r7, sp, #0
900013a6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
900013a8:	6878      	ldr	r0, [r7, #4]
900013aa:	f001 fa95 	bl	900028d8 <HAL_Delay>
}
900013ae:	bf00      	nop
900013b0:	3708      	adds	r7, #8
900013b2:	46bd      	mov	sp, r7
900013b4:	bd80      	pop	{r7, pc}
	...

900013b8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
900013b8:	b580      	push	{r7, lr}
900013ba:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
900013bc:	4b31      	ldr	r3, [pc, #196]	; (90001484 <BSP_LCD_Init+0xcc>)
900013be:	2228      	movs	r2, #40	; 0x28
900013c0:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
900013c2:	4b30      	ldr	r3, [pc, #192]	; (90001484 <BSP_LCD_Init+0xcc>)
900013c4:	2209      	movs	r2, #9
900013c6:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
900013c8:	4b2e      	ldr	r3, [pc, #184]	; (90001484 <BSP_LCD_Init+0xcc>)
900013ca:	2235      	movs	r2, #53	; 0x35
900013cc:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
900013ce:	4b2d      	ldr	r3, [pc, #180]	; (90001484 <BSP_LCD_Init+0xcc>)
900013d0:	220b      	movs	r2, #11
900013d2:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
900013d4:	4b2b      	ldr	r3, [pc, #172]	; (90001484 <BSP_LCD_Init+0xcc>)
900013d6:	f240 121b 	movw	r2, #283	; 0x11b
900013da:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
900013dc:	4b29      	ldr	r3, [pc, #164]	; (90001484 <BSP_LCD_Init+0xcc>)
900013de:	f240 2215 	movw	r2, #533	; 0x215
900013e2:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
900013e4:	4b27      	ldr	r3, [pc, #156]	; (90001484 <BSP_LCD_Init+0xcc>)
900013e6:	f240 121d 	movw	r2, #285	; 0x11d
900013ea:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
900013ec:	4b25      	ldr	r3, [pc, #148]	; (90001484 <BSP_LCD_Init+0xcc>)
900013ee:	f240 2235 	movw	r2, #565	; 0x235
900013f2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
900013f4:	2100      	movs	r1, #0
900013f6:	4823      	ldr	r0, [pc, #140]	; (90001484 <BSP_LCD_Init+0xcc>)
900013f8:	f000 fc9a 	bl	90001d30 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
900013fc:	4b21      	ldr	r3, [pc, #132]	; (90001484 <BSP_LCD_Init+0xcc>)
900013fe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
90001402:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
90001404:	4b1f      	ldr	r3, [pc, #124]	; (90001484 <BSP_LCD_Init+0xcc>)
90001406:	f44f 7288 	mov.w	r2, #272	; 0x110
9000140a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
9000140c:	4b1d      	ldr	r3, [pc, #116]	; (90001484 <BSP_LCD_Init+0xcc>)
9000140e:	2200      	movs	r2, #0
90001410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
90001414:	4b1b      	ldr	r3, [pc, #108]	; (90001484 <BSP_LCD_Init+0xcc>)
90001416:	2200      	movs	r2, #0
90001418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
9000141c:	4b19      	ldr	r3, [pc, #100]	; (90001484 <BSP_LCD_Init+0xcc>)
9000141e:	2200      	movs	r2, #0
90001420:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
90001424:	4b17      	ldr	r3, [pc, #92]	; (90001484 <BSP_LCD_Init+0xcc>)
90001426:	2200      	movs	r2, #0
90001428:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
9000142a:	4b16      	ldr	r3, [pc, #88]	; (90001484 <BSP_LCD_Init+0xcc>)
9000142c:	2200      	movs	r2, #0
9000142e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
90001430:	4b14      	ldr	r3, [pc, #80]	; (90001484 <BSP_LCD_Init+0xcc>)
90001432:	2200      	movs	r2, #0
90001434:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90001436:	4b13      	ldr	r3, [pc, #76]	; (90001484 <BSP_LCD_Init+0xcc>)
90001438:	2200      	movs	r2, #0
9000143a:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
9000143c:	4b11      	ldr	r3, [pc, #68]	; (90001484 <BSP_LCD_Init+0xcc>)
9000143e:	4a12      	ldr	r2, [pc, #72]	; (90001488 <BSP_LCD_Init+0xd0>)
90001440:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
90001442:	4810      	ldr	r0, [pc, #64]	; (90001484 <BSP_LCD_Init+0xcc>)
90001444:	f002 ffdc 	bl	90004400 <HAL_LTDC_GetState>
90001448:	4603      	mov	r3, r0
9000144a:	2b00      	cmp	r3, #0
9000144c:	d103      	bne.n	90001456 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
9000144e:	2100      	movs	r1, #0
90001450:	480c      	ldr	r0, [pc, #48]	; (90001484 <BSP_LCD_Init+0xcc>)
90001452:	f000 fb93 	bl	90001b7c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
90001456:	480b      	ldr	r0, [pc, #44]	; (90001484 <BSP_LCD_Init+0xcc>)
90001458:	f002 feba 	bl	900041d0 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
9000145c:	2201      	movs	r2, #1
9000145e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
90001462:	480a      	ldr	r0, [pc, #40]	; (9000148c <BSP_LCD_Init+0xd4>)
90001464:	f002 f96e 	bl	90003744 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
90001468:	2201      	movs	r2, #1
9000146a:	2108      	movs	r1, #8
9000146c:	4808      	ldr	r0, [pc, #32]	; (90001490 <BSP_LCD_Init+0xd8>)
9000146e:	f002 f969 	bl	90003744 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
90001472:	f000 fd7d 	bl	90001f70 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
90001476:	4807      	ldr	r0, [pc, #28]	; (90001494 <BSP_LCD_Init+0xdc>)
90001478:	f000 f8d8 	bl	9000162c <BSP_LCD_SetFont>
  
  return LCD_OK;
9000147c:	2300      	movs	r3, #0
}
9000147e:	4618      	mov	r0, r3
90001480:	bd80      	pop	{r7, pc}
90001482:	bf00      	nop
90001484:	200002c8 	.word	0x200002c8
90001488:	40016800 	.word	0x40016800
9000148c:	40022000 	.word	0x40022000
90001490:	40022800 	.word	0x40022800
90001494:	2000002c 	.word	0x2000002c

90001498 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
90001498:	b480      	push	{r7}
9000149a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
9000149c:	4b06      	ldr	r3, [pc, #24]	; (900014b8 <BSP_LCD_GetXSize+0x20>)
9000149e:	681b      	ldr	r3, [r3, #0]
900014a0:	4a06      	ldr	r2, [pc, #24]	; (900014bc <BSP_LCD_GetXSize+0x24>)
900014a2:	2134      	movs	r1, #52	; 0x34
900014a4:	fb01 f303 	mul.w	r3, r1, r3
900014a8:	4413      	add	r3, r2
900014aa:	3360      	adds	r3, #96	; 0x60
900014ac:	681b      	ldr	r3, [r3, #0]
}
900014ae:	4618      	mov	r0, r3
900014b0:	46bd      	mov	sp, r7
900014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
900014b6:	4770      	bx	lr
900014b8:	20000160 	.word	0x20000160
900014bc:	200002c8 	.word	0x200002c8

900014c0 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
900014c0:	b480      	push	{r7}
900014c2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
900014c4:	4b06      	ldr	r3, [pc, #24]	; (900014e0 <BSP_LCD_GetYSize+0x20>)
900014c6:	681b      	ldr	r3, [r3, #0]
900014c8:	4a06      	ldr	r2, [pc, #24]	; (900014e4 <BSP_LCD_GetYSize+0x24>)
900014ca:	2134      	movs	r1, #52	; 0x34
900014cc:	fb01 f303 	mul.w	r3, r1, r3
900014d0:	4413      	add	r3, r2
900014d2:	3364      	adds	r3, #100	; 0x64
900014d4:	681b      	ldr	r3, [r3, #0]
}
900014d6:	4618      	mov	r0, r3
900014d8:	46bd      	mov	sp, r7
900014da:	f85d 7b04 	ldr.w	r7, [sp], #4
900014de:	4770      	bx	lr
900014e0:	20000160 	.word	0x20000160
900014e4:	200002c8 	.word	0x200002c8

900014e8 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
900014e8:	b580      	push	{r7, lr}
900014ea:	b090      	sub	sp, #64	; 0x40
900014ec:	af00      	add	r7, sp, #0
900014ee:	4603      	mov	r3, r0
900014f0:	6039      	str	r1, [r7, #0]
900014f2:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
900014f4:	2300      	movs	r3, #0
900014f6:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
900014f8:	f7ff ffce 	bl	90001498 <BSP_LCD_GetXSize>
900014fc:	4603      	mov	r3, r0
900014fe:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
90001500:	2300      	movs	r3, #0
90001502:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
90001504:	f7ff ffdc 	bl	900014c0 <BSP_LCD_GetYSize>
90001508:	4603      	mov	r3, r0
9000150a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
9000150c:	2300      	movs	r3, #0
9000150e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
90001510:	683b      	ldr	r3, [r7, #0]
90001512:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
90001514:	23ff      	movs	r3, #255	; 0xff
90001516:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
90001518:	2300      	movs	r3, #0
9000151a:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
9000151c:	2300      	movs	r3, #0
9000151e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
90001522:	2300      	movs	r3, #0
90001524:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
90001528:	2300      	movs	r3, #0
9000152a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
9000152e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
90001532:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
90001534:	2307      	movs	r3, #7
90001536:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
90001538:	f7ff ffae 	bl	90001498 <BSP_LCD_GetXSize>
9000153c:	4603      	mov	r3, r0
9000153e:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
90001540:	f7ff ffbe 	bl	900014c0 <BSP_LCD_GetYSize>
90001544:	4603      	mov	r3, r0
90001546:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
90001548:	88fa      	ldrh	r2, [r7, #6]
9000154a:	f107 030c 	add.w	r3, r7, #12
9000154e:	4619      	mov	r1, r3
90001550:	4812      	ldr	r0, [pc, #72]	; (9000159c <BSP_LCD_LayerDefaultInit+0xb4>)
90001552:	f002 ff17 	bl	90004384 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
90001556:	88fa      	ldrh	r2, [r7, #6]
90001558:	4911      	ldr	r1, [pc, #68]	; (900015a0 <BSP_LCD_LayerDefaultInit+0xb8>)
9000155a:	4613      	mov	r3, r2
9000155c:	005b      	lsls	r3, r3, #1
9000155e:	4413      	add	r3, r2
90001560:	009b      	lsls	r3, r3, #2
90001562:	440b      	add	r3, r1
90001564:	3304      	adds	r3, #4
90001566:	f04f 32ff 	mov.w	r2, #4294967295
9000156a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
9000156c:	88fa      	ldrh	r2, [r7, #6]
9000156e:	490c      	ldr	r1, [pc, #48]	; (900015a0 <BSP_LCD_LayerDefaultInit+0xb8>)
90001570:	4613      	mov	r3, r2
90001572:	005b      	lsls	r3, r3, #1
90001574:	4413      	add	r3, r2
90001576:	009b      	lsls	r3, r3, #2
90001578:	440b      	add	r3, r1
9000157a:	3308      	adds	r3, #8
9000157c:	4a09      	ldr	r2, [pc, #36]	; (900015a4 <BSP_LCD_LayerDefaultInit+0xbc>)
9000157e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
90001580:	88fa      	ldrh	r2, [r7, #6]
90001582:	4907      	ldr	r1, [pc, #28]	; (900015a0 <BSP_LCD_LayerDefaultInit+0xb8>)
90001584:	4613      	mov	r3, r2
90001586:	005b      	lsls	r3, r3, #1
90001588:	4413      	add	r3, r2
9000158a:	009b      	lsls	r3, r3, #2
9000158c:	440b      	add	r3, r1
9000158e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
90001592:	601a      	str	r2, [r3, #0]
}
90001594:	bf00      	nop
90001596:	3740      	adds	r7, #64	; 0x40
90001598:	46bd      	mov	sp, r7
9000159a:	bd80      	pop	{r7, pc}
9000159c:	200002c8 	.word	0x200002c8
900015a0:	20000164 	.word	0x20000164
900015a4:	2000002c 	.word	0x2000002c

900015a8 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
900015a8:	b480      	push	{r7}
900015aa:	b083      	sub	sp, #12
900015ac:	af00      	add	r7, sp, #0
900015ae:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
900015b0:	4a04      	ldr	r2, [pc, #16]	; (900015c4 <BSP_LCD_SelectLayer+0x1c>)
900015b2:	687b      	ldr	r3, [r7, #4]
900015b4:	6013      	str	r3, [r2, #0]
} 
900015b6:	bf00      	nop
900015b8:	370c      	adds	r7, #12
900015ba:	46bd      	mov	sp, r7
900015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
900015c0:	4770      	bx	lr
900015c2:	bf00      	nop
900015c4:	20000160 	.word	0x20000160

900015c8 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
900015c8:	b480      	push	{r7}
900015ca:	b083      	sub	sp, #12
900015cc:	af00      	add	r7, sp, #0
900015ce:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
900015d0:	4b07      	ldr	r3, [pc, #28]	; (900015f0 <BSP_LCD_SetTextColor+0x28>)
900015d2:	681a      	ldr	r2, [r3, #0]
900015d4:	4907      	ldr	r1, [pc, #28]	; (900015f4 <BSP_LCD_SetTextColor+0x2c>)
900015d6:	4613      	mov	r3, r2
900015d8:	005b      	lsls	r3, r3, #1
900015da:	4413      	add	r3, r2
900015dc:	009b      	lsls	r3, r3, #2
900015de:	440b      	add	r3, r1
900015e0:	687a      	ldr	r2, [r7, #4]
900015e2:	601a      	str	r2, [r3, #0]
}
900015e4:	bf00      	nop
900015e6:	370c      	adds	r7, #12
900015e8:	46bd      	mov	sp, r7
900015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
900015ee:	4770      	bx	lr
900015f0:	20000160 	.word	0x20000160
900015f4:	20000164 	.word	0x20000164

900015f8 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
900015f8:	b480      	push	{r7}
900015fa:	b083      	sub	sp, #12
900015fc:	af00      	add	r7, sp, #0
900015fe:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
90001600:	4b08      	ldr	r3, [pc, #32]	; (90001624 <BSP_LCD_SetBackColor+0x2c>)
90001602:	681a      	ldr	r2, [r3, #0]
90001604:	4908      	ldr	r1, [pc, #32]	; (90001628 <BSP_LCD_SetBackColor+0x30>)
90001606:	4613      	mov	r3, r2
90001608:	005b      	lsls	r3, r3, #1
9000160a:	4413      	add	r3, r2
9000160c:	009b      	lsls	r3, r3, #2
9000160e:	440b      	add	r3, r1
90001610:	3304      	adds	r3, #4
90001612:	687a      	ldr	r2, [r7, #4]
90001614:	601a      	str	r2, [r3, #0]
}
90001616:	bf00      	nop
90001618:	370c      	adds	r7, #12
9000161a:	46bd      	mov	sp, r7
9000161c:	f85d 7b04 	ldr.w	r7, [sp], #4
90001620:	4770      	bx	lr
90001622:	bf00      	nop
90001624:	20000160 	.word	0x20000160
90001628:	20000164 	.word	0x20000164

9000162c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
9000162c:	b480      	push	{r7}
9000162e:	b083      	sub	sp, #12
90001630:	af00      	add	r7, sp, #0
90001632:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
90001634:	4b08      	ldr	r3, [pc, #32]	; (90001658 <BSP_LCD_SetFont+0x2c>)
90001636:	681a      	ldr	r2, [r3, #0]
90001638:	4908      	ldr	r1, [pc, #32]	; (9000165c <BSP_LCD_SetFont+0x30>)
9000163a:	4613      	mov	r3, r2
9000163c:	005b      	lsls	r3, r3, #1
9000163e:	4413      	add	r3, r2
90001640:	009b      	lsls	r3, r3, #2
90001642:	440b      	add	r3, r1
90001644:	3308      	adds	r3, #8
90001646:	687a      	ldr	r2, [r7, #4]
90001648:	601a      	str	r2, [r3, #0]
}
9000164a:	bf00      	nop
9000164c:	370c      	adds	r7, #12
9000164e:	46bd      	mov	sp, r7
90001650:	f85d 7b04 	ldr.w	r7, [sp], #4
90001654:	4770      	bx	lr
90001656:	bf00      	nop
90001658:	20000160 	.word	0x20000160
9000165c:	20000164 	.word	0x20000164

90001660 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
90001660:	b480      	push	{r7}
90001662:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
90001664:	4b07      	ldr	r3, [pc, #28]	; (90001684 <BSP_LCD_GetFont+0x24>)
90001666:	681a      	ldr	r2, [r3, #0]
90001668:	4907      	ldr	r1, [pc, #28]	; (90001688 <BSP_LCD_GetFont+0x28>)
9000166a:	4613      	mov	r3, r2
9000166c:	005b      	lsls	r3, r3, #1
9000166e:	4413      	add	r3, r2
90001670:	009b      	lsls	r3, r3, #2
90001672:	440b      	add	r3, r1
90001674:	3308      	adds	r3, #8
90001676:	681b      	ldr	r3, [r3, #0]
}
90001678:	4618      	mov	r0, r3
9000167a:	46bd      	mov	sp, r7
9000167c:	f85d 7b04 	ldr.w	r7, [sp], #4
90001680:	4770      	bx	lr
90001682:	bf00      	nop
90001684:	20000160 	.word	0x20000160
90001688:	20000164 	.word	0x20000164

9000168c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
9000168c:	b5f0      	push	{r4, r5, r6, r7, lr}
9000168e:	b085      	sub	sp, #20
90001690:	af02      	add	r7, sp, #8
90001692:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
90001694:	4b0f      	ldr	r3, [pc, #60]	; (900016d4 <BSP_LCD_Clear+0x48>)
90001696:	681c      	ldr	r4, [r3, #0]
90001698:	4b0e      	ldr	r3, [pc, #56]	; (900016d4 <BSP_LCD_Clear+0x48>)
9000169a:	681b      	ldr	r3, [r3, #0]
9000169c:	4a0e      	ldr	r2, [pc, #56]	; (900016d8 <BSP_LCD_Clear+0x4c>)
9000169e:	2134      	movs	r1, #52	; 0x34
900016a0:	fb01 f303 	mul.w	r3, r1, r3
900016a4:	4413      	add	r3, r2
900016a6:	335c      	adds	r3, #92	; 0x5c
900016a8:	681b      	ldr	r3, [r3, #0]
900016aa:	461e      	mov	r6, r3
900016ac:	f7ff fef4 	bl	90001498 <BSP_LCD_GetXSize>
900016b0:	4605      	mov	r5, r0
900016b2:	f7ff ff05 	bl	900014c0 <BSP_LCD_GetYSize>
900016b6:	4602      	mov	r2, r0
900016b8:	687b      	ldr	r3, [r7, #4]
900016ba:	9301      	str	r3, [sp, #4]
900016bc:	2300      	movs	r3, #0
900016be:	9300      	str	r3, [sp, #0]
900016c0:	4613      	mov	r3, r2
900016c2:	462a      	mov	r2, r5
900016c4:	4631      	mov	r1, r6
900016c6:	4620      	mov	r0, r4
900016c8:	f000 fc06 	bl	90001ed8 <LL_FillBuffer>
}
900016cc:	bf00      	nop
900016ce:	370c      	adds	r7, #12
900016d0:	46bd      	mov	sp, r7
900016d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
900016d4:	20000160 	.word	0x20000160
900016d8:	200002c8 	.word	0x200002c8

900016dc <BSP_LCD_ClearStringLine>:
  * @brief  Clears the selected line.
  * @param  Line: Line to be cleared
  * @retval None
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
900016dc:	b590      	push	{r4, r7, lr}
900016de:	b085      	sub	sp, #20
900016e0:	af00      	add	r7, sp, #0
900016e2:	6078      	str	r0, [r7, #4]
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
900016e4:	4b2d      	ldr	r3, [pc, #180]	; (9000179c <BSP_LCD_ClearStringLine+0xc0>)
900016e6:	681a      	ldr	r2, [r3, #0]
900016e8:	492d      	ldr	r1, [pc, #180]	; (900017a0 <BSP_LCD_ClearStringLine+0xc4>)
900016ea:	4613      	mov	r3, r2
900016ec:	005b      	lsls	r3, r3, #1
900016ee:	4413      	add	r3, r2
900016f0:	009b      	lsls	r3, r3, #2
900016f2:	440b      	add	r3, r1
900016f4:	681b      	ldr	r3, [r3, #0]
900016f6:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
900016f8:	4b28      	ldr	r3, [pc, #160]	; (9000179c <BSP_LCD_ClearStringLine+0xc0>)
900016fa:	6819      	ldr	r1, [r3, #0]
900016fc:	4b27      	ldr	r3, [pc, #156]	; (9000179c <BSP_LCD_ClearStringLine+0xc0>)
900016fe:	681a      	ldr	r2, [r3, #0]
90001700:	4827      	ldr	r0, [pc, #156]	; (900017a0 <BSP_LCD_ClearStringLine+0xc4>)
90001702:	460b      	mov	r3, r1
90001704:	005b      	lsls	r3, r3, #1
90001706:	440b      	add	r3, r1
90001708:	009b      	lsls	r3, r3, #2
9000170a:	4403      	add	r3, r0
9000170c:	3304      	adds	r3, #4
9000170e:	6819      	ldr	r1, [r3, #0]
90001710:	4823      	ldr	r0, [pc, #140]	; (900017a0 <BSP_LCD_ClearStringLine+0xc4>)
90001712:	4613      	mov	r3, r2
90001714:	005b      	lsls	r3, r3, #1
90001716:	4413      	add	r3, r2
90001718:	009b      	lsls	r3, r3, #2
9000171a:	4403      	add	r3, r0
9000171c:	6019      	str	r1, [r3, #0]
  
  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
9000171e:	4b1f      	ldr	r3, [pc, #124]	; (9000179c <BSP_LCD_ClearStringLine+0xc0>)
90001720:	681a      	ldr	r2, [r3, #0]
90001722:	491f      	ldr	r1, [pc, #124]	; (900017a0 <BSP_LCD_ClearStringLine+0xc4>)
90001724:	4613      	mov	r3, r2
90001726:	005b      	lsls	r3, r3, #1
90001728:	4413      	add	r3, r2
9000172a:	009b      	lsls	r3, r3, #2
9000172c:	440b      	add	r3, r1
9000172e:	3308      	adds	r3, #8
90001730:	681b      	ldr	r3, [r3, #0]
90001732:	88da      	ldrh	r2, [r3, #6]
90001734:	687b      	ldr	r3, [r7, #4]
90001736:	b29b      	uxth	r3, r3
90001738:	fb12 f303 	smulbb	r3, r2, r3
9000173c:	b29c      	uxth	r4, r3
9000173e:	f7ff feab 	bl	90001498 <BSP_LCD_GetXSize>
90001742:	4603      	mov	r3, r0
90001744:	b299      	uxth	r1, r3
90001746:	4b15      	ldr	r3, [pc, #84]	; (9000179c <BSP_LCD_ClearStringLine+0xc0>)
90001748:	681a      	ldr	r2, [r3, #0]
9000174a:	4815      	ldr	r0, [pc, #84]	; (900017a0 <BSP_LCD_ClearStringLine+0xc4>)
9000174c:	4613      	mov	r3, r2
9000174e:	005b      	lsls	r3, r3, #1
90001750:	4413      	add	r3, r2
90001752:	009b      	lsls	r3, r3, #2
90001754:	4403      	add	r3, r0
90001756:	3308      	adds	r3, #8
90001758:	681b      	ldr	r3, [r3, #0]
9000175a:	88db      	ldrh	r3, [r3, #6]
9000175c:	460a      	mov	r2, r1
9000175e:	4621      	mov	r1, r4
90001760:	2000      	movs	r0, #0
90001762:	f000 f973 	bl	90001a4c <BSP_LCD_FillRect>
  
  DrawProp[ActiveLayer].TextColor = color_backup;
90001766:	4b0d      	ldr	r3, [pc, #52]	; (9000179c <BSP_LCD_ClearStringLine+0xc0>)
90001768:	681a      	ldr	r2, [r3, #0]
9000176a:	490d      	ldr	r1, [pc, #52]	; (900017a0 <BSP_LCD_ClearStringLine+0xc4>)
9000176c:	4613      	mov	r3, r2
9000176e:	005b      	lsls	r3, r3, #1
90001770:	4413      	add	r3, r2
90001772:	009b      	lsls	r3, r3, #2
90001774:	440b      	add	r3, r1
90001776:	68fa      	ldr	r2, [r7, #12]
90001778:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
9000177a:	4b08      	ldr	r3, [pc, #32]	; (9000179c <BSP_LCD_ClearStringLine+0xc0>)
9000177c:	681a      	ldr	r2, [r3, #0]
9000177e:	4908      	ldr	r1, [pc, #32]	; (900017a0 <BSP_LCD_ClearStringLine+0xc4>)
90001780:	4613      	mov	r3, r2
90001782:	005b      	lsls	r3, r3, #1
90001784:	4413      	add	r3, r2
90001786:	009b      	lsls	r3, r3, #2
90001788:	440b      	add	r3, r1
9000178a:	681b      	ldr	r3, [r3, #0]
9000178c:	4618      	mov	r0, r3
9000178e:	f7ff ff1b 	bl	900015c8 <BSP_LCD_SetTextColor>
}
90001792:	bf00      	nop
90001794:	3714      	adds	r7, #20
90001796:	46bd      	mov	sp, r7
90001798:	bd90      	pop	{r4, r7, pc}
9000179a:	bf00      	nop
9000179c:	20000160 	.word	0x20000160
900017a0:	20000164 	.word	0x20000164

900017a4 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
900017a4:	b590      	push	{r4, r7, lr}
900017a6:	b083      	sub	sp, #12
900017a8:	af00      	add	r7, sp, #0
900017aa:	4603      	mov	r3, r0
900017ac:	80fb      	strh	r3, [r7, #6]
900017ae:	460b      	mov	r3, r1
900017b0:	80bb      	strh	r3, [r7, #4]
900017b2:	4613      	mov	r3, r2
900017b4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
900017b6:	4b1b      	ldr	r3, [pc, #108]	; (90001824 <BSP_LCD_DisplayChar+0x80>)
900017b8:	681a      	ldr	r2, [r3, #0]
900017ba:	491b      	ldr	r1, [pc, #108]	; (90001828 <BSP_LCD_DisplayChar+0x84>)
900017bc:	4613      	mov	r3, r2
900017be:	005b      	lsls	r3, r3, #1
900017c0:	4413      	add	r3, r2
900017c2:	009b      	lsls	r3, r3, #2
900017c4:	440b      	add	r3, r1
900017c6:	3308      	adds	r3, #8
900017c8:	681b      	ldr	r3, [r3, #0]
900017ca:	6819      	ldr	r1, [r3, #0]
900017cc:	78fb      	ldrb	r3, [r7, #3]
900017ce:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
900017d2:	4b14      	ldr	r3, [pc, #80]	; (90001824 <BSP_LCD_DisplayChar+0x80>)
900017d4:	681a      	ldr	r2, [r3, #0]
900017d6:	4c14      	ldr	r4, [pc, #80]	; (90001828 <BSP_LCD_DisplayChar+0x84>)
900017d8:	4613      	mov	r3, r2
900017da:	005b      	lsls	r3, r3, #1
900017dc:	4413      	add	r3, r2
900017de:	009b      	lsls	r3, r3, #2
900017e0:	4423      	add	r3, r4
900017e2:	3308      	adds	r3, #8
900017e4:	681b      	ldr	r3, [r3, #0]
900017e6:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
900017e8:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
900017ec:	4b0d      	ldr	r3, [pc, #52]	; (90001824 <BSP_LCD_DisplayChar+0x80>)
900017ee:	681a      	ldr	r2, [r3, #0]
900017f0:	4c0d      	ldr	r4, [pc, #52]	; (90001828 <BSP_LCD_DisplayChar+0x84>)
900017f2:	4613      	mov	r3, r2
900017f4:	005b      	lsls	r3, r3, #1
900017f6:	4413      	add	r3, r2
900017f8:	009b      	lsls	r3, r3, #2
900017fa:	4423      	add	r3, r4
900017fc:	3308      	adds	r3, #8
900017fe:	681b      	ldr	r3, [r3, #0]
90001800:	889b      	ldrh	r3, [r3, #4]
90001802:	3307      	adds	r3, #7
90001804:	2b00      	cmp	r3, #0
90001806:	da00      	bge.n	9000180a <BSP_LCD_DisplayChar+0x66>
90001808:	3307      	adds	r3, #7
9000180a:	10db      	asrs	r3, r3, #3
9000180c:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
90001810:	18ca      	adds	r2, r1, r3
90001812:	88b9      	ldrh	r1, [r7, #4]
90001814:	88fb      	ldrh	r3, [r7, #6]
90001816:	4618      	mov	r0, r3
90001818:	f000 faa6 	bl	90001d68 <DrawChar>
}
9000181c:	bf00      	nop
9000181e:	370c      	adds	r7, #12
90001820:	46bd      	mov	sp, r7
90001822:	bd90      	pop	{r4, r7, pc}
90001824:	20000160 	.word	0x20000160
90001828:	20000164 	.word	0x20000164

9000182c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
9000182c:	b5b0      	push	{r4, r5, r7, lr}
9000182e:	b088      	sub	sp, #32
90001830:	af00      	add	r7, sp, #0
90001832:	60ba      	str	r2, [r7, #8]
90001834:	461a      	mov	r2, r3
90001836:	4603      	mov	r3, r0
90001838:	81fb      	strh	r3, [r7, #14]
9000183a:	460b      	mov	r3, r1
9000183c:	81bb      	strh	r3, [r7, #12]
9000183e:	4613      	mov	r3, r2
90001840:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
90001842:	2301      	movs	r3, #1
90001844:	83fb      	strh	r3, [r7, #30]
90001846:	2300      	movs	r3, #0
90001848:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
9000184a:	2300      	movs	r3, #0
9000184c:	61bb      	str	r3, [r7, #24]
9000184e:	2300      	movs	r3, #0
90001850:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
90001852:	68bb      	ldr	r3, [r7, #8]
90001854:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
90001856:	e002      	b.n	9000185e <BSP_LCD_DisplayStringAt+0x32>
90001858:	69bb      	ldr	r3, [r7, #24]
9000185a:	3301      	adds	r3, #1
9000185c:	61bb      	str	r3, [r7, #24]
9000185e:	697b      	ldr	r3, [r7, #20]
90001860:	1c5a      	adds	r2, r3, #1
90001862:	617a      	str	r2, [r7, #20]
90001864:	781b      	ldrb	r3, [r3, #0]
90001866:	2b00      	cmp	r3, #0
90001868:	d1f6      	bne.n	90001858 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
9000186a:	f7ff fe15 	bl	90001498 <BSP_LCD_GetXSize>
9000186e:	4601      	mov	r1, r0
90001870:	4b50      	ldr	r3, [pc, #320]	; (900019b4 <BSP_LCD_DisplayStringAt+0x188>)
90001872:	681a      	ldr	r2, [r3, #0]
90001874:	4850      	ldr	r0, [pc, #320]	; (900019b8 <BSP_LCD_DisplayStringAt+0x18c>)
90001876:	4613      	mov	r3, r2
90001878:	005b      	lsls	r3, r3, #1
9000187a:	4413      	add	r3, r2
9000187c:	009b      	lsls	r3, r3, #2
9000187e:	4403      	add	r3, r0
90001880:	3308      	adds	r3, #8
90001882:	681b      	ldr	r3, [r3, #0]
90001884:	889b      	ldrh	r3, [r3, #4]
90001886:	fbb1 f3f3 	udiv	r3, r1, r3
9000188a:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
9000188c:	79fb      	ldrb	r3, [r7, #7]
9000188e:	2b03      	cmp	r3, #3
90001890:	d01c      	beq.n	900018cc <BSP_LCD_DisplayStringAt+0xa0>
90001892:	2b03      	cmp	r3, #3
90001894:	dc33      	bgt.n	900018fe <BSP_LCD_DisplayStringAt+0xd2>
90001896:	2b01      	cmp	r3, #1
90001898:	d002      	beq.n	900018a0 <BSP_LCD_DisplayStringAt+0x74>
9000189a:	2b02      	cmp	r3, #2
9000189c:	d019      	beq.n	900018d2 <BSP_LCD_DisplayStringAt+0xa6>
9000189e:	e02e      	b.n	900018fe <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
900018a0:	693a      	ldr	r2, [r7, #16]
900018a2:	69bb      	ldr	r3, [r7, #24]
900018a4:	1ad1      	subs	r1, r2, r3
900018a6:	4b43      	ldr	r3, [pc, #268]	; (900019b4 <BSP_LCD_DisplayStringAt+0x188>)
900018a8:	681a      	ldr	r2, [r3, #0]
900018aa:	4843      	ldr	r0, [pc, #268]	; (900019b8 <BSP_LCD_DisplayStringAt+0x18c>)
900018ac:	4613      	mov	r3, r2
900018ae:	005b      	lsls	r3, r3, #1
900018b0:	4413      	add	r3, r2
900018b2:	009b      	lsls	r3, r3, #2
900018b4:	4403      	add	r3, r0
900018b6:	3308      	adds	r3, #8
900018b8:	681b      	ldr	r3, [r3, #0]
900018ba:	889b      	ldrh	r3, [r3, #4]
900018bc:	fb03 f301 	mul.w	r3, r3, r1
900018c0:	085b      	lsrs	r3, r3, #1
900018c2:	b29a      	uxth	r2, r3
900018c4:	89fb      	ldrh	r3, [r7, #14]
900018c6:	4413      	add	r3, r2
900018c8:	83fb      	strh	r3, [r7, #30]
      break;
900018ca:	e01b      	b.n	90001904 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
900018cc:	89fb      	ldrh	r3, [r7, #14]
900018ce:	83fb      	strh	r3, [r7, #30]
      break;
900018d0:	e018      	b.n	90001904 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
900018d2:	693a      	ldr	r2, [r7, #16]
900018d4:	69bb      	ldr	r3, [r7, #24]
900018d6:	1ad3      	subs	r3, r2, r3
900018d8:	b299      	uxth	r1, r3
900018da:	4b36      	ldr	r3, [pc, #216]	; (900019b4 <BSP_LCD_DisplayStringAt+0x188>)
900018dc:	681a      	ldr	r2, [r3, #0]
900018de:	4836      	ldr	r0, [pc, #216]	; (900019b8 <BSP_LCD_DisplayStringAt+0x18c>)
900018e0:	4613      	mov	r3, r2
900018e2:	005b      	lsls	r3, r3, #1
900018e4:	4413      	add	r3, r2
900018e6:	009b      	lsls	r3, r3, #2
900018e8:	4403      	add	r3, r0
900018ea:	3308      	adds	r3, #8
900018ec:	681b      	ldr	r3, [r3, #0]
900018ee:	889b      	ldrh	r3, [r3, #4]
900018f0:	fb11 f303 	smulbb	r3, r1, r3
900018f4:	b29a      	uxth	r2, r3
900018f6:	89fb      	ldrh	r3, [r7, #14]
900018f8:	1ad3      	subs	r3, r2, r3
900018fa:	83fb      	strh	r3, [r7, #30]
      break;
900018fc:	e002      	b.n	90001904 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
900018fe:	89fb      	ldrh	r3, [r7, #14]
90001900:	83fb      	strh	r3, [r7, #30]
      break;
90001902:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
90001904:	8bfb      	ldrh	r3, [r7, #30]
90001906:	2b00      	cmp	r3, #0
90001908:	d003      	beq.n	90001912 <BSP_LCD_DisplayStringAt+0xe6>
9000190a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
9000190e:	2b00      	cmp	r3, #0
90001910:	da1d      	bge.n	9000194e <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
90001912:	2301      	movs	r3, #1
90001914:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
90001916:	e01a      	b.n	9000194e <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
90001918:	68bb      	ldr	r3, [r7, #8]
9000191a:	781a      	ldrb	r2, [r3, #0]
9000191c:	89b9      	ldrh	r1, [r7, #12]
9000191e:	8bfb      	ldrh	r3, [r7, #30]
90001920:	4618      	mov	r0, r3
90001922:	f7ff ff3f 	bl	900017a4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
90001926:	4b23      	ldr	r3, [pc, #140]	; (900019b4 <BSP_LCD_DisplayStringAt+0x188>)
90001928:	681a      	ldr	r2, [r3, #0]
9000192a:	4923      	ldr	r1, [pc, #140]	; (900019b8 <BSP_LCD_DisplayStringAt+0x18c>)
9000192c:	4613      	mov	r3, r2
9000192e:	005b      	lsls	r3, r3, #1
90001930:	4413      	add	r3, r2
90001932:	009b      	lsls	r3, r3, #2
90001934:	440b      	add	r3, r1
90001936:	3308      	adds	r3, #8
90001938:	681b      	ldr	r3, [r3, #0]
9000193a:	889a      	ldrh	r2, [r3, #4]
9000193c:	8bfb      	ldrh	r3, [r7, #30]
9000193e:	4413      	add	r3, r2
90001940:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
90001942:	68bb      	ldr	r3, [r7, #8]
90001944:	3301      	adds	r3, #1
90001946:	60bb      	str	r3, [r7, #8]
    i++;
90001948:	8bbb      	ldrh	r3, [r7, #28]
9000194a:	3301      	adds	r3, #1
9000194c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
9000194e:	68bb      	ldr	r3, [r7, #8]
90001950:	781b      	ldrb	r3, [r3, #0]
90001952:	2b00      	cmp	r3, #0
90001954:	bf14      	ite	ne
90001956:	2301      	movne	r3, #1
90001958:	2300      	moveq	r3, #0
9000195a:	b2dc      	uxtb	r4, r3
9000195c:	f7ff fd9c 	bl	90001498 <BSP_LCD_GetXSize>
90001960:	8bb9      	ldrh	r1, [r7, #28]
90001962:	4b14      	ldr	r3, [pc, #80]	; (900019b4 <BSP_LCD_DisplayStringAt+0x188>)
90001964:	681a      	ldr	r2, [r3, #0]
90001966:	4d14      	ldr	r5, [pc, #80]	; (900019b8 <BSP_LCD_DisplayStringAt+0x18c>)
90001968:	4613      	mov	r3, r2
9000196a:	005b      	lsls	r3, r3, #1
9000196c:	4413      	add	r3, r2
9000196e:	009b      	lsls	r3, r3, #2
90001970:	442b      	add	r3, r5
90001972:	3308      	adds	r3, #8
90001974:	681b      	ldr	r3, [r3, #0]
90001976:	889b      	ldrh	r3, [r3, #4]
90001978:	fb03 f301 	mul.w	r3, r3, r1
9000197c:	1ac3      	subs	r3, r0, r3
9000197e:	b299      	uxth	r1, r3
90001980:	4b0c      	ldr	r3, [pc, #48]	; (900019b4 <BSP_LCD_DisplayStringAt+0x188>)
90001982:	681a      	ldr	r2, [r3, #0]
90001984:	480c      	ldr	r0, [pc, #48]	; (900019b8 <BSP_LCD_DisplayStringAt+0x18c>)
90001986:	4613      	mov	r3, r2
90001988:	005b      	lsls	r3, r3, #1
9000198a:	4413      	add	r3, r2
9000198c:	009b      	lsls	r3, r3, #2
9000198e:	4403      	add	r3, r0
90001990:	3308      	adds	r3, #8
90001992:	681b      	ldr	r3, [r3, #0]
90001994:	889b      	ldrh	r3, [r3, #4]
90001996:	4299      	cmp	r1, r3
90001998:	bf2c      	ite	cs
9000199a:	2301      	movcs	r3, #1
9000199c:	2300      	movcc	r3, #0
9000199e:	b2db      	uxtb	r3, r3
900019a0:	4023      	ands	r3, r4
900019a2:	b2db      	uxtb	r3, r3
900019a4:	2b00      	cmp	r3, #0
900019a6:	d1b7      	bne.n	90001918 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
900019a8:	bf00      	nop
900019aa:	bf00      	nop
900019ac:	3720      	adds	r7, #32
900019ae:	46bd      	mov	sp, r7
900019b0:	bdb0      	pop	{r4, r5, r7, pc}
900019b2:	bf00      	nop
900019b4:	20000160 	.word	0x20000160
900019b8:	20000164 	.word	0x20000164

900019bc <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
900019bc:	b5b0      	push	{r4, r5, r7, lr}
900019be:	b082      	sub	sp, #8
900019c0:	af00      	add	r7, sp, #0
900019c2:	4603      	mov	r3, r0
900019c4:	603a      	str	r2, [r7, #0]
900019c6:	80fb      	strh	r3, [r7, #6]
900019c8:	460b      	mov	r3, r1
900019ca:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900019cc:	4b1d      	ldr	r3, [pc, #116]	; (90001a44 <BSP_LCD_DrawPixel+0x88>)
900019ce:	681b      	ldr	r3, [r3, #0]
900019d0:	4a1d      	ldr	r2, [pc, #116]	; (90001a48 <BSP_LCD_DrawPixel+0x8c>)
900019d2:	2134      	movs	r1, #52	; 0x34
900019d4:	fb01 f303 	mul.w	r3, r1, r3
900019d8:	4413      	add	r3, r2
900019da:	3348      	adds	r3, #72	; 0x48
900019dc:	681b      	ldr	r3, [r3, #0]
900019de:	2b02      	cmp	r3, #2
900019e0:	d116      	bne.n	90001a10 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
900019e2:	4b18      	ldr	r3, [pc, #96]	; (90001a44 <BSP_LCD_DrawPixel+0x88>)
900019e4:	681b      	ldr	r3, [r3, #0]
900019e6:	4a18      	ldr	r2, [pc, #96]	; (90001a48 <BSP_LCD_DrawPixel+0x8c>)
900019e8:	2134      	movs	r1, #52	; 0x34
900019ea:	fb01 f303 	mul.w	r3, r1, r3
900019ee:	4413      	add	r3, r2
900019f0:	335c      	adds	r3, #92	; 0x5c
900019f2:	681c      	ldr	r4, [r3, #0]
900019f4:	88bd      	ldrh	r5, [r7, #4]
900019f6:	f7ff fd4f 	bl	90001498 <BSP_LCD_GetXSize>
900019fa:	4603      	mov	r3, r0
900019fc:	fb03 f205 	mul.w	r2, r3, r5
90001a00:	88fb      	ldrh	r3, [r7, #6]
90001a02:	4413      	add	r3, r2
90001a04:	005b      	lsls	r3, r3, #1
90001a06:	4423      	add	r3, r4
90001a08:	683a      	ldr	r2, [r7, #0]
90001a0a:	b292      	uxth	r2, r2
90001a0c:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
90001a0e:	e015      	b.n	90001a3c <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
90001a10:	4b0c      	ldr	r3, [pc, #48]	; (90001a44 <BSP_LCD_DrawPixel+0x88>)
90001a12:	681b      	ldr	r3, [r3, #0]
90001a14:	4a0c      	ldr	r2, [pc, #48]	; (90001a48 <BSP_LCD_DrawPixel+0x8c>)
90001a16:	2134      	movs	r1, #52	; 0x34
90001a18:	fb01 f303 	mul.w	r3, r1, r3
90001a1c:	4413      	add	r3, r2
90001a1e:	335c      	adds	r3, #92	; 0x5c
90001a20:	681c      	ldr	r4, [r3, #0]
90001a22:	88bd      	ldrh	r5, [r7, #4]
90001a24:	f7ff fd38 	bl	90001498 <BSP_LCD_GetXSize>
90001a28:	4603      	mov	r3, r0
90001a2a:	fb03 f205 	mul.w	r2, r3, r5
90001a2e:	88fb      	ldrh	r3, [r7, #6]
90001a30:	4413      	add	r3, r2
90001a32:	009b      	lsls	r3, r3, #2
90001a34:	4423      	add	r3, r4
90001a36:	461a      	mov	r2, r3
90001a38:	683b      	ldr	r3, [r7, #0]
90001a3a:	6013      	str	r3, [r2, #0]
}
90001a3c:	bf00      	nop
90001a3e:	3708      	adds	r7, #8
90001a40:	46bd      	mov	sp, r7
90001a42:	bdb0      	pop	{r4, r5, r7, pc}
90001a44:	20000160 	.word	0x20000160
90001a48:	200002c8 	.word	0x200002c8

90001a4c <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
90001a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90001a50:	b086      	sub	sp, #24
90001a52:	af02      	add	r7, sp, #8
90001a54:	4604      	mov	r4, r0
90001a56:	4608      	mov	r0, r1
90001a58:	4611      	mov	r1, r2
90001a5a:	461a      	mov	r2, r3
90001a5c:	4623      	mov	r3, r4
90001a5e:	80fb      	strh	r3, [r7, #6]
90001a60:	4603      	mov	r3, r0
90001a62:	80bb      	strh	r3, [r7, #4]
90001a64:	460b      	mov	r3, r1
90001a66:	807b      	strh	r3, [r7, #2]
90001a68:	4613      	mov	r3, r2
90001a6a:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
90001a6c:	2300      	movs	r3, #0
90001a6e:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001a70:	4b30      	ldr	r3, [pc, #192]	; (90001b34 <BSP_LCD_FillRect+0xe8>)
90001a72:	681a      	ldr	r2, [r3, #0]
90001a74:	4930      	ldr	r1, [pc, #192]	; (90001b38 <BSP_LCD_FillRect+0xec>)
90001a76:	4613      	mov	r3, r2
90001a78:	005b      	lsls	r3, r3, #1
90001a7a:	4413      	add	r3, r2
90001a7c:	009b      	lsls	r3, r3, #2
90001a7e:	440b      	add	r3, r1
90001a80:	681b      	ldr	r3, [r3, #0]
90001a82:	4618      	mov	r0, r3
90001a84:	f7ff fda0 	bl	900015c8 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90001a88:	4b2a      	ldr	r3, [pc, #168]	; (90001b34 <BSP_LCD_FillRect+0xe8>)
90001a8a:	681b      	ldr	r3, [r3, #0]
90001a8c:	4a2b      	ldr	r2, [pc, #172]	; (90001b3c <BSP_LCD_FillRect+0xf0>)
90001a8e:	2134      	movs	r1, #52	; 0x34
90001a90:	fb01 f303 	mul.w	r3, r1, r3
90001a94:	4413      	add	r3, r2
90001a96:	3348      	adds	r3, #72	; 0x48
90001a98:	681b      	ldr	r3, [r3, #0]
90001a9a:	2b02      	cmp	r3, #2
90001a9c:	d114      	bne.n	90001ac8 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001a9e:	4b25      	ldr	r3, [pc, #148]	; (90001b34 <BSP_LCD_FillRect+0xe8>)
90001aa0:	681b      	ldr	r3, [r3, #0]
90001aa2:	4a26      	ldr	r2, [pc, #152]	; (90001b3c <BSP_LCD_FillRect+0xf0>)
90001aa4:	2134      	movs	r1, #52	; 0x34
90001aa6:	fb01 f303 	mul.w	r3, r1, r3
90001aaa:	4413      	add	r3, r2
90001aac:	335c      	adds	r3, #92	; 0x5c
90001aae:	681c      	ldr	r4, [r3, #0]
90001ab0:	f7ff fcf2 	bl	90001498 <BSP_LCD_GetXSize>
90001ab4:	4602      	mov	r2, r0
90001ab6:	88bb      	ldrh	r3, [r7, #4]
90001ab8:	fb03 f202 	mul.w	r2, r3, r2
90001abc:	88fb      	ldrh	r3, [r7, #6]
90001abe:	4413      	add	r3, r2
90001ac0:	005b      	lsls	r3, r3, #1
90001ac2:	4423      	add	r3, r4
90001ac4:	60fb      	str	r3, [r7, #12]
90001ac6:	e013      	b.n	90001af0 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001ac8:	4b1a      	ldr	r3, [pc, #104]	; (90001b34 <BSP_LCD_FillRect+0xe8>)
90001aca:	681b      	ldr	r3, [r3, #0]
90001acc:	4a1b      	ldr	r2, [pc, #108]	; (90001b3c <BSP_LCD_FillRect+0xf0>)
90001ace:	2134      	movs	r1, #52	; 0x34
90001ad0:	fb01 f303 	mul.w	r3, r1, r3
90001ad4:	4413      	add	r3, r2
90001ad6:	335c      	adds	r3, #92	; 0x5c
90001ad8:	681c      	ldr	r4, [r3, #0]
90001ada:	f7ff fcdd 	bl	90001498 <BSP_LCD_GetXSize>
90001ade:	4602      	mov	r2, r0
90001ae0:	88bb      	ldrh	r3, [r7, #4]
90001ae2:	fb03 f202 	mul.w	r2, r3, r2
90001ae6:	88fb      	ldrh	r3, [r7, #6]
90001ae8:	4413      	add	r3, r2
90001aea:	009b      	lsls	r3, r3, #2
90001aec:	4423      	add	r3, r4
90001aee:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
90001af0:	4b10      	ldr	r3, [pc, #64]	; (90001b34 <BSP_LCD_FillRect+0xe8>)
90001af2:	681c      	ldr	r4, [r3, #0]
90001af4:	68fd      	ldr	r5, [r7, #12]
90001af6:	887e      	ldrh	r6, [r7, #2]
90001af8:	f8b7 8000 	ldrh.w	r8, [r7]
90001afc:	f7ff fccc 	bl	90001498 <BSP_LCD_GetXSize>
90001b00:	4602      	mov	r2, r0
90001b02:	887b      	ldrh	r3, [r7, #2]
90001b04:	1ad1      	subs	r1, r2, r3
90001b06:	4b0b      	ldr	r3, [pc, #44]	; (90001b34 <BSP_LCD_FillRect+0xe8>)
90001b08:	681a      	ldr	r2, [r3, #0]
90001b0a:	480b      	ldr	r0, [pc, #44]	; (90001b38 <BSP_LCD_FillRect+0xec>)
90001b0c:	4613      	mov	r3, r2
90001b0e:	005b      	lsls	r3, r3, #1
90001b10:	4413      	add	r3, r2
90001b12:	009b      	lsls	r3, r3, #2
90001b14:	4403      	add	r3, r0
90001b16:	681b      	ldr	r3, [r3, #0]
90001b18:	9301      	str	r3, [sp, #4]
90001b1a:	9100      	str	r1, [sp, #0]
90001b1c:	4643      	mov	r3, r8
90001b1e:	4632      	mov	r2, r6
90001b20:	4629      	mov	r1, r5
90001b22:	4620      	mov	r0, r4
90001b24:	f000 f9d8 	bl	90001ed8 <LL_FillBuffer>
}
90001b28:	bf00      	nop
90001b2a:	3710      	adds	r7, #16
90001b2c:	46bd      	mov	sp, r7
90001b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90001b32:	bf00      	nop
90001b34:	20000160 	.word	0x20000160
90001b38:	20000164 	.word	0x20000164
90001b3c:	200002c8 	.word	0x200002c8

90001b40 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
90001b40:	b580      	push	{r7, lr}
90001b42:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
90001b44:	4b0a      	ldr	r3, [pc, #40]	; (90001b70 <BSP_LCD_DisplayOn+0x30>)
90001b46:	681b      	ldr	r3, [r3, #0]
90001b48:	699a      	ldr	r2, [r3, #24]
90001b4a:	4b09      	ldr	r3, [pc, #36]	; (90001b70 <BSP_LCD_DisplayOn+0x30>)
90001b4c:	681b      	ldr	r3, [r3, #0]
90001b4e:	f042 0201 	orr.w	r2, r2, #1
90001b52:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
90001b54:	2201      	movs	r2, #1
90001b56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
90001b5a:	4806      	ldr	r0, [pc, #24]	; (90001b74 <BSP_LCD_DisplayOn+0x34>)
90001b5c:	f001 fdf2 	bl	90003744 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
90001b60:	2201      	movs	r2, #1
90001b62:	2108      	movs	r1, #8
90001b64:	4804      	ldr	r0, [pc, #16]	; (90001b78 <BSP_LCD_DisplayOn+0x38>)
90001b66:	f001 fded 	bl	90003744 <HAL_GPIO_WritePin>
}
90001b6a:	bf00      	nop
90001b6c:	bd80      	pop	{r7, pc}
90001b6e:	bf00      	nop
90001b70:	200002c8 	.word	0x200002c8
90001b74:	40022000 	.word	0x40022000
90001b78:	40022800 	.word	0x40022800

90001b7c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
90001b7c:	b580      	push	{r7, lr}
90001b7e:	b090      	sub	sp, #64	; 0x40
90001b80:	af00      	add	r7, sp, #0
90001b82:	6078      	str	r0, [r7, #4]
90001b84:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
90001b86:	4b64      	ldr	r3, [pc, #400]	; (90001d18 <BSP_LCD_MspInit+0x19c>)
90001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001b8a:	4a63      	ldr	r2, [pc, #396]	; (90001d18 <BSP_LCD_MspInit+0x19c>)
90001b8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
90001b90:	6453      	str	r3, [r2, #68]	; 0x44
90001b92:	4b61      	ldr	r3, [pc, #388]	; (90001d18 <BSP_LCD_MspInit+0x19c>)
90001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001b96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
90001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
90001b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
90001b9e:	4b5e      	ldr	r3, [pc, #376]	; (90001d18 <BSP_LCD_MspInit+0x19c>)
90001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001ba2:	4a5d      	ldr	r2, [pc, #372]	; (90001d18 <BSP_LCD_MspInit+0x19c>)
90001ba4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
90001ba8:	6313      	str	r3, [r2, #48]	; 0x30
90001baa:	4b5b      	ldr	r3, [pc, #364]	; (90001d18 <BSP_LCD_MspInit+0x19c>)
90001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001bae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
90001bb2:	627b      	str	r3, [r7, #36]	; 0x24
90001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
90001bb6:	4b58      	ldr	r3, [pc, #352]	; (90001d18 <BSP_LCD_MspInit+0x19c>)
90001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001bba:	4a57      	ldr	r2, [pc, #348]	; (90001d18 <BSP_LCD_MspInit+0x19c>)
90001bbc:	f043 0310 	orr.w	r3, r3, #16
90001bc0:	6313      	str	r3, [r2, #48]	; 0x30
90001bc2:	4b55      	ldr	r3, [pc, #340]	; (90001d18 <BSP_LCD_MspInit+0x19c>)
90001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001bc6:	f003 0310 	and.w	r3, r3, #16
90001bca:	623b      	str	r3, [r7, #32]
90001bcc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90001bce:	4b52      	ldr	r3, [pc, #328]	; (90001d18 <BSP_LCD_MspInit+0x19c>)
90001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001bd2:	4a51      	ldr	r2, [pc, #324]	; (90001d18 <BSP_LCD_MspInit+0x19c>)
90001bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90001bd8:	6313      	str	r3, [r2, #48]	; 0x30
90001bda:	4b4f      	ldr	r3, [pc, #316]	; (90001d18 <BSP_LCD_MspInit+0x19c>)
90001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
90001be2:	61fb      	str	r3, [r7, #28]
90001be4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
90001be6:	4b4c      	ldr	r3, [pc, #304]	; (90001d18 <BSP_LCD_MspInit+0x19c>)
90001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001bea:	4a4b      	ldr	r2, [pc, #300]	; (90001d18 <BSP_LCD_MspInit+0x19c>)
90001bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90001bf0:	6313      	str	r3, [r2, #48]	; 0x30
90001bf2:	4b49      	ldr	r3, [pc, #292]	; (90001d18 <BSP_LCD_MspInit+0x19c>)
90001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
90001bfa:	61bb      	str	r3, [r7, #24]
90001bfc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
90001bfe:	4b46      	ldr	r3, [pc, #280]	; (90001d18 <BSP_LCD_MspInit+0x19c>)
90001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001c02:	4a45      	ldr	r2, [pc, #276]	; (90001d18 <BSP_LCD_MspInit+0x19c>)
90001c04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
90001c08:	6313      	str	r3, [r2, #48]	; 0x30
90001c0a:	4b43      	ldr	r3, [pc, #268]	; (90001d18 <BSP_LCD_MspInit+0x19c>)
90001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001c0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
90001c12:	617b      	str	r3, [r7, #20]
90001c14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
90001c16:	4b40      	ldr	r3, [pc, #256]	; (90001d18 <BSP_LCD_MspInit+0x19c>)
90001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001c1a:	4a3f      	ldr	r2, [pc, #252]	; (90001d18 <BSP_LCD_MspInit+0x19c>)
90001c1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
90001c20:	6313      	str	r3, [r2, #48]	; 0x30
90001c22:	4b3d      	ldr	r3, [pc, #244]	; (90001d18 <BSP_LCD_MspInit+0x19c>)
90001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
90001c2a:	613b      	str	r3, [r7, #16]
90001c2c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
90001c2e:	4b3a      	ldr	r3, [pc, #232]	; (90001d18 <BSP_LCD_MspInit+0x19c>)
90001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001c32:	4a39      	ldr	r2, [pc, #228]	; (90001d18 <BSP_LCD_MspInit+0x19c>)
90001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90001c38:	6313      	str	r3, [r2, #48]	; 0x30
90001c3a:	4b37      	ldr	r3, [pc, #220]	; (90001d18 <BSP_LCD_MspInit+0x19c>)
90001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
90001c42:	60fb      	str	r3, [r7, #12]
90001c44:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
90001c46:	4b34      	ldr	r3, [pc, #208]	; (90001d18 <BSP_LCD_MspInit+0x19c>)
90001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001c4a:	4a33      	ldr	r2, [pc, #204]	; (90001d18 <BSP_LCD_MspInit+0x19c>)
90001c4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
90001c50:	6313      	str	r3, [r2, #48]	; 0x30
90001c52:	4b31      	ldr	r3, [pc, #196]	; (90001d18 <BSP_LCD_MspInit+0x19c>)
90001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
90001c5a:	60bb      	str	r3, [r7, #8]
90001c5c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
90001c5e:	2310      	movs	r3, #16
90001c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001c62:	2302      	movs	r3, #2
90001c64:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001c66:	2300      	movs	r3, #0
90001c68:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
90001c6a:	2302      	movs	r3, #2
90001c6c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
90001c6e:	230e      	movs	r3, #14
90001c70:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90001c72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001c76:	4619      	mov	r1, r3
90001c78:	4828      	ldr	r0, [pc, #160]	; (90001d1c <BSP_LCD_MspInit+0x1a0>)
90001c7a:	f001 fbb7 	bl	900033ec <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
90001c7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001c84:	2302      	movs	r3, #2
90001c86:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
90001c88:	2309      	movs	r3, #9
90001c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90001c8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001c90:	4619      	mov	r1, r3
90001c92:	4823      	ldr	r0, [pc, #140]	; (90001d20 <BSP_LCD_MspInit+0x1a4>)
90001c94:	f001 fbaa 	bl	900033ec <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
90001c98:	f44f 4366 	mov.w	r3, #58880	; 0xe600
90001c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001c9e:	2302      	movs	r3, #2
90001ca0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90001ca2:	230e      	movs	r3, #14
90001ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90001ca6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001caa:	4619      	mov	r1, r3
90001cac:	481d      	ldr	r0, [pc, #116]	; (90001d24 <BSP_LCD_MspInit+0x1a8>)
90001cae:	f001 fb9d 	bl	900033ec <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
90001cb2:	f64e 73ff 	movw	r3, #61439	; 0xefff
90001cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001cb8:	2302      	movs	r3, #2
90001cba:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90001cbc:	230e      	movs	r3, #14
90001cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
90001cc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001cc4:	4619      	mov	r1, r3
90001cc6:	4818      	ldr	r0, [pc, #96]	; (90001d28 <BSP_LCD_MspInit+0x1ac>)
90001cc8:	f001 fb90 	bl	900033ec <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
90001ccc:	23f7      	movs	r3, #247	; 0xf7
90001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001cd0:	2302      	movs	r3, #2
90001cd2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90001cd4:	230e      	movs	r3, #14
90001cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
90001cd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001cdc:	4619      	mov	r1, r3
90001cde:	4813      	ldr	r0, [pc, #76]	; (90001d2c <BSP_LCD_MspInit+0x1b0>)
90001ce0:	f001 fb84 	bl	900033ec <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
90001ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90001ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
90001cea:	2301      	movs	r3, #1
90001cec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
90001cee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001cf2:	4619      	mov	r1, r3
90001cf4:	480b      	ldr	r0, [pc, #44]	; (90001d24 <BSP_LCD_MspInit+0x1a8>)
90001cf6:	f001 fb79 	bl	900033ec <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
90001cfa:	2308      	movs	r3, #8
90001cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
90001cfe:	2301      	movs	r3, #1
90001d00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
90001d02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001d06:	4619      	mov	r1, r3
90001d08:	4808      	ldr	r0, [pc, #32]	; (90001d2c <BSP_LCD_MspInit+0x1b0>)
90001d0a:	f001 fb6f 	bl	900033ec <HAL_GPIO_Init>
}
90001d0e:	bf00      	nop
90001d10:	3740      	adds	r7, #64	; 0x40
90001d12:	46bd      	mov	sp, r7
90001d14:	bd80      	pop	{r7, pc}
90001d16:	bf00      	nop
90001d18:	40023800 	.word	0x40023800
90001d1c:	40021000 	.word	0x40021000
90001d20:	40021800 	.word	0x40021800
90001d24:	40022000 	.word	0x40022000
90001d28:	40022400 	.word	0x40022400
90001d2c:	40022800 	.word	0x40022800

90001d30 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
90001d30:	b580      	push	{r7, lr}
90001d32:	b082      	sub	sp, #8
90001d34:	af00      	add	r7, sp, #0
90001d36:	6078      	str	r0, [r7, #4]
90001d38:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90001d3a:	4b0a      	ldr	r3, [pc, #40]	; (90001d64 <BSP_LCD_ClockConfig+0x34>)
90001d3c:	2208      	movs	r2, #8
90001d3e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
90001d40:	4b08      	ldr	r3, [pc, #32]	; (90001d64 <BSP_LCD_ClockConfig+0x34>)
90001d42:	22c0      	movs	r2, #192	; 0xc0
90001d44:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
90001d46:	4b07      	ldr	r3, [pc, #28]	; (90001d64 <BSP_LCD_ClockConfig+0x34>)
90001d48:	2205      	movs	r2, #5
90001d4a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
90001d4c:	4b05      	ldr	r3, [pc, #20]	; (90001d64 <BSP_LCD_ClockConfig+0x34>)
90001d4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
90001d52:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
90001d54:	4803      	ldr	r0, [pc, #12]	; (90001d64 <BSP_LCD_ClockConfig+0x34>)
90001d56:	f003 f991 	bl	9000507c <HAL_RCCEx_PeriphCLKConfig>
}
90001d5a:	bf00      	nop
90001d5c:	3708      	adds	r7, #8
90001d5e:	46bd      	mov	sp, r7
90001d60:	bd80      	pop	{r7, pc}
90001d62:	bf00      	nop
90001d64:	2000017c 	.word	0x2000017c

90001d68 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
90001d68:	b580      	push	{r7, lr}
90001d6a:	b088      	sub	sp, #32
90001d6c:	af00      	add	r7, sp, #0
90001d6e:	4603      	mov	r3, r0
90001d70:	603a      	str	r2, [r7, #0]
90001d72:	80fb      	strh	r3, [r7, #6]
90001d74:	460b      	mov	r3, r1
90001d76:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
90001d78:	2300      	movs	r3, #0
90001d7a:	61fb      	str	r3, [r7, #28]
90001d7c:	2300      	movs	r3, #0
90001d7e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
90001d80:	4b53      	ldr	r3, [pc, #332]	; (90001ed0 <DrawChar+0x168>)
90001d82:	681a      	ldr	r2, [r3, #0]
90001d84:	4953      	ldr	r1, [pc, #332]	; (90001ed4 <DrawChar+0x16c>)
90001d86:	4613      	mov	r3, r2
90001d88:	005b      	lsls	r3, r3, #1
90001d8a:	4413      	add	r3, r2
90001d8c:	009b      	lsls	r3, r3, #2
90001d8e:	440b      	add	r3, r1
90001d90:	3308      	adds	r3, #8
90001d92:	681b      	ldr	r3, [r3, #0]
90001d94:	88db      	ldrh	r3, [r3, #6]
90001d96:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
90001d98:	4b4d      	ldr	r3, [pc, #308]	; (90001ed0 <DrawChar+0x168>)
90001d9a:	681a      	ldr	r2, [r3, #0]
90001d9c:	494d      	ldr	r1, [pc, #308]	; (90001ed4 <DrawChar+0x16c>)
90001d9e:	4613      	mov	r3, r2
90001da0:	005b      	lsls	r3, r3, #1
90001da2:	4413      	add	r3, r2
90001da4:	009b      	lsls	r3, r3, #2
90001da6:	440b      	add	r3, r1
90001da8:	3308      	adds	r3, #8
90001daa:	681b      	ldr	r3, [r3, #0]
90001dac:	889b      	ldrh	r3, [r3, #4]
90001dae:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
90001db0:	8a3b      	ldrh	r3, [r7, #16]
90001db2:	3307      	adds	r3, #7
90001db4:	2b00      	cmp	r3, #0
90001db6:	da00      	bge.n	90001dba <DrawChar+0x52>
90001db8:	3307      	adds	r3, #7
90001dba:	10db      	asrs	r3, r3, #3
90001dbc:	b2db      	uxtb	r3, r3
90001dbe:	00db      	lsls	r3, r3, #3
90001dc0:	b2da      	uxtb	r2, r3
90001dc2:	8a3b      	ldrh	r3, [r7, #16]
90001dc4:	b2db      	uxtb	r3, r3
90001dc6:	1ad3      	subs	r3, r2, r3
90001dc8:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
90001dca:	2300      	movs	r3, #0
90001dcc:	61fb      	str	r3, [r7, #28]
90001dce:	e076      	b.n	90001ebe <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
90001dd0:	8a3b      	ldrh	r3, [r7, #16]
90001dd2:	3307      	adds	r3, #7
90001dd4:	2b00      	cmp	r3, #0
90001dd6:	da00      	bge.n	90001dda <DrawChar+0x72>
90001dd8:	3307      	adds	r3, #7
90001dda:	10db      	asrs	r3, r3, #3
90001ddc:	461a      	mov	r2, r3
90001dde:	69fb      	ldr	r3, [r7, #28]
90001de0:	fb03 f302 	mul.w	r3, r3, r2
90001de4:	683a      	ldr	r2, [r7, #0]
90001de6:	4413      	add	r3, r2
90001de8:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
90001dea:	8a3b      	ldrh	r3, [r7, #16]
90001dec:	3307      	adds	r3, #7
90001dee:	2b00      	cmp	r3, #0
90001df0:	da00      	bge.n	90001df4 <DrawChar+0x8c>
90001df2:	3307      	adds	r3, #7
90001df4:	10db      	asrs	r3, r3, #3
90001df6:	2b01      	cmp	r3, #1
90001df8:	d002      	beq.n	90001e00 <DrawChar+0x98>
90001dfa:	2b02      	cmp	r3, #2
90001dfc:	d004      	beq.n	90001e08 <DrawChar+0xa0>
90001dfe:	e00c      	b.n	90001e1a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
90001e00:	68bb      	ldr	r3, [r7, #8]
90001e02:	781b      	ldrb	r3, [r3, #0]
90001e04:	617b      	str	r3, [r7, #20]
      break;
90001e06:	e016      	b.n	90001e36 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
90001e08:	68bb      	ldr	r3, [r7, #8]
90001e0a:	781b      	ldrb	r3, [r3, #0]
90001e0c:	021b      	lsls	r3, r3, #8
90001e0e:	68ba      	ldr	r2, [r7, #8]
90001e10:	3201      	adds	r2, #1
90001e12:	7812      	ldrb	r2, [r2, #0]
90001e14:	4313      	orrs	r3, r2
90001e16:	617b      	str	r3, [r7, #20]
      break;
90001e18:	e00d      	b.n	90001e36 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
90001e1a:	68bb      	ldr	r3, [r7, #8]
90001e1c:	781b      	ldrb	r3, [r3, #0]
90001e1e:	041a      	lsls	r2, r3, #16
90001e20:	68bb      	ldr	r3, [r7, #8]
90001e22:	3301      	adds	r3, #1
90001e24:	781b      	ldrb	r3, [r3, #0]
90001e26:	021b      	lsls	r3, r3, #8
90001e28:	4313      	orrs	r3, r2
90001e2a:	68ba      	ldr	r2, [r7, #8]
90001e2c:	3202      	adds	r2, #2
90001e2e:	7812      	ldrb	r2, [r2, #0]
90001e30:	4313      	orrs	r3, r2
90001e32:	617b      	str	r3, [r7, #20]
      break;
90001e34:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
90001e36:	2300      	movs	r3, #0
90001e38:	61bb      	str	r3, [r7, #24]
90001e3a:	e036      	b.n	90001eaa <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
90001e3c:	8a3a      	ldrh	r2, [r7, #16]
90001e3e:	69bb      	ldr	r3, [r7, #24]
90001e40:	1ad2      	subs	r2, r2, r3
90001e42:	7bfb      	ldrb	r3, [r7, #15]
90001e44:	4413      	add	r3, r2
90001e46:	3b01      	subs	r3, #1
90001e48:	2201      	movs	r2, #1
90001e4a:	fa02 f303 	lsl.w	r3, r2, r3
90001e4e:	461a      	mov	r2, r3
90001e50:	697b      	ldr	r3, [r7, #20]
90001e52:	4013      	ands	r3, r2
90001e54:	2b00      	cmp	r3, #0
90001e56:	d012      	beq.n	90001e7e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
90001e58:	69bb      	ldr	r3, [r7, #24]
90001e5a:	b29a      	uxth	r2, r3
90001e5c:	88fb      	ldrh	r3, [r7, #6]
90001e5e:	4413      	add	r3, r2
90001e60:	b298      	uxth	r0, r3
90001e62:	4b1b      	ldr	r3, [pc, #108]	; (90001ed0 <DrawChar+0x168>)
90001e64:	681a      	ldr	r2, [r3, #0]
90001e66:	491b      	ldr	r1, [pc, #108]	; (90001ed4 <DrawChar+0x16c>)
90001e68:	4613      	mov	r3, r2
90001e6a:	005b      	lsls	r3, r3, #1
90001e6c:	4413      	add	r3, r2
90001e6e:	009b      	lsls	r3, r3, #2
90001e70:	440b      	add	r3, r1
90001e72:	681a      	ldr	r2, [r3, #0]
90001e74:	88bb      	ldrh	r3, [r7, #4]
90001e76:	4619      	mov	r1, r3
90001e78:	f7ff fda0 	bl	900019bc <BSP_LCD_DrawPixel>
90001e7c:	e012      	b.n	90001ea4 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
90001e7e:	69bb      	ldr	r3, [r7, #24]
90001e80:	b29a      	uxth	r2, r3
90001e82:	88fb      	ldrh	r3, [r7, #6]
90001e84:	4413      	add	r3, r2
90001e86:	b298      	uxth	r0, r3
90001e88:	4b11      	ldr	r3, [pc, #68]	; (90001ed0 <DrawChar+0x168>)
90001e8a:	681a      	ldr	r2, [r3, #0]
90001e8c:	4911      	ldr	r1, [pc, #68]	; (90001ed4 <DrawChar+0x16c>)
90001e8e:	4613      	mov	r3, r2
90001e90:	005b      	lsls	r3, r3, #1
90001e92:	4413      	add	r3, r2
90001e94:	009b      	lsls	r3, r3, #2
90001e96:	440b      	add	r3, r1
90001e98:	3304      	adds	r3, #4
90001e9a:	681a      	ldr	r2, [r3, #0]
90001e9c:	88bb      	ldrh	r3, [r7, #4]
90001e9e:	4619      	mov	r1, r3
90001ea0:	f7ff fd8c 	bl	900019bc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
90001ea4:	69bb      	ldr	r3, [r7, #24]
90001ea6:	3301      	adds	r3, #1
90001ea8:	61bb      	str	r3, [r7, #24]
90001eaa:	8a3b      	ldrh	r3, [r7, #16]
90001eac:	69ba      	ldr	r2, [r7, #24]
90001eae:	429a      	cmp	r2, r3
90001eb0:	d3c4      	bcc.n	90001e3c <DrawChar+0xd4>
      } 
    }
    Ypos++;
90001eb2:	88bb      	ldrh	r3, [r7, #4]
90001eb4:	3301      	adds	r3, #1
90001eb6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
90001eb8:	69fb      	ldr	r3, [r7, #28]
90001eba:	3301      	adds	r3, #1
90001ebc:	61fb      	str	r3, [r7, #28]
90001ebe:	8a7b      	ldrh	r3, [r7, #18]
90001ec0:	69fa      	ldr	r2, [r7, #28]
90001ec2:	429a      	cmp	r2, r3
90001ec4:	d384      	bcc.n	90001dd0 <DrawChar+0x68>
  }
}
90001ec6:	bf00      	nop
90001ec8:	bf00      	nop
90001eca:	3720      	adds	r7, #32
90001ecc:	46bd      	mov	sp, r7
90001ece:	bd80      	pop	{r7, pc}
90001ed0:	20000160 	.word	0x20000160
90001ed4:	20000164 	.word	0x20000164

90001ed8 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
90001ed8:	b580      	push	{r7, lr}
90001eda:	b086      	sub	sp, #24
90001edc:	af02      	add	r7, sp, #8
90001ede:	60f8      	str	r0, [r7, #12]
90001ee0:	60b9      	str	r1, [r7, #8]
90001ee2:	607a      	str	r2, [r7, #4]
90001ee4:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
90001ee6:	4b1e      	ldr	r3, [pc, #120]	; (90001f60 <LL_FillBuffer+0x88>)
90001ee8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
90001eec:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90001eee:	4b1d      	ldr	r3, [pc, #116]	; (90001f64 <LL_FillBuffer+0x8c>)
90001ef0:	681b      	ldr	r3, [r3, #0]
90001ef2:	4a1d      	ldr	r2, [pc, #116]	; (90001f68 <LL_FillBuffer+0x90>)
90001ef4:	2134      	movs	r1, #52	; 0x34
90001ef6:	fb01 f303 	mul.w	r3, r1, r3
90001efa:	4413      	add	r3, r2
90001efc:	3348      	adds	r3, #72	; 0x48
90001efe:	681b      	ldr	r3, [r3, #0]
90001f00:	2b02      	cmp	r3, #2
90001f02:	d103      	bne.n	90001f0c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
90001f04:	4b16      	ldr	r3, [pc, #88]	; (90001f60 <LL_FillBuffer+0x88>)
90001f06:	2202      	movs	r2, #2
90001f08:	609a      	str	r2, [r3, #8]
90001f0a:	e002      	b.n	90001f12 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
90001f0c:	4b14      	ldr	r3, [pc, #80]	; (90001f60 <LL_FillBuffer+0x88>)
90001f0e:	2200      	movs	r2, #0
90001f10:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
90001f12:	4a13      	ldr	r2, [pc, #76]	; (90001f60 <LL_FillBuffer+0x88>)
90001f14:	69bb      	ldr	r3, [r7, #24]
90001f16:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
90001f18:	4b11      	ldr	r3, [pc, #68]	; (90001f60 <LL_FillBuffer+0x88>)
90001f1a:	4a14      	ldr	r2, [pc, #80]	; (90001f6c <LL_FillBuffer+0x94>)
90001f1c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
90001f1e:	4810      	ldr	r0, [pc, #64]	; (90001f60 <LL_FillBuffer+0x88>)
90001f20:	f000 ffce 	bl	90002ec0 <HAL_DMA2D_Init>
90001f24:	4603      	mov	r3, r0
90001f26:	2b00      	cmp	r3, #0
90001f28:	d115      	bne.n	90001f56 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
90001f2a:	68f9      	ldr	r1, [r7, #12]
90001f2c:	480c      	ldr	r0, [pc, #48]	; (90001f60 <LL_FillBuffer+0x88>)
90001f2e:	f001 f92f 	bl	90003190 <HAL_DMA2D_ConfigLayer>
90001f32:	4603      	mov	r3, r0
90001f34:	2b00      	cmp	r3, #0
90001f36:	d10e      	bne.n	90001f56 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
90001f38:	68ba      	ldr	r2, [r7, #8]
90001f3a:	683b      	ldr	r3, [r7, #0]
90001f3c:	9300      	str	r3, [sp, #0]
90001f3e:	687b      	ldr	r3, [r7, #4]
90001f40:	69f9      	ldr	r1, [r7, #28]
90001f42:	4807      	ldr	r0, [pc, #28]	; (90001f60 <LL_FillBuffer+0x88>)
90001f44:	f001 f810 	bl	90002f68 <HAL_DMA2D_Start>
90001f48:	4603      	mov	r3, r0
90001f4a:	2b00      	cmp	r3, #0
90001f4c:	d103      	bne.n	90001f56 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
90001f4e:	210a      	movs	r1, #10
90001f50:	4803      	ldr	r0, [pc, #12]	; (90001f60 <LL_FillBuffer+0x88>)
90001f52:	f001 f834 	bl	90002fbe <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
90001f56:	bf00      	nop
90001f58:	3710      	adds	r7, #16
90001f5a:	46bd      	mov	sp, r7
90001f5c:	bd80      	pop	{r7, pc}
90001f5e:	bf00      	nop
90001f60:	20000120 	.word	0x20000120
90001f64:	20000160 	.word	0x20000160
90001f68:	200002c8 	.word	0x200002c8
90001f6c:	4002b000 	.word	0x4002b000

90001f70 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
90001f70:	b580      	push	{r7, lr}
90001f72:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
90001f74:	4b29      	ldr	r3, [pc, #164]	; (9000201c <BSP_SDRAM_Init+0xac>)
90001f76:	4a2a      	ldr	r2, [pc, #168]	; (90002020 <BSP_SDRAM_Init+0xb0>)
90001f78:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
90001f7a:	4b2a      	ldr	r3, [pc, #168]	; (90002024 <BSP_SDRAM_Init+0xb4>)
90001f7c:	2202      	movs	r2, #2
90001f7e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
90001f80:	4b28      	ldr	r3, [pc, #160]	; (90002024 <BSP_SDRAM_Init+0xb4>)
90001f82:	2207      	movs	r2, #7
90001f84:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
90001f86:	4b27      	ldr	r3, [pc, #156]	; (90002024 <BSP_SDRAM_Init+0xb4>)
90001f88:	2204      	movs	r2, #4
90001f8a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
90001f8c:	4b25      	ldr	r3, [pc, #148]	; (90002024 <BSP_SDRAM_Init+0xb4>)
90001f8e:	2207      	movs	r2, #7
90001f90:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
90001f92:	4b24      	ldr	r3, [pc, #144]	; (90002024 <BSP_SDRAM_Init+0xb4>)
90001f94:	2202      	movs	r2, #2
90001f96:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
90001f98:	4b22      	ldr	r3, [pc, #136]	; (90002024 <BSP_SDRAM_Init+0xb4>)
90001f9a:	2202      	movs	r2, #2
90001f9c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
90001f9e:	4b21      	ldr	r3, [pc, #132]	; (90002024 <BSP_SDRAM_Init+0xb4>)
90001fa0:	2202      	movs	r2, #2
90001fa2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
90001fa4:	4b1d      	ldr	r3, [pc, #116]	; (9000201c <BSP_SDRAM_Init+0xac>)
90001fa6:	2200      	movs	r2, #0
90001fa8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90001faa:	4b1c      	ldr	r3, [pc, #112]	; (9000201c <BSP_SDRAM_Init+0xac>)
90001fac:	2200      	movs	r2, #0
90001fae:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
90001fb0:	4b1a      	ldr	r3, [pc, #104]	; (9000201c <BSP_SDRAM_Init+0xac>)
90001fb2:	2204      	movs	r2, #4
90001fb4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
90001fb6:	4b19      	ldr	r3, [pc, #100]	; (9000201c <BSP_SDRAM_Init+0xac>)
90001fb8:	2210      	movs	r2, #16
90001fba:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90001fbc:	4b17      	ldr	r3, [pc, #92]	; (9000201c <BSP_SDRAM_Init+0xac>)
90001fbe:	2240      	movs	r2, #64	; 0x40
90001fc0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
90001fc2:	4b16      	ldr	r3, [pc, #88]	; (9000201c <BSP_SDRAM_Init+0xac>)
90001fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
90001fc8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90001fca:	4b14      	ldr	r3, [pc, #80]	; (9000201c <BSP_SDRAM_Init+0xac>)
90001fcc:	2200      	movs	r2, #0
90001fce:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
90001fd0:	4b12      	ldr	r3, [pc, #72]	; (9000201c <BSP_SDRAM_Init+0xac>)
90001fd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
90001fd6:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90001fd8:	4b10      	ldr	r3, [pc, #64]	; (9000201c <BSP_SDRAM_Init+0xac>)
90001fda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
90001fde:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90001fe0:	4b0e      	ldr	r3, [pc, #56]	; (9000201c <BSP_SDRAM_Init+0xac>)
90001fe2:	2200      	movs	r2, #0
90001fe4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
90001fe6:	2100      	movs	r1, #0
90001fe8:	480c      	ldr	r0, [pc, #48]	; (9000201c <BSP_SDRAM_Init+0xac>)
90001fea:	f000 f87f 	bl	900020ec <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
90001fee:	490d      	ldr	r1, [pc, #52]	; (90002024 <BSP_SDRAM_Init+0xb4>)
90001ff0:	480a      	ldr	r0, [pc, #40]	; (9000201c <BSP_SDRAM_Init+0xac>)
90001ff2:	f003 fc33 	bl	9000585c <HAL_SDRAM_Init>
90001ff6:	4603      	mov	r3, r0
90001ff8:	2b00      	cmp	r3, #0
90001ffa:	d003      	beq.n	90002004 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
90001ffc:	4b0a      	ldr	r3, [pc, #40]	; (90002028 <BSP_SDRAM_Init+0xb8>)
90001ffe:	2201      	movs	r2, #1
90002000:	701a      	strb	r2, [r3, #0]
90002002:	e002      	b.n	9000200a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
90002004:	4b08      	ldr	r3, [pc, #32]	; (90002028 <BSP_SDRAM_Init+0xb8>)
90002006:	2200      	movs	r2, #0
90002008:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
9000200a:	f240 6003 	movw	r0, #1539	; 0x603
9000200e:	f000 f80d 	bl	9000202c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
90002012:	4b05      	ldr	r3, [pc, #20]	; (90002028 <BSP_SDRAM_Init+0xb8>)
90002014:	781b      	ldrb	r3, [r3, #0]
}
90002016:	4618      	mov	r0, r3
90002018:	bd80      	pop	{r7, pc}
9000201a:	bf00      	nop
9000201c:	20000370 	.word	0x20000370
90002020:	a0000140 	.word	0xa0000140
90002024:	20000200 	.word	0x20000200
90002028:	2000003c 	.word	0x2000003c

9000202c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
9000202c:	b580      	push	{r7, lr}
9000202e:	b084      	sub	sp, #16
90002030:	af00      	add	r7, sp, #0
90002032:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
90002034:	2300      	movs	r3, #0
90002036:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
90002038:	4b2a      	ldr	r3, [pc, #168]	; (900020e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
9000203a:	2201      	movs	r2, #1
9000203c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
9000203e:	4b29      	ldr	r3, [pc, #164]	; (900020e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
90002040:	2210      	movs	r2, #16
90002042:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
90002044:	4b27      	ldr	r3, [pc, #156]	; (900020e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
90002046:	2201      	movs	r2, #1
90002048:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
9000204a:	4b26      	ldr	r3, [pc, #152]	; (900020e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
9000204c:	2200      	movs	r2, #0
9000204e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90002050:	f64f 72ff 	movw	r2, #65535	; 0xffff
90002054:	4923      	ldr	r1, [pc, #140]	; (900020e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
90002056:	4824      	ldr	r0, [pc, #144]	; (900020e8 <BSP_SDRAM_Initialization_sequence+0xbc>)
90002058:	f003 fc3e 	bl	900058d8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
9000205c:	2001      	movs	r0, #1
9000205e:	f000 fc3b 	bl	900028d8 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
90002062:	4b20      	ldr	r3, [pc, #128]	; (900020e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
90002064:	2202      	movs	r2, #2
90002066:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90002068:	4b1e      	ldr	r3, [pc, #120]	; (900020e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
9000206a:	2210      	movs	r2, #16
9000206c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
9000206e:	4b1d      	ldr	r3, [pc, #116]	; (900020e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
90002070:	2201      	movs	r2, #1
90002072:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90002074:	4b1b      	ldr	r3, [pc, #108]	; (900020e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
90002076:	2200      	movs	r2, #0
90002078:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
9000207a:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000207e:	4919      	ldr	r1, [pc, #100]	; (900020e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
90002080:	4819      	ldr	r0, [pc, #100]	; (900020e8 <BSP_SDRAM_Initialization_sequence+0xbc>)
90002082:	f003 fc29 	bl	900058d8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
90002086:	4b17      	ldr	r3, [pc, #92]	; (900020e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
90002088:	2203      	movs	r2, #3
9000208a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
9000208c:	4b15      	ldr	r3, [pc, #84]	; (900020e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
9000208e:	2210      	movs	r2, #16
90002090:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
90002092:	4b14      	ldr	r3, [pc, #80]	; (900020e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
90002094:	2208      	movs	r2, #8
90002096:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90002098:	4b12      	ldr	r3, [pc, #72]	; (900020e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
9000209a:	2200      	movs	r2, #0
9000209c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
9000209e:	f64f 72ff 	movw	r2, #65535	; 0xffff
900020a2:	4910      	ldr	r1, [pc, #64]	; (900020e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
900020a4:	4810      	ldr	r0, [pc, #64]	; (900020e8 <BSP_SDRAM_Initialization_sequence+0xbc>)
900020a6:	f003 fc17 	bl	900058d8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
900020aa:	f44f 7308 	mov.w	r3, #544	; 0x220
900020ae:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
900020b0:	4b0c      	ldr	r3, [pc, #48]	; (900020e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
900020b2:	2204      	movs	r2, #4
900020b4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
900020b6:	4b0b      	ldr	r3, [pc, #44]	; (900020e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
900020b8:	2210      	movs	r2, #16
900020ba:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
900020bc:	4b09      	ldr	r3, [pc, #36]	; (900020e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
900020be:	2201      	movs	r2, #1
900020c0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
900020c2:	68fb      	ldr	r3, [r7, #12]
900020c4:	4a07      	ldr	r2, [pc, #28]	; (900020e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
900020c6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
900020c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
900020cc:	4905      	ldr	r1, [pc, #20]	; (900020e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
900020ce:	4806      	ldr	r0, [pc, #24]	; (900020e8 <BSP_SDRAM_Initialization_sequence+0xbc>)
900020d0:	f003 fc02 	bl	900058d8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
900020d4:	6879      	ldr	r1, [r7, #4]
900020d6:	4804      	ldr	r0, [pc, #16]	; (900020e8 <BSP_SDRAM_Initialization_sequence+0xbc>)
900020d8:	f003 fc29 	bl	9000592e <HAL_SDRAM_ProgramRefreshRate>
}
900020dc:	bf00      	nop
900020de:	3710      	adds	r7, #16
900020e0:	46bd      	mov	sp, r7
900020e2:	bd80      	pop	{r7, pc}
900020e4:	2000021c 	.word	0x2000021c
900020e8:	20000370 	.word	0x20000370

900020ec <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
900020ec:	b580      	push	{r7, lr}
900020ee:	b090      	sub	sp, #64	; 0x40
900020f0:	af00      	add	r7, sp, #0
900020f2:	6078      	str	r0, [r7, #4]
900020f4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
900020f6:	4b70      	ldr	r3, [pc, #448]	; (900022b8 <BSP_SDRAM_MspInit+0x1cc>)
900020f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900020fa:	4a6f      	ldr	r2, [pc, #444]	; (900022b8 <BSP_SDRAM_MspInit+0x1cc>)
900020fc:	f043 0301 	orr.w	r3, r3, #1
90002100:	6393      	str	r3, [r2, #56]	; 0x38
90002102:	4b6d      	ldr	r3, [pc, #436]	; (900022b8 <BSP_SDRAM_MspInit+0x1cc>)
90002104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90002106:	f003 0301 	and.w	r3, r3, #1
9000210a:	62bb      	str	r3, [r7, #40]	; 0x28
9000210c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
9000210e:	4b6a      	ldr	r3, [pc, #424]	; (900022b8 <BSP_SDRAM_MspInit+0x1cc>)
90002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90002112:	4a69      	ldr	r2, [pc, #420]	; (900022b8 <BSP_SDRAM_MspInit+0x1cc>)
90002114:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
90002118:	6313      	str	r3, [r2, #48]	; 0x30
9000211a:	4b67      	ldr	r3, [pc, #412]	; (900022b8 <BSP_SDRAM_MspInit+0x1cc>)
9000211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000211e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90002122:	627b      	str	r3, [r7, #36]	; 0x24
90002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
90002126:	4b64      	ldr	r3, [pc, #400]	; (900022b8 <BSP_SDRAM_MspInit+0x1cc>)
90002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000212a:	4a63      	ldr	r2, [pc, #396]	; (900022b8 <BSP_SDRAM_MspInit+0x1cc>)
9000212c:	f043 0304 	orr.w	r3, r3, #4
90002130:	6313      	str	r3, [r2, #48]	; 0x30
90002132:	4b61      	ldr	r3, [pc, #388]	; (900022b8 <BSP_SDRAM_MspInit+0x1cc>)
90002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90002136:	f003 0304 	and.w	r3, r3, #4
9000213a:	623b      	str	r3, [r7, #32]
9000213c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
9000213e:	4b5e      	ldr	r3, [pc, #376]	; (900022b8 <BSP_SDRAM_MspInit+0x1cc>)
90002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90002142:	4a5d      	ldr	r2, [pc, #372]	; (900022b8 <BSP_SDRAM_MspInit+0x1cc>)
90002144:	f043 0308 	orr.w	r3, r3, #8
90002148:	6313      	str	r3, [r2, #48]	; 0x30
9000214a:	4b5b      	ldr	r3, [pc, #364]	; (900022b8 <BSP_SDRAM_MspInit+0x1cc>)
9000214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000214e:	f003 0308 	and.w	r3, r3, #8
90002152:	61fb      	str	r3, [r7, #28]
90002154:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90002156:	4b58      	ldr	r3, [pc, #352]	; (900022b8 <BSP_SDRAM_MspInit+0x1cc>)
90002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000215a:	4a57      	ldr	r2, [pc, #348]	; (900022b8 <BSP_SDRAM_MspInit+0x1cc>)
9000215c:	f043 0310 	orr.w	r3, r3, #16
90002160:	6313      	str	r3, [r2, #48]	; 0x30
90002162:	4b55      	ldr	r3, [pc, #340]	; (900022b8 <BSP_SDRAM_MspInit+0x1cc>)
90002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90002166:	f003 0310 	and.w	r3, r3, #16
9000216a:	61bb      	str	r3, [r7, #24]
9000216c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
9000216e:	4b52      	ldr	r3, [pc, #328]	; (900022b8 <BSP_SDRAM_MspInit+0x1cc>)
90002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90002172:	4a51      	ldr	r2, [pc, #324]	; (900022b8 <BSP_SDRAM_MspInit+0x1cc>)
90002174:	f043 0320 	orr.w	r3, r3, #32
90002178:	6313      	str	r3, [r2, #48]	; 0x30
9000217a:	4b4f      	ldr	r3, [pc, #316]	; (900022b8 <BSP_SDRAM_MspInit+0x1cc>)
9000217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000217e:	f003 0320 	and.w	r3, r3, #32
90002182:	617b      	str	r3, [r7, #20]
90002184:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90002186:	4b4c      	ldr	r3, [pc, #304]	; (900022b8 <BSP_SDRAM_MspInit+0x1cc>)
90002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000218a:	4a4b      	ldr	r2, [pc, #300]	; (900022b8 <BSP_SDRAM_MspInit+0x1cc>)
9000218c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90002190:	6313      	str	r3, [r2, #48]	; 0x30
90002192:	4b49      	ldr	r3, [pc, #292]	; (900022b8 <BSP_SDRAM_MspInit+0x1cc>)
90002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90002196:	f003 0340 	and.w	r3, r3, #64	; 0x40
9000219a:	613b      	str	r3, [r7, #16]
9000219c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
9000219e:	4b46      	ldr	r3, [pc, #280]	; (900022b8 <BSP_SDRAM_MspInit+0x1cc>)
900021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900021a2:	4a45      	ldr	r2, [pc, #276]	; (900022b8 <BSP_SDRAM_MspInit+0x1cc>)
900021a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900021a8:	6313      	str	r3, [r2, #48]	; 0x30
900021aa:	4b43      	ldr	r3, [pc, #268]	; (900022b8 <BSP_SDRAM_MspInit+0x1cc>)
900021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900021ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
900021b2:	60fb      	str	r3, [r7, #12]
900021b4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
900021b6:	2302      	movs	r3, #2
900021b8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
900021ba:	2301      	movs	r3, #1
900021bc:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
900021be:	2302      	movs	r3, #2
900021c0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
900021c2:	230c      	movs	r3, #12
900021c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
900021c6:	2308      	movs	r3, #8
900021c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
900021ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900021ce:	4619      	mov	r1, r3
900021d0:	483a      	ldr	r0, [pc, #232]	; (900022bc <BSP_SDRAM_MspInit+0x1d0>)
900021d2:	f001 f90b 	bl	900033ec <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
900021d6:	f24c 7303 	movw	r3, #50947	; 0xc703
900021da:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
900021dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900021e0:	4619      	mov	r1, r3
900021e2:	4837      	ldr	r0, [pc, #220]	; (900022c0 <BSP_SDRAM_MspInit+0x1d4>)
900021e4:	f001 f902 	bl	900033ec <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
900021e8:	f64f 7383 	movw	r3, #65411	; 0xff83
900021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
900021ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900021f2:	4619      	mov	r1, r3
900021f4:	4833      	ldr	r0, [pc, #204]	; (900022c4 <BSP_SDRAM_MspInit+0x1d8>)
900021f6:	f001 f8f9 	bl	900033ec <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
900021fa:	f64f 033f 	movw	r3, #63551	; 0xf83f
900021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90002200:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90002204:	4619      	mov	r1, r3
90002206:	4830      	ldr	r0, [pc, #192]	; (900022c8 <BSP_SDRAM_MspInit+0x1dc>)
90002208:	f001 f8f0 	bl	900033ec <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
9000220c:	f248 1333 	movw	r3, #33075	; 0x8133
90002210:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90002212:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90002216:	4619      	mov	r1, r3
90002218:	482c      	ldr	r0, [pc, #176]	; (900022cc <BSP_SDRAM_MspInit+0x1e0>)
9000221a:	f001 f8e7 	bl	900033ec <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
9000221e:	2328      	movs	r3, #40	; 0x28
90002220:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
90002222:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90002226:	4619      	mov	r1, r3
90002228:	4829      	ldr	r0, [pc, #164]	; (900022d0 <BSP_SDRAM_MspInit+0x1e4>)
9000222a:	f001 f8df 	bl	900033ec <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
9000222e:	4b29      	ldr	r3, [pc, #164]	; (900022d4 <BSP_SDRAM_MspInit+0x1e8>)
90002230:	2200      	movs	r2, #0
90002232:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
90002234:	4b27      	ldr	r3, [pc, #156]	; (900022d4 <BSP_SDRAM_MspInit+0x1e8>)
90002236:	2280      	movs	r2, #128	; 0x80
90002238:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
9000223a:	4b26      	ldr	r3, [pc, #152]	; (900022d4 <BSP_SDRAM_MspInit+0x1e8>)
9000223c:	f44f 7200 	mov.w	r2, #512	; 0x200
90002240:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
90002242:	4b24      	ldr	r3, [pc, #144]	; (900022d4 <BSP_SDRAM_MspInit+0x1e8>)
90002244:	f44f 6280 	mov.w	r2, #1024	; 0x400
90002248:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
9000224a:	4b22      	ldr	r3, [pc, #136]	; (900022d4 <BSP_SDRAM_MspInit+0x1e8>)
9000224c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
90002250:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
90002252:	4b20      	ldr	r3, [pc, #128]	; (900022d4 <BSP_SDRAM_MspInit+0x1e8>)
90002254:	f44f 4280 	mov.w	r2, #16384	; 0x4000
90002258:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
9000225a:	4b1e      	ldr	r3, [pc, #120]	; (900022d4 <BSP_SDRAM_MspInit+0x1e8>)
9000225c:	2200      	movs	r2, #0
9000225e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
90002260:	4b1c      	ldr	r3, [pc, #112]	; (900022d4 <BSP_SDRAM_MspInit+0x1e8>)
90002262:	f44f 3200 	mov.w	r2, #131072	; 0x20000
90002266:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
90002268:	4b1a      	ldr	r3, [pc, #104]	; (900022d4 <BSP_SDRAM_MspInit+0x1e8>)
9000226a:	2200      	movs	r2, #0
9000226c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
9000226e:	4b19      	ldr	r3, [pc, #100]	; (900022d4 <BSP_SDRAM_MspInit+0x1e8>)
90002270:	2203      	movs	r2, #3
90002272:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
90002274:	4b17      	ldr	r3, [pc, #92]	; (900022d4 <BSP_SDRAM_MspInit+0x1e8>)
90002276:	2200      	movs	r2, #0
90002278:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
9000227a:	4b16      	ldr	r3, [pc, #88]	; (900022d4 <BSP_SDRAM_MspInit+0x1e8>)
9000227c:	2200      	movs	r2, #0
9000227e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
90002280:	4b14      	ldr	r3, [pc, #80]	; (900022d4 <BSP_SDRAM_MspInit+0x1e8>)
90002282:	4a15      	ldr	r2, [pc, #84]	; (900022d8 <BSP_SDRAM_MspInit+0x1ec>)
90002284:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
90002286:	687b      	ldr	r3, [r7, #4]
90002288:	4a12      	ldr	r2, [pc, #72]	; (900022d4 <BSP_SDRAM_MspInit+0x1e8>)
9000228a:	631a      	str	r2, [r3, #48]	; 0x30
9000228c:	4a11      	ldr	r2, [pc, #68]	; (900022d4 <BSP_SDRAM_MspInit+0x1e8>)
9000228e:	687b      	ldr	r3, [r7, #4]
90002290:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
90002292:	4810      	ldr	r0, [pc, #64]	; (900022d4 <BSP_SDRAM_MspInit+0x1e8>)
90002294:	f000 fd04 	bl	90002ca0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
90002298:	480e      	ldr	r0, [pc, #56]	; (900022d4 <BSP_SDRAM_MspInit+0x1e8>)
9000229a:	f000 fc53 	bl	90002b44 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
9000229e:	2200      	movs	r2, #0
900022a0:	210f      	movs	r1, #15
900022a2:	2038      	movs	r0, #56	; 0x38
900022a4:	f000 fc17 	bl	90002ad6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
900022a8:	2038      	movs	r0, #56	; 0x38
900022aa:	f000 fc30 	bl	90002b0e <HAL_NVIC_EnableIRQ>
}
900022ae:	bf00      	nop
900022b0:	3740      	adds	r7, #64	; 0x40
900022b2:	46bd      	mov	sp, r7
900022b4:	bd80      	pop	{r7, pc}
900022b6:	bf00      	nop
900022b8:	40023800 	.word	0x40023800
900022bc:	40020800 	.word	0x40020800
900022c0:	40020c00 	.word	0x40020c00
900022c4:	40021000 	.word	0x40021000
900022c8:	40021400 	.word	0x40021400
900022cc:	40021800 	.word	0x40021800
900022d0:	40021c00 	.word	0x40021c00
900022d4:	2000022c 	.word	0x2000022c
900022d8:	40026410 	.word	0x40026410

900022dc <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
900022dc:	b580      	push	{r7, lr}
900022de:	b084      	sub	sp, #16
900022e0:	af00      	add	r7, sp, #0
900022e2:	4603      	mov	r3, r0
900022e4:	460a      	mov	r2, r1
900022e6:	80fb      	strh	r3, [r7, #6]
900022e8:	4613      	mov	r3, r2
900022ea:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
900022ec:	2300      	movs	r3, #0
900022ee:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
900022f0:	4a14      	ldr	r2, [pc, #80]	; (90002344 <BSP_TS_Init+0x68>)
900022f2:	88fb      	ldrh	r3, [r7, #6]
900022f4:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
900022f6:	4a14      	ldr	r2, [pc, #80]	; (90002348 <BSP_TS_Init+0x6c>)
900022f8:	88bb      	ldrh	r3, [r7, #4]
900022fa:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
900022fc:	4b13      	ldr	r3, [pc, #76]	; (9000234c <BSP_TS_Init+0x70>)
900022fe:	681b      	ldr	r3, [r3, #0]
90002300:	2070      	movs	r0, #112	; 0x70
90002302:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
90002304:	4b11      	ldr	r3, [pc, #68]	; (9000234c <BSP_TS_Init+0x70>)
90002306:	685b      	ldr	r3, [r3, #4]
90002308:	2070      	movs	r0, #112	; 0x70
9000230a:	4798      	blx	r3
9000230c:	4603      	mov	r3, r0
9000230e:	2b51      	cmp	r3, #81	; 0x51
90002310:	d111      	bne.n	90002336 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
90002312:	4b0f      	ldr	r3, [pc, #60]	; (90002350 <BSP_TS_Init+0x74>)
90002314:	4a0d      	ldr	r2, [pc, #52]	; (9000234c <BSP_TS_Init+0x70>)
90002316:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
90002318:	4b0e      	ldr	r3, [pc, #56]	; (90002354 <BSP_TS_Init+0x78>)
9000231a:	2270      	movs	r2, #112	; 0x70
9000231c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
9000231e:	4b0e      	ldr	r3, [pc, #56]	; (90002358 <BSP_TS_Init+0x7c>)
90002320:	2208      	movs	r2, #8
90002322:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
90002324:	4b0a      	ldr	r3, [pc, #40]	; (90002350 <BSP_TS_Init+0x74>)
90002326:	681b      	ldr	r3, [r3, #0]
90002328:	68db      	ldr	r3, [r3, #12]
9000232a:	4a0a      	ldr	r2, [pc, #40]	; (90002354 <BSP_TS_Init+0x78>)
9000232c:	7812      	ldrb	r2, [r2, #0]
9000232e:	b292      	uxth	r2, r2
90002330:	4610      	mov	r0, r2
90002332:	4798      	blx	r3
90002334:	e001      	b.n	9000233a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
90002336:	2303      	movs	r3, #3
90002338:	73fb      	strb	r3, [r7, #15]
  }

  return status;
9000233a:	7bfb      	ldrb	r3, [r7, #15]
}
9000233c:	4618      	mov	r0, r3
9000233e:	3710      	adds	r7, #16
90002340:	46bd      	mov	sp, r7
90002342:	bd80      	pop	{r7, pc}
90002344:	20000290 	.word	0x20000290
90002348:	20000292 	.word	0x20000292
9000234c:	20000004 	.word	0x20000004
90002350:	2000028c 	.word	0x2000028c
90002354:	20000295 	.word	0x20000295
90002358:	20000294 	.word	0x20000294

9000235c <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
9000235c:	b590      	push	{r4, r7, lr}
9000235e:	b097      	sub	sp, #92	; 0x5c
90002360:	af02      	add	r7, sp, #8
90002362:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
90002364:	2300      	movs	r3, #0
90002366:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
9000236a:	2300      	movs	r3, #0
9000236c:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
9000236e:	2300      	movs	r3, #0
90002370:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
90002372:	2300      	movs	r3, #0
90002374:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
90002376:	4b97      	ldr	r3, [pc, #604]	; (900025d4 <BSP_TS_GetState+0x278>)
90002378:	681b      	ldr	r3, [r3, #0]
9000237a:	691b      	ldr	r3, [r3, #16]
9000237c:	4a96      	ldr	r2, [pc, #600]	; (900025d8 <BSP_TS_GetState+0x27c>)
9000237e:	7812      	ldrb	r2, [r2, #0]
90002380:	b292      	uxth	r2, r2
90002382:	4610      	mov	r0, r2
90002384:	4798      	blx	r3
90002386:	4603      	mov	r3, r0
90002388:	461a      	mov	r2, r3
9000238a:	687b      	ldr	r3, [r7, #4]
9000238c:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
9000238e:	687b      	ldr	r3, [r7, #4]
90002390:	781b      	ldrb	r3, [r3, #0]
90002392:	2b00      	cmp	r3, #0
90002394:	f000 81a8 	beq.w	900026e8 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
90002398:	2300      	movs	r3, #0
9000239a:	64bb      	str	r3, [r7, #72]	; 0x48
9000239c:	e197      	b.n	900026ce <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
9000239e:	4b8d      	ldr	r3, [pc, #564]	; (900025d4 <BSP_TS_GetState+0x278>)
900023a0:	681b      	ldr	r3, [r3, #0]
900023a2:	695b      	ldr	r3, [r3, #20]
900023a4:	4a8c      	ldr	r2, [pc, #560]	; (900025d8 <BSP_TS_GetState+0x27c>)
900023a6:	7812      	ldrb	r2, [r2, #0]
900023a8:	b290      	uxth	r0, r2
900023aa:	f107 0120 	add.w	r1, r7, #32
900023ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
900023b0:	0052      	lsls	r2, r2, #1
900023b2:	188c      	adds	r4, r1, r2
900023b4:	f107 0114 	add.w	r1, r7, #20
900023b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
900023ba:	0052      	lsls	r2, r2, #1
900023bc:	440a      	add	r2, r1
900023be:	4621      	mov	r1, r4
900023c0:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
900023c2:	4b86      	ldr	r3, [pc, #536]	; (900025dc <BSP_TS_GetState+0x280>)
900023c4:	781b      	ldrb	r3, [r3, #0]
900023c6:	2b01      	cmp	r3, #1
900023c8:	d11b      	bne.n	90002402 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
900023ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
900023cc:	005b      	lsls	r3, r3, #1
900023ce:	f107 0250 	add.w	r2, r7, #80	; 0x50
900023d2:	4413      	add	r3, r2
900023d4:	f833 2c30 	ldrh.w	r2, [r3, #-48]
900023d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
900023da:	005b      	lsls	r3, r3, #1
900023dc:	f107 0150 	add.w	r1, r7, #80	; 0x50
900023e0:	440b      	add	r3, r1
900023e2:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
900023e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
900023e8:	005b      	lsls	r3, r3, #1
900023ea:	f107 0250 	add.w	r2, r7, #80	; 0x50
900023ee:	4413      	add	r3, r2
900023f0:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
900023f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
900023f6:	005b      	lsls	r3, r3, #1
900023f8:	f107 0150 	add.w	r1, r7, #80	; 0x50
900023fc:	440b      	add	r3, r1
900023fe:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
90002402:	4b76      	ldr	r3, [pc, #472]	; (900025dc <BSP_TS_GetState+0x280>)
90002404:	781b      	ldrb	r3, [r3, #0]
90002406:	f003 0302 	and.w	r3, r3, #2
9000240a:	2b00      	cmp	r3, #0
9000240c:	d010      	beq.n	90002430 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
9000240e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
90002410:	005b      	lsls	r3, r3, #1
90002412:	f107 0250 	add.w	r2, r7, #80	; 0x50
90002416:	4413      	add	r3, r2
90002418:	f833 3c30 	ldrh.w	r3, [r3, #-48]
9000241c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
90002420:	b29a      	uxth	r2, r3
90002422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
90002424:	005b      	lsls	r3, r3, #1
90002426:	f107 0150 	add.w	r1, r7, #80	; 0x50
9000242a:	440b      	add	r3, r1
9000242c:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
90002430:	4b6a      	ldr	r3, [pc, #424]	; (900025dc <BSP_TS_GetState+0x280>)
90002432:	781b      	ldrb	r3, [r3, #0]
90002434:	f003 0304 	and.w	r3, r3, #4
90002438:	2b00      	cmp	r3, #0
9000243a:	d010      	beq.n	9000245e <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
9000243c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000243e:	005b      	lsls	r3, r3, #1
90002440:	f107 0250 	add.w	r2, r7, #80	; 0x50
90002444:	4413      	add	r3, r2
90002446:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
9000244a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
9000244e:	b29a      	uxth	r2, r3
90002450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
90002452:	005b      	lsls	r3, r3, #1
90002454:	f107 0150 	add.w	r1, r7, #80	; 0x50
90002458:	440b      	add	r3, r1
9000245a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
9000245e:	4b5f      	ldr	r3, [pc, #380]	; (900025dc <BSP_TS_GetState+0x280>)
90002460:	781b      	ldrb	r3, [r3, #0]
90002462:	f003 0308 	and.w	r3, r3, #8
90002466:	2b00      	cmp	r3, #0
90002468:	d01b      	beq.n	900024a2 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
9000246a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000246c:	005b      	lsls	r3, r3, #1
9000246e:	f107 0250 	add.w	r2, r7, #80	; 0x50
90002472:	4413      	add	r3, r2
90002474:	f833 2c30 	ldrh.w	r2, [r3, #-48]
90002478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000247a:	005b      	lsls	r3, r3, #1
9000247c:	f107 0150 	add.w	r1, r7, #80	; 0x50
90002480:	440b      	add	r3, r1
90002482:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
90002486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
90002488:	005b      	lsls	r3, r3, #1
9000248a:	f107 0250 	add.w	r2, r7, #80	; 0x50
9000248e:	4413      	add	r3, r2
90002490:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
90002494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
90002496:	005b      	lsls	r3, r3, #1
90002498:	f107 0150 	add.w	r1, r7, #80	; 0x50
9000249c:	440b      	add	r3, r1
9000249e:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
900024a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
900024a4:	005b      	lsls	r3, r3, #1
900024a6:	f107 0250 	add.w	r2, r7, #80	; 0x50
900024aa:	4413      	add	r3, r2
900024ac:	f833 3c18 	ldrh.w	r3, [r3, #-24]
900024b0:	4619      	mov	r1, r3
900024b2:	4a4b      	ldr	r2, [pc, #300]	; (900025e0 <BSP_TS_GetState+0x284>)
900024b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
900024b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
900024ba:	4299      	cmp	r1, r3
900024bc:	d90e      	bls.n	900024dc <BSP_TS_GetState+0x180>
900024be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
900024c0:	005b      	lsls	r3, r3, #1
900024c2:	f107 0250 	add.w	r2, r7, #80	; 0x50
900024c6:	4413      	add	r3, r2
900024c8:	f833 2c18 	ldrh.w	r2, [r3, #-24]
900024cc:	4944      	ldr	r1, [pc, #272]	; (900025e0 <BSP_TS_GetState+0x284>)
900024ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
900024d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
900024d4:	b29b      	uxth	r3, r3
900024d6:	1ad3      	subs	r3, r2, r3
900024d8:	b29b      	uxth	r3, r3
900024da:	e00d      	b.n	900024f8 <BSP_TS_GetState+0x19c>
900024dc:	4a40      	ldr	r2, [pc, #256]	; (900025e0 <BSP_TS_GetState+0x284>)
900024de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
900024e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
900024e4:	b29a      	uxth	r2, r3
900024e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
900024e8:	005b      	lsls	r3, r3, #1
900024ea:	f107 0150 	add.w	r1, r7, #80	; 0x50
900024ee:	440b      	add	r3, r1
900024f0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
900024f4:	1ad3      	subs	r3, r2, r3
900024f6:	b29b      	uxth	r3, r3
900024f8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
900024fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
900024fe:	005b      	lsls	r3, r3, #1
90002500:	f107 0250 	add.w	r2, r7, #80	; 0x50
90002504:	4413      	add	r3, r2
90002506:	f833 3c24 	ldrh.w	r3, [r3, #-36]
9000250a:	4619      	mov	r1, r3
9000250c:	4a35      	ldr	r2, [pc, #212]	; (900025e4 <BSP_TS_GetState+0x288>)
9000250e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
90002510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90002514:	4299      	cmp	r1, r3
90002516:	d90e      	bls.n	90002536 <BSP_TS_GetState+0x1da>
90002518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000251a:	005b      	lsls	r3, r3, #1
9000251c:	f107 0250 	add.w	r2, r7, #80	; 0x50
90002520:	4413      	add	r3, r2
90002522:	f833 2c24 	ldrh.w	r2, [r3, #-36]
90002526:	492f      	ldr	r1, [pc, #188]	; (900025e4 <BSP_TS_GetState+0x288>)
90002528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000252a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
9000252e:	b29b      	uxth	r3, r3
90002530:	1ad3      	subs	r3, r2, r3
90002532:	b29b      	uxth	r3, r3
90002534:	e00d      	b.n	90002552 <BSP_TS_GetState+0x1f6>
90002536:	4a2b      	ldr	r2, [pc, #172]	; (900025e4 <BSP_TS_GetState+0x288>)
90002538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000253a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000253e:	b29a      	uxth	r2, r3
90002540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
90002542:	005b      	lsls	r3, r3, #1
90002544:	f107 0150 	add.w	r1, r7, #80	; 0x50
90002548:	440b      	add	r3, r1
9000254a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
9000254e:	1ad3      	subs	r3, r2, r3
90002550:	b29b      	uxth	r3, r3
90002552:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
90002556:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
9000255a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
9000255e:	4413      	add	r3, r2
90002560:	2b05      	cmp	r3, #5
90002562:	dd17      	ble.n	90002594 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
90002564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
90002566:	005b      	lsls	r3, r3, #1
90002568:	f107 0250 	add.w	r2, r7, #80	; 0x50
9000256c:	4413      	add	r3, r2
9000256e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
90002572:	4619      	mov	r1, r3
90002574:	4a1a      	ldr	r2, [pc, #104]	; (900025e0 <BSP_TS_GetState+0x284>)
90002576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
90002578:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
9000257c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000257e:	005b      	lsls	r3, r3, #1
90002580:	f107 0250 	add.w	r2, r7, #80	; 0x50
90002584:	4413      	add	r3, r2
90002586:	f833 3c24 	ldrh.w	r3, [r3, #-36]
9000258a:	4619      	mov	r1, r3
9000258c:	4a15      	ldr	r2, [pc, #84]	; (900025e4 <BSP_TS_GetState+0x288>)
9000258e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
90002590:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
90002594:	4b10      	ldr	r3, [pc, #64]	; (900025d8 <BSP_TS_GetState+0x27c>)
90002596:	781b      	ldrb	r3, [r3, #0]
90002598:	2b70      	cmp	r3, #112	; 0x70
9000259a:	d125      	bne.n	900025e8 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
9000259c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000259e:	005b      	lsls	r3, r3, #1
900025a0:	f107 0250 	add.w	r2, r7, #80	; 0x50
900025a4:	4413      	add	r3, r2
900025a6:	f833 1c18 	ldrh.w	r1, [r3, #-24]
900025aa:	687a      	ldr	r2, [r7, #4]
900025ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
900025ae:	005b      	lsls	r3, r3, #1
900025b0:	4413      	add	r3, r2
900025b2:	460a      	mov	r2, r1
900025b4:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
900025b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
900025b8:	005b      	lsls	r3, r3, #1
900025ba:	f107 0250 	add.w	r2, r7, #80	; 0x50
900025be:	4413      	add	r3, r2
900025c0:	f833 1c24 	ldrh.w	r1, [r3, #-36]
900025c4:	687a      	ldr	r2, [r7, #4]
900025c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
900025c8:	3304      	adds	r3, #4
900025ca:	005b      	lsls	r3, r3, #1
900025cc:	4413      	add	r3, r2
900025ce:	460a      	mov	r2, r1
900025d0:	809a      	strh	r2, [r3, #4]
900025d2:	e02c      	b.n	9000262e <BSP_TS_GetState+0x2d2>
900025d4:	2000028c 	.word	0x2000028c
900025d8:	20000295 	.word	0x20000295
900025dc:	20000294 	.word	0x20000294
900025e0:	20000298 	.word	0x20000298
900025e4:	200002ac 	.word	0x200002ac
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
900025e8:	4b42      	ldr	r3, [pc, #264]	; (900026f4 <BSP_TS_GetState+0x398>)
900025ea:	881b      	ldrh	r3, [r3, #0]
900025ec:	4619      	mov	r1, r3
900025ee:	4a42      	ldr	r2, [pc, #264]	; (900026f8 <BSP_TS_GetState+0x39c>)
900025f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
900025f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
900025f6:	fb03 f301 	mul.w	r3, r3, r1
900025fa:	0b1b      	lsrs	r3, r3, #12
900025fc:	b299      	uxth	r1, r3
900025fe:	687a      	ldr	r2, [r7, #4]
90002600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
90002602:	005b      	lsls	r3, r3, #1
90002604:	4413      	add	r3, r2
90002606:	460a      	mov	r2, r1
90002608:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
9000260a:	4b3c      	ldr	r3, [pc, #240]	; (900026fc <BSP_TS_GetState+0x3a0>)
9000260c:	881b      	ldrh	r3, [r3, #0]
9000260e:	4619      	mov	r1, r3
90002610:	4a3b      	ldr	r2, [pc, #236]	; (90002700 <BSP_TS_GetState+0x3a4>)
90002612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
90002614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90002618:	fb03 f301 	mul.w	r3, r3, r1
9000261c:	0b1b      	lsrs	r3, r3, #12
9000261e:	b299      	uxth	r1, r3
90002620:	687a      	ldr	r2, [r7, #4]
90002622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
90002624:	3304      	adds	r3, #4
90002626:	005b      	lsls	r3, r3, #1
90002628:	4413      	add	r3, r2
9000262a:	460a      	mov	r2, r1
9000262c:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
9000262e:	4b35      	ldr	r3, [pc, #212]	; (90002704 <BSP_TS_GetState+0x3a8>)
90002630:	781b      	ldrb	r3, [r3, #0]
90002632:	b298      	uxth	r0, r3
90002634:	f107 010c 	add.w	r1, r7, #12
90002638:	f107 0210 	add.w	r2, r7, #16
9000263c:	f107 0308 	add.w	r3, r7, #8
90002640:	9300      	str	r3, [sp, #0]
90002642:	460b      	mov	r3, r1
90002644:	6cb9      	ldr	r1, [r7, #72]	; 0x48
90002646:	f7fe fc3b 	bl	90000ec0 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
9000264a:	693b      	ldr	r3, [r7, #16]
9000264c:	b2d9      	uxtb	r1, r3
9000264e:	687a      	ldr	r2, [r7, #4]
90002650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
90002652:	4413      	add	r3, r2
90002654:	3316      	adds	r3, #22
90002656:	460a      	mov	r2, r1
90002658:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
9000265a:	68fb      	ldr	r3, [r7, #12]
9000265c:	b2d9      	uxtb	r1, r3
9000265e:	687a      	ldr	r2, [r7, #4]
90002660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
90002662:	4413      	add	r3, r2
90002664:	3320      	adds	r3, #32
90002666:	460a      	mov	r2, r1
90002668:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
9000266a:	68bb      	ldr	r3, [r7, #8]
9000266c:	2b03      	cmp	r3, #3
9000266e:	d827      	bhi.n	900026c0 <BSP_TS_GetState+0x364>
90002670:	a201      	add	r2, pc, #4	; (adr r2, 90002678 <BSP_TS_GetState+0x31c>)
90002672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90002676:	bf00      	nop
90002678:	90002689 	.word	0x90002689
9000267c:	90002697 	.word	0x90002697
90002680:	900026a5 	.word	0x900026a5
90002684:	900026b3 	.word	0x900026b3
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
90002688:	687a      	ldr	r2, [r7, #4]
9000268a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000268c:	4413      	add	r3, r2
9000268e:	331b      	adds	r3, #27
90002690:	2201      	movs	r2, #1
90002692:	701a      	strb	r2, [r3, #0]
          break;
90002694:	e018      	b.n	900026c8 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
90002696:	687a      	ldr	r2, [r7, #4]
90002698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000269a:	4413      	add	r3, r2
9000269c:	331b      	adds	r3, #27
9000269e:	2202      	movs	r2, #2
900026a0:	701a      	strb	r2, [r3, #0]
          break;
900026a2:	e011      	b.n	900026c8 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
900026a4:	687a      	ldr	r2, [r7, #4]
900026a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
900026a8:	4413      	add	r3, r2
900026aa:	331b      	adds	r3, #27
900026ac:	2203      	movs	r2, #3
900026ae:	701a      	strb	r2, [r3, #0]
          break;
900026b0:	e00a      	b.n	900026c8 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
900026b2:	687a      	ldr	r2, [r7, #4]
900026b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
900026b6:	4413      	add	r3, r2
900026b8:	331b      	adds	r3, #27
900026ba:	2200      	movs	r2, #0
900026bc:	701a      	strb	r2, [r3, #0]
          break;
900026be:	e003      	b.n	900026c8 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
900026c0:	2301      	movs	r3, #1
900026c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
900026c6:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
900026c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
900026ca:	3301      	adds	r3, #1
900026cc:	64bb      	str	r3, [r7, #72]	; 0x48
900026ce:	687b      	ldr	r3, [r7, #4]
900026d0:	781b      	ldrb	r3, [r3, #0]
900026d2:	461a      	mov	r2, r3
900026d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
900026d6:	4293      	cmp	r3, r2
900026d8:	f4ff ae61 	bcc.w	9000239e <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
900026dc:	6878      	ldr	r0, [r7, #4]
900026de:	f000 f813 	bl	90002708 <BSP_TS_Get_GestureId>
900026e2:	4603      	mov	r3, r0
900026e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
900026e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
900026ec:	4618      	mov	r0, r3
900026ee:	3754      	adds	r7, #84	; 0x54
900026f0:	46bd      	mov	sp, r7
900026f2:	bd90      	pop	{r4, r7, pc}
900026f4:	20000290 	.word	0x20000290
900026f8:	20000298 	.word	0x20000298
900026fc:	20000292 	.word	0x20000292
90002700:	200002ac 	.word	0x200002ac
90002704:	20000295 	.word	0x20000295

90002708 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
90002708:	b580      	push	{r7, lr}
9000270a:	b084      	sub	sp, #16
9000270c:	af00      	add	r7, sp, #0
9000270e:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
90002710:	2300      	movs	r3, #0
90002712:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
90002714:	2300      	movs	r3, #0
90002716:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
90002718:	4b3b      	ldr	r3, [pc, #236]	; (90002808 <BSP_TS_Get_GestureId+0x100>)
9000271a:	781b      	ldrb	r3, [r3, #0]
9000271c:	b29b      	uxth	r3, r3
9000271e:	f107 0208 	add.w	r2, r7, #8
90002722:	4611      	mov	r1, r2
90002724:	4618      	mov	r0, r3
90002726:	f7fe fbb2 	bl	90000e8e <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
9000272a:	68bb      	ldr	r3, [r7, #8]
9000272c:	2b49      	cmp	r3, #73	; 0x49
9000272e:	d05e      	beq.n	900027ee <BSP_TS_Get_GestureId+0xe6>
90002730:	2b49      	cmp	r3, #73	; 0x49
90002732:	d860      	bhi.n	900027f6 <BSP_TS_Get_GestureId+0xee>
90002734:	2b1c      	cmp	r3, #28
90002736:	d83f      	bhi.n	900027b8 <BSP_TS_Get_GestureId+0xb0>
90002738:	2b1c      	cmp	r3, #28
9000273a:	d85c      	bhi.n	900027f6 <BSP_TS_Get_GestureId+0xee>
9000273c:	a201      	add	r2, pc, #4	; (adr r2, 90002744 <BSP_TS_Get_GestureId+0x3c>)
9000273e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90002742:	bf00      	nop
90002744:	900027bf 	.word	0x900027bf
90002748:	900027f7 	.word	0x900027f7
9000274c:	900027f7 	.word	0x900027f7
90002750:	900027f7 	.word	0x900027f7
90002754:	900027f7 	.word	0x900027f7
90002758:	900027f7 	.word	0x900027f7
9000275c:	900027f7 	.word	0x900027f7
90002760:	900027f7 	.word	0x900027f7
90002764:	900027f7 	.word	0x900027f7
90002768:	900027f7 	.word	0x900027f7
9000276c:	900027f7 	.word	0x900027f7
90002770:	900027f7 	.word	0x900027f7
90002774:	900027f7 	.word	0x900027f7
90002778:	900027f7 	.word	0x900027f7
9000277c:	900027f7 	.word	0x900027f7
90002780:	900027f7 	.word	0x900027f7
90002784:	900027c7 	.word	0x900027c7
90002788:	900027f7 	.word	0x900027f7
9000278c:	900027f7 	.word	0x900027f7
90002790:	900027f7 	.word	0x900027f7
90002794:	900027cf 	.word	0x900027cf
90002798:	900027f7 	.word	0x900027f7
9000279c:	900027f7 	.word	0x900027f7
900027a0:	900027f7 	.word	0x900027f7
900027a4:	900027d7 	.word	0x900027d7
900027a8:	900027f7 	.word	0x900027f7
900027ac:	900027f7 	.word	0x900027f7
900027b0:	900027f7 	.word	0x900027f7
900027b4:	900027df 	.word	0x900027df
900027b8:	2b40      	cmp	r3, #64	; 0x40
900027ba:	d014      	beq.n	900027e6 <BSP_TS_Get_GestureId+0xde>
900027bc:	e01b      	b.n	900027f6 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
900027be:	687b      	ldr	r3, [r7, #4]
900027c0:	2200      	movs	r2, #0
900027c2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
900027c4:	e01a      	b.n	900027fc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
900027c6:	687b      	ldr	r3, [r7, #4]
900027c8:	2201      	movs	r2, #1
900027ca:	629a      	str	r2, [r3, #40]	; 0x28
      break;
900027cc:	e016      	b.n	900027fc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
900027ce:	687b      	ldr	r3, [r7, #4]
900027d0:	2202      	movs	r2, #2
900027d2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
900027d4:	e012      	b.n	900027fc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
900027d6:	687b      	ldr	r3, [r7, #4]
900027d8:	2203      	movs	r2, #3
900027da:	629a      	str	r2, [r3, #40]	; 0x28
      break;
900027dc:	e00e      	b.n	900027fc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
900027de:	687b      	ldr	r3, [r7, #4]
900027e0:	2204      	movs	r2, #4
900027e2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
900027e4:	e00a      	b.n	900027fc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
900027e6:	687b      	ldr	r3, [r7, #4]
900027e8:	2205      	movs	r2, #5
900027ea:	629a      	str	r2, [r3, #40]	; 0x28
      break;
900027ec:	e006      	b.n	900027fc <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
900027ee:	687b      	ldr	r3, [r7, #4]
900027f0:	2206      	movs	r2, #6
900027f2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
900027f4:	e002      	b.n	900027fc <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
900027f6:	2301      	movs	r3, #1
900027f8:	73fb      	strb	r3, [r7, #15]
      break;
900027fa:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
900027fc:	7bfb      	ldrb	r3, [r7, #15]
}
900027fe:	4618      	mov	r0, r3
90002800:	3710      	adds	r7, #16
90002802:	46bd      	mov	sp, r7
90002804:	bd80      	pop	{r7, pc}
90002806:	bf00      	nop
90002808:	20000295 	.word	0x20000295

9000280c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
9000280c:	b580      	push	{r7, lr}
9000280e:	af00      	add	r7, sp, #0
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
90002810:	4b08      	ldr	r3, [pc, #32]	; (90002834 <HAL_Init+0x28>)
90002812:	681b      	ldr	r3, [r3, #0]
90002814:	4a07      	ldr	r2, [pc, #28]	; (90002834 <HAL_Init+0x28>)
90002816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000281a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
9000281c:	2003      	movs	r0, #3
9000281e:	f000 f94f 	bl	90002ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
90002822:	200f      	movs	r0, #15
90002824:	f000 f808 	bl	90002838 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
90002828:	f7fe f89c 	bl	90000964 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
9000282c:	2300      	movs	r3, #0
}
9000282e:	4618      	mov	r0, r3
90002830:	bd80      	pop	{r7, pc}
90002832:	bf00      	nop
90002834:	40023c00 	.word	0x40023c00

90002838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
90002838:	b580      	push	{r7, lr}
9000283a:	b082      	sub	sp, #8
9000283c:	af00      	add	r7, sp, #0
9000283e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
90002840:	4b12      	ldr	r3, [pc, #72]	; (9000288c <HAL_InitTick+0x54>)
90002842:	681a      	ldr	r2, [r3, #0]
90002844:	4b12      	ldr	r3, [pc, #72]	; (90002890 <HAL_InitTick+0x58>)
90002846:	781b      	ldrb	r3, [r3, #0]
90002848:	4619      	mov	r1, r3
9000284a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
9000284e:	fbb3 f3f1 	udiv	r3, r3, r1
90002852:	fbb2 f3f3 	udiv	r3, r2, r3
90002856:	4618      	mov	r0, r3
90002858:	f000 f967 	bl	90002b2a <HAL_SYSTICK_Config>
9000285c:	4603      	mov	r3, r0
9000285e:	2b00      	cmp	r3, #0
90002860:	d001      	beq.n	90002866 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
90002862:	2301      	movs	r3, #1
90002864:	e00e      	b.n	90002884 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90002866:	687b      	ldr	r3, [r7, #4]
90002868:	2b0f      	cmp	r3, #15
9000286a:	d80a      	bhi.n	90002882 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
9000286c:	2200      	movs	r2, #0
9000286e:	6879      	ldr	r1, [r7, #4]
90002870:	f04f 30ff 	mov.w	r0, #4294967295
90002874:	f000 f92f 	bl	90002ad6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
90002878:	4a06      	ldr	r2, [pc, #24]	; (90002894 <HAL_InitTick+0x5c>)
9000287a:	687b      	ldr	r3, [r7, #4]
9000287c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
9000287e:	2300      	movs	r3, #0
90002880:	e000      	b.n	90002884 <HAL_InitTick+0x4c>
    return HAL_ERROR;
90002882:	2301      	movs	r3, #1
}
90002884:	4618      	mov	r0, r3
90002886:	3708      	adds	r7, #8
90002888:	46bd      	mov	sp, r7
9000288a:	bd80      	pop	{r7, pc}
9000288c:	20000000 	.word	0x20000000
90002890:	20000044 	.word	0x20000044
90002894:	20000040 	.word	0x20000040

90002898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
90002898:	b480      	push	{r7}
9000289a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
9000289c:	4b06      	ldr	r3, [pc, #24]	; (900028b8 <HAL_IncTick+0x20>)
9000289e:	781b      	ldrb	r3, [r3, #0]
900028a0:	461a      	mov	r2, r3
900028a2:	4b06      	ldr	r3, [pc, #24]	; (900028bc <HAL_IncTick+0x24>)
900028a4:	681b      	ldr	r3, [r3, #0]
900028a6:	4413      	add	r3, r2
900028a8:	4a04      	ldr	r2, [pc, #16]	; (900028bc <HAL_IncTick+0x24>)
900028aa:	6013      	str	r3, [r2, #0]
}
900028ac:	bf00      	nop
900028ae:	46bd      	mov	sp, r7
900028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
900028b4:	4770      	bx	lr
900028b6:	bf00      	nop
900028b8:	20000044 	.word	0x20000044
900028bc:	200003a4 	.word	0x200003a4

900028c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
900028c0:	b480      	push	{r7}
900028c2:	af00      	add	r7, sp, #0
  return uwTick;
900028c4:	4b03      	ldr	r3, [pc, #12]	; (900028d4 <HAL_GetTick+0x14>)
900028c6:	681b      	ldr	r3, [r3, #0]
}
900028c8:	4618      	mov	r0, r3
900028ca:	46bd      	mov	sp, r7
900028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
900028d0:	4770      	bx	lr
900028d2:	bf00      	nop
900028d4:	200003a4 	.word	0x200003a4

900028d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
900028d8:	b580      	push	{r7, lr}
900028da:	b084      	sub	sp, #16
900028dc:	af00      	add	r7, sp, #0
900028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
900028e0:	f7ff ffee 	bl	900028c0 <HAL_GetTick>
900028e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
900028e6:	687b      	ldr	r3, [r7, #4]
900028e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
900028ea:	68fb      	ldr	r3, [r7, #12]
900028ec:	f1b3 3fff 	cmp.w	r3, #4294967295
900028f0:	d005      	beq.n	900028fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
900028f2:	4b0a      	ldr	r3, [pc, #40]	; (9000291c <HAL_Delay+0x44>)
900028f4:	781b      	ldrb	r3, [r3, #0]
900028f6:	461a      	mov	r2, r3
900028f8:	68fb      	ldr	r3, [r7, #12]
900028fa:	4413      	add	r3, r2
900028fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
900028fe:	bf00      	nop
90002900:	f7ff ffde 	bl	900028c0 <HAL_GetTick>
90002904:	4602      	mov	r2, r0
90002906:	68bb      	ldr	r3, [r7, #8]
90002908:	1ad3      	subs	r3, r2, r3
9000290a:	68fa      	ldr	r2, [r7, #12]
9000290c:	429a      	cmp	r2, r3
9000290e:	d8f7      	bhi.n	90002900 <HAL_Delay+0x28>
  {
  }
}
90002910:	bf00      	nop
90002912:	bf00      	nop
90002914:	3710      	adds	r7, #16
90002916:	46bd      	mov	sp, r7
90002918:	bd80      	pop	{r7, pc}
9000291a:	bf00      	nop
9000291c:	20000044 	.word	0x20000044

90002920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
90002920:	b480      	push	{r7}
90002922:	b085      	sub	sp, #20
90002924:	af00      	add	r7, sp, #0
90002926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
90002928:	687b      	ldr	r3, [r7, #4]
9000292a:	f003 0307 	and.w	r3, r3, #7
9000292e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90002930:	4b0b      	ldr	r3, [pc, #44]	; (90002960 <__NVIC_SetPriorityGrouping+0x40>)
90002932:	68db      	ldr	r3, [r3, #12]
90002934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90002936:	68ba      	ldr	r2, [r7, #8]
90002938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
9000293c:	4013      	ands	r3, r2
9000293e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90002940:	68fb      	ldr	r3, [r7, #12]
90002942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
90002944:	68bb      	ldr	r3, [r7, #8]
90002946:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
90002948:	4b06      	ldr	r3, [pc, #24]	; (90002964 <__NVIC_SetPriorityGrouping+0x44>)
9000294a:	4313      	orrs	r3, r2
9000294c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
9000294e:	4a04      	ldr	r2, [pc, #16]	; (90002960 <__NVIC_SetPriorityGrouping+0x40>)
90002950:	68bb      	ldr	r3, [r7, #8]
90002952:	60d3      	str	r3, [r2, #12]
}
90002954:	bf00      	nop
90002956:	3714      	adds	r7, #20
90002958:	46bd      	mov	sp, r7
9000295a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000295e:	4770      	bx	lr
90002960:	e000ed00 	.word	0xe000ed00
90002964:	05fa0000 	.word	0x05fa0000

90002968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
90002968:	b480      	push	{r7}
9000296a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
9000296c:	4b04      	ldr	r3, [pc, #16]	; (90002980 <__NVIC_GetPriorityGrouping+0x18>)
9000296e:	68db      	ldr	r3, [r3, #12]
90002970:	0a1b      	lsrs	r3, r3, #8
90002972:	f003 0307 	and.w	r3, r3, #7
}
90002976:	4618      	mov	r0, r3
90002978:	46bd      	mov	sp, r7
9000297a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000297e:	4770      	bx	lr
90002980:	e000ed00 	.word	0xe000ed00

90002984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
90002984:	b480      	push	{r7}
90002986:	b083      	sub	sp, #12
90002988:	af00      	add	r7, sp, #0
9000298a:	4603      	mov	r3, r0
9000298c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
9000298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
90002992:	2b00      	cmp	r3, #0
90002994:	db0b      	blt.n	900029ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90002996:	79fb      	ldrb	r3, [r7, #7]
90002998:	f003 021f 	and.w	r2, r3, #31
9000299c:	4907      	ldr	r1, [pc, #28]	; (900029bc <__NVIC_EnableIRQ+0x38>)
9000299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
900029a2:	095b      	lsrs	r3, r3, #5
900029a4:	2001      	movs	r0, #1
900029a6:	fa00 f202 	lsl.w	r2, r0, r2
900029aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
900029ae:	bf00      	nop
900029b0:	370c      	adds	r7, #12
900029b2:	46bd      	mov	sp, r7
900029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
900029b8:	4770      	bx	lr
900029ba:	bf00      	nop
900029bc:	e000e100 	.word	0xe000e100

900029c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
900029c0:	b480      	push	{r7}
900029c2:	b083      	sub	sp, #12
900029c4:	af00      	add	r7, sp, #0
900029c6:	4603      	mov	r3, r0
900029c8:	6039      	str	r1, [r7, #0]
900029ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
900029cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
900029d0:	2b00      	cmp	r3, #0
900029d2:	db0a      	blt.n	900029ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900029d4:	683b      	ldr	r3, [r7, #0]
900029d6:	b2da      	uxtb	r2, r3
900029d8:	490c      	ldr	r1, [pc, #48]	; (90002a0c <__NVIC_SetPriority+0x4c>)
900029da:	f997 3007 	ldrsb.w	r3, [r7, #7]
900029de:	0112      	lsls	r2, r2, #4
900029e0:	b2d2      	uxtb	r2, r2
900029e2:	440b      	add	r3, r1
900029e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
900029e8:	e00a      	b.n	90002a00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900029ea:	683b      	ldr	r3, [r7, #0]
900029ec:	b2da      	uxtb	r2, r3
900029ee:	4908      	ldr	r1, [pc, #32]	; (90002a10 <__NVIC_SetPriority+0x50>)
900029f0:	79fb      	ldrb	r3, [r7, #7]
900029f2:	f003 030f 	and.w	r3, r3, #15
900029f6:	3b04      	subs	r3, #4
900029f8:	0112      	lsls	r2, r2, #4
900029fa:	b2d2      	uxtb	r2, r2
900029fc:	440b      	add	r3, r1
900029fe:	761a      	strb	r2, [r3, #24]
}
90002a00:	bf00      	nop
90002a02:	370c      	adds	r7, #12
90002a04:	46bd      	mov	sp, r7
90002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
90002a0a:	4770      	bx	lr
90002a0c:	e000e100 	.word	0xe000e100
90002a10:	e000ed00 	.word	0xe000ed00

90002a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
90002a14:	b480      	push	{r7}
90002a16:	b089      	sub	sp, #36	; 0x24
90002a18:	af00      	add	r7, sp, #0
90002a1a:	60f8      	str	r0, [r7, #12]
90002a1c:	60b9      	str	r1, [r7, #8]
90002a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
90002a20:	68fb      	ldr	r3, [r7, #12]
90002a22:	f003 0307 	and.w	r3, r3, #7
90002a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90002a28:	69fb      	ldr	r3, [r7, #28]
90002a2a:	f1c3 0307 	rsb	r3, r3, #7
90002a2e:	2b04      	cmp	r3, #4
90002a30:	bf28      	it	cs
90002a32:	2304      	movcs	r3, #4
90002a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90002a36:	69fb      	ldr	r3, [r7, #28]
90002a38:	3304      	adds	r3, #4
90002a3a:	2b06      	cmp	r3, #6
90002a3c:	d902      	bls.n	90002a44 <NVIC_EncodePriority+0x30>
90002a3e:	69fb      	ldr	r3, [r7, #28]
90002a40:	3b03      	subs	r3, #3
90002a42:	e000      	b.n	90002a46 <NVIC_EncodePriority+0x32>
90002a44:	2300      	movs	r3, #0
90002a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90002a48:	f04f 32ff 	mov.w	r2, #4294967295
90002a4c:	69bb      	ldr	r3, [r7, #24]
90002a4e:	fa02 f303 	lsl.w	r3, r2, r3
90002a52:	43da      	mvns	r2, r3
90002a54:	68bb      	ldr	r3, [r7, #8]
90002a56:	401a      	ands	r2, r3
90002a58:	697b      	ldr	r3, [r7, #20]
90002a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90002a5c:	f04f 31ff 	mov.w	r1, #4294967295
90002a60:	697b      	ldr	r3, [r7, #20]
90002a62:	fa01 f303 	lsl.w	r3, r1, r3
90002a66:	43d9      	mvns	r1, r3
90002a68:	687b      	ldr	r3, [r7, #4]
90002a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90002a6c:	4313      	orrs	r3, r2
         );
}
90002a6e:	4618      	mov	r0, r3
90002a70:	3724      	adds	r7, #36	; 0x24
90002a72:	46bd      	mov	sp, r7
90002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
90002a78:	4770      	bx	lr
	...

90002a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
90002a7c:	b580      	push	{r7, lr}
90002a7e:	b082      	sub	sp, #8
90002a80:	af00      	add	r7, sp, #0
90002a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
90002a84:	687b      	ldr	r3, [r7, #4]
90002a86:	3b01      	subs	r3, #1
90002a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
90002a8c:	d301      	bcc.n	90002a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
90002a8e:	2301      	movs	r3, #1
90002a90:	e00f      	b.n	90002ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
90002a92:	4a0a      	ldr	r2, [pc, #40]	; (90002abc <SysTick_Config+0x40>)
90002a94:	687b      	ldr	r3, [r7, #4]
90002a96:	3b01      	subs	r3, #1
90002a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
90002a9a:	210f      	movs	r1, #15
90002a9c:	f04f 30ff 	mov.w	r0, #4294967295
90002aa0:	f7ff ff8e 	bl	900029c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
90002aa4:	4b05      	ldr	r3, [pc, #20]	; (90002abc <SysTick_Config+0x40>)
90002aa6:	2200      	movs	r2, #0
90002aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
90002aaa:	4b04      	ldr	r3, [pc, #16]	; (90002abc <SysTick_Config+0x40>)
90002aac:	2207      	movs	r2, #7
90002aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
90002ab0:	2300      	movs	r3, #0
}
90002ab2:	4618      	mov	r0, r3
90002ab4:	3708      	adds	r7, #8
90002ab6:	46bd      	mov	sp, r7
90002ab8:	bd80      	pop	{r7, pc}
90002aba:	bf00      	nop
90002abc:	e000e010 	.word	0xe000e010

90002ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
90002ac0:	b580      	push	{r7, lr}
90002ac2:	b082      	sub	sp, #8
90002ac4:	af00      	add	r7, sp, #0
90002ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
90002ac8:	6878      	ldr	r0, [r7, #4]
90002aca:	f7ff ff29 	bl	90002920 <__NVIC_SetPriorityGrouping>
}
90002ace:	bf00      	nop
90002ad0:	3708      	adds	r7, #8
90002ad2:	46bd      	mov	sp, r7
90002ad4:	bd80      	pop	{r7, pc}

90002ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
90002ad6:	b580      	push	{r7, lr}
90002ad8:	b086      	sub	sp, #24
90002ada:	af00      	add	r7, sp, #0
90002adc:	4603      	mov	r3, r0
90002ade:	60b9      	str	r1, [r7, #8]
90002ae0:	607a      	str	r2, [r7, #4]
90002ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
90002ae4:	2300      	movs	r3, #0
90002ae6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
90002ae8:	f7ff ff3e 	bl	90002968 <__NVIC_GetPriorityGrouping>
90002aec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
90002aee:	687a      	ldr	r2, [r7, #4]
90002af0:	68b9      	ldr	r1, [r7, #8]
90002af2:	6978      	ldr	r0, [r7, #20]
90002af4:	f7ff ff8e 	bl	90002a14 <NVIC_EncodePriority>
90002af8:	4602      	mov	r2, r0
90002afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
90002afe:	4611      	mov	r1, r2
90002b00:	4618      	mov	r0, r3
90002b02:	f7ff ff5d 	bl	900029c0 <__NVIC_SetPriority>
}
90002b06:	bf00      	nop
90002b08:	3718      	adds	r7, #24
90002b0a:	46bd      	mov	sp, r7
90002b0c:	bd80      	pop	{r7, pc}

90002b0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
90002b0e:	b580      	push	{r7, lr}
90002b10:	b082      	sub	sp, #8
90002b12:	af00      	add	r7, sp, #0
90002b14:	4603      	mov	r3, r0
90002b16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
90002b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
90002b1c:	4618      	mov	r0, r3
90002b1e:	f7ff ff31 	bl	90002984 <__NVIC_EnableIRQ>
}
90002b22:	bf00      	nop
90002b24:	3708      	adds	r7, #8
90002b26:	46bd      	mov	sp, r7
90002b28:	bd80      	pop	{r7, pc}

90002b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
90002b2a:	b580      	push	{r7, lr}
90002b2c:	b082      	sub	sp, #8
90002b2e:	af00      	add	r7, sp, #0
90002b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
90002b32:	6878      	ldr	r0, [r7, #4]
90002b34:	f7ff ffa2 	bl	90002a7c <SysTick_Config>
90002b38:	4603      	mov	r3, r0
}
90002b3a:	4618      	mov	r0, r3
90002b3c:	3708      	adds	r7, #8
90002b3e:	46bd      	mov	sp, r7
90002b40:	bd80      	pop	{r7, pc}
	...

90002b44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
90002b44:	b580      	push	{r7, lr}
90002b46:	b086      	sub	sp, #24
90002b48:	af00      	add	r7, sp, #0
90002b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
90002b4c:	2300      	movs	r3, #0
90002b4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
90002b50:	f7ff feb6 	bl	900028c0 <HAL_GetTick>
90002b54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
90002b56:	687b      	ldr	r3, [r7, #4]
90002b58:	2b00      	cmp	r3, #0
90002b5a:	d101      	bne.n	90002b60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
90002b5c:	2301      	movs	r3, #1
90002b5e:	e099      	b.n	90002c94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
90002b60:	687b      	ldr	r3, [r7, #4]
90002b62:	2200      	movs	r2, #0
90002b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
90002b68:	687b      	ldr	r3, [r7, #4]
90002b6a:	2202      	movs	r2, #2
90002b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
90002b70:	687b      	ldr	r3, [r7, #4]
90002b72:	681b      	ldr	r3, [r3, #0]
90002b74:	681a      	ldr	r2, [r3, #0]
90002b76:	687b      	ldr	r3, [r7, #4]
90002b78:	681b      	ldr	r3, [r3, #0]
90002b7a:	f022 0201 	bic.w	r2, r2, #1
90002b7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
90002b80:	e00f      	b.n	90002ba2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
90002b82:	f7ff fe9d 	bl	900028c0 <HAL_GetTick>
90002b86:	4602      	mov	r2, r0
90002b88:	693b      	ldr	r3, [r7, #16]
90002b8a:	1ad3      	subs	r3, r2, r3
90002b8c:	2b05      	cmp	r3, #5
90002b8e:	d908      	bls.n	90002ba2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
90002b90:	687b      	ldr	r3, [r7, #4]
90002b92:	2220      	movs	r2, #32
90002b94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
90002b96:	687b      	ldr	r3, [r7, #4]
90002b98:	2203      	movs	r2, #3
90002b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
90002b9e:	2303      	movs	r3, #3
90002ba0:	e078      	b.n	90002c94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
90002ba2:	687b      	ldr	r3, [r7, #4]
90002ba4:	681b      	ldr	r3, [r3, #0]
90002ba6:	681b      	ldr	r3, [r3, #0]
90002ba8:	f003 0301 	and.w	r3, r3, #1
90002bac:	2b00      	cmp	r3, #0
90002bae:	d1e8      	bne.n	90002b82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
90002bb0:	687b      	ldr	r3, [r7, #4]
90002bb2:	681b      	ldr	r3, [r3, #0]
90002bb4:	681b      	ldr	r3, [r3, #0]
90002bb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
90002bb8:	697a      	ldr	r2, [r7, #20]
90002bba:	4b38      	ldr	r3, [pc, #224]	; (90002c9c <HAL_DMA_Init+0x158>)
90002bbc:	4013      	ands	r3, r2
90002bbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
90002bc0:	687b      	ldr	r3, [r7, #4]
90002bc2:	685a      	ldr	r2, [r3, #4]
90002bc4:	687b      	ldr	r3, [r7, #4]
90002bc6:	689b      	ldr	r3, [r3, #8]
90002bc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
90002bca:	687b      	ldr	r3, [r7, #4]
90002bcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
90002bce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
90002bd0:	687b      	ldr	r3, [r7, #4]
90002bd2:	691b      	ldr	r3, [r3, #16]
90002bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
90002bd6:	687b      	ldr	r3, [r7, #4]
90002bd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
90002bda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
90002bdc:	687b      	ldr	r3, [r7, #4]
90002bde:	699b      	ldr	r3, [r3, #24]
90002be0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
90002be2:	687b      	ldr	r3, [r7, #4]
90002be4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
90002be6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
90002be8:	687b      	ldr	r3, [r7, #4]
90002bea:	6a1b      	ldr	r3, [r3, #32]
90002bec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
90002bee:	697a      	ldr	r2, [r7, #20]
90002bf0:	4313      	orrs	r3, r2
90002bf2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
90002bf4:	687b      	ldr	r3, [r7, #4]
90002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002bf8:	2b04      	cmp	r3, #4
90002bfa:	d107      	bne.n	90002c0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
90002bfc:	687b      	ldr	r3, [r7, #4]
90002bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90002c00:	687b      	ldr	r3, [r7, #4]
90002c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90002c04:	4313      	orrs	r3, r2
90002c06:	697a      	ldr	r2, [r7, #20]
90002c08:	4313      	orrs	r3, r2
90002c0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
90002c0c:	687b      	ldr	r3, [r7, #4]
90002c0e:	681b      	ldr	r3, [r3, #0]
90002c10:	697a      	ldr	r2, [r7, #20]
90002c12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
90002c14:	687b      	ldr	r3, [r7, #4]
90002c16:	681b      	ldr	r3, [r3, #0]
90002c18:	695b      	ldr	r3, [r3, #20]
90002c1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
90002c1c:	697b      	ldr	r3, [r7, #20]
90002c1e:	f023 0307 	bic.w	r3, r3, #7
90002c22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
90002c24:	687b      	ldr	r3, [r7, #4]
90002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002c28:	697a      	ldr	r2, [r7, #20]
90002c2a:	4313      	orrs	r3, r2
90002c2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
90002c2e:	687b      	ldr	r3, [r7, #4]
90002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002c32:	2b04      	cmp	r3, #4
90002c34:	d117      	bne.n	90002c66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
90002c36:	687b      	ldr	r3, [r7, #4]
90002c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90002c3a:	697a      	ldr	r2, [r7, #20]
90002c3c:	4313      	orrs	r3, r2
90002c3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
90002c40:	687b      	ldr	r3, [r7, #4]
90002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002c44:	2b00      	cmp	r3, #0
90002c46:	d00e      	beq.n	90002c66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
90002c48:	6878      	ldr	r0, [r7, #4]
90002c4a:	f000 f8bd 	bl	90002dc8 <DMA_CheckFifoParam>
90002c4e:	4603      	mov	r3, r0
90002c50:	2b00      	cmp	r3, #0
90002c52:	d008      	beq.n	90002c66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
90002c54:	687b      	ldr	r3, [r7, #4]
90002c56:	2240      	movs	r2, #64	; 0x40
90002c58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
90002c5a:	687b      	ldr	r3, [r7, #4]
90002c5c:	2201      	movs	r2, #1
90002c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
90002c62:	2301      	movs	r3, #1
90002c64:	e016      	b.n	90002c94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
90002c66:	687b      	ldr	r3, [r7, #4]
90002c68:	681b      	ldr	r3, [r3, #0]
90002c6a:	697a      	ldr	r2, [r7, #20]
90002c6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
90002c6e:	6878      	ldr	r0, [r7, #4]
90002c70:	f000 f874 	bl	90002d5c <DMA_CalcBaseAndBitshift>
90002c74:	4603      	mov	r3, r0
90002c76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
90002c78:	687b      	ldr	r3, [r7, #4]
90002c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90002c7c:	223f      	movs	r2, #63	; 0x3f
90002c7e:	409a      	lsls	r2, r3
90002c80:	68fb      	ldr	r3, [r7, #12]
90002c82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
90002c84:	687b      	ldr	r3, [r7, #4]
90002c86:	2200      	movs	r2, #0
90002c88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
90002c8a:	687b      	ldr	r3, [r7, #4]
90002c8c:	2201      	movs	r2, #1
90002c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
90002c92:	2300      	movs	r3, #0
}
90002c94:	4618      	mov	r0, r3
90002c96:	3718      	adds	r7, #24
90002c98:	46bd      	mov	sp, r7
90002c9a:	bd80      	pop	{r7, pc}
90002c9c:	f010803f 	.word	0xf010803f

90002ca0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
90002ca0:	b580      	push	{r7, lr}
90002ca2:	b084      	sub	sp, #16
90002ca4:	af00      	add	r7, sp, #0
90002ca6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
90002ca8:	687b      	ldr	r3, [r7, #4]
90002caa:	2b00      	cmp	r3, #0
90002cac:	d101      	bne.n	90002cb2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
90002cae:	2301      	movs	r3, #1
90002cb0:	e050      	b.n	90002d54 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
90002cb2:	687b      	ldr	r3, [r7, #4]
90002cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
90002cb8:	b2db      	uxtb	r3, r3
90002cba:	2b02      	cmp	r3, #2
90002cbc:	d101      	bne.n	90002cc2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
90002cbe:	2302      	movs	r3, #2
90002cc0:	e048      	b.n	90002d54 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
90002cc2:	687b      	ldr	r3, [r7, #4]
90002cc4:	681b      	ldr	r3, [r3, #0]
90002cc6:	681a      	ldr	r2, [r3, #0]
90002cc8:	687b      	ldr	r3, [r7, #4]
90002cca:	681b      	ldr	r3, [r3, #0]
90002ccc:	f022 0201 	bic.w	r2, r2, #1
90002cd0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
90002cd2:	687b      	ldr	r3, [r7, #4]
90002cd4:	681b      	ldr	r3, [r3, #0]
90002cd6:	2200      	movs	r2, #0
90002cd8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
90002cda:	687b      	ldr	r3, [r7, #4]
90002cdc:	681b      	ldr	r3, [r3, #0]
90002cde:	2200      	movs	r2, #0
90002ce0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
90002ce2:	687b      	ldr	r3, [r7, #4]
90002ce4:	681b      	ldr	r3, [r3, #0]
90002ce6:	2200      	movs	r2, #0
90002ce8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
90002cea:	687b      	ldr	r3, [r7, #4]
90002cec:	681b      	ldr	r3, [r3, #0]
90002cee:	2200      	movs	r2, #0
90002cf0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
90002cf2:	687b      	ldr	r3, [r7, #4]
90002cf4:	681b      	ldr	r3, [r3, #0]
90002cf6:	2200      	movs	r2, #0
90002cf8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
90002cfa:	687b      	ldr	r3, [r7, #4]
90002cfc:	681b      	ldr	r3, [r3, #0]
90002cfe:	2221      	movs	r2, #33	; 0x21
90002d00:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
90002d02:	6878      	ldr	r0, [r7, #4]
90002d04:	f000 f82a 	bl	90002d5c <DMA_CalcBaseAndBitshift>
90002d08:	4603      	mov	r3, r0
90002d0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
90002d0c:	687b      	ldr	r3, [r7, #4]
90002d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90002d10:	223f      	movs	r2, #63	; 0x3f
90002d12:	409a      	lsls	r2, r3
90002d14:	68fb      	ldr	r3, [r7, #12]
90002d16:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
90002d18:	687b      	ldr	r3, [r7, #4]
90002d1a:	2200      	movs	r2, #0
90002d1c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
90002d1e:	687b      	ldr	r3, [r7, #4]
90002d20:	2200      	movs	r2, #0
90002d22:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
90002d24:	687b      	ldr	r3, [r7, #4]
90002d26:	2200      	movs	r2, #0
90002d28:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
90002d2a:	687b      	ldr	r3, [r7, #4]
90002d2c:	2200      	movs	r2, #0
90002d2e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
90002d30:	687b      	ldr	r3, [r7, #4]
90002d32:	2200      	movs	r2, #0
90002d34:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
90002d36:	687b      	ldr	r3, [r7, #4]
90002d38:	2200      	movs	r2, #0
90002d3a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
90002d3c:	687b      	ldr	r3, [r7, #4]
90002d3e:	2200      	movs	r2, #0
90002d40:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
90002d42:	687b      	ldr	r3, [r7, #4]
90002d44:	2200      	movs	r2, #0
90002d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
90002d4a:	687b      	ldr	r3, [r7, #4]
90002d4c:	2200      	movs	r2, #0
90002d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
90002d52:	2300      	movs	r3, #0
}
90002d54:	4618      	mov	r0, r3
90002d56:	3710      	adds	r7, #16
90002d58:	46bd      	mov	sp, r7
90002d5a:	bd80      	pop	{r7, pc}

90002d5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
90002d5c:	b480      	push	{r7}
90002d5e:	b085      	sub	sp, #20
90002d60:	af00      	add	r7, sp, #0
90002d62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
90002d64:	687b      	ldr	r3, [r7, #4]
90002d66:	681b      	ldr	r3, [r3, #0]
90002d68:	b2db      	uxtb	r3, r3
90002d6a:	3b10      	subs	r3, #16
90002d6c:	4a13      	ldr	r2, [pc, #76]	; (90002dbc <DMA_CalcBaseAndBitshift+0x60>)
90002d6e:	fba2 2303 	umull	r2, r3, r2, r3
90002d72:	091b      	lsrs	r3, r3, #4
90002d74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
90002d76:	4a12      	ldr	r2, [pc, #72]	; (90002dc0 <DMA_CalcBaseAndBitshift+0x64>)
90002d78:	68fb      	ldr	r3, [r7, #12]
90002d7a:	4413      	add	r3, r2
90002d7c:	781b      	ldrb	r3, [r3, #0]
90002d7e:	461a      	mov	r2, r3
90002d80:	687b      	ldr	r3, [r7, #4]
90002d82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
90002d84:	68fb      	ldr	r3, [r7, #12]
90002d86:	2b03      	cmp	r3, #3
90002d88:	d908      	bls.n	90002d9c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
90002d8a:	687b      	ldr	r3, [r7, #4]
90002d8c:	681b      	ldr	r3, [r3, #0]
90002d8e:	461a      	mov	r2, r3
90002d90:	4b0c      	ldr	r3, [pc, #48]	; (90002dc4 <DMA_CalcBaseAndBitshift+0x68>)
90002d92:	4013      	ands	r3, r2
90002d94:	1d1a      	adds	r2, r3, #4
90002d96:	687b      	ldr	r3, [r7, #4]
90002d98:	659a      	str	r2, [r3, #88]	; 0x58
90002d9a:	e006      	b.n	90002daa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
90002d9c:	687b      	ldr	r3, [r7, #4]
90002d9e:	681b      	ldr	r3, [r3, #0]
90002da0:	461a      	mov	r2, r3
90002da2:	4b08      	ldr	r3, [pc, #32]	; (90002dc4 <DMA_CalcBaseAndBitshift+0x68>)
90002da4:	4013      	ands	r3, r2
90002da6:	687a      	ldr	r2, [r7, #4]
90002da8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
90002daa:	687b      	ldr	r3, [r7, #4]
90002dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
90002dae:	4618      	mov	r0, r3
90002db0:	3714      	adds	r7, #20
90002db2:	46bd      	mov	sp, r7
90002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
90002db8:	4770      	bx	lr
90002dba:	bf00      	nop
90002dbc:	aaaaaaab 	.word	0xaaaaaaab
90002dc0:	90008610 	.word	0x90008610
90002dc4:	fffffc00 	.word	0xfffffc00

90002dc8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
90002dc8:	b480      	push	{r7}
90002dca:	b085      	sub	sp, #20
90002dcc:	af00      	add	r7, sp, #0
90002dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
90002dd0:	2300      	movs	r3, #0
90002dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
90002dd4:	687b      	ldr	r3, [r7, #4]
90002dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90002dd8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
90002dda:	687b      	ldr	r3, [r7, #4]
90002ddc:	699b      	ldr	r3, [r3, #24]
90002dde:	2b00      	cmp	r3, #0
90002de0:	d11f      	bne.n	90002e22 <DMA_CheckFifoParam+0x5a>
90002de2:	68bb      	ldr	r3, [r7, #8]
90002de4:	2b03      	cmp	r3, #3
90002de6:	d856      	bhi.n	90002e96 <DMA_CheckFifoParam+0xce>
90002de8:	a201      	add	r2, pc, #4	; (adr r2, 90002df0 <DMA_CheckFifoParam+0x28>)
90002dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90002dee:	bf00      	nop
90002df0:	90002e01 	.word	0x90002e01
90002df4:	90002e13 	.word	0x90002e13
90002df8:	90002e01 	.word	0x90002e01
90002dfc:	90002e97 	.word	0x90002e97
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
90002e00:	687b      	ldr	r3, [r7, #4]
90002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002e04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
90002e08:	2b00      	cmp	r3, #0
90002e0a:	d046      	beq.n	90002e9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
90002e0c:	2301      	movs	r3, #1
90002e0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
90002e10:	e043      	b.n	90002e9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
90002e12:	687b      	ldr	r3, [r7, #4]
90002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002e16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
90002e1a:	d140      	bne.n	90002e9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
90002e1c:	2301      	movs	r3, #1
90002e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
90002e20:	e03d      	b.n	90002e9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
90002e22:	687b      	ldr	r3, [r7, #4]
90002e24:	699b      	ldr	r3, [r3, #24]
90002e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90002e2a:	d121      	bne.n	90002e70 <DMA_CheckFifoParam+0xa8>
90002e2c:	68bb      	ldr	r3, [r7, #8]
90002e2e:	2b03      	cmp	r3, #3
90002e30:	d837      	bhi.n	90002ea2 <DMA_CheckFifoParam+0xda>
90002e32:	a201      	add	r2, pc, #4	; (adr r2, 90002e38 <DMA_CheckFifoParam+0x70>)
90002e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90002e38:	90002e49 	.word	0x90002e49
90002e3c:	90002e4f 	.word	0x90002e4f
90002e40:	90002e49 	.word	0x90002e49
90002e44:	90002e61 	.word	0x90002e61
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
90002e48:	2301      	movs	r3, #1
90002e4a:	73fb      	strb	r3, [r7, #15]
      break;
90002e4c:	e030      	b.n	90002eb0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
90002e4e:	687b      	ldr	r3, [r7, #4]
90002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002e52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
90002e56:	2b00      	cmp	r3, #0
90002e58:	d025      	beq.n	90002ea6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
90002e5a:	2301      	movs	r3, #1
90002e5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
90002e5e:	e022      	b.n	90002ea6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
90002e60:	687b      	ldr	r3, [r7, #4]
90002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002e64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
90002e68:	d11f      	bne.n	90002eaa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
90002e6a:	2301      	movs	r3, #1
90002e6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
90002e6e:	e01c      	b.n	90002eaa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
90002e70:	68bb      	ldr	r3, [r7, #8]
90002e72:	2b02      	cmp	r3, #2
90002e74:	d903      	bls.n	90002e7e <DMA_CheckFifoParam+0xb6>
90002e76:	68bb      	ldr	r3, [r7, #8]
90002e78:	2b03      	cmp	r3, #3
90002e7a:	d003      	beq.n	90002e84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
90002e7c:	e018      	b.n	90002eb0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
90002e7e:	2301      	movs	r3, #1
90002e80:	73fb      	strb	r3, [r7, #15]
      break;
90002e82:	e015      	b.n	90002eb0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
90002e84:	687b      	ldr	r3, [r7, #4]
90002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002e88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
90002e8c:	2b00      	cmp	r3, #0
90002e8e:	d00e      	beq.n	90002eae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
90002e90:	2301      	movs	r3, #1
90002e92:	73fb      	strb	r3, [r7, #15]
      break;
90002e94:	e00b      	b.n	90002eae <DMA_CheckFifoParam+0xe6>
      break;
90002e96:	bf00      	nop
90002e98:	e00a      	b.n	90002eb0 <DMA_CheckFifoParam+0xe8>
      break;
90002e9a:	bf00      	nop
90002e9c:	e008      	b.n	90002eb0 <DMA_CheckFifoParam+0xe8>
      break;
90002e9e:	bf00      	nop
90002ea0:	e006      	b.n	90002eb0 <DMA_CheckFifoParam+0xe8>
      break;
90002ea2:	bf00      	nop
90002ea4:	e004      	b.n	90002eb0 <DMA_CheckFifoParam+0xe8>
      break;
90002ea6:	bf00      	nop
90002ea8:	e002      	b.n	90002eb0 <DMA_CheckFifoParam+0xe8>
      break;   
90002eaa:	bf00      	nop
90002eac:	e000      	b.n	90002eb0 <DMA_CheckFifoParam+0xe8>
      break;
90002eae:	bf00      	nop
    }
  } 
  
  return status; 
90002eb0:	7bfb      	ldrb	r3, [r7, #15]
}
90002eb2:	4618      	mov	r0, r3
90002eb4:	3714      	adds	r7, #20
90002eb6:	46bd      	mov	sp, r7
90002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
90002ebc:	4770      	bx	lr
90002ebe:	bf00      	nop

90002ec0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
90002ec0:	b580      	push	{r7, lr}
90002ec2:	b082      	sub	sp, #8
90002ec4:	af00      	add	r7, sp, #0
90002ec6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
90002ec8:	687b      	ldr	r3, [r7, #4]
90002eca:	2b00      	cmp	r3, #0
90002ecc:	d101      	bne.n	90002ed2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
90002ece:	2301      	movs	r3, #1
90002ed0:	e039      	b.n	90002f46 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
90002ed2:	687b      	ldr	r3, [r7, #4]
90002ed4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
90002ed8:	b2db      	uxtb	r3, r3
90002eda:	2b00      	cmp	r3, #0
90002edc:	d106      	bne.n	90002eec <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
90002ede:	687b      	ldr	r3, [r7, #4]
90002ee0:	2200      	movs	r2, #0
90002ee2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
90002ee6:	6878      	ldr	r0, [r7, #4]
90002ee8:	f000 f834 	bl	90002f54 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90002eec:	687b      	ldr	r3, [r7, #4]
90002eee:	2202      	movs	r2, #2
90002ef0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
90002ef4:	687b      	ldr	r3, [r7, #4]
90002ef6:	681b      	ldr	r3, [r3, #0]
90002ef8:	681b      	ldr	r3, [r3, #0]
90002efa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
90002efe:	687b      	ldr	r3, [r7, #4]
90002f00:	685a      	ldr	r2, [r3, #4]
90002f02:	687b      	ldr	r3, [r7, #4]
90002f04:	681b      	ldr	r3, [r3, #0]
90002f06:	430a      	orrs	r2, r1
90002f08:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
90002f0a:	687b      	ldr	r3, [r7, #4]
90002f0c:	681b      	ldr	r3, [r3, #0]
90002f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90002f10:	f023 0107 	bic.w	r1, r3, #7
90002f14:	687b      	ldr	r3, [r7, #4]
90002f16:	689a      	ldr	r2, [r3, #8]
90002f18:	687b      	ldr	r3, [r7, #4]
90002f1a:	681b      	ldr	r3, [r3, #0]
90002f1c:	430a      	orrs	r2, r1
90002f1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90002f20:	687b      	ldr	r3, [r7, #4]
90002f22:	681b      	ldr	r3, [r3, #0]
90002f24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
90002f26:	4b0a      	ldr	r3, [pc, #40]	; (90002f50 <HAL_DMA2D_Init+0x90>)
90002f28:	4013      	ands	r3, r2
90002f2a:	687a      	ldr	r2, [r7, #4]
90002f2c:	68d1      	ldr	r1, [r2, #12]
90002f2e:	687a      	ldr	r2, [r7, #4]
90002f30:	6812      	ldr	r2, [r2, #0]
90002f32:	430b      	orrs	r3, r1
90002f34:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90002f36:	687b      	ldr	r3, [r7, #4]
90002f38:	2200      	movs	r2, #0
90002f3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90002f3c:	687b      	ldr	r3, [r7, #4]
90002f3e:	2201      	movs	r2, #1
90002f40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
90002f44:	2300      	movs	r3, #0
}
90002f46:	4618      	mov	r0, r3
90002f48:	3708      	adds	r7, #8
90002f4a:	46bd      	mov	sp, r7
90002f4c:	bd80      	pop	{r7, pc}
90002f4e:	bf00      	nop
90002f50:	ffffc000 	.word	0xffffc000

90002f54 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
90002f54:	b480      	push	{r7}
90002f56:	b083      	sub	sp, #12
90002f58:	af00      	add	r7, sp, #0
90002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
90002f5c:	bf00      	nop
90002f5e:	370c      	adds	r7, #12
90002f60:	46bd      	mov	sp, r7
90002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
90002f66:	4770      	bx	lr

90002f68 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
90002f68:	b580      	push	{r7, lr}
90002f6a:	b086      	sub	sp, #24
90002f6c:	af02      	add	r7, sp, #8
90002f6e:	60f8      	str	r0, [r7, #12]
90002f70:	60b9      	str	r1, [r7, #8]
90002f72:	607a      	str	r2, [r7, #4]
90002f74:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
90002f76:	68fb      	ldr	r3, [r7, #12]
90002f78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
90002f7c:	2b01      	cmp	r3, #1
90002f7e:	d101      	bne.n	90002f84 <HAL_DMA2D_Start+0x1c>
90002f80:	2302      	movs	r3, #2
90002f82:	e018      	b.n	90002fb6 <HAL_DMA2D_Start+0x4e>
90002f84:	68fb      	ldr	r3, [r7, #12]
90002f86:	2201      	movs	r2, #1
90002f88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90002f8c:	68fb      	ldr	r3, [r7, #12]
90002f8e:	2202      	movs	r2, #2
90002f90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
90002f94:	69bb      	ldr	r3, [r7, #24]
90002f96:	9300      	str	r3, [sp, #0]
90002f98:	683b      	ldr	r3, [r7, #0]
90002f9a:	687a      	ldr	r2, [r7, #4]
90002f9c:	68b9      	ldr	r1, [r7, #8]
90002f9e:	68f8      	ldr	r0, [r7, #12]
90002fa0:	f000 f988 	bl	900032b4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
90002fa4:	68fb      	ldr	r3, [r7, #12]
90002fa6:	681b      	ldr	r3, [r3, #0]
90002fa8:	681a      	ldr	r2, [r3, #0]
90002faa:	68fb      	ldr	r3, [r7, #12]
90002fac:	681b      	ldr	r3, [r3, #0]
90002fae:	f042 0201 	orr.w	r2, r2, #1
90002fb2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
90002fb4:	2300      	movs	r3, #0
}
90002fb6:	4618      	mov	r0, r3
90002fb8:	3710      	adds	r7, #16
90002fba:	46bd      	mov	sp, r7
90002fbc:	bd80      	pop	{r7, pc}

90002fbe <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
90002fbe:	b580      	push	{r7, lr}
90002fc0:	b086      	sub	sp, #24
90002fc2:	af00      	add	r7, sp, #0
90002fc4:	6078      	str	r0, [r7, #4]
90002fc6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
90002fc8:	2300      	movs	r3, #0
90002fca:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
90002fcc:	687b      	ldr	r3, [r7, #4]
90002fce:	681b      	ldr	r3, [r3, #0]
90002fd0:	681b      	ldr	r3, [r3, #0]
90002fd2:	f003 0301 	and.w	r3, r3, #1
90002fd6:	2b00      	cmp	r3, #0
90002fd8:	d056      	beq.n	90003088 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
90002fda:	f7ff fc71 	bl	900028c0 <HAL_GetTick>
90002fde:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
90002fe0:	e04b      	b.n	9000307a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
90002fe2:	687b      	ldr	r3, [r7, #4]
90002fe4:	681b      	ldr	r3, [r3, #0]
90002fe6:	685b      	ldr	r3, [r3, #4]
90002fe8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
90002fea:	68fb      	ldr	r3, [r7, #12]
90002fec:	f003 0321 	and.w	r3, r3, #33	; 0x21
90002ff0:	2b00      	cmp	r3, #0
90002ff2:	d023      	beq.n	9000303c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
90002ff4:	68fb      	ldr	r3, [r7, #12]
90002ff6:	f003 0320 	and.w	r3, r3, #32
90002ffa:	2b00      	cmp	r3, #0
90002ffc:	d005      	beq.n	9000300a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90002ffe:	687b      	ldr	r3, [r7, #4]
90003000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90003002:	f043 0202 	orr.w	r2, r3, #2
90003006:	687b      	ldr	r3, [r7, #4]
90003008:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
9000300a:	68fb      	ldr	r3, [r7, #12]
9000300c:	f003 0301 	and.w	r3, r3, #1
90003010:	2b00      	cmp	r3, #0
90003012:	d005      	beq.n	90003020 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90003014:	687b      	ldr	r3, [r7, #4]
90003016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90003018:	f043 0201 	orr.w	r2, r3, #1
9000301c:	687b      	ldr	r3, [r7, #4]
9000301e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90003020:	687b      	ldr	r3, [r7, #4]
90003022:	681b      	ldr	r3, [r3, #0]
90003024:	2221      	movs	r2, #33	; 0x21
90003026:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
90003028:	687b      	ldr	r3, [r7, #4]
9000302a:	2204      	movs	r2, #4
9000302c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
90003030:	687b      	ldr	r3, [r7, #4]
90003032:	2200      	movs	r2, #0
90003034:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
90003038:	2301      	movs	r3, #1
9000303a:	e0a5      	b.n	90003188 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
9000303c:	683b      	ldr	r3, [r7, #0]
9000303e:	f1b3 3fff 	cmp.w	r3, #4294967295
90003042:	d01a      	beq.n	9000307a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90003044:	f7ff fc3c 	bl	900028c0 <HAL_GetTick>
90003048:	4602      	mov	r2, r0
9000304a:	697b      	ldr	r3, [r7, #20]
9000304c:	1ad3      	subs	r3, r2, r3
9000304e:	683a      	ldr	r2, [r7, #0]
90003050:	429a      	cmp	r2, r3
90003052:	d302      	bcc.n	9000305a <HAL_DMA2D_PollForTransfer+0x9c>
90003054:	683b      	ldr	r3, [r7, #0]
90003056:	2b00      	cmp	r3, #0
90003058:	d10f      	bne.n	9000307a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
9000305a:	687b      	ldr	r3, [r7, #4]
9000305c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000305e:	f043 0220 	orr.w	r2, r3, #32
90003062:	687b      	ldr	r3, [r7, #4]
90003064:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
90003066:	687b      	ldr	r3, [r7, #4]
90003068:	2203      	movs	r2, #3
9000306a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
9000306e:	687b      	ldr	r3, [r7, #4]
90003070:	2200      	movs	r2, #0
90003072:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
90003076:	2303      	movs	r3, #3
90003078:	e086      	b.n	90003188 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
9000307a:	687b      	ldr	r3, [r7, #4]
9000307c:	681b      	ldr	r3, [r3, #0]
9000307e:	685b      	ldr	r3, [r3, #4]
90003080:	f003 0302 	and.w	r3, r3, #2
90003084:	2b00      	cmp	r3, #0
90003086:	d0ac      	beq.n	90002fe2 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
90003088:	687b      	ldr	r3, [r7, #4]
9000308a:	681b      	ldr	r3, [r3, #0]
9000308c:	69db      	ldr	r3, [r3, #28]
9000308e:	f003 0320 	and.w	r3, r3, #32
90003092:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
90003094:	687b      	ldr	r3, [r7, #4]
90003096:	681b      	ldr	r3, [r3, #0]
90003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000309a:	f003 0320 	and.w	r3, r3, #32
9000309e:	693a      	ldr	r2, [r7, #16]
900030a0:	4313      	orrs	r3, r2
900030a2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
900030a4:	693b      	ldr	r3, [r7, #16]
900030a6:	2b00      	cmp	r3, #0
900030a8:	d061      	beq.n	9000316e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
900030aa:	f7ff fc09 	bl	900028c0 <HAL_GetTick>
900030ae:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
900030b0:	e056      	b.n	90003160 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
900030b2:	687b      	ldr	r3, [r7, #4]
900030b4:	681b      	ldr	r3, [r3, #0]
900030b6:	685b      	ldr	r3, [r3, #4]
900030b8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
900030ba:	68fb      	ldr	r3, [r7, #12]
900030bc:	f003 0329 	and.w	r3, r3, #41	; 0x29
900030c0:	2b00      	cmp	r3, #0
900030c2:	d02e      	beq.n	90003122 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
900030c4:	68fb      	ldr	r3, [r7, #12]
900030c6:	f003 0308 	and.w	r3, r3, #8
900030ca:	2b00      	cmp	r3, #0
900030cc:	d005      	beq.n	900030da <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
900030ce:	687b      	ldr	r3, [r7, #4]
900030d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900030d2:	f043 0204 	orr.w	r2, r3, #4
900030d6:	687b      	ldr	r3, [r7, #4]
900030d8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
900030da:	68fb      	ldr	r3, [r7, #12]
900030dc:	f003 0320 	and.w	r3, r3, #32
900030e0:	2b00      	cmp	r3, #0
900030e2:	d005      	beq.n	900030f0 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
900030e4:	687b      	ldr	r3, [r7, #4]
900030e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900030e8:	f043 0202 	orr.w	r2, r3, #2
900030ec:	687b      	ldr	r3, [r7, #4]
900030ee:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
900030f0:	68fb      	ldr	r3, [r7, #12]
900030f2:	f003 0301 	and.w	r3, r3, #1
900030f6:	2b00      	cmp	r3, #0
900030f8:	d005      	beq.n	90003106 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
900030fa:	687b      	ldr	r3, [r7, #4]
900030fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900030fe:	f043 0201 	orr.w	r2, r3, #1
90003102:	687b      	ldr	r3, [r7, #4]
90003104:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90003106:	687b      	ldr	r3, [r7, #4]
90003108:	681b      	ldr	r3, [r3, #0]
9000310a:	2229      	movs	r2, #41	; 0x29
9000310c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
9000310e:	687b      	ldr	r3, [r7, #4]
90003110:	2204      	movs	r2, #4
90003112:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
90003116:	687b      	ldr	r3, [r7, #4]
90003118:	2200      	movs	r2, #0
9000311a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
9000311e:	2301      	movs	r3, #1
90003120:	e032      	b.n	90003188 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90003122:	683b      	ldr	r3, [r7, #0]
90003124:	f1b3 3fff 	cmp.w	r3, #4294967295
90003128:	d01a      	beq.n	90003160 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000312a:	f7ff fbc9 	bl	900028c0 <HAL_GetTick>
9000312e:	4602      	mov	r2, r0
90003130:	697b      	ldr	r3, [r7, #20]
90003132:	1ad3      	subs	r3, r2, r3
90003134:	683a      	ldr	r2, [r7, #0]
90003136:	429a      	cmp	r2, r3
90003138:	d302      	bcc.n	90003140 <HAL_DMA2D_PollForTransfer+0x182>
9000313a:	683b      	ldr	r3, [r7, #0]
9000313c:	2b00      	cmp	r3, #0
9000313e:	d10f      	bne.n	90003160 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90003140:	687b      	ldr	r3, [r7, #4]
90003142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90003144:	f043 0220 	orr.w	r2, r3, #32
90003148:	687b      	ldr	r3, [r7, #4]
9000314a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
9000314c:	687b      	ldr	r3, [r7, #4]
9000314e:	2203      	movs	r2, #3
90003150:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
90003154:	687b      	ldr	r3, [r7, #4]
90003156:	2200      	movs	r2, #0
90003158:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
9000315c:	2303      	movs	r3, #3
9000315e:	e013      	b.n	90003188 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
90003160:	687b      	ldr	r3, [r7, #4]
90003162:	681b      	ldr	r3, [r3, #0]
90003164:	685b      	ldr	r3, [r3, #4]
90003166:	f003 0310 	and.w	r3, r3, #16
9000316a:	2b00      	cmp	r3, #0
9000316c:	d0a1      	beq.n	900030b2 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
9000316e:	687b      	ldr	r3, [r7, #4]
90003170:	681b      	ldr	r3, [r3, #0]
90003172:	2212      	movs	r2, #18
90003174:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
90003176:	687b      	ldr	r3, [r7, #4]
90003178:	2201      	movs	r2, #1
9000317a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
9000317e:	687b      	ldr	r3, [r7, #4]
90003180:	2200      	movs	r2, #0
90003182:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
90003186:	2300      	movs	r3, #0
}
90003188:	4618      	mov	r0, r3
9000318a:	3718      	adds	r7, #24
9000318c:	46bd      	mov	sp, r7
9000318e:	bd80      	pop	{r7, pc}

90003190 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
90003190:	b480      	push	{r7}
90003192:	b087      	sub	sp, #28
90003194:	af00      	add	r7, sp, #0
90003196:	6078      	str	r0, [r7, #4]
90003198:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
9000319a:	687b      	ldr	r3, [r7, #4]
9000319c:	685b      	ldr	r3, [r3, #4]
9000319e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
900031a2:	687b      	ldr	r3, [r7, #4]
900031a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
900031a8:	2b01      	cmp	r3, #1
900031aa:	d101      	bne.n	900031b0 <HAL_DMA2D_ConfigLayer+0x20>
900031ac:	2302      	movs	r3, #2
900031ae:	e079      	b.n	900032a4 <HAL_DMA2D_ConfigLayer+0x114>
900031b0:	687b      	ldr	r3, [r7, #4]
900031b2:	2201      	movs	r2, #1
900031b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900031b8:	687b      	ldr	r3, [r7, #4]
900031ba:	2202      	movs	r2, #2
900031bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
900031c0:	683b      	ldr	r3, [r7, #0]
900031c2:	011b      	lsls	r3, r3, #4
900031c4:	3318      	adds	r3, #24
900031c6:	687a      	ldr	r2, [r7, #4]
900031c8:	4413      	add	r3, r2
900031ca:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
900031cc:	693b      	ldr	r3, [r7, #16]
900031ce:	685a      	ldr	r2, [r3, #4]
900031d0:	693b      	ldr	r3, [r7, #16]
900031d2:	689b      	ldr	r3, [r3, #8]
900031d4:	041b      	lsls	r3, r3, #16
900031d6:	4313      	orrs	r3, r2
900031d8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
900031da:	4b35      	ldr	r3, [pc, #212]	; (900032b0 <HAL_DMA2D_ConfigLayer+0x120>)
900031dc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900031de:	693b      	ldr	r3, [r7, #16]
900031e0:	685b      	ldr	r3, [r3, #4]
900031e2:	2b0a      	cmp	r3, #10
900031e4:	d003      	beq.n	900031ee <HAL_DMA2D_ConfigLayer+0x5e>
900031e6:	693b      	ldr	r3, [r7, #16]
900031e8:	685b      	ldr	r3, [r3, #4]
900031ea:	2b09      	cmp	r3, #9
900031ec:	d107      	bne.n	900031fe <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
900031ee:	693b      	ldr	r3, [r7, #16]
900031f0:	68db      	ldr	r3, [r3, #12]
900031f2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
900031f6:	697a      	ldr	r2, [r7, #20]
900031f8:	4313      	orrs	r3, r2
900031fa:	617b      	str	r3, [r7, #20]
900031fc:	e005      	b.n	9000320a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
900031fe:	693b      	ldr	r3, [r7, #16]
90003200:	68db      	ldr	r3, [r3, #12]
90003202:	061b      	lsls	r3, r3, #24
90003204:	697a      	ldr	r2, [r7, #20]
90003206:	4313      	orrs	r3, r2
90003208:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
9000320a:	683b      	ldr	r3, [r7, #0]
9000320c:	2b00      	cmp	r3, #0
9000320e:	d120      	bne.n	90003252 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90003210:	687b      	ldr	r3, [r7, #4]
90003212:	681b      	ldr	r3, [r3, #0]
90003214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90003216:	68fb      	ldr	r3, [r7, #12]
90003218:	43db      	mvns	r3, r3
9000321a:	ea02 0103 	and.w	r1, r2, r3
9000321e:	687b      	ldr	r3, [r7, #4]
90003220:	681b      	ldr	r3, [r3, #0]
90003222:	697a      	ldr	r2, [r7, #20]
90003224:	430a      	orrs	r2, r1
90003226:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90003228:	687b      	ldr	r3, [r7, #4]
9000322a:	681b      	ldr	r3, [r3, #0]
9000322c:	693a      	ldr	r2, [r7, #16]
9000322e:	6812      	ldr	r2, [r2, #0]
90003230:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003232:	693b      	ldr	r3, [r7, #16]
90003234:	685b      	ldr	r3, [r3, #4]
90003236:	2b0a      	cmp	r3, #10
90003238:	d003      	beq.n	90003242 <HAL_DMA2D_ConfigLayer+0xb2>
9000323a:	693b      	ldr	r3, [r7, #16]
9000323c:	685b      	ldr	r3, [r3, #4]
9000323e:	2b09      	cmp	r3, #9
90003240:	d127      	bne.n	90003292 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90003242:	693b      	ldr	r3, [r7, #16]
90003244:	68da      	ldr	r2, [r3, #12]
90003246:	687b      	ldr	r3, [r7, #4]
90003248:	681b      	ldr	r3, [r3, #0]
9000324a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
9000324e:	629a      	str	r2, [r3, #40]	; 0x28
90003250:	e01f      	b.n	90003292 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90003252:	687b      	ldr	r3, [r7, #4]
90003254:	681b      	ldr	r3, [r3, #0]
90003256:	69da      	ldr	r2, [r3, #28]
90003258:	68fb      	ldr	r3, [r7, #12]
9000325a:	43db      	mvns	r3, r3
9000325c:	ea02 0103 	and.w	r1, r2, r3
90003260:	687b      	ldr	r3, [r7, #4]
90003262:	681b      	ldr	r3, [r3, #0]
90003264:	697a      	ldr	r2, [r7, #20]
90003266:	430a      	orrs	r2, r1
90003268:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
9000326a:	687b      	ldr	r3, [r7, #4]
9000326c:	681b      	ldr	r3, [r3, #0]
9000326e:	693a      	ldr	r2, [r7, #16]
90003270:	6812      	ldr	r2, [r2, #0]
90003272:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003274:	693b      	ldr	r3, [r7, #16]
90003276:	685b      	ldr	r3, [r3, #4]
90003278:	2b0a      	cmp	r3, #10
9000327a:	d003      	beq.n	90003284 <HAL_DMA2D_ConfigLayer+0xf4>
9000327c:	693b      	ldr	r3, [r7, #16]
9000327e:	685b      	ldr	r3, [r3, #4]
90003280:	2b09      	cmp	r3, #9
90003282:	d106      	bne.n	90003292 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90003284:	693b      	ldr	r3, [r7, #16]
90003286:	68da      	ldr	r2, [r3, #12]
90003288:	687b      	ldr	r3, [r7, #4]
9000328a:	681b      	ldr	r3, [r3, #0]
9000328c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
90003290:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
90003292:	687b      	ldr	r3, [r7, #4]
90003294:	2201      	movs	r2, #1
90003296:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
9000329a:	687b      	ldr	r3, [r7, #4]
9000329c:	2200      	movs	r2, #0
9000329e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
900032a2:	2300      	movs	r3, #0
}
900032a4:	4618      	mov	r0, r3
900032a6:	371c      	adds	r7, #28
900032a8:	46bd      	mov	sp, r7
900032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
900032ae:	4770      	bx	lr
900032b0:	ff03000f 	.word	0xff03000f

900032b4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
900032b4:	b480      	push	{r7}
900032b6:	b08b      	sub	sp, #44	; 0x2c
900032b8:	af00      	add	r7, sp, #0
900032ba:	60f8      	str	r0, [r7, #12]
900032bc:	60b9      	str	r1, [r7, #8]
900032be:	607a      	str	r2, [r7, #4]
900032c0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
900032c2:	68fb      	ldr	r3, [r7, #12]
900032c4:	681b      	ldr	r3, [r3, #0]
900032c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900032c8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
900032cc:	683b      	ldr	r3, [r7, #0]
900032ce:	041a      	lsls	r2, r3, #16
900032d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900032d2:	431a      	orrs	r2, r3
900032d4:	68fb      	ldr	r3, [r7, #12]
900032d6:	681b      	ldr	r3, [r3, #0]
900032d8:	430a      	orrs	r2, r1
900032da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
900032dc:	68fb      	ldr	r3, [r7, #12]
900032de:	681b      	ldr	r3, [r3, #0]
900032e0:	687a      	ldr	r2, [r7, #4]
900032e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
900032e4:	68fb      	ldr	r3, [r7, #12]
900032e6:	685b      	ldr	r3, [r3, #4]
900032e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
900032ec:	d174      	bne.n	900033d8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
900032ee:	68bb      	ldr	r3, [r7, #8]
900032f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
900032f4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
900032f6:	68bb      	ldr	r3, [r7, #8]
900032f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
900032fc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
900032fe:	68bb      	ldr	r3, [r7, #8]
90003300:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90003304:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
90003306:	68bb      	ldr	r3, [r7, #8]
90003308:	b2db      	uxtb	r3, r3
9000330a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
9000330c:	68fb      	ldr	r3, [r7, #12]
9000330e:	689b      	ldr	r3, [r3, #8]
90003310:	2b00      	cmp	r3, #0
90003312:	d108      	bne.n	90003326 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
90003314:	69ba      	ldr	r2, [r7, #24]
90003316:	69fb      	ldr	r3, [r7, #28]
90003318:	431a      	orrs	r2, r3
9000331a:	6a3b      	ldr	r3, [r7, #32]
9000331c:	4313      	orrs	r3, r2
9000331e:	697a      	ldr	r2, [r7, #20]
90003320:	4313      	orrs	r3, r2
90003322:	627b      	str	r3, [r7, #36]	; 0x24
90003324:	e053      	b.n	900033ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
90003326:	68fb      	ldr	r3, [r7, #12]
90003328:	689b      	ldr	r3, [r3, #8]
9000332a:	2b01      	cmp	r3, #1
9000332c:	d106      	bne.n	9000333c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
9000332e:	69ba      	ldr	r2, [r7, #24]
90003330:	69fb      	ldr	r3, [r7, #28]
90003332:	4313      	orrs	r3, r2
90003334:	697a      	ldr	r2, [r7, #20]
90003336:	4313      	orrs	r3, r2
90003338:	627b      	str	r3, [r7, #36]	; 0x24
9000333a:	e048      	b.n	900033ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
9000333c:	68fb      	ldr	r3, [r7, #12]
9000333e:	689b      	ldr	r3, [r3, #8]
90003340:	2b02      	cmp	r3, #2
90003342:	d111      	bne.n	90003368 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
90003344:	69fb      	ldr	r3, [r7, #28]
90003346:	0cdb      	lsrs	r3, r3, #19
90003348:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
9000334a:	69bb      	ldr	r3, [r7, #24]
9000334c:	0a9b      	lsrs	r3, r3, #10
9000334e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90003350:	697b      	ldr	r3, [r7, #20]
90003352:	08db      	lsrs	r3, r3, #3
90003354:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
90003356:	69bb      	ldr	r3, [r7, #24]
90003358:	015a      	lsls	r2, r3, #5
9000335a:	69fb      	ldr	r3, [r7, #28]
9000335c:	02db      	lsls	r3, r3, #11
9000335e:	4313      	orrs	r3, r2
90003360:	697a      	ldr	r2, [r7, #20]
90003362:	4313      	orrs	r3, r2
90003364:	627b      	str	r3, [r7, #36]	; 0x24
90003366:	e032      	b.n	900033ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
90003368:	68fb      	ldr	r3, [r7, #12]
9000336a:	689b      	ldr	r3, [r3, #8]
9000336c:	2b03      	cmp	r3, #3
9000336e:	d117      	bne.n	900033a0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
90003370:	6a3b      	ldr	r3, [r7, #32]
90003372:	0fdb      	lsrs	r3, r3, #31
90003374:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
90003376:	69fb      	ldr	r3, [r7, #28]
90003378:	0cdb      	lsrs	r3, r3, #19
9000337a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
9000337c:	69bb      	ldr	r3, [r7, #24]
9000337e:	0adb      	lsrs	r3, r3, #11
90003380:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90003382:	697b      	ldr	r3, [r7, #20]
90003384:	08db      	lsrs	r3, r3, #3
90003386:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
90003388:	69bb      	ldr	r3, [r7, #24]
9000338a:	015a      	lsls	r2, r3, #5
9000338c:	69fb      	ldr	r3, [r7, #28]
9000338e:	029b      	lsls	r3, r3, #10
90003390:	431a      	orrs	r2, r3
90003392:	6a3b      	ldr	r3, [r7, #32]
90003394:	03db      	lsls	r3, r3, #15
90003396:	4313      	orrs	r3, r2
90003398:	697a      	ldr	r2, [r7, #20]
9000339a:	4313      	orrs	r3, r2
9000339c:	627b      	str	r3, [r7, #36]	; 0x24
9000339e:	e016      	b.n	900033ce <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
900033a0:	6a3b      	ldr	r3, [r7, #32]
900033a2:	0f1b      	lsrs	r3, r3, #28
900033a4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
900033a6:	69fb      	ldr	r3, [r7, #28]
900033a8:	0d1b      	lsrs	r3, r3, #20
900033aa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
900033ac:	69bb      	ldr	r3, [r7, #24]
900033ae:	0b1b      	lsrs	r3, r3, #12
900033b0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
900033b2:	697b      	ldr	r3, [r7, #20]
900033b4:	091b      	lsrs	r3, r3, #4
900033b6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
900033b8:	69bb      	ldr	r3, [r7, #24]
900033ba:	011a      	lsls	r2, r3, #4
900033bc:	69fb      	ldr	r3, [r7, #28]
900033be:	021b      	lsls	r3, r3, #8
900033c0:	431a      	orrs	r2, r3
900033c2:	6a3b      	ldr	r3, [r7, #32]
900033c4:	031b      	lsls	r3, r3, #12
900033c6:	4313      	orrs	r3, r2
900033c8:	697a      	ldr	r2, [r7, #20]
900033ca:	4313      	orrs	r3, r2
900033cc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
900033ce:	68fb      	ldr	r3, [r7, #12]
900033d0:	681b      	ldr	r3, [r3, #0]
900033d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
900033d4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
900033d6:	e003      	b.n	900033e0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
900033d8:	68fb      	ldr	r3, [r7, #12]
900033da:	681b      	ldr	r3, [r3, #0]
900033dc:	68ba      	ldr	r2, [r7, #8]
900033de:	60da      	str	r2, [r3, #12]
}
900033e0:	bf00      	nop
900033e2:	372c      	adds	r7, #44	; 0x2c
900033e4:	46bd      	mov	sp, r7
900033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
900033ea:	4770      	bx	lr

900033ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
900033ec:	b480      	push	{r7}
900033ee:	b089      	sub	sp, #36	; 0x24
900033f0:	af00      	add	r7, sp, #0
900033f2:	6078      	str	r0, [r7, #4]
900033f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
900033f6:	2300      	movs	r3, #0
900033f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
900033fa:	2300      	movs	r3, #0
900033fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
900033fe:	2300      	movs	r3, #0
90003400:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
90003402:	2300      	movs	r3, #0
90003404:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
90003406:	2300      	movs	r3, #0
90003408:	61fb      	str	r3, [r7, #28]
9000340a:	e175      	b.n	900036f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
9000340c:	2201      	movs	r2, #1
9000340e:	69fb      	ldr	r3, [r7, #28]
90003410:	fa02 f303 	lsl.w	r3, r2, r3
90003414:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
90003416:	683b      	ldr	r3, [r7, #0]
90003418:	681b      	ldr	r3, [r3, #0]
9000341a:	697a      	ldr	r2, [r7, #20]
9000341c:	4013      	ands	r3, r2
9000341e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
90003420:	693a      	ldr	r2, [r7, #16]
90003422:	697b      	ldr	r3, [r7, #20]
90003424:	429a      	cmp	r2, r3
90003426:	f040 8164 	bne.w	900036f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
9000342a:	683b      	ldr	r3, [r7, #0]
9000342c:	685b      	ldr	r3, [r3, #4]
9000342e:	2b01      	cmp	r3, #1
90003430:	d00b      	beq.n	9000344a <HAL_GPIO_Init+0x5e>
90003432:	683b      	ldr	r3, [r7, #0]
90003434:	685b      	ldr	r3, [r3, #4]
90003436:	2b02      	cmp	r3, #2
90003438:	d007      	beq.n	9000344a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
9000343a:	683b      	ldr	r3, [r7, #0]
9000343c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
9000343e:	2b11      	cmp	r3, #17
90003440:	d003      	beq.n	9000344a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
90003442:	683b      	ldr	r3, [r7, #0]
90003444:	685b      	ldr	r3, [r3, #4]
90003446:	2b12      	cmp	r3, #18
90003448:	d130      	bne.n	900034ac <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
9000344a:	687b      	ldr	r3, [r7, #4]
9000344c:	689b      	ldr	r3, [r3, #8]
9000344e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
90003450:	69fb      	ldr	r3, [r7, #28]
90003452:	005b      	lsls	r3, r3, #1
90003454:	2203      	movs	r2, #3
90003456:	fa02 f303 	lsl.w	r3, r2, r3
9000345a:	43db      	mvns	r3, r3
9000345c:	69ba      	ldr	r2, [r7, #24]
9000345e:	4013      	ands	r3, r2
90003460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
90003462:	683b      	ldr	r3, [r7, #0]
90003464:	68da      	ldr	r2, [r3, #12]
90003466:	69fb      	ldr	r3, [r7, #28]
90003468:	005b      	lsls	r3, r3, #1
9000346a:	fa02 f303 	lsl.w	r3, r2, r3
9000346e:	69ba      	ldr	r2, [r7, #24]
90003470:	4313      	orrs	r3, r2
90003472:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
90003474:	687b      	ldr	r3, [r7, #4]
90003476:	69ba      	ldr	r2, [r7, #24]
90003478:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
9000347a:	687b      	ldr	r3, [r7, #4]
9000347c:	685b      	ldr	r3, [r3, #4]
9000347e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
90003480:	2201      	movs	r2, #1
90003482:	69fb      	ldr	r3, [r7, #28]
90003484:	fa02 f303 	lsl.w	r3, r2, r3
90003488:	43db      	mvns	r3, r3
9000348a:	69ba      	ldr	r2, [r7, #24]
9000348c:	4013      	ands	r3, r2
9000348e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
90003490:	683b      	ldr	r3, [r7, #0]
90003492:	685b      	ldr	r3, [r3, #4]
90003494:	091b      	lsrs	r3, r3, #4
90003496:	f003 0201 	and.w	r2, r3, #1
9000349a:	69fb      	ldr	r3, [r7, #28]
9000349c:	fa02 f303 	lsl.w	r3, r2, r3
900034a0:	69ba      	ldr	r2, [r7, #24]
900034a2:	4313      	orrs	r3, r2
900034a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
900034a6:	687b      	ldr	r3, [r7, #4]
900034a8:	69ba      	ldr	r2, [r7, #24]
900034aa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
900034ac:	687b      	ldr	r3, [r7, #4]
900034ae:	68db      	ldr	r3, [r3, #12]
900034b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
900034b2:	69fb      	ldr	r3, [r7, #28]
900034b4:	005b      	lsls	r3, r3, #1
900034b6:	2203      	movs	r2, #3
900034b8:	fa02 f303 	lsl.w	r3, r2, r3
900034bc:	43db      	mvns	r3, r3
900034be:	69ba      	ldr	r2, [r7, #24]
900034c0:	4013      	ands	r3, r2
900034c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
900034c4:	683b      	ldr	r3, [r7, #0]
900034c6:	689a      	ldr	r2, [r3, #8]
900034c8:	69fb      	ldr	r3, [r7, #28]
900034ca:	005b      	lsls	r3, r3, #1
900034cc:	fa02 f303 	lsl.w	r3, r2, r3
900034d0:	69ba      	ldr	r2, [r7, #24]
900034d2:	4313      	orrs	r3, r2
900034d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
900034d6:	687b      	ldr	r3, [r7, #4]
900034d8:	69ba      	ldr	r2, [r7, #24]
900034da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
900034dc:	683b      	ldr	r3, [r7, #0]
900034de:	685b      	ldr	r3, [r3, #4]
900034e0:	2b02      	cmp	r3, #2
900034e2:	d003      	beq.n	900034ec <HAL_GPIO_Init+0x100>
900034e4:	683b      	ldr	r3, [r7, #0]
900034e6:	685b      	ldr	r3, [r3, #4]
900034e8:	2b12      	cmp	r3, #18
900034ea:	d123      	bne.n	90003534 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
900034ec:	69fb      	ldr	r3, [r7, #28]
900034ee:	08da      	lsrs	r2, r3, #3
900034f0:	687b      	ldr	r3, [r7, #4]
900034f2:	3208      	adds	r2, #8
900034f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
900034f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
900034fa:	69fb      	ldr	r3, [r7, #28]
900034fc:	f003 0307 	and.w	r3, r3, #7
90003500:	009b      	lsls	r3, r3, #2
90003502:	220f      	movs	r2, #15
90003504:	fa02 f303 	lsl.w	r3, r2, r3
90003508:	43db      	mvns	r3, r3
9000350a:	69ba      	ldr	r2, [r7, #24]
9000350c:	4013      	ands	r3, r2
9000350e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
90003510:	683b      	ldr	r3, [r7, #0]
90003512:	691a      	ldr	r2, [r3, #16]
90003514:	69fb      	ldr	r3, [r7, #28]
90003516:	f003 0307 	and.w	r3, r3, #7
9000351a:	009b      	lsls	r3, r3, #2
9000351c:	fa02 f303 	lsl.w	r3, r2, r3
90003520:	69ba      	ldr	r2, [r7, #24]
90003522:	4313      	orrs	r3, r2
90003524:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
90003526:	69fb      	ldr	r3, [r7, #28]
90003528:	08da      	lsrs	r2, r3, #3
9000352a:	687b      	ldr	r3, [r7, #4]
9000352c:	3208      	adds	r2, #8
9000352e:	69b9      	ldr	r1, [r7, #24]
90003530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
90003534:	687b      	ldr	r3, [r7, #4]
90003536:	681b      	ldr	r3, [r3, #0]
90003538:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
9000353a:	69fb      	ldr	r3, [r7, #28]
9000353c:	005b      	lsls	r3, r3, #1
9000353e:	2203      	movs	r2, #3
90003540:	fa02 f303 	lsl.w	r3, r2, r3
90003544:	43db      	mvns	r3, r3
90003546:	69ba      	ldr	r2, [r7, #24]
90003548:	4013      	ands	r3, r2
9000354a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
9000354c:	683b      	ldr	r3, [r7, #0]
9000354e:	685b      	ldr	r3, [r3, #4]
90003550:	f003 0203 	and.w	r2, r3, #3
90003554:	69fb      	ldr	r3, [r7, #28]
90003556:	005b      	lsls	r3, r3, #1
90003558:	fa02 f303 	lsl.w	r3, r2, r3
9000355c:	69ba      	ldr	r2, [r7, #24]
9000355e:	4313      	orrs	r3, r2
90003560:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
90003562:	687b      	ldr	r3, [r7, #4]
90003564:	69ba      	ldr	r2, [r7, #24]
90003566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
90003568:	683b      	ldr	r3, [r7, #0]
9000356a:	685b      	ldr	r3, [r3, #4]
9000356c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90003570:	2b00      	cmp	r3, #0
90003572:	f000 80be 	beq.w	900036f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90003576:	4b66      	ldr	r3, [pc, #408]	; (90003710 <HAL_GPIO_Init+0x324>)
90003578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000357a:	4a65      	ldr	r2, [pc, #404]	; (90003710 <HAL_GPIO_Init+0x324>)
9000357c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
90003580:	6453      	str	r3, [r2, #68]	; 0x44
90003582:	4b63      	ldr	r3, [pc, #396]	; (90003710 <HAL_GPIO_Init+0x324>)
90003584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90003586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
9000358a:	60fb      	str	r3, [r7, #12]
9000358c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
9000358e:	4a61      	ldr	r2, [pc, #388]	; (90003714 <HAL_GPIO_Init+0x328>)
90003590:	69fb      	ldr	r3, [r7, #28]
90003592:	089b      	lsrs	r3, r3, #2
90003594:	3302      	adds	r3, #2
90003596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000359a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
9000359c:	69fb      	ldr	r3, [r7, #28]
9000359e:	f003 0303 	and.w	r3, r3, #3
900035a2:	009b      	lsls	r3, r3, #2
900035a4:	220f      	movs	r2, #15
900035a6:	fa02 f303 	lsl.w	r3, r2, r3
900035aa:	43db      	mvns	r3, r3
900035ac:	69ba      	ldr	r2, [r7, #24]
900035ae:	4013      	ands	r3, r2
900035b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
900035b2:	687b      	ldr	r3, [r7, #4]
900035b4:	4a58      	ldr	r2, [pc, #352]	; (90003718 <HAL_GPIO_Init+0x32c>)
900035b6:	4293      	cmp	r3, r2
900035b8:	d037      	beq.n	9000362a <HAL_GPIO_Init+0x23e>
900035ba:	687b      	ldr	r3, [r7, #4]
900035bc:	4a57      	ldr	r2, [pc, #348]	; (9000371c <HAL_GPIO_Init+0x330>)
900035be:	4293      	cmp	r3, r2
900035c0:	d031      	beq.n	90003626 <HAL_GPIO_Init+0x23a>
900035c2:	687b      	ldr	r3, [r7, #4]
900035c4:	4a56      	ldr	r2, [pc, #344]	; (90003720 <HAL_GPIO_Init+0x334>)
900035c6:	4293      	cmp	r3, r2
900035c8:	d02b      	beq.n	90003622 <HAL_GPIO_Init+0x236>
900035ca:	687b      	ldr	r3, [r7, #4]
900035cc:	4a55      	ldr	r2, [pc, #340]	; (90003724 <HAL_GPIO_Init+0x338>)
900035ce:	4293      	cmp	r3, r2
900035d0:	d025      	beq.n	9000361e <HAL_GPIO_Init+0x232>
900035d2:	687b      	ldr	r3, [r7, #4]
900035d4:	4a54      	ldr	r2, [pc, #336]	; (90003728 <HAL_GPIO_Init+0x33c>)
900035d6:	4293      	cmp	r3, r2
900035d8:	d01f      	beq.n	9000361a <HAL_GPIO_Init+0x22e>
900035da:	687b      	ldr	r3, [r7, #4]
900035dc:	4a53      	ldr	r2, [pc, #332]	; (9000372c <HAL_GPIO_Init+0x340>)
900035de:	4293      	cmp	r3, r2
900035e0:	d019      	beq.n	90003616 <HAL_GPIO_Init+0x22a>
900035e2:	687b      	ldr	r3, [r7, #4]
900035e4:	4a52      	ldr	r2, [pc, #328]	; (90003730 <HAL_GPIO_Init+0x344>)
900035e6:	4293      	cmp	r3, r2
900035e8:	d013      	beq.n	90003612 <HAL_GPIO_Init+0x226>
900035ea:	687b      	ldr	r3, [r7, #4]
900035ec:	4a51      	ldr	r2, [pc, #324]	; (90003734 <HAL_GPIO_Init+0x348>)
900035ee:	4293      	cmp	r3, r2
900035f0:	d00d      	beq.n	9000360e <HAL_GPIO_Init+0x222>
900035f2:	687b      	ldr	r3, [r7, #4]
900035f4:	4a50      	ldr	r2, [pc, #320]	; (90003738 <HAL_GPIO_Init+0x34c>)
900035f6:	4293      	cmp	r3, r2
900035f8:	d007      	beq.n	9000360a <HAL_GPIO_Init+0x21e>
900035fa:	687b      	ldr	r3, [r7, #4]
900035fc:	4a4f      	ldr	r2, [pc, #316]	; (9000373c <HAL_GPIO_Init+0x350>)
900035fe:	4293      	cmp	r3, r2
90003600:	d101      	bne.n	90003606 <HAL_GPIO_Init+0x21a>
90003602:	2309      	movs	r3, #9
90003604:	e012      	b.n	9000362c <HAL_GPIO_Init+0x240>
90003606:	230a      	movs	r3, #10
90003608:	e010      	b.n	9000362c <HAL_GPIO_Init+0x240>
9000360a:	2308      	movs	r3, #8
9000360c:	e00e      	b.n	9000362c <HAL_GPIO_Init+0x240>
9000360e:	2307      	movs	r3, #7
90003610:	e00c      	b.n	9000362c <HAL_GPIO_Init+0x240>
90003612:	2306      	movs	r3, #6
90003614:	e00a      	b.n	9000362c <HAL_GPIO_Init+0x240>
90003616:	2305      	movs	r3, #5
90003618:	e008      	b.n	9000362c <HAL_GPIO_Init+0x240>
9000361a:	2304      	movs	r3, #4
9000361c:	e006      	b.n	9000362c <HAL_GPIO_Init+0x240>
9000361e:	2303      	movs	r3, #3
90003620:	e004      	b.n	9000362c <HAL_GPIO_Init+0x240>
90003622:	2302      	movs	r3, #2
90003624:	e002      	b.n	9000362c <HAL_GPIO_Init+0x240>
90003626:	2301      	movs	r3, #1
90003628:	e000      	b.n	9000362c <HAL_GPIO_Init+0x240>
9000362a:	2300      	movs	r3, #0
9000362c:	69fa      	ldr	r2, [r7, #28]
9000362e:	f002 0203 	and.w	r2, r2, #3
90003632:	0092      	lsls	r2, r2, #2
90003634:	4093      	lsls	r3, r2
90003636:	69ba      	ldr	r2, [r7, #24]
90003638:	4313      	orrs	r3, r2
9000363a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
9000363c:	4935      	ldr	r1, [pc, #212]	; (90003714 <HAL_GPIO_Init+0x328>)
9000363e:	69fb      	ldr	r3, [r7, #28]
90003640:	089b      	lsrs	r3, r3, #2
90003642:	3302      	adds	r3, #2
90003644:	69ba      	ldr	r2, [r7, #24]
90003646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
9000364a:	4b3d      	ldr	r3, [pc, #244]	; (90003740 <HAL_GPIO_Init+0x354>)
9000364c:	681b      	ldr	r3, [r3, #0]
9000364e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
90003650:	693b      	ldr	r3, [r7, #16]
90003652:	43db      	mvns	r3, r3
90003654:	69ba      	ldr	r2, [r7, #24]
90003656:	4013      	ands	r3, r2
90003658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
9000365a:	683b      	ldr	r3, [r7, #0]
9000365c:	685b      	ldr	r3, [r3, #4]
9000365e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
90003662:	2b00      	cmp	r3, #0
90003664:	d003      	beq.n	9000366e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
90003666:	69ba      	ldr	r2, [r7, #24]
90003668:	693b      	ldr	r3, [r7, #16]
9000366a:	4313      	orrs	r3, r2
9000366c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
9000366e:	4a34      	ldr	r2, [pc, #208]	; (90003740 <HAL_GPIO_Init+0x354>)
90003670:	69bb      	ldr	r3, [r7, #24]
90003672:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
90003674:	4b32      	ldr	r3, [pc, #200]	; (90003740 <HAL_GPIO_Init+0x354>)
90003676:	685b      	ldr	r3, [r3, #4]
90003678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
9000367a:	693b      	ldr	r3, [r7, #16]
9000367c:	43db      	mvns	r3, r3
9000367e:	69ba      	ldr	r2, [r7, #24]
90003680:	4013      	ands	r3, r2
90003682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
90003684:	683b      	ldr	r3, [r7, #0]
90003686:	685b      	ldr	r3, [r3, #4]
90003688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
9000368c:	2b00      	cmp	r3, #0
9000368e:	d003      	beq.n	90003698 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
90003690:	69ba      	ldr	r2, [r7, #24]
90003692:	693b      	ldr	r3, [r7, #16]
90003694:	4313      	orrs	r3, r2
90003696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
90003698:	4a29      	ldr	r2, [pc, #164]	; (90003740 <HAL_GPIO_Init+0x354>)
9000369a:	69bb      	ldr	r3, [r7, #24]
9000369c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
9000369e:	4b28      	ldr	r3, [pc, #160]	; (90003740 <HAL_GPIO_Init+0x354>)
900036a0:	689b      	ldr	r3, [r3, #8]
900036a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
900036a4:	693b      	ldr	r3, [r7, #16]
900036a6:	43db      	mvns	r3, r3
900036a8:	69ba      	ldr	r2, [r7, #24]
900036aa:	4013      	ands	r3, r2
900036ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
900036ae:	683b      	ldr	r3, [r7, #0]
900036b0:	685b      	ldr	r3, [r3, #4]
900036b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
900036b6:	2b00      	cmp	r3, #0
900036b8:	d003      	beq.n	900036c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
900036ba:	69ba      	ldr	r2, [r7, #24]
900036bc:	693b      	ldr	r3, [r7, #16]
900036be:	4313      	orrs	r3, r2
900036c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
900036c2:	4a1f      	ldr	r2, [pc, #124]	; (90003740 <HAL_GPIO_Init+0x354>)
900036c4:	69bb      	ldr	r3, [r7, #24]
900036c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
900036c8:	4b1d      	ldr	r3, [pc, #116]	; (90003740 <HAL_GPIO_Init+0x354>)
900036ca:	68db      	ldr	r3, [r3, #12]
900036cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
900036ce:	693b      	ldr	r3, [r7, #16]
900036d0:	43db      	mvns	r3, r3
900036d2:	69ba      	ldr	r2, [r7, #24]
900036d4:	4013      	ands	r3, r2
900036d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
900036d8:	683b      	ldr	r3, [r7, #0]
900036da:	685b      	ldr	r3, [r3, #4]
900036dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
900036e0:	2b00      	cmp	r3, #0
900036e2:	d003      	beq.n	900036ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
900036e4:	69ba      	ldr	r2, [r7, #24]
900036e6:	693b      	ldr	r3, [r7, #16]
900036e8:	4313      	orrs	r3, r2
900036ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
900036ec:	4a14      	ldr	r2, [pc, #80]	; (90003740 <HAL_GPIO_Init+0x354>)
900036ee:	69bb      	ldr	r3, [r7, #24]
900036f0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
900036f2:	69fb      	ldr	r3, [r7, #28]
900036f4:	3301      	adds	r3, #1
900036f6:	61fb      	str	r3, [r7, #28]
900036f8:	69fb      	ldr	r3, [r7, #28]
900036fa:	2b0f      	cmp	r3, #15
900036fc:	f67f ae86 	bls.w	9000340c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
90003700:	bf00      	nop
90003702:	bf00      	nop
90003704:	3724      	adds	r7, #36	; 0x24
90003706:	46bd      	mov	sp, r7
90003708:	f85d 7b04 	ldr.w	r7, [sp], #4
9000370c:	4770      	bx	lr
9000370e:	bf00      	nop
90003710:	40023800 	.word	0x40023800
90003714:	40013800 	.word	0x40013800
90003718:	40020000 	.word	0x40020000
9000371c:	40020400 	.word	0x40020400
90003720:	40020800 	.word	0x40020800
90003724:	40020c00 	.word	0x40020c00
90003728:	40021000 	.word	0x40021000
9000372c:	40021400 	.word	0x40021400
90003730:	40021800 	.word	0x40021800
90003734:	40021c00 	.word	0x40021c00
90003738:	40022000 	.word	0x40022000
9000373c:	40022400 	.word	0x40022400
90003740:	40013c00 	.word	0x40013c00

90003744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
90003744:	b480      	push	{r7}
90003746:	b083      	sub	sp, #12
90003748:	af00      	add	r7, sp, #0
9000374a:	6078      	str	r0, [r7, #4]
9000374c:	460b      	mov	r3, r1
9000374e:	807b      	strh	r3, [r7, #2]
90003750:	4613      	mov	r3, r2
90003752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
90003754:	787b      	ldrb	r3, [r7, #1]
90003756:	2b00      	cmp	r3, #0
90003758:	d003      	beq.n	90003762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
9000375a:	887a      	ldrh	r2, [r7, #2]
9000375c:	687b      	ldr	r3, [r7, #4]
9000375e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
90003760:	e003      	b.n	9000376a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
90003762:	887b      	ldrh	r3, [r7, #2]
90003764:	041a      	lsls	r2, r3, #16
90003766:	687b      	ldr	r3, [r7, #4]
90003768:	619a      	str	r2, [r3, #24]
}
9000376a:	bf00      	nop
9000376c:	370c      	adds	r7, #12
9000376e:	46bd      	mov	sp, r7
90003770:	f85d 7b04 	ldr.w	r7, [sp], #4
90003774:	4770      	bx	lr
	...

90003778 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
90003778:	b580      	push	{r7, lr}
9000377a:	b082      	sub	sp, #8
9000377c:	af00      	add	r7, sp, #0
9000377e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
90003780:	687b      	ldr	r3, [r7, #4]
90003782:	2b00      	cmp	r3, #0
90003784:	d101      	bne.n	9000378a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
90003786:	2301      	movs	r3, #1
90003788:	e07f      	b.n	9000388a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
9000378a:	687b      	ldr	r3, [r7, #4]
9000378c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
90003790:	b2db      	uxtb	r3, r3
90003792:	2b00      	cmp	r3, #0
90003794:	d106      	bne.n	900037a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
90003796:	687b      	ldr	r3, [r7, #4]
90003798:	2200      	movs	r2, #0
9000379a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
9000379e:	6878      	ldr	r0, [r7, #4]
900037a0:	f000 f8a9 	bl	900038f6 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
900037a4:	687b      	ldr	r3, [r7, #4]
900037a6:	2224      	movs	r2, #36	; 0x24
900037a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
900037ac:	687b      	ldr	r3, [r7, #4]
900037ae:	681b      	ldr	r3, [r3, #0]
900037b0:	681a      	ldr	r2, [r3, #0]
900037b2:	687b      	ldr	r3, [r7, #4]
900037b4:	681b      	ldr	r3, [r3, #0]
900037b6:	f022 0201 	bic.w	r2, r2, #1
900037ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
900037bc:	687b      	ldr	r3, [r7, #4]
900037be:	685a      	ldr	r2, [r3, #4]
900037c0:	687b      	ldr	r3, [r7, #4]
900037c2:	681b      	ldr	r3, [r3, #0]
900037c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
900037c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
900037ca:	687b      	ldr	r3, [r7, #4]
900037cc:	681b      	ldr	r3, [r3, #0]
900037ce:	689a      	ldr	r2, [r3, #8]
900037d0:	687b      	ldr	r3, [r7, #4]
900037d2:	681b      	ldr	r3, [r3, #0]
900037d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
900037d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
900037da:	687b      	ldr	r3, [r7, #4]
900037dc:	68db      	ldr	r3, [r3, #12]
900037de:	2b01      	cmp	r3, #1
900037e0:	d107      	bne.n	900037f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
900037e2:	687b      	ldr	r3, [r7, #4]
900037e4:	689a      	ldr	r2, [r3, #8]
900037e6:	687b      	ldr	r3, [r7, #4]
900037e8:	681b      	ldr	r3, [r3, #0]
900037ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
900037ee:	609a      	str	r2, [r3, #8]
900037f0:	e006      	b.n	90003800 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
900037f2:	687b      	ldr	r3, [r7, #4]
900037f4:	689a      	ldr	r2, [r3, #8]
900037f6:	687b      	ldr	r3, [r7, #4]
900037f8:	681b      	ldr	r3, [r3, #0]
900037fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
900037fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90003800:	687b      	ldr	r3, [r7, #4]
90003802:	68db      	ldr	r3, [r3, #12]
90003804:	2b02      	cmp	r3, #2
90003806:	d104      	bne.n	90003812 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
90003808:	687b      	ldr	r3, [r7, #4]
9000380a:	681b      	ldr	r3, [r3, #0]
9000380c:	f44f 6200 	mov.w	r2, #2048	; 0x800
90003810:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90003812:	687b      	ldr	r3, [r7, #4]
90003814:	681b      	ldr	r3, [r3, #0]
90003816:	6859      	ldr	r1, [r3, #4]
90003818:	687b      	ldr	r3, [r7, #4]
9000381a:	681a      	ldr	r2, [r3, #0]
9000381c:	4b1d      	ldr	r3, [pc, #116]	; (90003894 <HAL_I2C_Init+0x11c>)
9000381e:	430b      	orrs	r3, r1
90003820:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
90003822:	687b      	ldr	r3, [r7, #4]
90003824:	681b      	ldr	r3, [r3, #0]
90003826:	68da      	ldr	r2, [r3, #12]
90003828:	687b      	ldr	r3, [r7, #4]
9000382a:	681b      	ldr	r3, [r3, #0]
9000382c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
90003830:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
90003832:	687b      	ldr	r3, [r7, #4]
90003834:	691a      	ldr	r2, [r3, #16]
90003836:	687b      	ldr	r3, [r7, #4]
90003838:	695b      	ldr	r3, [r3, #20]
9000383a:	ea42 0103 	orr.w	r1, r2, r3
9000383e:	687b      	ldr	r3, [r7, #4]
90003840:	699b      	ldr	r3, [r3, #24]
90003842:	021a      	lsls	r2, r3, #8
90003844:	687b      	ldr	r3, [r7, #4]
90003846:	681b      	ldr	r3, [r3, #0]
90003848:	430a      	orrs	r2, r1
9000384a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
9000384c:	687b      	ldr	r3, [r7, #4]
9000384e:	69d9      	ldr	r1, [r3, #28]
90003850:	687b      	ldr	r3, [r7, #4]
90003852:	6a1a      	ldr	r2, [r3, #32]
90003854:	687b      	ldr	r3, [r7, #4]
90003856:	681b      	ldr	r3, [r3, #0]
90003858:	430a      	orrs	r2, r1
9000385a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
9000385c:	687b      	ldr	r3, [r7, #4]
9000385e:	681b      	ldr	r3, [r3, #0]
90003860:	681a      	ldr	r2, [r3, #0]
90003862:	687b      	ldr	r3, [r7, #4]
90003864:	681b      	ldr	r3, [r3, #0]
90003866:	f042 0201 	orr.w	r2, r2, #1
9000386a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000386c:	687b      	ldr	r3, [r7, #4]
9000386e:	2200      	movs	r2, #0
90003870:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
90003872:	687b      	ldr	r3, [r7, #4]
90003874:	2220      	movs	r2, #32
90003876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
9000387a:	687b      	ldr	r3, [r7, #4]
9000387c:	2200      	movs	r2, #0
9000387e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90003880:	687b      	ldr	r3, [r7, #4]
90003882:	2200      	movs	r2, #0
90003884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
90003888:	2300      	movs	r3, #0
}
9000388a:	4618      	mov	r0, r3
9000388c:	3708      	adds	r7, #8
9000388e:	46bd      	mov	sp, r7
90003890:	bd80      	pop	{r7, pc}
90003892:	bf00      	nop
90003894:	02008000 	.word	0x02008000

90003898 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
90003898:	b580      	push	{r7, lr}
9000389a:	b082      	sub	sp, #8
9000389c:	af00      	add	r7, sp, #0
9000389e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
900038a0:	687b      	ldr	r3, [r7, #4]
900038a2:	2b00      	cmp	r3, #0
900038a4:	d101      	bne.n	900038aa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
900038a6:	2301      	movs	r3, #1
900038a8:	e021      	b.n	900038ee <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
900038aa:	687b      	ldr	r3, [r7, #4]
900038ac:	2224      	movs	r2, #36	; 0x24
900038ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
900038b2:	687b      	ldr	r3, [r7, #4]
900038b4:	681b      	ldr	r3, [r3, #0]
900038b6:	681a      	ldr	r2, [r3, #0]
900038b8:	687b      	ldr	r3, [r7, #4]
900038ba:	681b      	ldr	r3, [r3, #0]
900038bc:	f022 0201 	bic.w	r2, r2, #1
900038c0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
900038c2:	6878      	ldr	r0, [r7, #4]
900038c4:	f000 f821 	bl	9000390a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900038c8:	687b      	ldr	r3, [r7, #4]
900038ca:	2200      	movs	r2, #0
900038cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
900038ce:	687b      	ldr	r3, [r7, #4]
900038d0:	2200      	movs	r2, #0
900038d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
900038d6:	687b      	ldr	r3, [r7, #4]
900038d8:	2200      	movs	r2, #0
900038da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
900038dc:	687b      	ldr	r3, [r7, #4]
900038de:	2200      	movs	r2, #0
900038e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
900038e4:	687b      	ldr	r3, [r7, #4]
900038e6:	2200      	movs	r2, #0
900038e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
900038ec:	2300      	movs	r3, #0
}
900038ee:	4618      	mov	r0, r3
900038f0:	3708      	adds	r7, #8
900038f2:	46bd      	mov	sp, r7
900038f4:	bd80      	pop	{r7, pc}

900038f6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
900038f6:	b480      	push	{r7}
900038f8:	b083      	sub	sp, #12
900038fa:	af00      	add	r7, sp, #0
900038fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
900038fe:	bf00      	nop
90003900:	370c      	adds	r7, #12
90003902:	46bd      	mov	sp, r7
90003904:	f85d 7b04 	ldr.w	r7, [sp], #4
90003908:	4770      	bx	lr

9000390a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
9000390a:	b480      	push	{r7}
9000390c:	b083      	sub	sp, #12
9000390e:	af00      	add	r7, sp, #0
90003910:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
90003912:	bf00      	nop
90003914:	370c      	adds	r7, #12
90003916:	46bd      	mov	sp, r7
90003918:	f85d 7b04 	ldr.w	r7, [sp], #4
9000391c:	4770      	bx	lr
	...

90003920 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90003920:	b580      	push	{r7, lr}
90003922:	b088      	sub	sp, #32
90003924:	af02      	add	r7, sp, #8
90003926:	60f8      	str	r0, [r7, #12]
90003928:	4608      	mov	r0, r1
9000392a:	4611      	mov	r1, r2
9000392c:	461a      	mov	r2, r3
9000392e:	4603      	mov	r3, r0
90003930:	817b      	strh	r3, [r7, #10]
90003932:	460b      	mov	r3, r1
90003934:	813b      	strh	r3, [r7, #8]
90003936:	4613      	mov	r3, r2
90003938:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
9000393a:	68fb      	ldr	r3, [r7, #12]
9000393c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
90003940:	b2db      	uxtb	r3, r3
90003942:	2b20      	cmp	r3, #32
90003944:	f040 80f9 	bne.w	90003b3a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
90003948:	6a3b      	ldr	r3, [r7, #32]
9000394a:	2b00      	cmp	r3, #0
9000394c:	d002      	beq.n	90003954 <HAL_I2C_Mem_Write+0x34>
9000394e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
90003950:	2b00      	cmp	r3, #0
90003952:	d105      	bne.n	90003960 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90003954:	68fb      	ldr	r3, [r7, #12]
90003956:	f44f 7200 	mov.w	r2, #512	; 0x200
9000395a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
9000395c:	2301      	movs	r3, #1
9000395e:	e0ed      	b.n	90003b3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
90003960:	68fb      	ldr	r3, [r7, #12]
90003962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
90003966:	2b01      	cmp	r3, #1
90003968:	d101      	bne.n	9000396e <HAL_I2C_Mem_Write+0x4e>
9000396a:	2302      	movs	r3, #2
9000396c:	e0e6      	b.n	90003b3c <HAL_I2C_Mem_Write+0x21c>
9000396e:	68fb      	ldr	r3, [r7, #12]
90003970:	2201      	movs	r2, #1
90003972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
90003976:	f7fe ffa3 	bl	900028c0 <HAL_GetTick>
9000397a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
9000397c:	697b      	ldr	r3, [r7, #20]
9000397e:	9300      	str	r3, [sp, #0]
90003980:	2319      	movs	r3, #25
90003982:	2201      	movs	r2, #1
90003984:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90003988:	68f8      	ldr	r0, [r7, #12]
9000398a:	f000 fad1 	bl	90003f30 <I2C_WaitOnFlagUntilTimeout>
9000398e:	4603      	mov	r3, r0
90003990:	2b00      	cmp	r3, #0
90003992:	d001      	beq.n	90003998 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
90003994:	2301      	movs	r3, #1
90003996:	e0d1      	b.n	90003b3c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
90003998:	68fb      	ldr	r3, [r7, #12]
9000399a:	2221      	movs	r2, #33	; 0x21
9000399c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
900039a0:	68fb      	ldr	r3, [r7, #12]
900039a2:	2240      	movs	r2, #64	; 0x40
900039a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900039a8:	68fb      	ldr	r3, [r7, #12]
900039aa:	2200      	movs	r2, #0
900039ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
900039ae:	68fb      	ldr	r3, [r7, #12]
900039b0:	6a3a      	ldr	r2, [r7, #32]
900039b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
900039b4:	68fb      	ldr	r3, [r7, #12]
900039b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
900039b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
900039ba:	68fb      	ldr	r3, [r7, #12]
900039bc:	2200      	movs	r2, #0
900039be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
900039c0:	88f8      	ldrh	r0, [r7, #6]
900039c2:	893a      	ldrh	r2, [r7, #8]
900039c4:	8979      	ldrh	r1, [r7, #10]
900039c6:	697b      	ldr	r3, [r7, #20]
900039c8:	9301      	str	r3, [sp, #4]
900039ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
900039cc:	9300      	str	r3, [sp, #0]
900039ce:	4603      	mov	r3, r0
900039d0:	68f8      	ldr	r0, [r7, #12]
900039d2:	f000 f9e1 	bl	90003d98 <I2C_RequestMemoryWrite>
900039d6:	4603      	mov	r3, r0
900039d8:	2b00      	cmp	r3, #0
900039da:	d005      	beq.n	900039e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
900039dc:	68fb      	ldr	r3, [r7, #12]
900039de:	2200      	movs	r2, #0
900039e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
900039e4:	2301      	movs	r3, #1
900039e6:	e0a9      	b.n	90003b3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
900039e8:	68fb      	ldr	r3, [r7, #12]
900039ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
900039ec:	b29b      	uxth	r3, r3
900039ee:	2bff      	cmp	r3, #255	; 0xff
900039f0:	d90e      	bls.n	90003a10 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
900039f2:	68fb      	ldr	r3, [r7, #12]
900039f4:	22ff      	movs	r2, #255	; 0xff
900039f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
900039f8:	68fb      	ldr	r3, [r7, #12]
900039fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
900039fc:	b2da      	uxtb	r2, r3
900039fe:	8979      	ldrh	r1, [r7, #10]
90003a00:	2300      	movs	r3, #0
90003a02:	9300      	str	r3, [sp, #0]
90003a04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
90003a08:	68f8      	ldr	r0, [r7, #12]
90003a0a:	f000 fbb3 	bl	90004174 <I2C_TransferConfig>
90003a0e:	e00f      	b.n	90003a30 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
90003a10:	68fb      	ldr	r3, [r7, #12]
90003a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90003a14:	b29a      	uxth	r2, r3
90003a16:	68fb      	ldr	r3, [r7, #12]
90003a18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90003a1a:	68fb      	ldr	r3, [r7, #12]
90003a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90003a1e:	b2da      	uxtb	r2, r3
90003a20:	8979      	ldrh	r1, [r7, #10]
90003a22:	2300      	movs	r3, #0
90003a24:	9300      	str	r3, [sp, #0]
90003a26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
90003a2a:	68f8      	ldr	r0, [r7, #12]
90003a2c:	f000 fba2 	bl	90004174 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90003a30:	697a      	ldr	r2, [r7, #20]
90003a32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
90003a34:	68f8      	ldr	r0, [r7, #12]
90003a36:	f000 fabb 	bl	90003fb0 <I2C_WaitOnTXISFlagUntilTimeout>
90003a3a:	4603      	mov	r3, r0
90003a3c:	2b00      	cmp	r3, #0
90003a3e:	d001      	beq.n	90003a44 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
90003a40:	2301      	movs	r3, #1
90003a42:	e07b      	b.n	90003b3c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
90003a44:	68fb      	ldr	r3, [r7, #12]
90003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90003a48:	781a      	ldrb	r2, [r3, #0]
90003a4a:	68fb      	ldr	r3, [r7, #12]
90003a4c:	681b      	ldr	r3, [r3, #0]
90003a4e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
90003a50:	68fb      	ldr	r3, [r7, #12]
90003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90003a54:	1c5a      	adds	r2, r3, #1
90003a56:	68fb      	ldr	r3, [r7, #12]
90003a58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
90003a5a:	68fb      	ldr	r3, [r7, #12]
90003a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90003a5e:	b29b      	uxth	r3, r3
90003a60:	3b01      	subs	r3, #1
90003a62:	b29a      	uxth	r2, r3
90003a64:	68fb      	ldr	r3, [r7, #12]
90003a66:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
90003a68:	68fb      	ldr	r3, [r7, #12]
90003a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90003a6c:	3b01      	subs	r3, #1
90003a6e:	b29a      	uxth	r2, r3
90003a70:	68fb      	ldr	r3, [r7, #12]
90003a72:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90003a74:	68fb      	ldr	r3, [r7, #12]
90003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90003a78:	b29b      	uxth	r3, r3
90003a7a:	2b00      	cmp	r3, #0
90003a7c:	d034      	beq.n	90003ae8 <HAL_I2C_Mem_Write+0x1c8>
90003a7e:	68fb      	ldr	r3, [r7, #12]
90003a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90003a82:	2b00      	cmp	r3, #0
90003a84:	d130      	bne.n	90003ae8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
90003a86:	697b      	ldr	r3, [r7, #20]
90003a88:	9300      	str	r3, [sp, #0]
90003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
90003a8c:	2200      	movs	r2, #0
90003a8e:	2180      	movs	r1, #128	; 0x80
90003a90:	68f8      	ldr	r0, [r7, #12]
90003a92:	f000 fa4d 	bl	90003f30 <I2C_WaitOnFlagUntilTimeout>
90003a96:	4603      	mov	r3, r0
90003a98:	2b00      	cmp	r3, #0
90003a9a:	d001      	beq.n	90003aa0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
90003a9c:	2301      	movs	r3, #1
90003a9e:	e04d      	b.n	90003b3c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90003aa0:	68fb      	ldr	r3, [r7, #12]
90003aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90003aa4:	b29b      	uxth	r3, r3
90003aa6:	2bff      	cmp	r3, #255	; 0xff
90003aa8:	d90e      	bls.n	90003ac8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
90003aaa:	68fb      	ldr	r3, [r7, #12]
90003aac:	22ff      	movs	r2, #255	; 0xff
90003aae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
90003ab0:	68fb      	ldr	r3, [r7, #12]
90003ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90003ab4:	b2da      	uxtb	r2, r3
90003ab6:	8979      	ldrh	r1, [r7, #10]
90003ab8:	2300      	movs	r3, #0
90003aba:	9300      	str	r3, [sp, #0]
90003abc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
90003ac0:	68f8      	ldr	r0, [r7, #12]
90003ac2:	f000 fb57 	bl	90004174 <I2C_TransferConfig>
90003ac6:	e00f      	b.n	90003ae8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
90003ac8:	68fb      	ldr	r3, [r7, #12]
90003aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90003acc:	b29a      	uxth	r2, r3
90003ace:	68fb      	ldr	r3, [r7, #12]
90003ad0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90003ad2:	68fb      	ldr	r3, [r7, #12]
90003ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90003ad6:	b2da      	uxtb	r2, r3
90003ad8:	8979      	ldrh	r1, [r7, #10]
90003ada:	2300      	movs	r3, #0
90003adc:	9300      	str	r3, [sp, #0]
90003ade:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
90003ae2:	68f8      	ldr	r0, [r7, #12]
90003ae4:	f000 fb46 	bl	90004174 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
90003ae8:	68fb      	ldr	r3, [r7, #12]
90003aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90003aec:	b29b      	uxth	r3, r3
90003aee:	2b00      	cmp	r3, #0
90003af0:	d19e      	bne.n	90003a30 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90003af2:	697a      	ldr	r2, [r7, #20]
90003af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
90003af6:	68f8      	ldr	r0, [r7, #12]
90003af8:	f000 fa9a 	bl	90004030 <I2C_WaitOnSTOPFlagUntilTimeout>
90003afc:	4603      	mov	r3, r0
90003afe:	2b00      	cmp	r3, #0
90003b00:	d001      	beq.n	90003b06 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
90003b02:	2301      	movs	r3, #1
90003b04:	e01a      	b.n	90003b3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90003b06:	68fb      	ldr	r3, [r7, #12]
90003b08:	681b      	ldr	r3, [r3, #0]
90003b0a:	2220      	movs	r2, #32
90003b0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90003b0e:	68fb      	ldr	r3, [r7, #12]
90003b10:	681b      	ldr	r3, [r3, #0]
90003b12:	6859      	ldr	r1, [r3, #4]
90003b14:	68fb      	ldr	r3, [r7, #12]
90003b16:	681a      	ldr	r2, [r3, #0]
90003b18:	4b0a      	ldr	r3, [pc, #40]	; (90003b44 <HAL_I2C_Mem_Write+0x224>)
90003b1a:	400b      	ands	r3, r1
90003b1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
90003b1e:	68fb      	ldr	r3, [r7, #12]
90003b20:	2220      	movs	r2, #32
90003b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90003b26:	68fb      	ldr	r3, [r7, #12]
90003b28:	2200      	movs	r2, #0
90003b2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90003b2e:	68fb      	ldr	r3, [r7, #12]
90003b30:	2200      	movs	r2, #0
90003b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
90003b36:	2300      	movs	r3, #0
90003b38:	e000      	b.n	90003b3c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
90003b3a:	2302      	movs	r3, #2
  }
}
90003b3c:	4618      	mov	r0, r3
90003b3e:	3718      	adds	r7, #24
90003b40:	46bd      	mov	sp, r7
90003b42:	bd80      	pop	{r7, pc}
90003b44:	fe00e800 	.word	0xfe00e800

90003b48 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90003b48:	b580      	push	{r7, lr}
90003b4a:	b088      	sub	sp, #32
90003b4c:	af02      	add	r7, sp, #8
90003b4e:	60f8      	str	r0, [r7, #12]
90003b50:	4608      	mov	r0, r1
90003b52:	4611      	mov	r1, r2
90003b54:	461a      	mov	r2, r3
90003b56:	4603      	mov	r3, r0
90003b58:	817b      	strh	r3, [r7, #10]
90003b5a:	460b      	mov	r3, r1
90003b5c:	813b      	strh	r3, [r7, #8]
90003b5e:	4613      	mov	r3, r2
90003b60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
90003b62:	68fb      	ldr	r3, [r7, #12]
90003b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
90003b68:	b2db      	uxtb	r3, r3
90003b6a:	2b20      	cmp	r3, #32
90003b6c:	f040 80fd 	bne.w	90003d6a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
90003b70:	6a3b      	ldr	r3, [r7, #32]
90003b72:	2b00      	cmp	r3, #0
90003b74:	d002      	beq.n	90003b7c <HAL_I2C_Mem_Read+0x34>
90003b76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
90003b78:	2b00      	cmp	r3, #0
90003b7a:	d105      	bne.n	90003b88 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90003b7c:	68fb      	ldr	r3, [r7, #12]
90003b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
90003b82:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
90003b84:	2301      	movs	r3, #1
90003b86:	e0f1      	b.n	90003d6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
90003b88:	68fb      	ldr	r3, [r7, #12]
90003b8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
90003b8e:	2b01      	cmp	r3, #1
90003b90:	d101      	bne.n	90003b96 <HAL_I2C_Mem_Read+0x4e>
90003b92:	2302      	movs	r3, #2
90003b94:	e0ea      	b.n	90003d6c <HAL_I2C_Mem_Read+0x224>
90003b96:	68fb      	ldr	r3, [r7, #12]
90003b98:	2201      	movs	r2, #1
90003b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
90003b9e:	f7fe fe8f 	bl	900028c0 <HAL_GetTick>
90003ba2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90003ba4:	697b      	ldr	r3, [r7, #20]
90003ba6:	9300      	str	r3, [sp, #0]
90003ba8:	2319      	movs	r3, #25
90003baa:	2201      	movs	r2, #1
90003bac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90003bb0:	68f8      	ldr	r0, [r7, #12]
90003bb2:	f000 f9bd 	bl	90003f30 <I2C_WaitOnFlagUntilTimeout>
90003bb6:	4603      	mov	r3, r0
90003bb8:	2b00      	cmp	r3, #0
90003bba:	d001      	beq.n	90003bc0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
90003bbc:	2301      	movs	r3, #1
90003bbe:	e0d5      	b.n	90003d6c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90003bc0:	68fb      	ldr	r3, [r7, #12]
90003bc2:	2222      	movs	r2, #34	; 0x22
90003bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90003bc8:	68fb      	ldr	r3, [r7, #12]
90003bca:	2240      	movs	r2, #64	; 0x40
90003bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90003bd0:	68fb      	ldr	r3, [r7, #12]
90003bd2:	2200      	movs	r2, #0
90003bd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
90003bd6:	68fb      	ldr	r3, [r7, #12]
90003bd8:	6a3a      	ldr	r2, [r7, #32]
90003bda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
90003bdc:	68fb      	ldr	r3, [r7, #12]
90003bde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
90003be0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
90003be2:	68fb      	ldr	r3, [r7, #12]
90003be4:	2200      	movs	r2, #0
90003be6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90003be8:	88f8      	ldrh	r0, [r7, #6]
90003bea:	893a      	ldrh	r2, [r7, #8]
90003bec:	8979      	ldrh	r1, [r7, #10]
90003bee:	697b      	ldr	r3, [r7, #20]
90003bf0:	9301      	str	r3, [sp, #4]
90003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
90003bf4:	9300      	str	r3, [sp, #0]
90003bf6:	4603      	mov	r3, r0
90003bf8:	68f8      	ldr	r0, [r7, #12]
90003bfa:	f000 f921 	bl	90003e40 <I2C_RequestMemoryRead>
90003bfe:	4603      	mov	r3, r0
90003c00:	2b00      	cmp	r3, #0
90003c02:	d005      	beq.n	90003c10 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
90003c04:	68fb      	ldr	r3, [r7, #12]
90003c06:	2200      	movs	r2, #0
90003c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
90003c0c:	2301      	movs	r3, #1
90003c0e:	e0ad      	b.n	90003d6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90003c10:	68fb      	ldr	r3, [r7, #12]
90003c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90003c14:	b29b      	uxth	r3, r3
90003c16:	2bff      	cmp	r3, #255	; 0xff
90003c18:	d90e      	bls.n	90003c38 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
90003c1a:	68fb      	ldr	r3, [r7, #12]
90003c1c:	22ff      	movs	r2, #255	; 0xff
90003c1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
90003c20:	68fb      	ldr	r3, [r7, #12]
90003c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90003c24:	b2da      	uxtb	r2, r3
90003c26:	8979      	ldrh	r1, [r7, #10]
90003c28:	4b52      	ldr	r3, [pc, #328]	; (90003d74 <HAL_I2C_Mem_Read+0x22c>)
90003c2a:	9300      	str	r3, [sp, #0]
90003c2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
90003c30:	68f8      	ldr	r0, [r7, #12]
90003c32:	f000 fa9f 	bl	90004174 <I2C_TransferConfig>
90003c36:	e00f      	b.n	90003c58 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
90003c38:	68fb      	ldr	r3, [r7, #12]
90003c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90003c3c:	b29a      	uxth	r2, r3
90003c3e:	68fb      	ldr	r3, [r7, #12]
90003c40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
90003c42:	68fb      	ldr	r3, [r7, #12]
90003c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90003c46:	b2da      	uxtb	r2, r3
90003c48:	8979      	ldrh	r1, [r7, #10]
90003c4a:	4b4a      	ldr	r3, [pc, #296]	; (90003d74 <HAL_I2C_Mem_Read+0x22c>)
90003c4c:	9300      	str	r3, [sp, #0]
90003c4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
90003c52:	68f8      	ldr	r0, [r7, #12]
90003c54:	f000 fa8e 	bl	90004174 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
90003c58:	697b      	ldr	r3, [r7, #20]
90003c5a:	9300      	str	r3, [sp, #0]
90003c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
90003c5e:	2200      	movs	r2, #0
90003c60:	2104      	movs	r1, #4
90003c62:	68f8      	ldr	r0, [r7, #12]
90003c64:	f000 f964 	bl	90003f30 <I2C_WaitOnFlagUntilTimeout>
90003c68:	4603      	mov	r3, r0
90003c6a:	2b00      	cmp	r3, #0
90003c6c:	d001      	beq.n	90003c72 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
90003c6e:	2301      	movs	r3, #1
90003c70:	e07c      	b.n	90003d6c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
90003c72:	68fb      	ldr	r3, [r7, #12]
90003c74:	681b      	ldr	r3, [r3, #0]
90003c76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90003c78:	68fb      	ldr	r3, [r7, #12]
90003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90003c7c:	b2d2      	uxtb	r2, r2
90003c7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
90003c80:	68fb      	ldr	r3, [r7, #12]
90003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90003c84:	1c5a      	adds	r2, r3, #1
90003c86:	68fb      	ldr	r3, [r7, #12]
90003c88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
90003c8a:	68fb      	ldr	r3, [r7, #12]
90003c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90003c8e:	3b01      	subs	r3, #1
90003c90:	b29a      	uxth	r2, r3
90003c92:	68fb      	ldr	r3, [r7, #12]
90003c94:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
90003c96:	68fb      	ldr	r3, [r7, #12]
90003c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90003c9a:	b29b      	uxth	r3, r3
90003c9c:	3b01      	subs	r3, #1
90003c9e:	b29a      	uxth	r2, r3
90003ca0:	68fb      	ldr	r3, [r7, #12]
90003ca2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90003ca4:	68fb      	ldr	r3, [r7, #12]
90003ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90003ca8:	b29b      	uxth	r3, r3
90003caa:	2b00      	cmp	r3, #0
90003cac:	d034      	beq.n	90003d18 <HAL_I2C_Mem_Read+0x1d0>
90003cae:	68fb      	ldr	r3, [r7, #12]
90003cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90003cb2:	2b00      	cmp	r3, #0
90003cb4:	d130      	bne.n	90003d18 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
90003cb6:	697b      	ldr	r3, [r7, #20]
90003cb8:	9300      	str	r3, [sp, #0]
90003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
90003cbc:	2200      	movs	r2, #0
90003cbe:	2180      	movs	r1, #128	; 0x80
90003cc0:	68f8      	ldr	r0, [r7, #12]
90003cc2:	f000 f935 	bl	90003f30 <I2C_WaitOnFlagUntilTimeout>
90003cc6:	4603      	mov	r3, r0
90003cc8:	2b00      	cmp	r3, #0
90003cca:	d001      	beq.n	90003cd0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
90003ccc:	2301      	movs	r3, #1
90003cce:	e04d      	b.n	90003d6c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90003cd0:	68fb      	ldr	r3, [r7, #12]
90003cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90003cd4:	b29b      	uxth	r3, r3
90003cd6:	2bff      	cmp	r3, #255	; 0xff
90003cd8:	d90e      	bls.n	90003cf8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
90003cda:	68fb      	ldr	r3, [r7, #12]
90003cdc:	22ff      	movs	r2, #255	; 0xff
90003cde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
90003ce0:	68fb      	ldr	r3, [r7, #12]
90003ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90003ce4:	b2da      	uxtb	r2, r3
90003ce6:	8979      	ldrh	r1, [r7, #10]
90003ce8:	2300      	movs	r3, #0
90003cea:	9300      	str	r3, [sp, #0]
90003cec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
90003cf0:	68f8      	ldr	r0, [r7, #12]
90003cf2:	f000 fa3f 	bl	90004174 <I2C_TransferConfig>
90003cf6:	e00f      	b.n	90003d18 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
90003cf8:	68fb      	ldr	r3, [r7, #12]
90003cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90003cfc:	b29a      	uxth	r2, r3
90003cfe:	68fb      	ldr	r3, [r7, #12]
90003d00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90003d02:	68fb      	ldr	r3, [r7, #12]
90003d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90003d06:	b2da      	uxtb	r2, r3
90003d08:	8979      	ldrh	r1, [r7, #10]
90003d0a:	2300      	movs	r3, #0
90003d0c:	9300      	str	r3, [sp, #0]
90003d0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
90003d12:	68f8      	ldr	r0, [r7, #12]
90003d14:	f000 fa2e 	bl	90004174 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
90003d18:	68fb      	ldr	r3, [r7, #12]
90003d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90003d1c:	b29b      	uxth	r3, r3
90003d1e:	2b00      	cmp	r3, #0
90003d20:	d19a      	bne.n	90003c58 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90003d22:	697a      	ldr	r2, [r7, #20]
90003d24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
90003d26:	68f8      	ldr	r0, [r7, #12]
90003d28:	f000 f982 	bl	90004030 <I2C_WaitOnSTOPFlagUntilTimeout>
90003d2c:	4603      	mov	r3, r0
90003d2e:	2b00      	cmp	r3, #0
90003d30:	d001      	beq.n	90003d36 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
90003d32:	2301      	movs	r3, #1
90003d34:	e01a      	b.n	90003d6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90003d36:	68fb      	ldr	r3, [r7, #12]
90003d38:	681b      	ldr	r3, [r3, #0]
90003d3a:	2220      	movs	r2, #32
90003d3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90003d3e:	68fb      	ldr	r3, [r7, #12]
90003d40:	681b      	ldr	r3, [r3, #0]
90003d42:	6859      	ldr	r1, [r3, #4]
90003d44:	68fb      	ldr	r3, [r7, #12]
90003d46:	681a      	ldr	r2, [r3, #0]
90003d48:	4b0b      	ldr	r3, [pc, #44]	; (90003d78 <HAL_I2C_Mem_Read+0x230>)
90003d4a:	400b      	ands	r3, r1
90003d4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
90003d4e:	68fb      	ldr	r3, [r7, #12]
90003d50:	2220      	movs	r2, #32
90003d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90003d56:	68fb      	ldr	r3, [r7, #12]
90003d58:	2200      	movs	r2, #0
90003d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90003d5e:	68fb      	ldr	r3, [r7, #12]
90003d60:	2200      	movs	r2, #0
90003d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
90003d66:	2300      	movs	r3, #0
90003d68:	e000      	b.n	90003d6c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
90003d6a:	2302      	movs	r3, #2
  }
}
90003d6c:	4618      	mov	r0, r3
90003d6e:	3718      	adds	r7, #24
90003d70:	46bd      	mov	sp, r7
90003d72:	bd80      	pop	{r7, pc}
90003d74:	80002400 	.word	0x80002400
90003d78:	fe00e800 	.word	0xfe00e800

90003d7c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
90003d7c:	b480      	push	{r7}
90003d7e:	b083      	sub	sp, #12
90003d80:	af00      	add	r7, sp, #0
90003d82:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
90003d84:	687b      	ldr	r3, [r7, #4]
90003d86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
90003d8a:	b2db      	uxtb	r3, r3
}
90003d8c:	4618      	mov	r0, r3
90003d8e:	370c      	adds	r7, #12
90003d90:	46bd      	mov	sp, r7
90003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
90003d96:	4770      	bx	lr

90003d98 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
90003d98:	b580      	push	{r7, lr}
90003d9a:	b086      	sub	sp, #24
90003d9c:	af02      	add	r7, sp, #8
90003d9e:	60f8      	str	r0, [r7, #12]
90003da0:	4608      	mov	r0, r1
90003da2:	4611      	mov	r1, r2
90003da4:	461a      	mov	r2, r3
90003da6:	4603      	mov	r3, r0
90003da8:	817b      	strh	r3, [r7, #10]
90003daa:	460b      	mov	r3, r1
90003dac:	813b      	strh	r3, [r7, #8]
90003dae:	4613      	mov	r3, r2
90003db0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
90003db2:	88fb      	ldrh	r3, [r7, #6]
90003db4:	b2da      	uxtb	r2, r3
90003db6:	8979      	ldrh	r1, [r7, #10]
90003db8:	4b20      	ldr	r3, [pc, #128]	; (90003e3c <I2C_RequestMemoryWrite+0xa4>)
90003dba:	9300      	str	r3, [sp, #0]
90003dbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
90003dc0:	68f8      	ldr	r0, [r7, #12]
90003dc2:	f000 f9d7 	bl	90004174 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90003dc6:	69fa      	ldr	r2, [r7, #28]
90003dc8:	69b9      	ldr	r1, [r7, #24]
90003dca:	68f8      	ldr	r0, [r7, #12]
90003dcc:	f000 f8f0 	bl	90003fb0 <I2C_WaitOnTXISFlagUntilTimeout>
90003dd0:	4603      	mov	r3, r0
90003dd2:	2b00      	cmp	r3, #0
90003dd4:	d001      	beq.n	90003dda <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
90003dd6:	2301      	movs	r3, #1
90003dd8:	e02c      	b.n	90003e34 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90003dda:	88fb      	ldrh	r3, [r7, #6]
90003ddc:	2b01      	cmp	r3, #1
90003dde:	d105      	bne.n	90003dec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003de0:	893b      	ldrh	r3, [r7, #8]
90003de2:	b2da      	uxtb	r2, r3
90003de4:	68fb      	ldr	r3, [r7, #12]
90003de6:	681b      	ldr	r3, [r3, #0]
90003de8:	629a      	str	r2, [r3, #40]	; 0x28
90003dea:	e015      	b.n	90003e18 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90003dec:	893b      	ldrh	r3, [r7, #8]
90003dee:	0a1b      	lsrs	r3, r3, #8
90003df0:	b29b      	uxth	r3, r3
90003df2:	b2da      	uxtb	r2, r3
90003df4:	68fb      	ldr	r3, [r7, #12]
90003df6:	681b      	ldr	r3, [r3, #0]
90003df8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90003dfa:	69fa      	ldr	r2, [r7, #28]
90003dfc:	69b9      	ldr	r1, [r7, #24]
90003dfe:	68f8      	ldr	r0, [r7, #12]
90003e00:	f000 f8d6 	bl	90003fb0 <I2C_WaitOnTXISFlagUntilTimeout>
90003e04:	4603      	mov	r3, r0
90003e06:	2b00      	cmp	r3, #0
90003e08:	d001      	beq.n	90003e0e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
90003e0a:	2301      	movs	r3, #1
90003e0c:	e012      	b.n	90003e34 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003e0e:	893b      	ldrh	r3, [r7, #8]
90003e10:	b2da      	uxtb	r2, r3
90003e12:	68fb      	ldr	r3, [r7, #12]
90003e14:	681b      	ldr	r3, [r3, #0]
90003e16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
90003e18:	69fb      	ldr	r3, [r7, #28]
90003e1a:	9300      	str	r3, [sp, #0]
90003e1c:	69bb      	ldr	r3, [r7, #24]
90003e1e:	2200      	movs	r2, #0
90003e20:	2180      	movs	r1, #128	; 0x80
90003e22:	68f8      	ldr	r0, [r7, #12]
90003e24:	f000 f884 	bl	90003f30 <I2C_WaitOnFlagUntilTimeout>
90003e28:	4603      	mov	r3, r0
90003e2a:	2b00      	cmp	r3, #0
90003e2c:	d001      	beq.n	90003e32 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
90003e2e:	2301      	movs	r3, #1
90003e30:	e000      	b.n	90003e34 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
90003e32:	2300      	movs	r3, #0
}
90003e34:	4618      	mov	r0, r3
90003e36:	3710      	adds	r7, #16
90003e38:	46bd      	mov	sp, r7
90003e3a:	bd80      	pop	{r7, pc}
90003e3c:	80002000 	.word	0x80002000

90003e40 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
90003e40:	b580      	push	{r7, lr}
90003e42:	b086      	sub	sp, #24
90003e44:	af02      	add	r7, sp, #8
90003e46:	60f8      	str	r0, [r7, #12]
90003e48:	4608      	mov	r0, r1
90003e4a:	4611      	mov	r1, r2
90003e4c:	461a      	mov	r2, r3
90003e4e:	4603      	mov	r3, r0
90003e50:	817b      	strh	r3, [r7, #10]
90003e52:	460b      	mov	r3, r1
90003e54:	813b      	strh	r3, [r7, #8]
90003e56:	4613      	mov	r3, r2
90003e58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90003e5a:	88fb      	ldrh	r3, [r7, #6]
90003e5c:	b2da      	uxtb	r2, r3
90003e5e:	8979      	ldrh	r1, [r7, #10]
90003e60:	4b20      	ldr	r3, [pc, #128]	; (90003ee4 <I2C_RequestMemoryRead+0xa4>)
90003e62:	9300      	str	r3, [sp, #0]
90003e64:	2300      	movs	r3, #0
90003e66:	68f8      	ldr	r0, [r7, #12]
90003e68:	f000 f984 	bl	90004174 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90003e6c:	69fa      	ldr	r2, [r7, #28]
90003e6e:	69b9      	ldr	r1, [r7, #24]
90003e70:	68f8      	ldr	r0, [r7, #12]
90003e72:	f000 f89d 	bl	90003fb0 <I2C_WaitOnTXISFlagUntilTimeout>
90003e76:	4603      	mov	r3, r0
90003e78:	2b00      	cmp	r3, #0
90003e7a:	d001      	beq.n	90003e80 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
90003e7c:	2301      	movs	r3, #1
90003e7e:	e02c      	b.n	90003eda <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90003e80:	88fb      	ldrh	r3, [r7, #6]
90003e82:	2b01      	cmp	r3, #1
90003e84:	d105      	bne.n	90003e92 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003e86:	893b      	ldrh	r3, [r7, #8]
90003e88:	b2da      	uxtb	r2, r3
90003e8a:	68fb      	ldr	r3, [r7, #12]
90003e8c:	681b      	ldr	r3, [r3, #0]
90003e8e:	629a      	str	r2, [r3, #40]	; 0x28
90003e90:	e015      	b.n	90003ebe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90003e92:	893b      	ldrh	r3, [r7, #8]
90003e94:	0a1b      	lsrs	r3, r3, #8
90003e96:	b29b      	uxth	r3, r3
90003e98:	b2da      	uxtb	r2, r3
90003e9a:	68fb      	ldr	r3, [r7, #12]
90003e9c:	681b      	ldr	r3, [r3, #0]
90003e9e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90003ea0:	69fa      	ldr	r2, [r7, #28]
90003ea2:	69b9      	ldr	r1, [r7, #24]
90003ea4:	68f8      	ldr	r0, [r7, #12]
90003ea6:	f000 f883 	bl	90003fb0 <I2C_WaitOnTXISFlagUntilTimeout>
90003eaa:	4603      	mov	r3, r0
90003eac:	2b00      	cmp	r3, #0
90003eae:	d001      	beq.n	90003eb4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
90003eb0:	2301      	movs	r3, #1
90003eb2:	e012      	b.n	90003eda <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003eb4:	893b      	ldrh	r3, [r7, #8]
90003eb6:	b2da      	uxtb	r2, r3
90003eb8:	68fb      	ldr	r3, [r7, #12]
90003eba:	681b      	ldr	r3, [r3, #0]
90003ebc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
90003ebe:	69fb      	ldr	r3, [r7, #28]
90003ec0:	9300      	str	r3, [sp, #0]
90003ec2:	69bb      	ldr	r3, [r7, #24]
90003ec4:	2200      	movs	r2, #0
90003ec6:	2140      	movs	r1, #64	; 0x40
90003ec8:	68f8      	ldr	r0, [r7, #12]
90003eca:	f000 f831 	bl	90003f30 <I2C_WaitOnFlagUntilTimeout>
90003ece:	4603      	mov	r3, r0
90003ed0:	2b00      	cmp	r3, #0
90003ed2:	d001      	beq.n	90003ed8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
90003ed4:	2301      	movs	r3, #1
90003ed6:	e000      	b.n	90003eda <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
90003ed8:	2300      	movs	r3, #0
}
90003eda:	4618      	mov	r0, r3
90003edc:	3710      	adds	r7, #16
90003ede:	46bd      	mov	sp, r7
90003ee0:	bd80      	pop	{r7, pc}
90003ee2:	bf00      	nop
90003ee4:	80002000 	.word	0x80002000

90003ee8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
90003ee8:	b480      	push	{r7}
90003eea:	b083      	sub	sp, #12
90003eec:	af00      	add	r7, sp, #0
90003eee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90003ef0:	687b      	ldr	r3, [r7, #4]
90003ef2:	681b      	ldr	r3, [r3, #0]
90003ef4:	699b      	ldr	r3, [r3, #24]
90003ef6:	f003 0302 	and.w	r3, r3, #2
90003efa:	2b02      	cmp	r3, #2
90003efc:	d103      	bne.n	90003f06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
90003efe:	687b      	ldr	r3, [r7, #4]
90003f00:	681b      	ldr	r3, [r3, #0]
90003f02:	2200      	movs	r2, #0
90003f04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90003f06:	687b      	ldr	r3, [r7, #4]
90003f08:	681b      	ldr	r3, [r3, #0]
90003f0a:	699b      	ldr	r3, [r3, #24]
90003f0c:	f003 0301 	and.w	r3, r3, #1
90003f10:	2b01      	cmp	r3, #1
90003f12:	d007      	beq.n	90003f24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90003f14:	687b      	ldr	r3, [r7, #4]
90003f16:	681b      	ldr	r3, [r3, #0]
90003f18:	699a      	ldr	r2, [r3, #24]
90003f1a:	687b      	ldr	r3, [r7, #4]
90003f1c:	681b      	ldr	r3, [r3, #0]
90003f1e:	f042 0201 	orr.w	r2, r2, #1
90003f22:	619a      	str	r2, [r3, #24]
  }
}
90003f24:	bf00      	nop
90003f26:	370c      	adds	r7, #12
90003f28:	46bd      	mov	sp, r7
90003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
90003f2e:	4770      	bx	lr

90003f30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
90003f30:	b580      	push	{r7, lr}
90003f32:	b084      	sub	sp, #16
90003f34:	af00      	add	r7, sp, #0
90003f36:	60f8      	str	r0, [r7, #12]
90003f38:	60b9      	str	r1, [r7, #8]
90003f3a:	603b      	str	r3, [r7, #0]
90003f3c:	4613      	mov	r3, r2
90003f3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90003f40:	e022      	b.n	90003f88 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90003f42:	683b      	ldr	r3, [r7, #0]
90003f44:	f1b3 3fff 	cmp.w	r3, #4294967295
90003f48:	d01e      	beq.n	90003f88 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90003f4a:	f7fe fcb9 	bl	900028c0 <HAL_GetTick>
90003f4e:	4602      	mov	r2, r0
90003f50:	69bb      	ldr	r3, [r7, #24]
90003f52:	1ad3      	subs	r3, r2, r3
90003f54:	683a      	ldr	r2, [r7, #0]
90003f56:	429a      	cmp	r2, r3
90003f58:	d302      	bcc.n	90003f60 <I2C_WaitOnFlagUntilTimeout+0x30>
90003f5a:	683b      	ldr	r3, [r7, #0]
90003f5c:	2b00      	cmp	r3, #0
90003f5e:	d113      	bne.n	90003f88 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90003f60:	68fb      	ldr	r3, [r7, #12]
90003f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90003f64:	f043 0220 	orr.w	r2, r3, #32
90003f68:	68fb      	ldr	r3, [r7, #12]
90003f6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
90003f6c:	68fb      	ldr	r3, [r7, #12]
90003f6e:	2220      	movs	r2, #32
90003f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
90003f74:	68fb      	ldr	r3, [r7, #12]
90003f76:	2200      	movs	r2, #0
90003f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
90003f7c:	68fb      	ldr	r3, [r7, #12]
90003f7e:	2200      	movs	r2, #0
90003f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
90003f84:	2301      	movs	r3, #1
90003f86:	e00f      	b.n	90003fa8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90003f88:	68fb      	ldr	r3, [r7, #12]
90003f8a:	681b      	ldr	r3, [r3, #0]
90003f8c:	699a      	ldr	r2, [r3, #24]
90003f8e:	68bb      	ldr	r3, [r7, #8]
90003f90:	4013      	ands	r3, r2
90003f92:	68ba      	ldr	r2, [r7, #8]
90003f94:	429a      	cmp	r2, r3
90003f96:	bf0c      	ite	eq
90003f98:	2301      	moveq	r3, #1
90003f9a:	2300      	movne	r3, #0
90003f9c:	b2db      	uxtb	r3, r3
90003f9e:	461a      	mov	r2, r3
90003fa0:	79fb      	ldrb	r3, [r7, #7]
90003fa2:	429a      	cmp	r2, r3
90003fa4:	d0cd      	beq.n	90003f42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
90003fa6:	2300      	movs	r3, #0
}
90003fa8:	4618      	mov	r0, r3
90003faa:	3710      	adds	r7, #16
90003fac:	46bd      	mov	sp, r7
90003fae:	bd80      	pop	{r7, pc}

90003fb0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
90003fb0:	b580      	push	{r7, lr}
90003fb2:	b084      	sub	sp, #16
90003fb4:	af00      	add	r7, sp, #0
90003fb6:	60f8      	str	r0, [r7, #12]
90003fb8:	60b9      	str	r1, [r7, #8]
90003fba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90003fbc:	e02c      	b.n	90004018 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
90003fbe:	687a      	ldr	r2, [r7, #4]
90003fc0:	68b9      	ldr	r1, [r7, #8]
90003fc2:	68f8      	ldr	r0, [r7, #12]
90003fc4:	f000 f870 	bl	900040a8 <I2C_IsAcknowledgeFailed>
90003fc8:	4603      	mov	r3, r0
90003fca:	2b00      	cmp	r3, #0
90003fcc:	d001      	beq.n	90003fd2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90003fce:	2301      	movs	r3, #1
90003fd0:	e02a      	b.n	90004028 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90003fd2:	68bb      	ldr	r3, [r7, #8]
90003fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
90003fd8:	d01e      	beq.n	90004018 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90003fda:	f7fe fc71 	bl	900028c0 <HAL_GetTick>
90003fde:	4602      	mov	r2, r0
90003fe0:	687b      	ldr	r3, [r7, #4]
90003fe2:	1ad3      	subs	r3, r2, r3
90003fe4:	68ba      	ldr	r2, [r7, #8]
90003fe6:	429a      	cmp	r2, r3
90003fe8:	d302      	bcc.n	90003ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
90003fea:	68bb      	ldr	r3, [r7, #8]
90003fec:	2b00      	cmp	r3, #0
90003fee:	d113      	bne.n	90004018 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90003ff0:	68fb      	ldr	r3, [r7, #12]
90003ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90003ff4:	f043 0220 	orr.w	r2, r3, #32
90003ff8:	68fb      	ldr	r3, [r7, #12]
90003ffa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
90003ffc:	68fb      	ldr	r3, [r7, #12]
90003ffe:	2220      	movs	r2, #32
90004000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
90004004:	68fb      	ldr	r3, [r7, #12]
90004006:	2200      	movs	r2, #0
90004008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
9000400c:	68fb      	ldr	r3, [r7, #12]
9000400e:	2200      	movs	r2, #0
90004010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
90004014:	2301      	movs	r3, #1
90004016:	e007      	b.n	90004028 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90004018:	68fb      	ldr	r3, [r7, #12]
9000401a:	681b      	ldr	r3, [r3, #0]
9000401c:	699b      	ldr	r3, [r3, #24]
9000401e:	f003 0302 	and.w	r3, r3, #2
90004022:	2b02      	cmp	r3, #2
90004024:	d1cb      	bne.n	90003fbe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
90004026:	2300      	movs	r3, #0
}
90004028:	4618      	mov	r0, r3
9000402a:	3710      	adds	r7, #16
9000402c:	46bd      	mov	sp, r7
9000402e:	bd80      	pop	{r7, pc}

90004030 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
90004030:	b580      	push	{r7, lr}
90004032:	b084      	sub	sp, #16
90004034:	af00      	add	r7, sp, #0
90004036:	60f8      	str	r0, [r7, #12]
90004038:	60b9      	str	r1, [r7, #8]
9000403a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000403c:	e028      	b.n	90004090 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
9000403e:	687a      	ldr	r2, [r7, #4]
90004040:	68b9      	ldr	r1, [r7, #8]
90004042:	68f8      	ldr	r0, [r7, #12]
90004044:	f000 f830 	bl	900040a8 <I2C_IsAcknowledgeFailed>
90004048:	4603      	mov	r3, r0
9000404a:	2b00      	cmp	r3, #0
9000404c:	d001      	beq.n	90004052 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
9000404e:	2301      	movs	r3, #1
90004050:	e026      	b.n	900040a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90004052:	f7fe fc35 	bl	900028c0 <HAL_GetTick>
90004056:	4602      	mov	r2, r0
90004058:	687b      	ldr	r3, [r7, #4]
9000405a:	1ad3      	subs	r3, r2, r3
9000405c:	68ba      	ldr	r2, [r7, #8]
9000405e:	429a      	cmp	r2, r3
90004060:	d302      	bcc.n	90004068 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
90004062:	68bb      	ldr	r3, [r7, #8]
90004064:	2b00      	cmp	r3, #0
90004066:	d113      	bne.n	90004090 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90004068:	68fb      	ldr	r3, [r7, #12]
9000406a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000406c:	f043 0220 	orr.w	r2, r3, #32
90004070:	68fb      	ldr	r3, [r7, #12]
90004072:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
90004074:	68fb      	ldr	r3, [r7, #12]
90004076:	2220      	movs	r2, #32
90004078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
9000407c:	68fb      	ldr	r3, [r7, #12]
9000407e:	2200      	movs	r2, #0
90004080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
90004084:	68fb      	ldr	r3, [r7, #12]
90004086:	2200      	movs	r2, #0
90004088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
9000408c:	2301      	movs	r3, #1
9000408e:	e007      	b.n	900040a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90004090:	68fb      	ldr	r3, [r7, #12]
90004092:	681b      	ldr	r3, [r3, #0]
90004094:	699b      	ldr	r3, [r3, #24]
90004096:	f003 0320 	and.w	r3, r3, #32
9000409a:	2b20      	cmp	r3, #32
9000409c:	d1cf      	bne.n	9000403e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
9000409e:	2300      	movs	r3, #0
}
900040a0:	4618      	mov	r0, r3
900040a2:	3710      	adds	r7, #16
900040a4:	46bd      	mov	sp, r7
900040a6:	bd80      	pop	{r7, pc}

900040a8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
900040a8:	b580      	push	{r7, lr}
900040aa:	b084      	sub	sp, #16
900040ac:	af00      	add	r7, sp, #0
900040ae:	60f8      	str	r0, [r7, #12]
900040b0:	60b9      	str	r1, [r7, #8]
900040b2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
900040b4:	68fb      	ldr	r3, [r7, #12]
900040b6:	681b      	ldr	r3, [r3, #0]
900040b8:	699b      	ldr	r3, [r3, #24]
900040ba:	f003 0310 	and.w	r3, r3, #16
900040be:	2b10      	cmp	r3, #16
900040c0:	d151      	bne.n	90004166 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900040c2:	e022      	b.n	9000410a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
900040c4:	68bb      	ldr	r3, [r7, #8]
900040c6:	f1b3 3fff 	cmp.w	r3, #4294967295
900040ca:	d01e      	beq.n	9000410a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900040cc:	f7fe fbf8 	bl	900028c0 <HAL_GetTick>
900040d0:	4602      	mov	r2, r0
900040d2:	687b      	ldr	r3, [r7, #4]
900040d4:	1ad3      	subs	r3, r2, r3
900040d6:	68ba      	ldr	r2, [r7, #8]
900040d8:	429a      	cmp	r2, r3
900040da:	d302      	bcc.n	900040e2 <I2C_IsAcknowledgeFailed+0x3a>
900040dc:	68bb      	ldr	r3, [r7, #8]
900040de:	2b00      	cmp	r3, #0
900040e0:	d113      	bne.n	9000410a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900040e2:	68fb      	ldr	r3, [r7, #12]
900040e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900040e6:	f043 0220 	orr.w	r2, r3, #32
900040ea:	68fb      	ldr	r3, [r7, #12]
900040ec:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900040ee:	68fb      	ldr	r3, [r7, #12]
900040f0:	2220      	movs	r2, #32
900040f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
900040f6:	68fb      	ldr	r3, [r7, #12]
900040f8:	2200      	movs	r2, #0
900040fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
900040fe:	68fb      	ldr	r3, [r7, #12]
90004100:	2200      	movs	r2, #0
90004102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
90004106:	2301      	movs	r3, #1
90004108:	e02e      	b.n	90004168 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000410a:	68fb      	ldr	r3, [r7, #12]
9000410c:	681b      	ldr	r3, [r3, #0]
9000410e:	699b      	ldr	r3, [r3, #24]
90004110:	f003 0320 	and.w	r3, r3, #32
90004114:	2b20      	cmp	r3, #32
90004116:	d1d5      	bne.n	900040c4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90004118:	68fb      	ldr	r3, [r7, #12]
9000411a:	681b      	ldr	r3, [r3, #0]
9000411c:	2210      	movs	r2, #16
9000411e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90004120:	68fb      	ldr	r3, [r7, #12]
90004122:	681b      	ldr	r3, [r3, #0]
90004124:	2220      	movs	r2, #32
90004126:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
90004128:	68f8      	ldr	r0, [r7, #12]
9000412a:	f7ff fedd 	bl	90003ee8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
9000412e:	68fb      	ldr	r3, [r7, #12]
90004130:	681b      	ldr	r3, [r3, #0]
90004132:	6859      	ldr	r1, [r3, #4]
90004134:	68fb      	ldr	r3, [r7, #12]
90004136:	681a      	ldr	r2, [r3, #0]
90004138:	4b0d      	ldr	r3, [pc, #52]	; (90004170 <I2C_IsAcknowledgeFailed+0xc8>)
9000413a:	400b      	ands	r3, r1
9000413c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
9000413e:	68fb      	ldr	r3, [r7, #12]
90004140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90004142:	f043 0204 	orr.w	r2, r3, #4
90004146:	68fb      	ldr	r3, [r7, #12]
90004148:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
9000414a:	68fb      	ldr	r3, [r7, #12]
9000414c:	2220      	movs	r2, #32
9000414e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
90004152:	68fb      	ldr	r3, [r7, #12]
90004154:	2200      	movs	r2, #0
90004156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000415a:	68fb      	ldr	r3, [r7, #12]
9000415c:	2200      	movs	r2, #0
9000415e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
90004162:	2301      	movs	r3, #1
90004164:	e000      	b.n	90004168 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
90004166:	2300      	movs	r3, #0
}
90004168:	4618      	mov	r0, r3
9000416a:	3710      	adds	r7, #16
9000416c:	46bd      	mov	sp, r7
9000416e:	bd80      	pop	{r7, pc}
90004170:	fe00e800 	.word	0xfe00e800

90004174 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
90004174:	b480      	push	{r7}
90004176:	b085      	sub	sp, #20
90004178:	af00      	add	r7, sp, #0
9000417a:	60f8      	str	r0, [r7, #12]
9000417c:	607b      	str	r3, [r7, #4]
9000417e:	460b      	mov	r3, r1
90004180:	817b      	strh	r3, [r7, #10]
90004182:	4613      	mov	r3, r2
90004184:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
90004186:	68fb      	ldr	r3, [r7, #12]
90004188:	681b      	ldr	r3, [r3, #0]
9000418a:	685a      	ldr	r2, [r3, #4]
9000418c:	69bb      	ldr	r3, [r7, #24]
9000418e:	0d5b      	lsrs	r3, r3, #21
90004190:	f403 6180 	and.w	r1, r3, #1024	; 0x400
90004194:	4b0d      	ldr	r3, [pc, #52]	; (900041cc <I2C_TransferConfig+0x58>)
90004196:	430b      	orrs	r3, r1
90004198:	43db      	mvns	r3, r3
9000419a:	ea02 0103 	and.w	r1, r2, r3
9000419e:	897b      	ldrh	r3, [r7, #10]
900041a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
900041a4:	7a7b      	ldrb	r3, [r7, #9]
900041a6:	041b      	lsls	r3, r3, #16
900041a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
900041ac:	431a      	orrs	r2, r3
900041ae:	687b      	ldr	r3, [r7, #4]
900041b0:	431a      	orrs	r2, r3
900041b2:	69bb      	ldr	r3, [r7, #24]
900041b4:	431a      	orrs	r2, r3
900041b6:	68fb      	ldr	r3, [r7, #12]
900041b8:	681b      	ldr	r3, [r3, #0]
900041ba:	430a      	orrs	r2, r1
900041bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
900041be:	bf00      	nop
900041c0:	3714      	adds	r7, #20
900041c2:	46bd      	mov	sp, r7
900041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
900041c8:	4770      	bx	lr
900041ca:	bf00      	nop
900041cc:	03ff63ff 	.word	0x03ff63ff

900041d0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
900041d0:	b580      	push	{r7, lr}
900041d2:	b084      	sub	sp, #16
900041d4:	af00      	add	r7, sp, #0
900041d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
900041d8:	687b      	ldr	r3, [r7, #4]
900041da:	2b00      	cmp	r3, #0
900041dc:	d101      	bne.n	900041e2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
900041de:	2301      	movs	r3, #1
900041e0:	e0bf      	b.n	90004362 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
900041e2:	687b      	ldr	r3, [r7, #4]
900041e4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
900041e8:	b2db      	uxtb	r3, r3
900041ea:	2b00      	cmp	r3, #0
900041ec:	d106      	bne.n	900041fc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
900041ee:	687b      	ldr	r3, [r7, #4]
900041f0:	2200      	movs	r2, #0
900041f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
900041f6:	6878      	ldr	r0, [r7, #4]
900041f8:	f000 f8ba 	bl	90004370 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
900041fc:	687b      	ldr	r3, [r7, #4]
900041fe:	2202      	movs	r2, #2
90004200:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90004204:	687b      	ldr	r3, [r7, #4]
90004206:	681b      	ldr	r3, [r3, #0]
90004208:	699a      	ldr	r2, [r3, #24]
9000420a:	687b      	ldr	r3, [r7, #4]
9000420c:	681b      	ldr	r3, [r3, #0]
9000420e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
90004212:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90004214:	687b      	ldr	r3, [r7, #4]
90004216:	681b      	ldr	r3, [r3, #0]
90004218:	6999      	ldr	r1, [r3, #24]
9000421a:	687b      	ldr	r3, [r7, #4]
9000421c:	685a      	ldr	r2, [r3, #4]
9000421e:	687b      	ldr	r3, [r7, #4]
90004220:	689b      	ldr	r3, [r3, #8]
90004222:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90004224:	687b      	ldr	r3, [r7, #4]
90004226:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90004228:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
9000422a:	687b      	ldr	r3, [r7, #4]
9000422c:	691b      	ldr	r3, [r3, #16]
9000422e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90004230:	687b      	ldr	r3, [r7, #4]
90004232:	681b      	ldr	r3, [r3, #0]
90004234:	430a      	orrs	r2, r1
90004236:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
90004238:	687b      	ldr	r3, [r7, #4]
9000423a:	681b      	ldr	r3, [r3, #0]
9000423c:	6899      	ldr	r1, [r3, #8]
9000423e:	687b      	ldr	r3, [r7, #4]
90004240:	681a      	ldr	r2, [r3, #0]
90004242:	4b4a      	ldr	r3, [pc, #296]	; (9000436c <HAL_LTDC_Init+0x19c>)
90004244:	400b      	ands	r3, r1
90004246:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
90004248:	687b      	ldr	r3, [r7, #4]
9000424a:	695b      	ldr	r3, [r3, #20]
9000424c:	041b      	lsls	r3, r3, #16
9000424e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
90004250:	687b      	ldr	r3, [r7, #4]
90004252:	681b      	ldr	r3, [r3, #0]
90004254:	6899      	ldr	r1, [r3, #8]
90004256:	687b      	ldr	r3, [r7, #4]
90004258:	699a      	ldr	r2, [r3, #24]
9000425a:	68fb      	ldr	r3, [r7, #12]
9000425c:	431a      	orrs	r2, r3
9000425e:	687b      	ldr	r3, [r7, #4]
90004260:	681b      	ldr	r3, [r3, #0]
90004262:	430a      	orrs	r2, r1
90004264:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
90004266:	687b      	ldr	r3, [r7, #4]
90004268:	681b      	ldr	r3, [r3, #0]
9000426a:	68d9      	ldr	r1, [r3, #12]
9000426c:	687b      	ldr	r3, [r7, #4]
9000426e:	681a      	ldr	r2, [r3, #0]
90004270:	4b3e      	ldr	r3, [pc, #248]	; (9000436c <HAL_LTDC_Init+0x19c>)
90004272:	400b      	ands	r3, r1
90004274:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
90004276:	687b      	ldr	r3, [r7, #4]
90004278:	69db      	ldr	r3, [r3, #28]
9000427a:	041b      	lsls	r3, r3, #16
9000427c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
9000427e:	687b      	ldr	r3, [r7, #4]
90004280:	681b      	ldr	r3, [r3, #0]
90004282:	68d9      	ldr	r1, [r3, #12]
90004284:	687b      	ldr	r3, [r7, #4]
90004286:	6a1a      	ldr	r2, [r3, #32]
90004288:	68fb      	ldr	r3, [r7, #12]
9000428a:	431a      	orrs	r2, r3
9000428c:	687b      	ldr	r3, [r7, #4]
9000428e:	681b      	ldr	r3, [r3, #0]
90004290:	430a      	orrs	r2, r1
90004292:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
90004294:	687b      	ldr	r3, [r7, #4]
90004296:	681b      	ldr	r3, [r3, #0]
90004298:	6919      	ldr	r1, [r3, #16]
9000429a:	687b      	ldr	r3, [r7, #4]
9000429c:	681a      	ldr	r2, [r3, #0]
9000429e:	4b33      	ldr	r3, [pc, #204]	; (9000436c <HAL_LTDC_Init+0x19c>)
900042a0:	400b      	ands	r3, r1
900042a2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
900042a4:	687b      	ldr	r3, [r7, #4]
900042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900042a8:	041b      	lsls	r3, r3, #16
900042aa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
900042ac:	687b      	ldr	r3, [r7, #4]
900042ae:	681b      	ldr	r3, [r3, #0]
900042b0:	6919      	ldr	r1, [r3, #16]
900042b2:	687b      	ldr	r3, [r7, #4]
900042b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
900042b6:	68fb      	ldr	r3, [r7, #12]
900042b8:	431a      	orrs	r2, r3
900042ba:	687b      	ldr	r3, [r7, #4]
900042bc:	681b      	ldr	r3, [r3, #0]
900042be:	430a      	orrs	r2, r1
900042c0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
900042c2:	687b      	ldr	r3, [r7, #4]
900042c4:	681b      	ldr	r3, [r3, #0]
900042c6:	6959      	ldr	r1, [r3, #20]
900042c8:	687b      	ldr	r3, [r7, #4]
900042ca:	681a      	ldr	r2, [r3, #0]
900042cc:	4b27      	ldr	r3, [pc, #156]	; (9000436c <HAL_LTDC_Init+0x19c>)
900042ce:	400b      	ands	r3, r1
900042d0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
900042d2:	687b      	ldr	r3, [r7, #4]
900042d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900042d6:	041b      	lsls	r3, r3, #16
900042d8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
900042da:	687b      	ldr	r3, [r7, #4]
900042dc:	681b      	ldr	r3, [r3, #0]
900042de:	6959      	ldr	r1, [r3, #20]
900042e0:	687b      	ldr	r3, [r7, #4]
900042e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900042e4:	68fb      	ldr	r3, [r7, #12]
900042e6:	431a      	orrs	r2, r3
900042e8:	687b      	ldr	r3, [r7, #4]
900042ea:	681b      	ldr	r3, [r3, #0]
900042ec:	430a      	orrs	r2, r1
900042ee:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
900042f0:	687b      	ldr	r3, [r7, #4]
900042f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
900042f6:	021b      	lsls	r3, r3, #8
900042f8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
900042fa:	687b      	ldr	r3, [r7, #4]
900042fc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
90004300:	041b      	lsls	r3, r3, #16
90004302:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90004304:	687b      	ldr	r3, [r7, #4]
90004306:	681b      	ldr	r3, [r3, #0]
90004308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000430a:	687b      	ldr	r3, [r7, #4]
9000430c:	681b      	ldr	r3, [r3, #0]
9000430e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
90004312:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
90004314:	687b      	ldr	r3, [r7, #4]
90004316:	681b      	ldr	r3, [r3, #0]
90004318:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
9000431a:	68ba      	ldr	r2, [r7, #8]
9000431c:	68fb      	ldr	r3, [r7, #12]
9000431e:	4313      	orrs	r3, r2
90004320:	687a      	ldr	r2, [r7, #4]
90004322:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
90004326:	431a      	orrs	r2, r3
90004328:	687b      	ldr	r3, [r7, #4]
9000432a:	681b      	ldr	r3, [r3, #0]
9000432c:	430a      	orrs	r2, r1
9000432e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
90004330:	687b      	ldr	r3, [r7, #4]
90004332:	681b      	ldr	r3, [r3, #0]
90004334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90004336:	687b      	ldr	r3, [r7, #4]
90004338:	681b      	ldr	r3, [r3, #0]
9000433a:	f042 0206 	orr.w	r2, r2, #6
9000433e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
90004340:	687b      	ldr	r3, [r7, #4]
90004342:	681b      	ldr	r3, [r3, #0]
90004344:	699a      	ldr	r2, [r3, #24]
90004346:	687b      	ldr	r3, [r7, #4]
90004348:	681b      	ldr	r3, [r3, #0]
9000434a:	f042 0201 	orr.w	r2, r2, #1
9000434e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
90004350:	687b      	ldr	r3, [r7, #4]
90004352:	2200      	movs	r2, #0
90004354:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
90004358:	687b      	ldr	r3, [r7, #4]
9000435a:	2201      	movs	r2, #1
9000435c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
90004360:	2300      	movs	r3, #0
}
90004362:	4618      	mov	r0, r3
90004364:	3710      	adds	r7, #16
90004366:	46bd      	mov	sp, r7
90004368:	bd80      	pop	{r7, pc}
9000436a:	bf00      	nop
9000436c:	f000f800 	.word	0xf000f800

90004370 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
90004370:	b480      	push	{r7}
90004372:	b083      	sub	sp, #12
90004374:	af00      	add	r7, sp, #0
90004376:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
90004378:	bf00      	nop
9000437a:	370c      	adds	r7, #12
9000437c:	46bd      	mov	sp, r7
9000437e:	f85d 7b04 	ldr.w	r7, [sp], #4
90004382:	4770      	bx	lr

90004384 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
90004384:	b5b0      	push	{r4, r5, r7, lr}
90004386:	b084      	sub	sp, #16
90004388:	af00      	add	r7, sp, #0
9000438a:	60f8      	str	r0, [r7, #12]
9000438c:	60b9      	str	r1, [r7, #8]
9000438e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
90004390:	68fb      	ldr	r3, [r7, #12]
90004392:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
90004396:	2b01      	cmp	r3, #1
90004398:	d101      	bne.n	9000439e <HAL_LTDC_ConfigLayer+0x1a>
9000439a:	2302      	movs	r3, #2
9000439c:	e02c      	b.n	900043f8 <HAL_LTDC_ConfigLayer+0x74>
9000439e:	68fb      	ldr	r3, [r7, #12]
900043a0:	2201      	movs	r2, #1
900043a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
900043a6:	68fb      	ldr	r3, [r7, #12]
900043a8:	2202      	movs	r2, #2
900043aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
900043ae:	68fa      	ldr	r2, [r7, #12]
900043b0:	687b      	ldr	r3, [r7, #4]
900043b2:	2134      	movs	r1, #52	; 0x34
900043b4:	fb01 f303 	mul.w	r3, r1, r3
900043b8:	4413      	add	r3, r2
900043ba:	f103 0238 	add.w	r2, r3, #56	; 0x38
900043be:	68bb      	ldr	r3, [r7, #8]
900043c0:	4614      	mov	r4, r2
900043c2:	461d      	mov	r5, r3
900043c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900043c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900043c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900043ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900043cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900043ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900043d0:	682b      	ldr	r3, [r5, #0]
900043d2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
900043d4:	687a      	ldr	r2, [r7, #4]
900043d6:	68b9      	ldr	r1, [r7, #8]
900043d8:	68f8      	ldr	r0, [r7, #12]
900043da:	f000 f81f 	bl	9000441c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
900043de:	68fb      	ldr	r3, [r7, #12]
900043e0:	681b      	ldr	r3, [r3, #0]
900043e2:	2201      	movs	r2, #1
900043e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
900043e6:	68fb      	ldr	r3, [r7, #12]
900043e8:	2201      	movs	r2, #1
900043ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
900043ee:	68fb      	ldr	r3, [r7, #12]
900043f0:	2200      	movs	r2, #0
900043f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
900043f6:	2300      	movs	r3, #0
}
900043f8:	4618      	mov	r0, r3
900043fa:	3710      	adds	r7, #16
900043fc:	46bd      	mov	sp, r7
900043fe:	bdb0      	pop	{r4, r5, r7, pc}

90004400 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
90004400:	b480      	push	{r7}
90004402:	b083      	sub	sp, #12
90004404:	af00      	add	r7, sp, #0
90004406:	6078      	str	r0, [r7, #4]
  return hltdc->State;
90004408:	687b      	ldr	r3, [r7, #4]
9000440a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
9000440e:	b2db      	uxtb	r3, r3
}
90004410:	4618      	mov	r0, r3
90004412:	370c      	adds	r7, #12
90004414:	46bd      	mov	sp, r7
90004416:	f85d 7b04 	ldr.w	r7, [sp], #4
9000441a:	4770      	bx	lr

9000441c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
9000441c:	b480      	push	{r7}
9000441e:	b089      	sub	sp, #36	; 0x24
90004420:	af00      	add	r7, sp, #0
90004422:	60f8      	str	r0, [r7, #12]
90004424:	60b9      	str	r1, [r7, #8]
90004426:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90004428:	68bb      	ldr	r3, [r7, #8]
9000442a:	685a      	ldr	r2, [r3, #4]
9000442c:	68fb      	ldr	r3, [r7, #12]
9000442e:	681b      	ldr	r3, [r3, #0]
90004430:	68db      	ldr	r3, [r3, #12]
90004432:	0c1b      	lsrs	r3, r3, #16
90004434:	f3c3 030b 	ubfx	r3, r3, #0, #12
90004438:	4413      	add	r3, r2
9000443a:	041b      	lsls	r3, r3, #16
9000443c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000443e:	68fb      	ldr	r3, [r7, #12]
90004440:	681b      	ldr	r3, [r3, #0]
90004442:	461a      	mov	r2, r3
90004444:	687b      	ldr	r3, [r7, #4]
90004446:	01db      	lsls	r3, r3, #7
90004448:	4413      	add	r3, r2
9000444a:	3384      	adds	r3, #132	; 0x84
9000444c:	685b      	ldr	r3, [r3, #4]
9000444e:	68fa      	ldr	r2, [r7, #12]
90004450:	6812      	ldr	r2, [r2, #0]
90004452:	4611      	mov	r1, r2
90004454:	687a      	ldr	r2, [r7, #4]
90004456:	01d2      	lsls	r2, r2, #7
90004458:	440a      	add	r2, r1
9000445a:	3284      	adds	r2, #132	; 0x84
9000445c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
90004460:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90004462:	68bb      	ldr	r3, [r7, #8]
90004464:	681a      	ldr	r2, [r3, #0]
90004466:	68fb      	ldr	r3, [r7, #12]
90004468:	681b      	ldr	r3, [r3, #0]
9000446a:	68db      	ldr	r3, [r3, #12]
9000446c:	0c1b      	lsrs	r3, r3, #16
9000446e:	f3c3 030b 	ubfx	r3, r3, #0, #12
90004472:	4413      	add	r3, r2
90004474:	1c5a      	adds	r2, r3, #1
90004476:	68fb      	ldr	r3, [r7, #12]
90004478:	681b      	ldr	r3, [r3, #0]
9000447a:	4619      	mov	r1, r3
9000447c:	687b      	ldr	r3, [r7, #4]
9000447e:	01db      	lsls	r3, r3, #7
90004480:	440b      	add	r3, r1
90004482:	3384      	adds	r3, #132	; 0x84
90004484:	4619      	mov	r1, r3
90004486:	69fb      	ldr	r3, [r7, #28]
90004488:	4313      	orrs	r3, r2
9000448a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000448c:	68bb      	ldr	r3, [r7, #8]
9000448e:	68da      	ldr	r2, [r3, #12]
90004490:	68fb      	ldr	r3, [r7, #12]
90004492:	681b      	ldr	r3, [r3, #0]
90004494:	68db      	ldr	r3, [r3, #12]
90004496:	f3c3 030a 	ubfx	r3, r3, #0, #11
9000449a:	4413      	add	r3, r2
9000449c:	041b      	lsls	r3, r3, #16
9000449e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
900044a0:	68fb      	ldr	r3, [r7, #12]
900044a2:	681b      	ldr	r3, [r3, #0]
900044a4:	461a      	mov	r2, r3
900044a6:	687b      	ldr	r3, [r7, #4]
900044a8:	01db      	lsls	r3, r3, #7
900044aa:	4413      	add	r3, r2
900044ac:	3384      	adds	r3, #132	; 0x84
900044ae:	689b      	ldr	r3, [r3, #8]
900044b0:	68fa      	ldr	r2, [r7, #12]
900044b2:	6812      	ldr	r2, [r2, #0]
900044b4:	4611      	mov	r1, r2
900044b6:	687a      	ldr	r2, [r7, #4]
900044b8:	01d2      	lsls	r2, r2, #7
900044ba:	440a      	add	r2, r1
900044bc:	3284      	adds	r2, #132	; 0x84
900044be:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
900044c2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
900044c4:	68bb      	ldr	r3, [r7, #8]
900044c6:	689a      	ldr	r2, [r3, #8]
900044c8:	68fb      	ldr	r3, [r7, #12]
900044ca:	681b      	ldr	r3, [r3, #0]
900044cc:	68db      	ldr	r3, [r3, #12]
900044ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
900044d2:	4413      	add	r3, r2
900044d4:	1c5a      	adds	r2, r3, #1
900044d6:	68fb      	ldr	r3, [r7, #12]
900044d8:	681b      	ldr	r3, [r3, #0]
900044da:	4619      	mov	r1, r3
900044dc:	687b      	ldr	r3, [r7, #4]
900044de:	01db      	lsls	r3, r3, #7
900044e0:	440b      	add	r3, r1
900044e2:	3384      	adds	r3, #132	; 0x84
900044e4:	4619      	mov	r1, r3
900044e6:	69fb      	ldr	r3, [r7, #28]
900044e8:	4313      	orrs	r3, r2
900044ea:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
900044ec:	68fb      	ldr	r3, [r7, #12]
900044ee:	681b      	ldr	r3, [r3, #0]
900044f0:	461a      	mov	r2, r3
900044f2:	687b      	ldr	r3, [r7, #4]
900044f4:	01db      	lsls	r3, r3, #7
900044f6:	4413      	add	r3, r2
900044f8:	3384      	adds	r3, #132	; 0x84
900044fa:	691b      	ldr	r3, [r3, #16]
900044fc:	68fa      	ldr	r2, [r7, #12]
900044fe:	6812      	ldr	r2, [r2, #0]
90004500:	4611      	mov	r1, r2
90004502:	687a      	ldr	r2, [r7, #4]
90004504:	01d2      	lsls	r2, r2, #7
90004506:	440a      	add	r2, r1
90004508:	3284      	adds	r2, #132	; 0x84
9000450a:	f023 0307 	bic.w	r3, r3, #7
9000450e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
90004510:	68fb      	ldr	r3, [r7, #12]
90004512:	681b      	ldr	r3, [r3, #0]
90004514:	461a      	mov	r2, r3
90004516:	687b      	ldr	r3, [r7, #4]
90004518:	01db      	lsls	r3, r3, #7
9000451a:	4413      	add	r3, r2
9000451c:	3384      	adds	r3, #132	; 0x84
9000451e:	461a      	mov	r2, r3
90004520:	68bb      	ldr	r3, [r7, #8]
90004522:	691b      	ldr	r3, [r3, #16]
90004524:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
90004526:	68bb      	ldr	r3, [r7, #8]
90004528:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
9000452c:	021b      	lsls	r3, r3, #8
9000452e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
90004530:	68bb      	ldr	r3, [r7, #8]
90004532:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
90004536:	041b      	lsls	r3, r3, #16
90004538:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
9000453a:	68bb      	ldr	r3, [r7, #8]
9000453c:	699b      	ldr	r3, [r3, #24]
9000453e:	061b      	lsls	r3, r3, #24
90004540:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
90004542:	68fb      	ldr	r3, [r7, #12]
90004544:	681b      	ldr	r3, [r3, #0]
90004546:	461a      	mov	r2, r3
90004548:	687b      	ldr	r3, [r7, #4]
9000454a:	01db      	lsls	r3, r3, #7
9000454c:	4413      	add	r3, r2
9000454e:	3384      	adds	r3, #132	; 0x84
90004550:	699b      	ldr	r3, [r3, #24]
90004552:	68fb      	ldr	r3, [r7, #12]
90004554:	681b      	ldr	r3, [r3, #0]
90004556:	461a      	mov	r2, r3
90004558:	687b      	ldr	r3, [r7, #4]
9000455a:	01db      	lsls	r3, r3, #7
9000455c:	4413      	add	r3, r2
9000455e:	3384      	adds	r3, #132	; 0x84
90004560:	461a      	mov	r2, r3
90004562:	2300      	movs	r3, #0
90004564:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
90004566:	68bb      	ldr	r3, [r7, #8]
90004568:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9000456c:	461a      	mov	r2, r3
9000456e:	69fb      	ldr	r3, [r7, #28]
90004570:	431a      	orrs	r2, r3
90004572:	69bb      	ldr	r3, [r7, #24]
90004574:	431a      	orrs	r2, r3
90004576:	68fb      	ldr	r3, [r7, #12]
90004578:	681b      	ldr	r3, [r3, #0]
9000457a:	4619      	mov	r1, r3
9000457c:	687b      	ldr	r3, [r7, #4]
9000457e:	01db      	lsls	r3, r3, #7
90004580:	440b      	add	r3, r1
90004582:	3384      	adds	r3, #132	; 0x84
90004584:	4619      	mov	r1, r3
90004586:	697b      	ldr	r3, [r7, #20]
90004588:	4313      	orrs	r3, r2
9000458a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
9000458c:	68fb      	ldr	r3, [r7, #12]
9000458e:	681b      	ldr	r3, [r3, #0]
90004590:	461a      	mov	r2, r3
90004592:	687b      	ldr	r3, [r7, #4]
90004594:	01db      	lsls	r3, r3, #7
90004596:	4413      	add	r3, r2
90004598:	3384      	adds	r3, #132	; 0x84
9000459a:	695b      	ldr	r3, [r3, #20]
9000459c:	68fa      	ldr	r2, [r7, #12]
9000459e:	6812      	ldr	r2, [r2, #0]
900045a0:	4611      	mov	r1, r2
900045a2:	687a      	ldr	r2, [r7, #4]
900045a4:	01d2      	lsls	r2, r2, #7
900045a6:	440a      	add	r2, r1
900045a8:	3284      	adds	r2, #132	; 0x84
900045aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
900045ae:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
900045b0:	68fb      	ldr	r3, [r7, #12]
900045b2:	681b      	ldr	r3, [r3, #0]
900045b4:	461a      	mov	r2, r3
900045b6:	687b      	ldr	r3, [r7, #4]
900045b8:	01db      	lsls	r3, r3, #7
900045ba:	4413      	add	r3, r2
900045bc:	3384      	adds	r3, #132	; 0x84
900045be:	461a      	mov	r2, r3
900045c0:	68bb      	ldr	r3, [r7, #8]
900045c2:	695b      	ldr	r3, [r3, #20]
900045c4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
900045c6:	68fb      	ldr	r3, [r7, #12]
900045c8:	681b      	ldr	r3, [r3, #0]
900045ca:	461a      	mov	r2, r3
900045cc:	687b      	ldr	r3, [r7, #4]
900045ce:	01db      	lsls	r3, r3, #7
900045d0:	4413      	add	r3, r2
900045d2:	3384      	adds	r3, #132	; 0x84
900045d4:	69da      	ldr	r2, [r3, #28]
900045d6:	68fb      	ldr	r3, [r7, #12]
900045d8:	681b      	ldr	r3, [r3, #0]
900045da:	4619      	mov	r1, r3
900045dc:	687b      	ldr	r3, [r7, #4]
900045de:	01db      	lsls	r3, r3, #7
900045e0:	440b      	add	r3, r1
900045e2:	3384      	adds	r3, #132	; 0x84
900045e4:	4619      	mov	r1, r3
900045e6:	4b58      	ldr	r3, [pc, #352]	; (90004748 <LTDC_SetConfig+0x32c>)
900045e8:	4013      	ands	r3, r2
900045ea:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
900045ec:	68bb      	ldr	r3, [r7, #8]
900045ee:	69da      	ldr	r2, [r3, #28]
900045f0:	68bb      	ldr	r3, [r7, #8]
900045f2:	6a1b      	ldr	r3, [r3, #32]
900045f4:	68f9      	ldr	r1, [r7, #12]
900045f6:	6809      	ldr	r1, [r1, #0]
900045f8:	4608      	mov	r0, r1
900045fa:	6879      	ldr	r1, [r7, #4]
900045fc:	01c9      	lsls	r1, r1, #7
900045fe:	4401      	add	r1, r0
90004600:	3184      	adds	r1, #132	; 0x84
90004602:	4313      	orrs	r3, r2
90004604:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
90004606:	68fb      	ldr	r3, [r7, #12]
90004608:	681b      	ldr	r3, [r3, #0]
9000460a:	461a      	mov	r2, r3
9000460c:	687b      	ldr	r3, [r7, #4]
9000460e:	01db      	lsls	r3, r3, #7
90004610:	4413      	add	r3, r2
90004612:	3384      	adds	r3, #132	; 0x84
90004614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90004616:	68fb      	ldr	r3, [r7, #12]
90004618:	681b      	ldr	r3, [r3, #0]
9000461a:	461a      	mov	r2, r3
9000461c:	687b      	ldr	r3, [r7, #4]
9000461e:	01db      	lsls	r3, r3, #7
90004620:	4413      	add	r3, r2
90004622:	3384      	adds	r3, #132	; 0x84
90004624:	461a      	mov	r2, r3
90004626:	2300      	movs	r3, #0
90004628:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
9000462a:	68fb      	ldr	r3, [r7, #12]
9000462c:	681b      	ldr	r3, [r3, #0]
9000462e:	461a      	mov	r2, r3
90004630:	687b      	ldr	r3, [r7, #4]
90004632:	01db      	lsls	r3, r3, #7
90004634:	4413      	add	r3, r2
90004636:	3384      	adds	r3, #132	; 0x84
90004638:	461a      	mov	r2, r3
9000463a:	68bb      	ldr	r3, [r7, #8]
9000463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000463e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90004640:	68bb      	ldr	r3, [r7, #8]
90004642:	691b      	ldr	r3, [r3, #16]
90004644:	2b00      	cmp	r3, #0
90004646:	d102      	bne.n	9000464e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
90004648:	2304      	movs	r3, #4
9000464a:	61fb      	str	r3, [r7, #28]
9000464c:	e01b      	b.n	90004686 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
9000464e:	68bb      	ldr	r3, [r7, #8]
90004650:	691b      	ldr	r3, [r3, #16]
90004652:	2b01      	cmp	r3, #1
90004654:	d102      	bne.n	9000465c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
90004656:	2303      	movs	r3, #3
90004658:	61fb      	str	r3, [r7, #28]
9000465a:	e014      	b.n	90004686 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
9000465c:	68bb      	ldr	r3, [r7, #8]
9000465e:	691b      	ldr	r3, [r3, #16]
90004660:	2b04      	cmp	r3, #4
90004662:	d00b      	beq.n	9000467c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
90004664:	68bb      	ldr	r3, [r7, #8]
90004666:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90004668:	2b02      	cmp	r3, #2
9000466a:	d007      	beq.n	9000467c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
9000466c:	68bb      	ldr	r3, [r7, #8]
9000466e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
90004670:	2b03      	cmp	r3, #3
90004672:	d003      	beq.n	9000467c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
90004674:	68bb      	ldr	r3, [r7, #8]
90004676:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90004678:	2b07      	cmp	r3, #7
9000467a:	d102      	bne.n	90004682 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
9000467c:	2302      	movs	r3, #2
9000467e:	61fb      	str	r3, [r7, #28]
90004680:	e001      	b.n	90004686 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
90004682:	2301      	movs	r3, #1
90004684:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
90004686:	68fb      	ldr	r3, [r7, #12]
90004688:	681b      	ldr	r3, [r3, #0]
9000468a:	461a      	mov	r2, r3
9000468c:	687b      	ldr	r3, [r7, #4]
9000468e:	01db      	lsls	r3, r3, #7
90004690:	4413      	add	r3, r2
90004692:	3384      	adds	r3, #132	; 0x84
90004694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90004696:	68fa      	ldr	r2, [r7, #12]
90004698:	6812      	ldr	r2, [r2, #0]
9000469a:	4611      	mov	r1, r2
9000469c:	687a      	ldr	r2, [r7, #4]
9000469e:	01d2      	lsls	r2, r2, #7
900046a0:	440a      	add	r2, r1
900046a2:	3284      	adds	r2, #132	; 0x84
900046a4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
900046a8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
900046aa:	68bb      	ldr	r3, [r7, #8]
900046ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900046ae:	69fa      	ldr	r2, [r7, #28]
900046b0:	fb02 f303 	mul.w	r3, r2, r3
900046b4:	041a      	lsls	r2, r3, #16
900046b6:	68bb      	ldr	r3, [r7, #8]
900046b8:	6859      	ldr	r1, [r3, #4]
900046ba:	68bb      	ldr	r3, [r7, #8]
900046bc:	681b      	ldr	r3, [r3, #0]
900046be:	1acb      	subs	r3, r1, r3
900046c0:	69f9      	ldr	r1, [r7, #28]
900046c2:	fb01 f303 	mul.w	r3, r1, r3
900046c6:	3303      	adds	r3, #3
900046c8:	68f9      	ldr	r1, [r7, #12]
900046ca:	6809      	ldr	r1, [r1, #0]
900046cc:	4608      	mov	r0, r1
900046ce:	6879      	ldr	r1, [r7, #4]
900046d0:	01c9      	lsls	r1, r1, #7
900046d2:	4401      	add	r1, r0
900046d4:	3184      	adds	r1, #132	; 0x84
900046d6:	4313      	orrs	r3, r2
900046d8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
900046da:	68fb      	ldr	r3, [r7, #12]
900046dc:	681b      	ldr	r3, [r3, #0]
900046de:	461a      	mov	r2, r3
900046e0:	687b      	ldr	r3, [r7, #4]
900046e2:	01db      	lsls	r3, r3, #7
900046e4:	4413      	add	r3, r2
900046e6:	3384      	adds	r3, #132	; 0x84
900046e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900046ea:	68fb      	ldr	r3, [r7, #12]
900046ec:	681b      	ldr	r3, [r3, #0]
900046ee:	4619      	mov	r1, r3
900046f0:	687b      	ldr	r3, [r7, #4]
900046f2:	01db      	lsls	r3, r3, #7
900046f4:	440b      	add	r3, r1
900046f6:	3384      	adds	r3, #132	; 0x84
900046f8:	4619      	mov	r1, r3
900046fa:	4b14      	ldr	r3, [pc, #80]	; (9000474c <LTDC_SetConfig+0x330>)
900046fc:	4013      	ands	r3, r2
900046fe:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90004700:	68fb      	ldr	r3, [r7, #12]
90004702:	681b      	ldr	r3, [r3, #0]
90004704:	461a      	mov	r2, r3
90004706:	687b      	ldr	r3, [r7, #4]
90004708:	01db      	lsls	r3, r3, #7
9000470a:	4413      	add	r3, r2
9000470c:	3384      	adds	r3, #132	; 0x84
9000470e:	461a      	mov	r2, r3
90004710:	68bb      	ldr	r3, [r7, #8]
90004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90004714:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
90004716:	68fb      	ldr	r3, [r7, #12]
90004718:	681b      	ldr	r3, [r3, #0]
9000471a:	461a      	mov	r2, r3
9000471c:	687b      	ldr	r3, [r7, #4]
9000471e:	01db      	lsls	r3, r3, #7
90004720:	4413      	add	r3, r2
90004722:	3384      	adds	r3, #132	; 0x84
90004724:	681b      	ldr	r3, [r3, #0]
90004726:	68fa      	ldr	r2, [r7, #12]
90004728:	6812      	ldr	r2, [r2, #0]
9000472a:	4611      	mov	r1, r2
9000472c:	687a      	ldr	r2, [r7, #4]
9000472e:	01d2      	lsls	r2, r2, #7
90004730:	440a      	add	r2, r1
90004732:	3284      	adds	r2, #132	; 0x84
90004734:	f043 0301 	orr.w	r3, r3, #1
90004738:	6013      	str	r3, [r2, #0]
}
9000473a:	bf00      	nop
9000473c:	3724      	adds	r7, #36	; 0x24
9000473e:	46bd      	mov	sp, r7
90004740:	f85d 7b04 	ldr.w	r7, [sp], #4
90004744:	4770      	bx	lr
90004746:	bf00      	nop
90004748:	fffff8f8 	.word	0xfffff8f8
9000474c:	fffff800 	.word	0xfffff800

90004750 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
90004750:	b580      	push	{r7, lr}
90004752:	b082      	sub	sp, #8
90004754:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
90004756:	2300      	movs	r3, #0
90004758:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
9000475a:	4b23      	ldr	r3, [pc, #140]	; (900047e8 <HAL_PWREx_EnableOverDrive+0x98>)
9000475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000475e:	4a22      	ldr	r2, [pc, #136]	; (900047e8 <HAL_PWREx_EnableOverDrive+0x98>)
90004760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90004764:	6413      	str	r3, [r2, #64]	; 0x40
90004766:	4b20      	ldr	r3, [pc, #128]	; (900047e8 <HAL_PWREx_EnableOverDrive+0x98>)
90004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000476a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
9000476e:	603b      	str	r3, [r7, #0]
90004770:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
90004772:	4b1e      	ldr	r3, [pc, #120]	; (900047ec <HAL_PWREx_EnableOverDrive+0x9c>)
90004774:	681b      	ldr	r3, [r3, #0]
90004776:	4a1d      	ldr	r2, [pc, #116]	; (900047ec <HAL_PWREx_EnableOverDrive+0x9c>)
90004778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000477c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
9000477e:	f7fe f89f 	bl	900028c0 <HAL_GetTick>
90004782:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
90004784:	e009      	b.n	9000479a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
90004786:	f7fe f89b 	bl	900028c0 <HAL_GetTick>
9000478a:	4602      	mov	r2, r0
9000478c:	687b      	ldr	r3, [r7, #4]
9000478e:	1ad3      	subs	r3, r2, r3
90004790:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
90004794:	d901      	bls.n	9000479a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
90004796:	2303      	movs	r3, #3
90004798:	e022      	b.n	900047e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
9000479a:	4b14      	ldr	r3, [pc, #80]	; (900047ec <HAL_PWREx_EnableOverDrive+0x9c>)
9000479c:	685b      	ldr	r3, [r3, #4]
9000479e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
900047a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
900047a6:	d1ee      	bne.n	90004786 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
900047a8:	4b10      	ldr	r3, [pc, #64]	; (900047ec <HAL_PWREx_EnableOverDrive+0x9c>)
900047aa:	681b      	ldr	r3, [r3, #0]
900047ac:	4a0f      	ldr	r2, [pc, #60]	; (900047ec <HAL_PWREx_EnableOverDrive+0x9c>)
900047ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900047b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
900047b4:	f7fe f884 	bl	900028c0 <HAL_GetTick>
900047b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
900047ba:	e009      	b.n	900047d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
900047bc:	f7fe f880 	bl	900028c0 <HAL_GetTick>
900047c0:	4602      	mov	r2, r0
900047c2:	687b      	ldr	r3, [r7, #4]
900047c4:	1ad3      	subs	r3, r2, r3
900047c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
900047ca:	d901      	bls.n	900047d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
900047cc:	2303      	movs	r3, #3
900047ce:	e007      	b.n	900047e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
900047d0:	4b06      	ldr	r3, [pc, #24]	; (900047ec <HAL_PWREx_EnableOverDrive+0x9c>)
900047d2:	685b      	ldr	r3, [r3, #4]
900047d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900047d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
900047dc:	d1ee      	bne.n	900047bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
900047de:	2300      	movs	r3, #0
}
900047e0:	4618      	mov	r0, r3
900047e2:	3708      	adds	r7, #8
900047e4:	46bd      	mov	sp, r7
900047e6:	bd80      	pop	{r7, pc}
900047e8:	40023800 	.word	0x40023800
900047ec:	40007000 	.word	0x40007000

900047f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
900047f0:	b580      	push	{r7, lr}
900047f2:	b086      	sub	sp, #24
900047f4:	af00      	add	r7, sp, #0
900047f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
900047f8:	2300      	movs	r3, #0
900047fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
900047fc:	687b      	ldr	r3, [r7, #4]
900047fe:	2b00      	cmp	r3, #0
90004800:	d101      	bne.n	90004806 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
90004802:	2301      	movs	r3, #1
90004804:	e291      	b.n	90004d2a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
90004806:	687b      	ldr	r3, [r7, #4]
90004808:	681b      	ldr	r3, [r3, #0]
9000480a:	f003 0301 	and.w	r3, r3, #1
9000480e:	2b00      	cmp	r3, #0
90004810:	f000 8087 	beq.w	90004922 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
90004814:	4b96      	ldr	r3, [pc, #600]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
90004816:	689b      	ldr	r3, [r3, #8]
90004818:	f003 030c 	and.w	r3, r3, #12
9000481c:	2b04      	cmp	r3, #4
9000481e:	d00c      	beq.n	9000483a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
90004820:	4b93      	ldr	r3, [pc, #588]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
90004822:	689b      	ldr	r3, [r3, #8]
90004824:	f003 030c 	and.w	r3, r3, #12
90004828:	2b08      	cmp	r3, #8
9000482a:	d112      	bne.n	90004852 <HAL_RCC_OscConfig+0x62>
9000482c:	4b90      	ldr	r3, [pc, #576]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
9000482e:	685b      	ldr	r3, [r3, #4]
90004830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90004834:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90004838:	d10b      	bne.n	90004852 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
9000483a:	4b8d      	ldr	r3, [pc, #564]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
9000483c:	681b      	ldr	r3, [r3, #0]
9000483e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90004842:	2b00      	cmp	r3, #0
90004844:	d06c      	beq.n	90004920 <HAL_RCC_OscConfig+0x130>
90004846:	687b      	ldr	r3, [r7, #4]
90004848:	685b      	ldr	r3, [r3, #4]
9000484a:	2b00      	cmp	r3, #0
9000484c:	d168      	bne.n	90004920 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
9000484e:	2301      	movs	r3, #1
90004850:	e26b      	b.n	90004d2a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90004852:	687b      	ldr	r3, [r7, #4]
90004854:	685b      	ldr	r3, [r3, #4]
90004856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000485a:	d106      	bne.n	9000486a <HAL_RCC_OscConfig+0x7a>
9000485c:	4b84      	ldr	r3, [pc, #528]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
9000485e:	681b      	ldr	r3, [r3, #0]
90004860:	4a83      	ldr	r2, [pc, #524]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
90004862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90004866:	6013      	str	r3, [r2, #0]
90004868:	e02e      	b.n	900048c8 <HAL_RCC_OscConfig+0xd8>
9000486a:	687b      	ldr	r3, [r7, #4]
9000486c:	685b      	ldr	r3, [r3, #4]
9000486e:	2b00      	cmp	r3, #0
90004870:	d10c      	bne.n	9000488c <HAL_RCC_OscConfig+0x9c>
90004872:	4b7f      	ldr	r3, [pc, #508]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
90004874:	681b      	ldr	r3, [r3, #0]
90004876:	4a7e      	ldr	r2, [pc, #504]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
90004878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
9000487c:	6013      	str	r3, [r2, #0]
9000487e:	4b7c      	ldr	r3, [pc, #496]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
90004880:	681b      	ldr	r3, [r3, #0]
90004882:	4a7b      	ldr	r2, [pc, #492]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
90004884:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90004888:	6013      	str	r3, [r2, #0]
9000488a:	e01d      	b.n	900048c8 <HAL_RCC_OscConfig+0xd8>
9000488c:	687b      	ldr	r3, [r7, #4]
9000488e:	685b      	ldr	r3, [r3, #4]
90004890:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
90004894:	d10c      	bne.n	900048b0 <HAL_RCC_OscConfig+0xc0>
90004896:	4b76      	ldr	r3, [pc, #472]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
90004898:	681b      	ldr	r3, [r3, #0]
9000489a:	4a75      	ldr	r2, [pc, #468]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
9000489c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
900048a0:	6013      	str	r3, [r2, #0]
900048a2:	4b73      	ldr	r3, [pc, #460]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
900048a4:	681b      	ldr	r3, [r3, #0]
900048a6:	4a72      	ldr	r2, [pc, #456]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
900048a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900048ac:	6013      	str	r3, [r2, #0]
900048ae:	e00b      	b.n	900048c8 <HAL_RCC_OscConfig+0xd8>
900048b0:	4b6f      	ldr	r3, [pc, #444]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
900048b2:	681b      	ldr	r3, [r3, #0]
900048b4:	4a6e      	ldr	r2, [pc, #440]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
900048b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
900048ba:	6013      	str	r3, [r2, #0]
900048bc:	4b6c      	ldr	r3, [pc, #432]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
900048be:	681b      	ldr	r3, [r3, #0]
900048c0:	4a6b      	ldr	r2, [pc, #428]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
900048c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
900048c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
900048c8:	687b      	ldr	r3, [r7, #4]
900048ca:	685b      	ldr	r3, [r3, #4]
900048cc:	2b00      	cmp	r3, #0
900048ce:	d013      	beq.n	900048f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900048d0:	f7fd fff6 	bl	900028c0 <HAL_GetTick>
900048d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
900048d6:	e008      	b.n	900048ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
900048d8:	f7fd fff2 	bl	900028c0 <HAL_GetTick>
900048dc:	4602      	mov	r2, r0
900048de:	693b      	ldr	r3, [r7, #16]
900048e0:	1ad3      	subs	r3, r2, r3
900048e2:	2b64      	cmp	r3, #100	; 0x64
900048e4:	d901      	bls.n	900048ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
900048e6:	2303      	movs	r3, #3
900048e8:	e21f      	b.n	90004d2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
900048ea:	4b61      	ldr	r3, [pc, #388]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
900048ec:	681b      	ldr	r3, [r3, #0]
900048ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900048f2:	2b00      	cmp	r3, #0
900048f4:	d0f0      	beq.n	900048d8 <HAL_RCC_OscConfig+0xe8>
900048f6:	e014      	b.n	90004922 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900048f8:	f7fd ffe2 	bl	900028c0 <HAL_GetTick>
900048fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
900048fe:	e008      	b.n	90004912 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90004900:	f7fd ffde 	bl	900028c0 <HAL_GetTick>
90004904:	4602      	mov	r2, r0
90004906:	693b      	ldr	r3, [r7, #16]
90004908:	1ad3      	subs	r3, r2, r3
9000490a:	2b64      	cmp	r3, #100	; 0x64
9000490c:	d901      	bls.n	90004912 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
9000490e:	2303      	movs	r3, #3
90004910:	e20b      	b.n	90004d2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
90004912:	4b57      	ldr	r3, [pc, #348]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
90004914:	681b      	ldr	r3, [r3, #0]
90004916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
9000491a:	2b00      	cmp	r3, #0
9000491c:	d1f0      	bne.n	90004900 <HAL_RCC_OscConfig+0x110>
9000491e:	e000      	b.n	90004922 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90004920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
90004922:	687b      	ldr	r3, [r7, #4]
90004924:	681b      	ldr	r3, [r3, #0]
90004926:	f003 0302 	and.w	r3, r3, #2
9000492a:	2b00      	cmp	r3, #0
9000492c:	d069      	beq.n	90004a02 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
9000492e:	4b50      	ldr	r3, [pc, #320]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
90004930:	689b      	ldr	r3, [r3, #8]
90004932:	f003 030c 	and.w	r3, r3, #12
90004936:	2b00      	cmp	r3, #0
90004938:	d00b      	beq.n	90004952 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
9000493a:	4b4d      	ldr	r3, [pc, #308]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
9000493c:	689b      	ldr	r3, [r3, #8]
9000493e:	f003 030c 	and.w	r3, r3, #12
90004942:	2b08      	cmp	r3, #8
90004944:	d11c      	bne.n	90004980 <HAL_RCC_OscConfig+0x190>
90004946:	4b4a      	ldr	r3, [pc, #296]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
90004948:	685b      	ldr	r3, [r3, #4]
9000494a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
9000494e:	2b00      	cmp	r3, #0
90004950:	d116      	bne.n	90004980 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
90004952:	4b47      	ldr	r3, [pc, #284]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
90004954:	681b      	ldr	r3, [r3, #0]
90004956:	f003 0302 	and.w	r3, r3, #2
9000495a:	2b00      	cmp	r3, #0
9000495c:	d005      	beq.n	9000496a <HAL_RCC_OscConfig+0x17a>
9000495e:	687b      	ldr	r3, [r7, #4]
90004960:	68db      	ldr	r3, [r3, #12]
90004962:	2b01      	cmp	r3, #1
90004964:	d001      	beq.n	9000496a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
90004966:	2301      	movs	r3, #1
90004968:	e1df      	b.n	90004d2a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000496a:	4b41      	ldr	r3, [pc, #260]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
9000496c:	681b      	ldr	r3, [r3, #0]
9000496e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
90004972:	687b      	ldr	r3, [r7, #4]
90004974:	691b      	ldr	r3, [r3, #16]
90004976:	00db      	lsls	r3, r3, #3
90004978:	493d      	ldr	r1, [pc, #244]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
9000497a:	4313      	orrs	r3, r2
9000497c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
9000497e:	e040      	b.n	90004a02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
90004980:	687b      	ldr	r3, [r7, #4]
90004982:	68db      	ldr	r3, [r3, #12]
90004984:	2b00      	cmp	r3, #0
90004986:	d023      	beq.n	900049d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
90004988:	4b39      	ldr	r3, [pc, #228]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
9000498a:	681b      	ldr	r3, [r3, #0]
9000498c:	4a38      	ldr	r2, [pc, #224]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
9000498e:	f043 0301 	orr.w	r3, r3, #1
90004992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90004994:	f7fd ff94 	bl	900028c0 <HAL_GetTick>
90004998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
9000499a:	e008      	b.n	900049ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000499c:	f7fd ff90 	bl	900028c0 <HAL_GetTick>
900049a0:	4602      	mov	r2, r0
900049a2:	693b      	ldr	r3, [r7, #16]
900049a4:	1ad3      	subs	r3, r2, r3
900049a6:	2b02      	cmp	r3, #2
900049a8:	d901      	bls.n	900049ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
900049aa:	2303      	movs	r3, #3
900049ac:	e1bd      	b.n	90004d2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
900049ae:	4b30      	ldr	r3, [pc, #192]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
900049b0:	681b      	ldr	r3, [r3, #0]
900049b2:	f003 0302 	and.w	r3, r3, #2
900049b6:	2b00      	cmp	r3, #0
900049b8:	d0f0      	beq.n	9000499c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
900049ba:	4b2d      	ldr	r3, [pc, #180]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
900049bc:	681b      	ldr	r3, [r3, #0]
900049be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
900049c2:	687b      	ldr	r3, [r7, #4]
900049c4:	691b      	ldr	r3, [r3, #16]
900049c6:	00db      	lsls	r3, r3, #3
900049c8:	4929      	ldr	r1, [pc, #164]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
900049ca:	4313      	orrs	r3, r2
900049cc:	600b      	str	r3, [r1, #0]
900049ce:	e018      	b.n	90004a02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
900049d0:	4b27      	ldr	r3, [pc, #156]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
900049d2:	681b      	ldr	r3, [r3, #0]
900049d4:	4a26      	ldr	r2, [pc, #152]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
900049d6:	f023 0301 	bic.w	r3, r3, #1
900049da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900049dc:	f7fd ff70 	bl	900028c0 <HAL_GetTick>
900049e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
900049e2:	e008      	b.n	900049f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
900049e4:	f7fd ff6c 	bl	900028c0 <HAL_GetTick>
900049e8:	4602      	mov	r2, r0
900049ea:	693b      	ldr	r3, [r7, #16]
900049ec:	1ad3      	subs	r3, r2, r3
900049ee:	2b02      	cmp	r3, #2
900049f0:	d901      	bls.n	900049f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
900049f2:	2303      	movs	r3, #3
900049f4:	e199      	b.n	90004d2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
900049f6:	4b1e      	ldr	r3, [pc, #120]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
900049f8:	681b      	ldr	r3, [r3, #0]
900049fa:	f003 0302 	and.w	r3, r3, #2
900049fe:	2b00      	cmp	r3, #0
90004a00:	d1f0      	bne.n	900049e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
90004a02:	687b      	ldr	r3, [r7, #4]
90004a04:	681b      	ldr	r3, [r3, #0]
90004a06:	f003 0308 	and.w	r3, r3, #8
90004a0a:	2b00      	cmp	r3, #0
90004a0c:	d038      	beq.n	90004a80 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
90004a0e:	687b      	ldr	r3, [r7, #4]
90004a10:	695b      	ldr	r3, [r3, #20]
90004a12:	2b00      	cmp	r3, #0
90004a14:	d019      	beq.n	90004a4a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
90004a16:	4b16      	ldr	r3, [pc, #88]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
90004a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90004a1a:	4a15      	ldr	r2, [pc, #84]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
90004a1c:	f043 0301 	orr.w	r3, r3, #1
90004a20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90004a22:	f7fd ff4d 	bl	900028c0 <HAL_GetTick>
90004a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
90004a28:	e008      	b.n	90004a3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90004a2a:	f7fd ff49 	bl	900028c0 <HAL_GetTick>
90004a2e:	4602      	mov	r2, r0
90004a30:	693b      	ldr	r3, [r7, #16]
90004a32:	1ad3      	subs	r3, r2, r3
90004a34:	2b02      	cmp	r3, #2
90004a36:	d901      	bls.n	90004a3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
90004a38:	2303      	movs	r3, #3
90004a3a:	e176      	b.n	90004d2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
90004a3c:	4b0c      	ldr	r3, [pc, #48]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
90004a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90004a40:	f003 0302 	and.w	r3, r3, #2
90004a44:	2b00      	cmp	r3, #0
90004a46:	d0f0      	beq.n	90004a2a <HAL_RCC_OscConfig+0x23a>
90004a48:	e01a      	b.n	90004a80 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
90004a4a:	4b09      	ldr	r3, [pc, #36]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
90004a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90004a4e:	4a08      	ldr	r2, [pc, #32]	; (90004a70 <HAL_RCC_OscConfig+0x280>)
90004a50:	f023 0301 	bic.w	r3, r3, #1
90004a54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90004a56:	f7fd ff33 	bl	900028c0 <HAL_GetTick>
90004a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
90004a5c:	e00a      	b.n	90004a74 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90004a5e:	f7fd ff2f 	bl	900028c0 <HAL_GetTick>
90004a62:	4602      	mov	r2, r0
90004a64:	693b      	ldr	r3, [r7, #16]
90004a66:	1ad3      	subs	r3, r2, r3
90004a68:	2b02      	cmp	r3, #2
90004a6a:	d903      	bls.n	90004a74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
90004a6c:	2303      	movs	r3, #3
90004a6e:	e15c      	b.n	90004d2a <HAL_RCC_OscConfig+0x53a>
90004a70:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
90004a74:	4b91      	ldr	r3, [pc, #580]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90004a78:	f003 0302 	and.w	r3, r3, #2
90004a7c:	2b00      	cmp	r3, #0
90004a7e:	d1ee      	bne.n	90004a5e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
90004a80:	687b      	ldr	r3, [r7, #4]
90004a82:	681b      	ldr	r3, [r3, #0]
90004a84:	f003 0304 	and.w	r3, r3, #4
90004a88:	2b00      	cmp	r3, #0
90004a8a:	f000 80a4 	beq.w	90004bd6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
90004a8e:	4b8b      	ldr	r3, [pc, #556]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90004a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90004a96:	2b00      	cmp	r3, #0
90004a98:	d10d      	bne.n	90004ab6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
90004a9a:	4b88      	ldr	r3, [pc, #544]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90004a9e:	4a87      	ldr	r2, [pc, #540]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90004aa4:	6413      	str	r3, [r2, #64]	; 0x40
90004aa6:	4b85      	ldr	r3, [pc, #532]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90004aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90004aae:	60bb      	str	r3, [r7, #8]
90004ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
90004ab2:	2301      	movs	r3, #1
90004ab4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
90004ab6:	4b82      	ldr	r3, [pc, #520]	; (90004cc0 <HAL_RCC_OscConfig+0x4d0>)
90004ab8:	681b      	ldr	r3, [r3, #0]
90004aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
90004abe:	2b00      	cmp	r3, #0
90004ac0:	d118      	bne.n	90004af4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
90004ac2:	4b7f      	ldr	r3, [pc, #508]	; (90004cc0 <HAL_RCC_OscConfig+0x4d0>)
90004ac4:	681b      	ldr	r3, [r3, #0]
90004ac6:	4a7e      	ldr	r2, [pc, #504]	; (90004cc0 <HAL_RCC_OscConfig+0x4d0>)
90004ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90004acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
90004ace:	f7fd fef7 	bl	900028c0 <HAL_GetTick>
90004ad2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
90004ad4:	e008      	b.n	90004ae8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90004ad6:	f7fd fef3 	bl	900028c0 <HAL_GetTick>
90004ada:	4602      	mov	r2, r0
90004adc:	693b      	ldr	r3, [r7, #16]
90004ade:	1ad3      	subs	r3, r2, r3
90004ae0:	2b64      	cmp	r3, #100	; 0x64
90004ae2:	d901      	bls.n	90004ae8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
90004ae4:	2303      	movs	r3, #3
90004ae6:	e120      	b.n	90004d2a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
90004ae8:	4b75      	ldr	r3, [pc, #468]	; (90004cc0 <HAL_RCC_OscConfig+0x4d0>)
90004aea:	681b      	ldr	r3, [r3, #0]
90004aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
90004af0:	2b00      	cmp	r3, #0
90004af2:	d0f0      	beq.n	90004ad6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90004af4:	687b      	ldr	r3, [r7, #4]
90004af6:	689b      	ldr	r3, [r3, #8]
90004af8:	2b01      	cmp	r3, #1
90004afa:	d106      	bne.n	90004b0a <HAL_RCC_OscConfig+0x31a>
90004afc:	4b6f      	ldr	r3, [pc, #444]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90004b00:	4a6e      	ldr	r2, [pc, #440]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004b02:	f043 0301 	orr.w	r3, r3, #1
90004b06:	6713      	str	r3, [r2, #112]	; 0x70
90004b08:	e02d      	b.n	90004b66 <HAL_RCC_OscConfig+0x376>
90004b0a:	687b      	ldr	r3, [r7, #4]
90004b0c:	689b      	ldr	r3, [r3, #8]
90004b0e:	2b00      	cmp	r3, #0
90004b10:	d10c      	bne.n	90004b2c <HAL_RCC_OscConfig+0x33c>
90004b12:	4b6a      	ldr	r3, [pc, #424]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90004b16:	4a69      	ldr	r2, [pc, #420]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004b18:	f023 0301 	bic.w	r3, r3, #1
90004b1c:	6713      	str	r3, [r2, #112]	; 0x70
90004b1e:	4b67      	ldr	r3, [pc, #412]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90004b22:	4a66      	ldr	r2, [pc, #408]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004b24:	f023 0304 	bic.w	r3, r3, #4
90004b28:	6713      	str	r3, [r2, #112]	; 0x70
90004b2a:	e01c      	b.n	90004b66 <HAL_RCC_OscConfig+0x376>
90004b2c:	687b      	ldr	r3, [r7, #4]
90004b2e:	689b      	ldr	r3, [r3, #8]
90004b30:	2b05      	cmp	r3, #5
90004b32:	d10c      	bne.n	90004b4e <HAL_RCC_OscConfig+0x35e>
90004b34:	4b61      	ldr	r3, [pc, #388]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90004b38:	4a60      	ldr	r2, [pc, #384]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004b3a:	f043 0304 	orr.w	r3, r3, #4
90004b3e:	6713      	str	r3, [r2, #112]	; 0x70
90004b40:	4b5e      	ldr	r3, [pc, #376]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90004b44:	4a5d      	ldr	r2, [pc, #372]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004b46:	f043 0301 	orr.w	r3, r3, #1
90004b4a:	6713      	str	r3, [r2, #112]	; 0x70
90004b4c:	e00b      	b.n	90004b66 <HAL_RCC_OscConfig+0x376>
90004b4e:	4b5b      	ldr	r3, [pc, #364]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90004b52:	4a5a      	ldr	r2, [pc, #360]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004b54:	f023 0301 	bic.w	r3, r3, #1
90004b58:	6713      	str	r3, [r2, #112]	; 0x70
90004b5a:	4b58      	ldr	r3, [pc, #352]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90004b5e:	4a57      	ldr	r2, [pc, #348]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004b60:	f023 0304 	bic.w	r3, r3, #4
90004b64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
90004b66:	687b      	ldr	r3, [r7, #4]
90004b68:	689b      	ldr	r3, [r3, #8]
90004b6a:	2b00      	cmp	r3, #0
90004b6c:	d015      	beq.n	90004b9a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90004b6e:	f7fd fea7 	bl	900028c0 <HAL_GetTick>
90004b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90004b74:	e00a      	b.n	90004b8c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90004b76:	f7fd fea3 	bl	900028c0 <HAL_GetTick>
90004b7a:	4602      	mov	r2, r0
90004b7c:	693b      	ldr	r3, [r7, #16]
90004b7e:	1ad3      	subs	r3, r2, r3
90004b80:	f241 3288 	movw	r2, #5000	; 0x1388
90004b84:	4293      	cmp	r3, r2
90004b86:	d901      	bls.n	90004b8c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
90004b88:	2303      	movs	r3, #3
90004b8a:	e0ce      	b.n	90004d2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90004b8c:	4b4b      	ldr	r3, [pc, #300]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90004b90:	f003 0302 	and.w	r3, r3, #2
90004b94:	2b00      	cmp	r3, #0
90004b96:	d0ee      	beq.n	90004b76 <HAL_RCC_OscConfig+0x386>
90004b98:	e014      	b.n	90004bc4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90004b9a:	f7fd fe91 	bl	900028c0 <HAL_GetTick>
90004b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
90004ba0:	e00a      	b.n	90004bb8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90004ba2:	f7fd fe8d 	bl	900028c0 <HAL_GetTick>
90004ba6:	4602      	mov	r2, r0
90004ba8:	693b      	ldr	r3, [r7, #16]
90004baa:	1ad3      	subs	r3, r2, r3
90004bac:	f241 3288 	movw	r2, #5000	; 0x1388
90004bb0:	4293      	cmp	r3, r2
90004bb2:	d901      	bls.n	90004bb8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
90004bb4:	2303      	movs	r3, #3
90004bb6:	e0b8      	b.n	90004d2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
90004bb8:	4b40      	ldr	r3, [pc, #256]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90004bbc:	f003 0302 	and.w	r3, r3, #2
90004bc0:	2b00      	cmp	r3, #0
90004bc2:	d1ee      	bne.n	90004ba2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
90004bc4:	7dfb      	ldrb	r3, [r7, #23]
90004bc6:	2b01      	cmp	r3, #1
90004bc8:	d105      	bne.n	90004bd6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
90004bca:	4b3c      	ldr	r3, [pc, #240]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90004bce:	4a3b      	ldr	r2, [pc, #236]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
90004bd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
90004bd6:	687b      	ldr	r3, [r7, #4]
90004bd8:	699b      	ldr	r3, [r3, #24]
90004bda:	2b00      	cmp	r3, #0
90004bdc:	f000 80a4 	beq.w	90004d28 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
90004be0:	4b36      	ldr	r3, [pc, #216]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004be2:	689b      	ldr	r3, [r3, #8]
90004be4:	f003 030c 	and.w	r3, r3, #12
90004be8:	2b08      	cmp	r3, #8
90004bea:	d06b      	beq.n	90004cc4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90004bec:	687b      	ldr	r3, [r7, #4]
90004bee:	699b      	ldr	r3, [r3, #24]
90004bf0:	2b02      	cmp	r3, #2
90004bf2:	d149      	bne.n	90004c88 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90004bf4:	4b31      	ldr	r3, [pc, #196]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004bf6:	681b      	ldr	r3, [r3, #0]
90004bf8:	4a30      	ldr	r2, [pc, #192]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004bfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90004bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90004c00:	f7fd fe5e 	bl	900028c0 <HAL_GetTick>
90004c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90004c06:	e008      	b.n	90004c1a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90004c08:	f7fd fe5a 	bl	900028c0 <HAL_GetTick>
90004c0c:	4602      	mov	r2, r0
90004c0e:	693b      	ldr	r3, [r7, #16]
90004c10:	1ad3      	subs	r3, r2, r3
90004c12:	2b02      	cmp	r3, #2
90004c14:	d901      	bls.n	90004c1a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
90004c16:	2303      	movs	r3, #3
90004c18:	e087      	b.n	90004d2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90004c1a:	4b28      	ldr	r3, [pc, #160]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004c1c:	681b      	ldr	r3, [r3, #0]
90004c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90004c22:	2b00      	cmp	r3, #0
90004c24:	d1f0      	bne.n	90004c08 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
90004c26:	687b      	ldr	r3, [r7, #4]
90004c28:	69da      	ldr	r2, [r3, #28]
90004c2a:	687b      	ldr	r3, [r7, #4]
90004c2c:	6a1b      	ldr	r3, [r3, #32]
90004c2e:	431a      	orrs	r2, r3
90004c30:	687b      	ldr	r3, [r7, #4]
90004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004c34:	019b      	lsls	r3, r3, #6
90004c36:	431a      	orrs	r2, r3
90004c38:	687b      	ldr	r3, [r7, #4]
90004c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90004c3c:	085b      	lsrs	r3, r3, #1
90004c3e:	3b01      	subs	r3, #1
90004c40:	041b      	lsls	r3, r3, #16
90004c42:	431a      	orrs	r2, r3
90004c44:	687b      	ldr	r3, [r7, #4]
90004c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90004c48:	061b      	lsls	r3, r3, #24
90004c4a:	4313      	orrs	r3, r2
90004c4c:	4a1b      	ldr	r2, [pc, #108]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004c4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
90004c52:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
90004c54:	4b19      	ldr	r3, [pc, #100]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004c56:	681b      	ldr	r3, [r3, #0]
90004c58:	4a18      	ldr	r2, [pc, #96]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004c5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
90004c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90004c60:	f7fd fe2e 	bl	900028c0 <HAL_GetTick>
90004c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90004c66:	e008      	b.n	90004c7a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90004c68:	f7fd fe2a 	bl	900028c0 <HAL_GetTick>
90004c6c:	4602      	mov	r2, r0
90004c6e:	693b      	ldr	r3, [r7, #16]
90004c70:	1ad3      	subs	r3, r2, r3
90004c72:	2b02      	cmp	r3, #2
90004c74:	d901      	bls.n	90004c7a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
90004c76:	2303      	movs	r3, #3
90004c78:	e057      	b.n	90004d2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90004c7a:	4b10      	ldr	r3, [pc, #64]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004c7c:	681b      	ldr	r3, [r3, #0]
90004c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90004c82:	2b00      	cmp	r3, #0
90004c84:	d0f0      	beq.n	90004c68 <HAL_RCC_OscConfig+0x478>
90004c86:	e04f      	b.n	90004d28 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90004c88:	4b0c      	ldr	r3, [pc, #48]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004c8a:	681b      	ldr	r3, [r3, #0]
90004c8c:	4a0b      	ldr	r2, [pc, #44]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004c8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90004c92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90004c94:	f7fd fe14 	bl	900028c0 <HAL_GetTick>
90004c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90004c9a:	e008      	b.n	90004cae <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90004c9c:	f7fd fe10 	bl	900028c0 <HAL_GetTick>
90004ca0:	4602      	mov	r2, r0
90004ca2:	693b      	ldr	r3, [r7, #16]
90004ca4:	1ad3      	subs	r3, r2, r3
90004ca6:	2b02      	cmp	r3, #2
90004ca8:	d901      	bls.n	90004cae <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
90004caa:	2303      	movs	r3, #3
90004cac:	e03d      	b.n	90004d2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90004cae:	4b03      	ldr	r3, [pc, #12]	; (90004cbc <HAL_RCC_OscConfig+0x4cc>)
90004cb0:	681b      	ldr	r3, [r3, #0]
90004cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90004cb6:	2b00      	cmp	r3, #0
90004cb8:	d1f0      	bne.n	90004c9c <HAL_RCC_OscConfig+0x4ac>
90004cba:	e035      	b.n	90004d28 <HAL_RCC_OscConfig+0x538>
90004cbc:	40023800 	.word	0x40023800
90004cc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
90004cc4:	4b1b      	ldr	r3, [pc, #108]	; (90004d34 <HAL_RCC_OscConfig+0x544>)
90004cc6:	685b      	ldr	r3, [r3, #4]
90004cc8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90004cca:	687b      	ldr	r3, [r7, #4]
90004ccc:	699b      	ldr	r3, [r3, #24]
90004cce:	2b01      	cmp	r3, #1
90004cd0:	d028      	beq.n	90004d24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90004cd2:	68fb      	ldr	r3, [r7, #12]
90004cd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
90004cd8:	687b      	ldr	r3, [r7, #4]
90004cda:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90004cdc:	429a      	cmp	r2, r3
90004cde:	d121      	bne.n	90004d24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
90004ce0:	68fb      	ldr	r3, [r7, #12]
90004ce2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
90004ce6:	687b      	ldr	r3, [r7, #4]
90004ce8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90004cea:	429a      	cmp	r2, r3
90004cec:	d11a      	bne.n	90004d24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
90004cee:	68fa      	ldr	r2, [r7, #12]
90004cf0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
90004cf4:	4013      	ands	r3, r2
90004cf6:	687a      	ldr	r2, [r7, #4]
90004cf8:	6a52      	ldr	r2, [r2, #36]	; 0x24
90004cfa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
90004cfc:	4293      	cmp	r3, r2
90004cfe:	d111      	bne.n	90004d24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
90004d00:	68fb      	ldr	r3, [r7, #12]
90004d02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
90004d06:	687b      	ldr	r3, [r7, #4]
90004d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90004d0a:	085b      	lsrs	r3, r3, #1
90004d0c:	3b01      	subs	r3, #1
90004d0e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
90004d10:	429a      	cmp	r2, r3
90004d12:	d107      	bne.n	90004d24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
90004d14:	68fb      	ldr	r3, [r7, #12]
90004d16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
90004d1a:	687b      	ldr	r3, [r7, #4]
90004d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90004d1e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
90004d20:	429a      	cmp	r2, r3
90004d22:	d001      	beq.n	90004d28 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
90004d24:	2301      	movs	r3, #1
90004d26:	e000      	b.n	90004d2a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
90004d28:	2300      	movs	r3, #0
}
90004d2a:	4618      	mov	r0, r3
90004d2c:	3718      	adds	r7, #24
90004d2e:	46bd      	mov	sp, r7
90004d30:	bd80      	pop	{r7, pc}
90004d32:	bf00      	nop
90004d34:	40023800 	.word	0x40023800

90004d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
90004d38:	b580      	push	{r7, lr}
90004d3a:	b084      	sub	sp, #16
90004d3c:	af00      	add	r7, sp, #0
90004d3e:	6078      	str	r0, [r7, #4]
90004d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
90004d42:	2300      	movs	r3, #0
90004d44:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
90004d46:	687b      	ldr	r3, [r7, #4]
90004d48:	2b00      	cmp	r3, #0
90004d4a:	d101      	bne.n	90004d50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
90004d4c:	2301      	movs	r3, #1
90004d4e:	e0d0      	b.n	90004ef2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
90004d50:	4b6a      	ldr	r3, [pc, #424]	; (90004efc <HAL_RCC_ClockConfig+0x1c4>)
90004d52:	681b      	ldr	r3, [r3, #0]
90004d54:	f003 030f 	and.w	r3, r3, #15
90004d58:	683a      	ldr	r2, [r7, #0]
90004d5a:	429a      	cmp	r2, r3
90004d5c:	d910      	bls.n	90004d80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90004d5e:	4b67      	ldr	r3, [pc, #412]	; (90004efc <HAL_RCC_ClockConfig+0x1c4>)
90004d60:	681b      	ldr	r3, [r3, #0]
90004d62:	f023 020f 	bic.w	r2, r3, #15
90004d66:	4965      	ldr	r1, [pc, #404]	; (90004efc <HAL_RCC_ClockConfig+0x1c4>)
90004d68:	683b      	ldr	r3, [r7, #0]
90004d6a:	4313      	orrs	r3, r2
90004d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90004d6e:	4b63      	ldr	r3, [pc, #396]	; (90004efc <HAL_RCC_ClockConfig+0x1c4>)
90004d70:	681b      	ldr	r3, [r3, #0]
90004d72:	f003 030f 	and.w	r3, r3, #15
90004d76:	683a      	ldr	r2, [r7, #0]
90004d78:	429a      	cmp	r2, r3
90004d7a:	d001      	beq.n	90004d80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
90004d7c:	2301      	movs	r3, #1
90004d7e:	e0b8      	b.n	90004ef2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90004d80:	687b      	ldr	r3, [r7, #4]
90004d82:	681b      	ldr	r3, [r3, #0]
90004d84:	f003 0302 	and.w	r3, r3, #2
90004d88:	2b00      	cmp	r3, #0
90004d8a:	d020      	beq.n	90004dce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90004d8c:	687b      	ldr	r3, [r7, #4]
90004d8e:	681b      	ldr	r3, [r3, #0]
90004d90:	f003 0304 	and.w	r3, r3, #4
90004d94:	2b00      	cmp	r3, #0
90004d96:	d005      	beq.n	90004da4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
90004d98:	4b59      	ldr	r3, [pc, #356]	; (90004f00 <HAL_RCC_ClockConfig+0x1c8>)
90004d9a:	689b      	ldr	r3, [r3, #8]
90004d9c:	4a58      	ldr	r2, [pc, #352]	; (90004f00 <HAL_RCC_ClockConfig+0x1c8>)
90004d9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
90004da2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90004da4:	687b      	ldr	r3, [r7, #4]
90004da6:	681b      	ldr	r3, [r3, #0]
90004da8:	f003 0308 	and.w	r3, r3, #8
90004dac:	2b00      	cmp	r3, #0
90004dae:	d005      	beq.n	90004dbc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
90004db0:	4b53      	ldr	r3, [pc, #332]	; (90004f00 <HAL_RCC_ClockConfig+0x1c8>)
90004db2:	689b      	ldr	r3, [r3, #8]
90004db4:	4a52      	ldr	r2, [pc, #328]	; (90004f00 <HAL_RCC_ClockConfig+0x1c8>)
90004db6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
90004dba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90004dbc:	4b50      	ldr	r3, [pc, #320]	; (90004f00 <HAL_RCC_ClockConfig+0x1c8>)
90004dbe:	689b      	ldr	r3, [r3, #8]
90004dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
90004dc4:	687b      	ldr	r3, [r7, #4]
90004dc6:	689b      	ldr	r3, [r3, #8]
90004dc8:	494d      	ldr	r1, [pc, #308]	; (90004f00 <HAL_RCC_ClockConfig+0x1c8>)
90004dca:	4313      	orrs	r3, r2
90004dcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
90004dce:	687b      	ldr	r3, [r7, #4]
90004dd0:	681b      	ldr	r3, [r3, #0]
90004dd2:	f003 0301 	and.w	r3, r3, #1
90004dd6:	2b00      	cmp	r3, #0
90004dd8:	d040      	beq.n	90004e5c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90004dda:	687b      	ldr	r3, [r7, #4]
90004ddc:	685b      	ldr	r3, [r3, #4]
90004dde:	2b01      	cmp	r3, #1
90004de0:	d107      	bne.n	90004df2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90004de2:	4b47      	ldr	r3, [pc, #284]	; (90004f00 <HAL_RCC_ClockConfig+0x1c8>)
90004de4:	681b      	ldr	r3, [r3, #0]
90004de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90004dea:	2b00      	cmp	r3, #0
90004dec:	d115      	bne.n	90004e1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
90004dee:	2301      	movs	r3, #1
90004df0:	e07f      	b.n	90004ef2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
90004df2:	687b      	ldr	r3, [r7, #4]
90004df4:	685b      	ldr	r3, [r3, #4]
90004df6:	2b02      	cmp	r3, #2
90004df8:	d107      	bne.n	90004e0a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90004dfa:	4b41      	ldr	r3, [pc, #260]	; (90004f00 <HAL_RCC_ClockConfig+0x1c8>)
90004dfc:	681b      	ldr	r3, [r3, #0]
90004dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90004e02:	2b00      	cmp	r3, #0
90004e04:	d109      	bne.n	90004e1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
90004e06:	2301      	movs	r3, #1
90004e08:	e073      	b.n	90004ef2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90004e0a:	4b3d      	ldr	r3, [pc, #244]	; (90004f00 <HAL_RCC_ClockConfig+0x1c8>)
90004e0c:	681b      	ldr	r3, [r3, #0]
90004e0e:	f003 0302 	and.w	r3, r3, #2
90004e12:	2b00      	cmp	r3, #0
90004e14:	d101      	bne.n	90004e1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
90004e16:	2301      	movs	r3, #1
90004e18:	e06b      	b.n	90004ef2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
90004e1a:	4b39      	ldr	r3, [pc, #228]	; (90004f00 <HAL_RCC_ClockConfig+0x1c8>)
90004e1c:	689b      	ldr	r3, [r3, #8]
90004e1e:	f023 0203 	bic.w	r2, r3, #3
90004e22:	687b      	ldr	r3, [r7, #4]
90004e24:	685b      	ldr	r3, [r3, #4]
90004e26:	4936      	ldr	r1, [pc, #216]	; (90004f00 <HAL_RCC_ClockConfig+0x1c8>)
90004e28:	4313      	orrs	r3, r2
90004e2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90004e2c:	f7fd fd48 	bl	900028c0 <HAL_GetTick>
90004e30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90004e32:	e00a      	b.n	90004e4a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
90004e34:	f7fd fd44 	bl	900028c0 <HAL_GetTick>
90004e38:	4602      	mov	r2, r0
90004e3a:	68fb      	ldr	r3, [r7, #12]
90004e3c:	1ad3      	subs	r3, r2, r3
90004e3e:	f241 3288 	movw	r2, #5000	; 0x1388
90004e42:	4293      	cmp	r3, r2
90004e44:	d901      	bls.n	90004e4a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
90004e46:	2303      	movs	r3, #3
90004e48:	e053      	b.n	90004ef2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90004e4a:	4b2d      	ldr	r3, [pc, #180]	; (90004f00 <HAL_RCC_ClockConfig+0x1c8>)
90004e4c:	689b      	ldr	r3, [r3, #8]
90004e4e:	f003 020c 	and.w	r2, r3, #12
90004e52:	687b      	ldr	r3, [r7, #4]
90004e54:	685b      	ldr	r3, [r3, #4]
90004e56:	009b      	lsls	r3, r3, #2
90004e58:	429a      	cmp	r2, r3
90004e5a:	d1eb      	bne.n	90004e34 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
90004e5c:	4b27      	ldr	r3, [pc, #156]	; (90004efc <HAL_RCC_ClockConfig+0x1c4>)
90004e5e:	681b      	ldr	r3, [r3, #0]
90004e60:	f003 030f 	and.w	r3, r3, #15
90004e64:	683a      	ldr	r2, [r7, #0]
90004e66:	429a      	cmp	r2, r3
90004e68:	d210      	bcs.n	90004e8c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90004e6a:	4b24      	ldr	r3, [pc, #144]	; (90004efc <HAL_RCC_ClockConfig+0x1c4>)
90004e6c:	681b      	ldr	r3, [r3, #0]
90004e6e:	f023 020f 	bic.w	r2, r3, #15
90004e72:	4922      	ldr	r1, [pc, #136]	; (90004efc <HAL_RCC_ClockConfig+0x1c4>)
90004e74:	683b      	ldr	r3, [r7, #0]
90004e76:	4313      	orrs	r3, r2
90004e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90004e7a:	4b20      	ldr	r3, [pc, #128]	; (90004efc <HAL_RCC_ClockConfig+0x1c4>)
90004e7c:	681b      	ldr	r3, [r3, #0]
90004e7e:	f003 030f 	and.w	r3, r3, #15
90004e82:	683a      	ldr	r2, [r7, #0]
90004e84:	429a      	cmp	r2, r3
90004e86:	d001      	beq.n	90004e8c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
90004e88:	2301      	movs	r3, #1
90004e8a:	e032      	b.n	90004ef2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90004e8c:	687b      	ldr	r3, [r7, #4]
90004e8e:	681b      	ldr	r3, [r3, #0]
90004e90:	f003 0304 	and.w	r3, r3, #4
90004e94:	2b00      	cmp	r3, #0
90004e96:	d008      	beq.n	90004eaa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
90004e98:	4b19      	ldr	r3, [pc, #100]	; (90004f00 <HAL_RCC_ClockConfig+0x1c8>)
90004e9a:	689b      	ldr	r3, [r3, #8]
90004e9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
90004ea0:	687b      	ldr	r3, [r7, #4]
90004ea2:	68db      	ldr	r3, [r3, #12]
90004ea4:	4916      	ldr	r1, [pc, #88]	; (90004f00 <HAL_RCC_ClockConfig+0x1c8>)
90004ea6:	4313      	orrs	r3, r2
90004ea8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90004eaa:	687b      	ldr	r3, [r7, #4]
90004eac:	681b      	ldr	r3, [r3, #0]
90004eae:	f003 0308 	and.w	r3, r3, #8
90004eb2:	2b00      	cmp	r3, #0
90004eb4:	d009      	beq.n	90004eca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
90004eb6:	4b12      	ldr	r3, [pc, #72]	; (90004f00 <HAL_RCC_ClockConfig+0x1c8>)
90004eb8:	689b      	ldr	r3, [r3, #8]
90004eba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
90004ebe:	687b      	ldr	r3, [r7, #4]
90004ec0:	691b      	ldr	r3, [r3, #16]
90004ec2:	00db      	lsls	r3, r3, #3
90004ec4:	490e      	ldr	r1, [pc, #56]	; (90004f00 <HAL_RCC_ClockConfig+0x1c8>)
90004ec6:	4313      	orrs	r3, r2
90004ec8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
90004eca:	f000 f821 	bl	90004f10 <HAL_RCC_GetSysClockFreq>
90004ece:	4602      	mov	r2, r0
90004ed0:	4b0b      	ldr	r3, [pc, #44]	; (90004f00 <HAL_RCC_ClockConfig+0x1c8>)
90004ed2:	689b      	ldr	r3, [r3, #8]
90004ed4:	091b      	lsrs	r3, r3, #4
90004ed6:	f003 030f 	and.w	r3, r3, #15
90004eda:	490a      	ldr	r1, [pc, #40]	; (90004f04 <HAL_RCC_ClockConfig+0x1cc>)
90004edc:	5ccb      	ldrb	r3, [r1, r3]
90004ede:	fa22 f303 	lsr.w	r3, r2, r3
90004ee2:	4a09      	ldr	r2, [pc, #36]	; (90004f08 <HAL_RCC_ClockConfig+0x1d0>)
90004ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
90004ee6:	4b09      	ldr	r3, [pc, #36]	; (90004f0c <HAL_RCC_ClockConfig+0x1d4>)
90004ee8:	681b      	ldr	r3, [r3, #0]
90004eea:	4618      	mov	r0, r3
90004eec:	f7fd fca4 	bl	90002838 <HAL_InitTick>

  return HAL_OK;
90004ef0:	2300      	movs	r3, #0
}
90004ef2:	4618      	mov	r0, r3
90004ef4:	3710      	adds	r7, #16
90004ef6:	46bd      	mov	sp, r7
90004ef8:	bd80      	pop	{r7, pc}
90004efa:	bf00      	nop
90004efc:	40023c00 	.word	0x40023c00
90004f00:	40023800 	.word	0x40023800
90004f04:	900066d4 	.word	0x900066d4
90004f08:	20000000 	.word	0x20000000
90004f0c:	20000040 	.word	0x20000040

90004f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
90004f10:	b5b0      	push	{r4, r5, r7, lr}
90004f12:	b084      	sub	sp, #16
90004f14:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
90004f16:	2100      	movs	r1, #0
90004f18:	6079      	str	r1, [r7, #4]
90004f1a:	2100      	movs	r1, #0
90004f1c:	60f9      	str	r1, [r7, #12]
90004f1e:	2100      	movs	r1, #0
90004f20:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
90004f22:	2100      	movs	r1, #0
90004f24:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
90004f26:	4952      	ldr	r1, [pc, #328]	; (90005070 <HAL_RCC_GetSysClockFreq+0x160>)
90004f28:	6889      	ldr	r1, [r1, #8]
90004f2a:	f001 010c 	and.w	r1, r1, #12
90004f2e:	2908      	cmp	r1, #8
90004f30:	d00d      	beq.n	90004f4e <HAL_RCC_GetSysClockFreq+0x3e>
90004f32:	2908      	cmp	r1, #8
90004f34:	f200 8094 	bhi.w	90005060 <HAL_RCC_GetSysClockFreq+0x150>
90004f38:	2900      	cmp	r1, #0
90004f3a:	d002      	beq.n	90004f42 <HAL_RCC_GetSysClockFreq+0x32>
90004f3c:	2904      	cmp	r1, #4
90004f3e:	d003      	beq.n	90004f48 <HAL_RCC_GetSysClockFreq+0x38>
90004f40:	e08e      	b.n	90005060 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
90004f42:	4b4c      	ldr	r3, [pc, #304]	; (90005074 <HAL_RCC_GetSysClockFreq+0x164>)
90004f44:	60bb      	str	r3, [r7, #8]
      break;
90004f46:	e08e      	b.n	90005066 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
90004f48:	4b4b      	ldr	r3, [pc, #300]	; (90005078 <HAL_RCC_GetSysClockFreq+0x168>)
90004f4a:	60bb      	str	r3, [r7, #8]
      break;
90004f4c:	e08b      	b.n	90005066 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
90004f4e:	4948      	ldr	r1, [pc, #288]	; (90005070 <HAL_RCC_GetSysClockFreq+0x160>)
90004f50:	6849      	ldr	r1, [r1, #4]
90004f52:	f001 013f 	and.w	r1, r1, #63	; 0x3f
90004f56:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
90004f58:	4945      	ldr	r1, [pc, #276]	; (90005070 <HAL_RCC_GetSysClockFreq+0x160>)
90004f5a:	6849      	ldr	r1, [r1, #4]
90004f5c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
90004f60:	2900      	cmp	r1, #0
90004f62:	d024      	beq.n	90004fae <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
90004f64:	4942      	ldr	r1, [pc, #264]	; (90005070 <HAL_RCC_GetSysClockFreq+0x160>)
90004f66:	6849      	ldr	r1, [r1, #4]
90004f68:	0989      	lsrs	r1, r1, #6
90004f6a:	4608      	mov	r0, r1
90004f6c:	f04f 0100 	mov.w	r1, #0
90004f70:	f240 14ff 	movw	r4, #511	; 0x1ff
90004f74:	f04f 0500 	mov.w	r5, #0
90004f78:	ea00 0204 	and.w	r2, r0, r4
90004f7c:	ea01 0305 	and.w	r3, r1, r5
90004f80:	493d      	ldr	r1, [pc, #244]	; (90005078 <HAL_RCC_GetSysClockFreq+0x168>)
90004f82:	fb01 f003 	mul.w	r0, r1, r3
90004f86:	2100      	movs	r1, #0
90004f88:	fb01 f102 	mul.w	r1, r1, r2
90004f8c:	1844      	adds	r4, r0, r1
90004f8e:	493a      	ldr	r1, [pc, #232]	; (90005078 <HAL_RCC_GetSysClockFreq+0x168>)
90004f90:	fba2 0101 	umull	r0, r1, r2, r1
90004f94:	1863      	adds	r3, r4, r1
90004f96:	4619      	mov	r1, r3
90004f98:	687b      	ldr	r3, [r7, #4]
90004f9a:	461a      	mov	r2, r3
90004f9c:	f04f 0300 	mov.w	r3, #0
90004fa0:	f7fb f986 	bl	900002b0 <__aeabi_uldivmod>
90004fa4:	4602      	mov	r2, r0
90004fa6:	460b      	mov	r3, r1
90004fa8:	4613      	mov	r3, r2
90004faa:	60fb      	str	r3, [r7, #12]
90004fac:	e04a      	b.n	90005044 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
90004fae:	4b30      	ldr	r3, [pc, #192]	; (90005070 <HAL_RCC_GetSysClockFreq+0x160>)
90004fb0:	685b      	ldr	r3, [r3, #4]
90004fb2:	099b      	lsrs	r3, r3, #6
90004fb4:	461a      	mov	r2, r3
90004fb6:	f04f 0300 	mov.w	r3, #0
90004fba:	f240 10ff 	movw	r0, #511	; 0x1ff
90004fbe:	f04f 0100 	mov.w	r1, #0
90004fc2:	ea02 0400 	and.w	r4, r2, r0
90004fc6:	ea03 0501 	and.w	r5, r3, r1
90004fca:	4620      	mov	r0, r4
90004fcc:	4629      	mov	r1, r5
90004fce:	f04f 0200 	mov.w	r2, #0
90004fd2:	f04f 0300 	mov.w	r3, #0
90004fd6:	014b      	lsls	r3, r1, #5
90004fd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
90004fdc:	0142      	lsls	r2, r0, #5
90004fde:	4610      	mov	r0, r2
90004fe0:	4619      	mov	r1, r3
90004fe2:	1b00      	subs	r0, r0, r4
90004fe4:	eb61 0105 	sbc.w	r1, r1, r5
90004fe8:	f04f 0200 	mov.w	r2, #0
90004fec:	f04f 0300 	mov.w	r3, #0
90004ff0:	018b      	lsls	r3, r1, #6
90004ff2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
90004ff6:	0182      	lsls	r2, r0, #6
90004ff8:	1a12      	subs	r2, r2, r0
90004ffa:	eb63 0301 	sbc.w	r3, r3, r1
90004ffe:	f04f 0000 	mov.w	r0, #0
90005002:	f04f 0100 	mov.w	r1, #0
90005006:	00d9      	lsls	r1, r3, #3
90005008:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
9000500c:	00d0      	lsls	r0, r2, #3
9000500e:	4602      	mov	r2, r0
90005010:	460b      	mov	r3, r1
90005012:	1912      	adds	r2, r2, r4
90005014:	eb45 0303 	adc.w	r3, r5, r3
90005018:	f04f 0000 	mov.w	r0, #0
9000501c:	f04f 0100 	mov.w	r1, #0
90005020:	0299      	lsls	r1, r3, #10
90005022:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
90005026:	0290      	lsls	r0, r2, #10
90005028:	4602      	mov	r2, r0
9000502a:	460b      	mov	r3, r1
9000502c:	4610      	mov	r0, r2
9000502e:	4619      	mov	r1, r3
90005030:	687b      	ldr	r3, [r7, #4]
90005032:	461a      	mov	r2, r3
90005034:	f04f 0300 	mov.w	r3, #0
90005038:	f7fb f93a 	bl	900002b0 <__aeabi_uldivmod>
9000503c:	4602      	mov	r2, r0
9000503e:	460b      	mov	r3, r1
90005040:	4613      	mov	r3, r2
90005042:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
90005044:	4b0a      	ldr	r3, [pc, #40]	; (90005070 <HAL_RCC_GetSysClockFreq+0x160>)
90005046:	685b      	ldr	r3, [r3, #4]
90005048:	0c1b      	lsrs	r3, r3, #16
9000504a:	f003 0303 	and.w	r3, r3, #3
9000504e:	3301      	adds	r3, #1
90005050:	005b      	lsls	r3, r3, #1
90005052:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
90005054:	68fa      	ldr	r2, [r7, #12]
90005056:	683b      	ldr	r3, [r7, #0]
90005058:	fbb2 f3f3 	udiv	r3, r2, r3
9000505c:	60bb      	str	r3, [r7, #8]
      break;
9000505e:	e002      	b.n	90005066 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
90005060:	4b04      	ldr	r3, [pc, #16]	; (90005074 <HAL_RCC_GetSysClockFreq+0x164>)
90005062:	60bb      	str	r3, [r7, #8]
      break;
90005064:	bf00      	nop
    }
  }
  return sysclockfreq;
90005066:	68bb      	ldr	r3, [r7, #8]
}
90005068:	4618      	mov	r0, r3
9000506a:	3710      	adds	r7, #16
9000506c:	46bd      	mov	sp, r7
9000506e:	bdb0      	pop	{r4, r5, r7, pc}
90005070:	40023800 	.word	0x40023800
90005074:	00f42400 	.word	0x00f42400
90005078:	017d7840 	.word	0x017d7840

9000507c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
9000507c:	b580      	push	{r7, lr}
9000507e:	b088      	sub	sp, #32
90005080:	af00      	add	r7, sp, #0
90005082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
90005084:	2300      	movs	r3, #0
90005086:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
90005088:	2300      	movs	r3, #0
9000508a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
9000508c:	2300      	movs	r3, #0
9000508e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
90005090:	2300      	movs	r3, #0
90005092:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
90005094:	2300      	movs	r3, #0
90005096:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
90005098:	687b      	ldr	r3, [r7, #4]
9000509a:	681b      	ldr	r3, [r3, #0]
9000509c:	f003 0301 	and.w	r3, r3, #1
900050a0:	2b00      	cmp	r3, #0
900050a2:	d012      	beq.n	900050ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
900050a4:	4b69      	ldr	r3, [pc, #420]	; (9000524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900050a6:	689b      	ldr	r3, [r3, #8]
900050a8:	4a68      	ldr	r2, [pc, #416]	; (9000524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900050aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
900050ae:	6093      	str	r3, [r2, #8]
900050b0:	4b66      	ldr	r3, [pc, #408]	; (9000524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900050b2:	689a      	ldr	r2, [r3, #8]
900050b4:	687b      	ldr	r3, [r7, #4]
900050b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900050b8:	4964      	ldr	r1, [pc, #400]	; (9000524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900050ba:	4313      	orrs	r3, r2
900050bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
900050be:	687b      	ldr	r3, [r7, #4]
900050c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900050c2:	2b00      	cmp	r3, #0
900050c4:	d101      	bne.n	900050ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
900050c6:	2301      	movs	r3, #1
900050c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
900050ca:	687b      	ldr	r3, [r7, #4]
900050cc:	681b      	ldr	r3, [r3, #0]
900050ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
900050d2:	2b00      	cmp	r3, #0
900050d4:	d017      	beq.n	90005106 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
900050d6:	4b5d      	ldr	r3, [pc, #372]	; (9000524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900050d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
900050dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
900050e0:	687b      	ldr	r3, [r7, #4]
900050e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900050e4:	4959      	ldr	r1, [pc, #356]	; (9000524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900050e6:	4313      	orrs	r3, r2
900050e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
900050ec:	687b      	ldr	r3, [r7, #4]
900050ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900050f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
900050f4:	d101      	bne.n	900050fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
900050f6:	2301      	movs	r3, #1
900050f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
900050fa:	687b      	ldr	r3, [r7, #4]
900050fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900050fe:	2b00      	cmp	r3, #0
90005100:	d101      	bne.n	90005106 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
90005102:	2301      	movs	r3, #1
90005104:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
90005106:	687b      	ldr	r3, [r7, #4]
90005108:	681b      	ldr	r3, [r3, #0]
9000510a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
9000510e:	2b00      	cmp	r3, #0
90005110:	d017      	beq.n	90005142 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
90005112:	4b4e      	ldr	r3, [pc, #312]	; (9000524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90005114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90005118:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
9000511c:	687b      	ldr	r3, [r7, #4]
9000511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90005120:	494a      	ldr	r1, [pc, #296]	; (9000524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90005122:	4313      	orrs	r3, r2
90005124:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
90005128:	687b      	ldr	r3, [r7, #4]
9000512a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000512c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90005130:	d101      	bne.n	90005136 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
90005132:	2301      	movs	r3, #1
90005134:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
90005136:	687b      	ldr	r3, [r7, #4]
90005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000513a:	2b00      	cmp	r3, #0
9000513c:	d101      	bne.n	90005142 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
9000513e:	2301      	movs	r3, #1
90005140:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
90005142:	687b      	ldr	r3, [r7, #4]
90005144:	681b      	ldr	r3, [r3, #0]
90005146:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
9000514a:	2b00      	cmp	r3, #0
9000514c:	d001      	beq.n	90005152 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
9000514e:	2301      	movs	r3, #1
90005150:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
90005152:	687b      	ldr	r3, [r7, #4]
90005154:	681b      	ldr	r3, [r3, #0]
90005156:	f003 0320 	and.w	r3, r3, #32
9000515a:	2b00      	cmp	r3, #0
9000515c:	f000 808b 	beq.w	90005276 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
90005160:	4b3a      	ldr	r3, [pc, #232]	; (9000524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90005162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90005164:	4a39      	ldr	r2, [pc, #228]	; (9000524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90005166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
9000516a:	6413      	str	r3, [r2, #64]	; 0x40
9000516c:	4b37      	ldr	r3, [pc, #220]	; (9000524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
9000516e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90005170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90005174:	60bb      	str	r3, [r7, #8]
90005176:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
90005178:	4b35      	ldr	r3, [pc, #212]	; (90005250 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
9000517a:	681b      	ldr	r3, [r3, #0]
9000517c:	4a34      	ldr	r2, [pc, #208]	; (90005250 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
9000517e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90005182:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90005184:	f7fd fb9c 	bl	900028c0 <HAL_GetTick>
90005188:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
9000518a:	e008      	b.n	9000519e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000518c:	f7fd fb98 	bl	900028c0 <HAL_GetTick>
90005190:	4602      	mov	r2, r0
90005192:	697b      	ldr	r3, [r7, #20]
90005194:	1ad3      	subs	r3, r2, r3
90005196:	2b64      	cmp	r3, #100	; 0x64
90005198:	d901      	bls.n	9000519e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
9000519a:	2303      	movs	r3, #3
9000519c:	e357      	b.n	9000584e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
9000519e:	4b2c      	ldr	r3, [pc, #176]	; (90005250 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
900051a0:	681b      	ldr	r3, [r3, #0]
900051a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
900051a6:	2b00      	cmp	r3, #0
900051a8:	d0f0      	beq.n	9000518c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
900051aa:	4b28      	ldr	r3, [pc, #160]	; (9000524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900051ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900051ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
900051b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
900051b4:	693b      	ldr	r3, [r7, #16]
900051b6:	2b00      	cmp	r3, #0
900051b8:	d035      	beq.n	90005226 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
900051ba:	687b      	ldr	r3, [r7, #4]
900051bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900051be:	f403 7340 	and.w	r3, r3, #768	; 0x300
900051c2:	693a      	ldr	r2, [r7, #16]
900051c4:	429a      	cmp	r2, r3
900051c6:	d02e      	beq.n	90005226 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
900051c8:	4b20      	ldr	r3, [pc, #128]	; (9000524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900051ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900051cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
900051d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
900051d2:	4b1e      	ldr	r3, [pc, #120]	; (9000524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900051d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900051d6:	4a1d      	ldr	r2, [pc, #116]	; (9000524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900051d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900051dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
900051de:	4b1b      	ldr	r3, [pc, #108]	; (9000524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900051e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900051e2:	4a1a      	ldr	r2, [pc, #104]	; (9000524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900051e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
900051e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
900051ea:	4a18      	ldr	r2, [pc, #96]	; (9000524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900051ec:	693b      	ldr	r3, [r7, #16]
900051ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
900051f0:	4b16      	ldr	r3, [pc, #88]	; (9000524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900051f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900051f4:	f003 0301 	and.w	r3, r3, #1
900051f8:	2b01      	cmp	r3, #1
900051fa:	d114      	bne.n	90005226 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900051fc:	f7fd fb60 	bl	900028c0 <HAL_GetTick>
90005200:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90005202:	e00a      	b.n	9000521a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
90005204:	f7fd fb5c 	bl	900028c0 <HAL_GetTick>
90005208:	4602      	mov	r2, r0
9000520a:	697b      	ldr	r3, [r7, #20]
9000520c:	1ad3      	subs	r3, r2, r3
9000520e:	f241 3288 	movw	r2, #5000	; 0x1388
90005212:	4293      	cmp	r3, r2
90005214:	d901      	bls.n	9000521a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
90005216:	2303      	movs	r3, #3
90005218:	e319      	b.n	9000584e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
9000521a:	4b0c      	ldr	r3, [pc, #48]	; (9000524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
9000521c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000521e:	f003 0302 	and.w	r3, r3, #2
90005222:	2b00      	cmp	r3, #0
90005224:	d0ee      	beq.n	90005204 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
90005226:	687b      	ldr	r3, [r7, #4]
90005228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000522a:	f403 7340 	and.w	r3, r3, #768	; 0x300
9000522e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90005232:	d111      	bne.n	90005258 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
90005234:	4b05      	ldr	r3, [pc, #20]	; (9000524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90005236:	689b      	ldr	r3, [r3, #8]
90005238:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
9000523c:	687b      	ldr	r3, [r7, #4]
9000523e:	6b19      	ldr	r1, [r3, #48]	; 0x30
90005240:	4b04      	ldr	r3, [pc, #16]	; (90005254 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
90005242:	400b      	ands	r3, r1
90005244:	4901      	ldr	r1, [pc, #4]	; (9000524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90005246:	4313      	orrs	r3, r2
90005248:	608b      	str	r3, [r1, #8]
9000524a:	e00b      	b.n	90005264 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
9000524c:	40023800 	.word	0x40023800
90005250:	40007000 	.word	0x40007000
90005254:	0ffffcff 	.word	0x0ffffcff
90005258:	4bb1      	ldr	r3, [pc, #708]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
9000525a:	689b      	ldr	r3, [r3, #8]
9000525c:	4ab0      	ldr	r2, [pc, #704]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
9000525e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
90005262:	6093      	str	r3, [r2, #8]
90005264:	4bae      	ldr	r3, [pc, #696]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90005266:	6f1a      	ldr	r2, [r3, #112]	; 0x70
90005268:	687b      	ldr	r3, [r7, #4]
9000526a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000526c:	f3c3 030b 	ubfx	r3, r3, #0, #12
90005270:	49ab      	ldr	r1, [pc, #684]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90005272:	4313      	orrs	r3, r2
90005274:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
90005276:	687b      	ldr	r3, [r7, #4]
90005278:	681b      	ldr	r3, [r3, #0]
9000527a:	f003 0310 	and.w	r3, r3, #16
9000527e:	2b00      	cmp	r3, #0
90005280:	d010      	beq.n	900052a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
90005282:	4ba7      	ldr	r3, [pc, #668]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90005284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90005288:	4aa5      	ldr	r2, [pc, #660]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
9000528a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
9000528e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
90005292:	4ba3      	ldr	r3, [pc, #652]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90005294:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
90005298:	687b      	ldr	r3, [r7, #4]
9000529a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000529c:	49a0      	ldr	r1, [pc, #640]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
9000529e:	4313      	orrs	r3, r2
900052a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
900052a4:	687b      	ldr	r3, [r7, #4]
900052a6:	681b      	ldr	r3, [r3, #0]
900052a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
900052ac:	2b00      	cmp	r3, #0
900052ae:	d00a      	beq.n	900052c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
900052b0:	4b9b      	ldr	r3, [pc, #620]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900052b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900052b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
900052ba:	687b      	ldr	r3, [r7, #4]
900052bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
900052be:	4998      	ldr	r1, [pc, #608]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900052c0:	4313      	orrs	r3, r2
900052c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
900052c6:	687b      	ldr	r3, [r7, #4]
900052c8:	681b      	ldr	r3, [r3, #0]
900052ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
900052ce:	2b00      	cmp	r3, #0
900052d0:	d00a      	beq.n	900052e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
900052d2:	4b93      	ldr	r3, [pc, #588]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900052d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900052d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
900052dc:	687b      	ldr	r3, [r7, #4]
900052de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
900052e0:	498f      	ldr	r1, [pc, #572]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900052e2:	4313      	orrs	r3, r2
900052e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
900052e8:	687b      	ldr	r3, [r7, #4]
900052ea:	681b      	ldr	r3, [r3, #0]
900052ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
900052f0:	2b00      	cmp	r3, #0
900052f2:	d00a      	beq.n	9000530a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
900052f4:	4b8a      	ldr	r3, [pc, #552]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900052f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900052fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
900052fe:	687b      	ldr	r3, [r7, #4]
90005300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90005302:	4987      	ldr	r1, [pc, #540]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90005304:	4313      	orrs	r3, r2
90005306:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000530a:	687b      	ldr	r3, [r7, #4]
9000530c:	681b      	ldr	r3, [r3, #0]
9000530e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90005312:	2b00      	cmp	r3, #0
90005314:	d00a      	beq.n	9000532c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
90005316:	4b82      	ldr	r3, [pc, #520]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90005318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000531c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
90005320:	687b      	ldr	r3, [r7, #4]
90005322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90005324:	497e      	ldr	r1, [pc, #504]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90005326:	4313      	orrs	r3, r2
90005328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
9000532c:	687b      	ldr	r3, [r7, #4]
9000532e:	681b      	ldr	r3, [r3, #0]
90005330:	f003 0340 	and.w	r3, r3, #64	; 0x40
90005334:	2b00      	cmp	r3, #0
90005336:	d00a      	beq.n	9000534e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
90005338:	4b79      	ldr	r3, [pc, #484]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
9000533a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000533e:	f023 0203 	bic.w	r2, r3, #3
90005342:	687b      	ldr	r3, [r7, #4]
90005344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90005346:	4976      	ldr	r1, [pc, #472]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90005348:	4313      	orrs	r3, r2
9000534a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
9000534e:	687b      	ldr	r3, [r7, #4]
90005350:	681b      	ldr	r3, [r3, #0]
90005352:	f003 0380 	and.w	r3, r3, #128	; 0x80
90005356:	2b00      	cmp	r3, #0
90005358:	d00a      	beq.n	90005370 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
9000535a:	4b71      	ldr	r3, [pc, #452]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
9000535c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90005360:	f023 020c 	bic.w	r2, r3, #12
90005364:	687b      	ldr	r3, [r7, #4]
90005366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90005368:	496d      	ldr	r1, [pc, #436]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
9000536a:	4313      	orrs	r3, r2
9000536c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
90005370:	687b      	ldr	r3, [r7, #4]
90005372:	681b      	ldr	r3, [r3, #0]
90005374:	f403 7380 	and.w	r3, r3, #256	; 0x100
90005378:	2b00      	cmp	r3, #0
9000537a:	d00a      	beq.n	90005392 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
9000537c:	4b68      	ldr	r3, [pc, #416]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
9000537e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90005382:	f023 0230 	bic.w	r2, r3, #48	; 0x30
90005386:	687b      	ldr	r3, [r7, #4]
90005388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9000538a:	4965      	ldr	r1, [pc, #404]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
9000538c:	4313      	orrs	r3, r2
9000538e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
90005392:	687b      	ldr	r3, [r7, #4]
90005394:	681b      	ldr	r3, [r3, #0]
90005396:	f403 7300 	and.w	r3, r3, #512	; 0x200
9000539a:	2b00      	cmp	r3, #0
9000539c:	d00a      	beq.n	900053b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
9000539e:	4b60      	ldr	r3, [pc, #384]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900053a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900053a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
900053a8:	687b      	ldr	r3, [r7, #4]
900053aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900053ac:	495c      	ldr	r1, [pc, #368]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900053ae:	4313      	orrs	r3, r2
900053b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
900053b4:	687b      	ldr	r3, [r7, #4]
900053b6:	681b      	ldr	r3, [r3, #0]
900053b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
900053bc:	2b00      	cmp	r3, #0
900053be:	d00a      	beq.n	900053d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
900053c0:	4b57      	ldr	r3, [pc, #348]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900053c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900053c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
900053ca:	687b      	ldr	r3, [r7, #4]
900053cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900053ce:	4954      	ldr	r1, [pc, #336]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900053d0:	4313      	orrs	r3, r2
900053d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
900053d6:	687b      	ldr	r3, [r7, #4]
900053d8:	681b      	ldr	r3, [r3, #0]
900053da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
900053de:	2b00      	cmp	r3, #0
900053e0:	d00a      	beq.n	900053f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
900053e2:	4b4f      	ldr	r3, [pc, #316]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900053e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900053e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
900053ec:	687b      	ldr	r3, [r7, #4]
900053ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900053f0:	494b      	ldr	r1, [pc, #300]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900053f2:	4313      	orrs	r3, r2
900053f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
900053f8:	687b      	ldr	r3, [r7, #4]
900053fa:	681b      	ldr	r3, [r3, #0]
900053fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
90005400:	2b00      	cmp	r3, #0
90005402:	d00a      	beq.n	9000541a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
90005404:	4b46      	ldr	r3, [pc, #280]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90005406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000540a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
9000540e:	687b      	ldr	r3, [r7, #4]
90005410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90005412:	4943      	ldr	r1, [pc, #268]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90005414:	4313      	orrs	r3, r2
90005416:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
9000541a:	687b      	ldr	r3, [r7, #4]
9000541c:	681b      	ldr	r3, [r3, #0]
9000541e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90005422:	2b00      	cmp	r3, #0
90005424:	d00a      	beq.n	9000543c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
90005426:	4b3e      	ldr	r3, [pc, #248]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90005428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000542c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
90005430:	687b      	ldr	r3, [r7, #4]
90005432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90005434:	493a      	ldr	r1, [pc, #232]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90005436:	4313      	orrs	r3, r2
90005438:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
9000543c:	687b      	ldr	r3, [r7, #4]
9000543e:	681b      	ldr	r3, [r3, #0]
90005440:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90005444:	2b00      	cmp	r3, #0
90005446:	d00a      	beq.n	9000545e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
90005448:	4b35      	ldr	r3, [pc, #212]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
9000544a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000544e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
90005452:	687b      	ldr	r3, [r7, #4]
90005454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90005456:	4932      	ldr	r1, [pc, #200]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90005458:	4313      	orrs	r3, r2
9000545a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
9000545e:	687b      	ldr	r3, [r7, #4]
90005460:	681b      	ldr	r3, [r3, #0]
90005462:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90005466:	2b00      	cmp	r3, #0
90005468:	d011      	beq.n	9000548e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
9000546a:	4b2d      	ldr	r3, [pc, #180]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
9000546c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90005470:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
90005474:	687b      	ldr	r3, [r7, #4]
90005476:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90005478:	4929      	ldr	r1, [pc, #164]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
9000547a:	4313      	orrs	r3, r2
9000547c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
90005480:	687b      	ldr	r3, [r7, #4]
90005482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90005484:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
90005488:	d101      	bne.n	9000548e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
9000548a:	2301      	movs	r3, #1
9000548c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
9000548e:	687b      	ldr	r3, [r7, #4]
90005490:	681b      	ldr	r3, [r3, #0]
90005492:	f003 0308 	and.w	r3, r3, #8
90005496:	2b00      	cmp	r3, #0
90005498:	d001      	beq.n	9000549e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
9000549a:	2301      	movs	r3, #1
9000549c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000549e:	687b      	ldr	r3, [r7, #4]
900054a0:	681b      	ldr	r3, [r3, #0]
900054a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
900054a6:	2b00      	cmp	r3, #0
900054a8:	d00a      	beq.n	900054c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
900054aa:	4b1d      	ldr	r3, [pc, #116]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900054ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900054b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
900054b4:	687b      	ldr	r3, [r7, #4]
900054b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900054b8:	4919      	ldr	r1, [pc, #100]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900054ba:	4313      	orrs	r3, r2
900054bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
900054c0:	687b      	ldr	r3, [r7, #4]
900054c2:	681b      	ldr	r3, [r3, #0]
900054c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
900054c8:	2b00      	cmp	r3, #0
900054ca:	d00b      	beq.n	900054e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
900054cc:	4b14      	ldr	r3, [pc, #80]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900054ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900054d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
900054d6:	687b      	ldr	r3, [r7, #4]
900054d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
900054dc:	4910      	ldr	r1, [pc, #64]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900054de:	4313      	orrs	r3, r2
900054e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
900054e4:	69fb      	ldr	r3, [r7, #28]
900054e6:	2b01      	cmp	r3, #1
900054e8:	d006      	beq.n	900054f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
900054ea:	687b      	ldr	r3, [r7, #4]
900054ec:	681b      	ldr	r3, [r3, #0]
900054ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
900054f2:	2b00      	cmp	r3, #0
900054f4:	f000 80d9 	beq.w	900056aa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
900054f8:	4b09      	ldr	r3, [pc, #36]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900054fa:	681b      	ldr	r3, [r3, #0]
900054fc:	4a08      	ldr	r2, [pc, #32]	; (90005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900054fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
90005502:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90005504:	f7fd f9dc 	bl	900028c0 <HAL_GetTick>
90005508:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
9000550a:	e00b      	b.n	90005524 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
9000550c:	f7fd f9d8 	bl	900028c0 <HAL_GetTick>
90005510:	4602      	mov	r2, r0
90005512:	697b      	ldr	r3, [r7, #20]
90005514:	1ad3      	subs	r3, r2, r3
90005516:	2b64      	cmp	r3, #100	; 0x64
90005518:	d904      	bls.n	90005524 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
9000551a:	2303      	movs	r3, #3
9000551c:	e197      	b.n	9000584e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
9000551e:	bf00      	nop
90005520:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
90005524:	4b6c      	ldr	r3, [pc, #432]	; (900056d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
90005526:	681b      	ldr	r3, [r3, #0]
90005528:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
9000552c:	2b00      	cmp	r3, #0
9000552e:	d1ed      	bne.n	9000550c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
90005530:	687b      	ldr	r3, [r7, #4]
90005532:	681b      	ldr	r3, [r3, #0]
90005534:	f003 0301 	and.w	r3, r3, #1
90005538:	2b00      	cmp	r3, #0
9000553a:	d021      	beq.n	90005580 <HAL_RCCEx_PeriphCLKConfig+0x504>
9000553c:	687b      	ldr	r3, [r7, #4]
9000553e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90005540:	2b00      	cmp	r3, #0
90005542:	d11d      	bne.n	90005580 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
90005544:	4b64      	ldr	r3, [pc, #400]	; (900056d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
90005546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000554a:	0c1b      	lsrs	r3, r3, #16
9000554c:	f003 0303 	and.w	r3, r3, #3
90005550:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
90005552:	4b61      	ldr	r3, [pc, #388]	; (900056d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
90005554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90005558:	0e1b      	lsrs	r3, r3, #24
9000555a:	f003 030f 	and.w	r3, r3, #15
9000555e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
90005560:	687b      	ldr	r3, [r7, #4]
90005562:	685b      	ldr	r3, [r3, #4]
90005564:	019a      	lsls	r2, r3, #6
90005566:	693b      	ldr	r3, [r7, #16]
90005568:	041b      	lsls	r3, r3, #16
9000556a:	431a      	orrs	r2, r3
9000556c:	68fb      	ldr	r3, [r7, #12]
9000556e:	061b      	lsls	r3, r3, #24
90005570:	431a      	orrs	r2, r3
90005572:	687b      	ldr	r3, [r7, #4]
90005574:	689b      	ldr	r3, [r3, #8]
90005576:	071b      	lsls	r3, r3, #28
90005578:	4957      	ldr	r1, [pc, #348]	; (900056d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
9000557a:	4313      	orrs	r3, r2
9000557c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
90005580:	687b      	ldr	r3, [r7, #4]
90005582:	681b      	ldr	r3, [r3, #0]
90005584:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
90005588:	2b00      	cmp	r3, #0
9000558a:	d004      	beq.n	90005596 <HAL_RCCEx_PeriphCLKConfig+0x51a>
9000558c:	687b      	ldr	r3, [r7, #4]
9000558e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90005590:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90005594:	d00a      	beq.n	900055ac <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
90005596:	687b      	ldr	r3, [r7, #4]
90005598:	681b      	ldr	r3, [r3, #0]
9000559a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
9000559e:	2b00      	cmp	r3, #0
900055a0:	d02e      	beq.n	90005600 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
900055a2:	687b      	ldr	r3, [r7, #4]
900055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900055a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
900055aa:	d129      	bne.n	90005600 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
900055ac:	4b4a      	ldr	r3, [pc, #296]	; (900056d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
900055ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
900055b2:	0c1b      	lsrs	r3, r3, #16
900055b4:	f003 0303 	and.w	r3, r3, #3
900055b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
900055ba:	4b47      	ldr	r3, [pc, #284]	; (900056d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
900055bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
900055c0:	0f1b      	lsrs	r3, r3, #28
900055c2:	f003 0307 	and.w	r3, r3, #7
900055c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
900055c8:	687b      	ldr	r3, [r7, #4]
900055ca:	685b      	ldr	r3, [r3, #4]
900055cc:	019a      	lsls	r2, r3, #6
900055ce:	693b      	ldr	r3, [r7, #16]
900055d0:	041b      	lsls	r3, r3, #16
900055d2:	431a      	orrs	r2, r3
900055d4:	687b      	ldr	r3, [r7, #4]
900055d6:	68db      	ldr	r3, [r3, #12]
900055d8:	061b      	lsls	r3, r3, #24
900055da:	431a      	orrs	r2, r3
900055dc:	68fb      	ldr	r3, [r7, #12]
900055de:	071b      	lsls	r3, r3, #28
900055e0:	493d      	ldr	r1, [pc, #244]	; (900056d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
900055e2:	4313      	orrs	r3, r2
900055e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
900055e8:	4b3b      	ldr	r3, [pc, #236]	; (900056d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
900055ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
900055ee:	f023 021f 	bic.w	r2, r3, #31
900055f2:	687b      	ldr	r3, [r7, #4]
900055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900055f6:	3b01      	subs	r3, #1
900055f8:	4937      	ldr	r1, [pc, #220]	; (900056d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
900055fa:	4313      	orrs	r3, r2
900055fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
90005600:	687b      	ldr	r3, [r7, #4]
90005602:	681b      	ldr	r3, [r3, #0]
90005604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
90005608:	2b00      	cmp	r3, #0
9000560a:	d01d      	beq.n	90005648 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
9000560c:	4b32      	ldr	r3, [pc, #200]	; (900056d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
9000560e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90005612:	0e1b      	lsrs	r3, r3, #24
90005614:	f003 030f 	and.w	r3, r3, #15
90005618:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
9000561a:	4b2f      	ldr	r3, [pc, #188]	; (900056d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
9000561c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90005620:	0f1b      	lsrs	r3, r3, #28
90005622:	f003 0307 	and.w	r3, r3, #7
90005626:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
90005628:	687b      	ldr	r3, [r7, #4]
9000562a:	685b      	ldr	r3, [r3, #4]
9000562c:	019a      	lsls	r2, r3, #6
9000562e:	687b      	ldr	r3, [r7, #4]
90005630:	691b      	ldr	r3, [r3, #16]
90005632:	041b      	lsls	r3, r3, #16
90005634:	431a      	orrs	r2, r3
90005636:	693b      	ldr	r3, [r7, #16]
90005638:	061b      	lsls	r3, r3, #24
9000563a:	431a      	orrs	r2, r3
9000563c:	68fb      	ldr	r3, [r7, #12]
9000563e:	071b      	lsls	r3, r3, #28
90005640:	4925      	ldr	r1, [pc, #148]	; (900056d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
90005642:	4313      	orrs	r3, r2
90005644:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
90005648:	687b      	ldr	r3, [r7, #4]
9000564a:	681b      	ldr	r3, [r3, #0]
9000564c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90005650:	2b00      	cmp	r3, #0
90005652:	d011      	beq.n	90005678 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
90005654:	687b      	ldr	r3, [r7, #4]
90005656:	685b      	ldr	r3, [r3, #4]
90005658:	019a      	lsls	r2, r3, #6
9000565a:	687b      	ldr	r3, [r7, #4]
9000565c:	691b      	ldr	r3, [r3, #16]
9000565e:	041b      	lsls	r3, r3, #16
90005660:	431a      	orrs	r2, r3
90005662:	687b      	ldr	r3, [r7, #4]
90005664:	68db      	ldr	r3, [r3, #12]
90005666:	061b      	lsls	r3, r3, #24
90005668:	431a      	orrs	r2, r3
9000566a:	687b      	ldr	r3, [r7, #4]
9000566c:	689b      	ldr	r3, [r3, #8]
9000566e:	071b      	lsls	r3, r3, #28
90005670:	4919      	ldr	r1, [pc, #100]	; (900056d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
90005672:	4313      	orrs	r3, r2
90005674:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
90005678:	4b17      	ldr	r3, [pc, #92]	; (900056d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
9000567a:	681b      	ldr	r3, [r3, #0]
9000567c:	4a16      	ldr	r2, [pc, #88]	; (900056d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
9000567e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
90005682:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90005684:	f7fd f91c 	bl	900028c0 <HAL_GetTick>
90005688:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
9000568a:	e008      	b.n	9000569e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
9000568c:	f7fd f918 	bl	900028c0 <HAL_GetTick>
90005690:	4602      	mov	r2, r0
90005692:	697b      	ldr	r3, [r7, #20]
90005694:	1ad3      	subs	r3, r2, r3
90005696:	2b64      	cmp	r3, #100	; 0x64
90005698:	d901      	bls.n	9000569e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
9000569a:	2303      	movs	r3, #3
9000569c:	e0d7      	b.n	9000584e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
9000569e:	4b0e      	ldr	r3, [pc, #56]	; (900056d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
900056a0:	681b      	ldr	r3, [r3, #0]
900056a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
900056a6:	2b00      	cmp	r3, #0
900056a8:	d0f0      	beq.n	9000568c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
900056aa:	69bb      	ldr	r3, [r7, #24]
900056ac:	2b01      	cmp	r3, #1
900056ae:	f040 80cd 	bne.w	9000584c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
900056b2:	4b09      	ldr	r3, [pc, #36]	; (900056d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
900056b4:	681b      	ldr	r3, [r3, #0]
900056b6:	4a08      	ldr	r2, [pc, #32]	; (900056d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
900056b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
900056bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
900056be:	f7fd f8ff 	bl	900028c0 <HAL_GetTick>
900056c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
900056c4:	e00a      	b.n	900056dc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
900056c6:	f7fd f8fb 	bl	900028c0 <HAL_GetTick>
900056ca:	4602      	mov	r2, r0
900056cc:	697b      	ldr	r3, [r7, #20]
900056ce:	1ad3      	subs	r3, r2, r3
900056d0:	2b64      	cmp	r3, #100	; 0x64
900056d2:	d903      	bls.n	900056dc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
900056d4:	2303      	movs	r3, #3
900056d6:	e0ba      	b.n	9000584e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
900056d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
900056dc:	4b5e      	ldr	r3, [pc, #376]	; (90005858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
900056de:	681b      	ldr	r3, [r3, #0]
900056e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
900056e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900056e8:	d0ed      	beq.n	900056c6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
900056ea:	687b      	ldr	r3, [r7, #4]
900056ec:	681b      	ldr	r3, [r3, #0]
900056ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
900056f2:	2b00      	cmp	r3, #0
900056f4:	d003      	beq.n	900056fe <HAL_RCCEx_PeriphCLKConfig+0x682>
900056f6:	687b      	ldr	r3, [r7, #4]
900056f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900056fa:	2b00      	cmp	r3, #0
900056fc:	d009      	beq.n	90005712 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
900056fe:	687b      	ldr	r3, [r7, #4]
90005700:	681b      	ldr	r3, [r3, #0]
90005702:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
90005706:	2b00      	cmp	r3, #0
90005708:	d02e      	beq.n	90005768 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
9000570a:	687b      	ldr	r3, [r7, #4]
9000570c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000570e:	2b00      	cmp	r3, #0
90005710:	d12a      	bne.n	90005768 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
90005712:	4b51      	ldr	r3, [pc, #324]	; (90005858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
90005714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90005718:	0c1b      	lsrs	r3, r3, #16
9000571a:	f003 0303 	and.w	r3, r3, #3
9000571e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
90005720:	4b4d      	ldr	r3, [pc, #308]	; (90005858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
90005722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90005726:	0f1b      	lsrs	r3, r3, #28
90005728:	f003 0307 	and.w	r3, r3, #7
9000572c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
9000572e:	687b      	ldr	r3, [r7, #4]
90005730:	695b      	ldr	r3, [r3, #20]
90005732:	019a      	lsls	r2, r3, #6
90005734:	693b      	ldr	r3, [r7, #16]
90005736:	041b      	lsls	r3, r3, #16
90005738:	431a      	orrs	r2, r3
9000573a:	687b      	ldr	r3, [r7, #4]
9000573c:	699b      	ldr	r3, [r3, #24]
9000573e:	061b      	lsls	r3, r3, #24
90005740:	431a      	orrs	r2, r3
90005742:	68fb      	ldr	r3, [r7, #12]
90005744:	071b      	lsls	r3, r3, #28
90005746:	4944      	ldr	r1, [pc, #272]	; (90005858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
90005748:	4313      	orrs	r3, r2
9000574a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
9000574e:	4b42      	ldr	r3, [pc, #264]	; (90005858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
90005750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90005754:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
90005758:	687b      	ldr	r3, [r7, #4]
9000575a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000575c:	3b01      	subs	r3, #1
9000575e:	021b      	lsls	r3, r3, #8
90005760:	493d      	ldr	r1, [pc, #244]	; (90005858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
90005762:	4313      	orrs	r3, r2
90005764:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
90005768:	687b      	ldr	r3, [r7, #4]
9000576a:	681b      	ldr	r3, [r3, #0]
9000576c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90005770:	2b00      	cmp	r3, #0
90005772:	d022      	beq.n	900057ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
90005774:	687b      	ldr	r3, [r7, #4]
90005776:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90005778:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
9000577c:	d11d      	bne.n	900057ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
9000577e:	4b36      	ldr	r3, [pc, #216]	; (90005858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
90005780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90005784:	0e1b      	lsrs	r3, r3, #24
90005786:	f003 030f 	and.w	r3, r3, #15
9000578a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
9000578c:	4b32      	ldr	r3, [pc, #200]	; (90005858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
9000578e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90005792:	0f1b      	lsrs	r3, r3, #28
90005794:	f003 0307 	and.w	r3, r3, #7
90005798:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
9000579a:	687b      	ldr	r3, [r7, #4]
9000579c:	695b      	ldr	r3, [r3, #20]
9000579e:	019a      	lsls	r2, r3, #6
900057a0:	687b      	ldr	r3, [r7, #4]
900057a2:	6a1b      	ldr	r3, [r3, #32]
900057a4:	041b      	lsls	r3, r3, #16
900057a6:	431a      	orrs	r2, r3
900057a8:	693b      	ldr	r3, [r7, #16]
900057aa:	061b      	lsls	r3, r3, #24
900057ac:	431a      	orrs	r2, r3
900057ae:	68fb      	ldr	r3, [r7, #12]
900057b0:	071b      	lsls	r3, r3, #28
900057b2:	4929      	ldr	r1, [pc, #164]	; (90005858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
900057b4:	4313      	orrs	r3, r2
900057b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
900057ba:	687b      	ldr	r3, [r7, #4]
900057bc:	681b      	ldr	r3, [r3, #0]
900057be:	f003 0308 	and.w	r3, r3, #8
900057c2:	2b00      	cmp	r3, #0
900057c4:	d028      	beq.n	90005818 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
900057c6:	4b24      	ldr	r3, [pc, #144]	; (90005858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
900057c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
900057cc:	0e1b      	lsrs	r3, r3, #24
900057ce:	f003 030f 	and.w	r3, r3, #15
900057d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
900057d4:	4b20      	ldr	r3, [pc, #128]	; (90005858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
900057d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
900057da:	0c1b      	lsrs	r3, r3, #16
900057dc:	f003 0303 	and.w	r3, r3, #3
900057e0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
900057e2:	687b      	ldr	r3, [r7, #4]
900057e4:	695b      	ldr	r3, [r3, #20]
900057e6:	019a      	lsls	r2, r3, #6
900057e8:	68fb      	ldr	r3, [r7, #12]
900057ea:	041b      	lsls	r3, r3, #16
900057ec:	431a      	orrs	r2, r3
900057ee:	693b      	ldr	r3, [r7, #16]
900057f0:	061b      	lsls	r3, r3, #24
900057f2:	431a      	orrs	r2, r3
900057f4:	687b      	ldr	r3, [r7, #4]
900057f6:	69db      	ldr	r3, [r3, #28]
900057f8:	071b      	lsls	r3, r3, #28
900057fa:	4917      	ldr	r1, [pc, #92]	; (90005858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
900057fc:	4313      	orrs	r3, r2
900057fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
90005802:	4b15      	ldr	r3, [pc, #84]	; (90005858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
90005804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90005808:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
9000580c:	687b      	ldr	r3, [r7, #4]
9000580e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90005810:	4911      	ldr	r1, [pc, #68]	; (90005858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
90005812:	4313      	orrs	r3, r2
90005814:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
90005818:	4b0f      	ldr	r3, [pc, #60]	; (90005858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
9000581a:	681b      	ldr	r3, [r3, #0]
9000581c:	4a0e      	ldr	r2, [pc, #56]	; (90005858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
9000581e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90005822:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90005824:	f7fd f84c 	bl	900028c0 <HAL_GetTick>
90005828:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
9000582a:	e008      	b.n	9000583e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
9000582c:	f7fd f848 	bl	900028c0 <HAL_GetTick>
90005830:	4602      	mov	r2, r0
90005832:	697b      	ldr	r3, [r7, #20]
90005834:	1ad3      	subs	r3, r2, r3
90005836:	2b64      	cmp	r3, #100	; 0x64
90005838:	d901      	bls.n	9000583e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
9000583a:	2303      	movs	r3, #3
9000583c:	e007      	b.n	9000584e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
9000583e:	4b06      	ldr	r3, [pc, #24]	; (90005858 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
90005840:	681b      	ldr	r3, [r3, #0]
90005842:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90005846:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
9000584a:	d1ef      	bne.n	9000582c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
9000584c:	2300      	movs	r3, #0
}
9000584e:	4618      	mov	r0, r3
90005850:	3720      	adds	r7, #32
90005852:	46bd      	mov	sp, r7
90005854:	bd80      	pop	{r7, pc}
90005856:	bf00      	nop
90005858:	40023800 	.word	0x40023800

9000585c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
9000585c:	b580      	push	{r7, lr}
9000585e:	b082      	sub	sp, #8
90005860:	af00      	add	r7, sp, #0
90005862:	6078      	str	r0, [r7, #4]
90005864:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
90005866:	687b      	ldr	r3, [r7, #4]
90005868:	2b00      	cmp	r3, #0
9000586a:	d101      	bne.n	90005870 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
9000586c:	2301      	movs	r3, #1
9000586e:	e025      	b.n	900058bc <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
90005870:	687b      	ldr	r3, [r7, #4]
90005872:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
90005876:	b2db      	uxtb	r3, r3
90005878:	2b00      	cmp	r3, #0
9000587a:	d106      	bne.n	9000588a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
9000587c:	687b      	ldr	r3, [r7, #4]
9000587e:	2200      	movs	r2, #0
90005880:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
90005884:	6878      	ldr	r0, [r7, #4]
90005886:	f000 f81d 	bl	900058c4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
9000588a:	687b      	ldr	r3, [r7, #4]
9000588c:	2202      	movs	r2, #2
9000588e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
90005892:	687b      	ldr	r3, [r7, #4]
90005894:	681a      	ldr	r2, [r3, #0]
90005896:	687b      	ldr	r3, [r7, #4]
90005898:	3304      	adds	r3, #4
9000589a:	4619      	mov	r1, r3
9000589c:	4610      	mov	r0, r2
9000589e:	f000 f867 	bl	90005970 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
900058a2:	687b      	ldr	r3, [r7, #4]
900058a4:	6818      	ldr	r0, [r3, #0]
900058a6:	687b      	ldr	r3, [r7, #4]
900058a8:	685b      	ldr	r3, [r3, #4]
900058aa:	461a      	mov	r2, r3
900058ac:	6839      	ldr	r1, [r7, #0]
900058ae:	f000 f8d1 	bl	90005a54 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
900058b2:	687b      	ldr	r3, [r7, #4]
900058b4:	2201      	movs	r2, #1
900058b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
900058ba:	2300      	movs	r3, #0
}
900058bc:	4618      	mov	r0, r3
900058be:	3708      	adds	r7, #8
900058c0:	46bd      	mov	sp, r7
900058c2:	bd80      	pop	{r7, pc}

900058c4 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
900058c4:	b480      	push	{r7}
900058c6:	b083      	sub	sp, #12
900058c8:	af00      	add	r7, sp, #0
900058ca:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
900058cc:	bf00      	nop
900058ce:	370c      	adds	r7, #12
900058d0:	46bd      	mov	sp, r7
900058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
900058d6:	4770      	bx	lr

900058d8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
900058d8:	b580      	push	{r7, lr}
900058da:	b084      	sub	sp, #16
900058dc:	af00      	add	r7, sp, #0
900058de:	60f8      	str	r0, [r7, #12]
900058e0:	60b9      	str	r1, [r7, #8]
900058e2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
900058e4:	68fb      	ldr	r3, [r7, #12]
900058e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
900058ea:	b2db      	uxtb	r3, r3
900058ec:	2b02      	cmp	r3, #2
900058ee:	d101      	bne.n	900058f4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
900058f0:	2302      	movs	r3, #2
900058f2:	e018      	b.n	90005926 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
900058f4:	68fb      	ldr	r3, [r7, #12]
900058f6:	2202      	movs	r2, #2
900058f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
900058fc:	68fb      	ldr	r3, [r7, #12]
900058fe:	681b      	ldr	r3, [r3, #0]
90005900:	687a      	ldr	r2, [r7, #4]
90005902:	68b9      	ldr	r1, [r7, #8]
90005904:	4618      	mov	r0, r3
90005906:	f000 f925 	bl	90005b54 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000590a:	68bb      	ldr	r3, [r7, #8]
9000590c:	681b      	ldr	r3, [r3, #0]
9000590e:	2b02      	cmp	r3, #2
90005910:	d104      	bne.n	9000591c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
90005912:	68fb      	ldr	r3, [r7, #12]
90005914:	2205      	movs	r2, #5
90005916:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
9000591a:	e003      	b.n	90005924 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
9000591c:	68fb      	ldr	r3, [r7, #12]
9000591e:	2201      	movs	r2, #1
90005920:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
90005924:	2300      	movs	r3, #0
}
90005926:	4618      	mov	r0, r3
90005928:	3710      	adds	r7, #16
9000592a:	46bd      	mov	sp, r7
9000592c:	bd80      	pop	{r7, pc}

9000592e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
9000592e:	b580      	push	{r7, lr}
90005930:	b082      	sub	sp, #8
90005932:	af00      	add	r7, sp, #0
90005934:	6078      	str	r0, [r7, #4]
90005936:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
90005938:	687b      	ldr	r3, [r7, #4]
9000593a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
9000593e:	b2db      	uxtb	r3, r3
90005940:	2b02      	cmp	r3, #2
90005942:	d101      	bne.n	90005948 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
90005944:	2302      	movs	r3, #2
90005946:	e00e      	b.n	90005966 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90005948:	687b      	ldr	r3, [r7, #4]
9000594a:	2202      	movs	r2, #2
9000594c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
90005950:	687b      	ldr	r3, [r7, #4]
90005952:	681b      	ldr	r3, [r3, #0]
90005954:	6839      	ldr	r1, [r7, #0]
90005956:	4618      	mov	r0, r3
90005958:	f000 f920 	bl	90005b9c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
9000595c:	687b      	ldr	r3, [r7, #4]
9000595e:	2201      	movs	r2, #1
90005960:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
90005964:	2300      	movs	r3, #0
}
90005966:	4618      	mov	r0, r3
90005968:	3708      	adds	r7, #8
9000596a:	46bd      	mov	sp, r7
9000596c:	bd80      	pop	{r7, pc}
	...

90005970 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
90005970:	b480      	push	{r7}
90005972:	b085      	sub	sp, #20
90005974:	af00      	add	r7, sp, #0
90005976:	6078      	str	r0, [r7, #4]
90005978:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
9000597a:	2300      	movs	r3, #0
9000597c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
9000597e:	2300      	movs	r3, #0
90005980:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
90005982:	683b      	ldr	r3, [r7, #0]
90005984:	681b      	ldr	r3, [r3, #0]
90005986:	2b01      	cmp	r3, #1
90005988:	d027      	beq.n	900059da <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
9000598a:	687b      	ldr	r3, [r7, #4]
9000598c:	681b      	ldr	r3, [r3, #0]
9000598e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
90005990:	68fa      	ldr	r2, [r7, #12]
90005992:	4b2f      	ldr	r3, [pc, #188]	; (90005a50 <FMC_SDRAM_Init+0xe0>)
90005994:	4013      	ands	r3, r2
90005996:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
90005998:	683b      	ldr	r3, [r7, #0]
9000599a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
9000599c:	683b      	ldr	r3, [r7, #0]
9000599e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
900059a0:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
900059a2:	683b      	ldr	r3, [r7, #0]
900059a4:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
900059a6:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
900059a8:	683b      	ldr	r3, [r7, #0]
900059aa:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
900059ac:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
900059ae:	683b      	ldr	r3, [r7, #0]
900059b0:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
900059b2:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
900059b4:	683b      	ldr	r3, [r7, #0]
900059b6:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
900059b8:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
900059ba:	683b      	ldr	r3, [r7, #0]
900059bc:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
900059be:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
900059c0:	683b      	ldr	r3, [r7, #0]
900059c2:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
900059c4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
900059c6:	683b      	ldr	r3, [r7, #0]
900059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
900059ca:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
900059cc:	68fa      	ldr	r2, [r7, #12]
900059ce:	4313      	orrs	r3, r2
900059d0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
900059d2:	687b      	ldr	r3, [r7, #4]
900059d4:	68fa      	ldr	r2, [r7, #12]
900059d6:	601a      	str	r2, [r3, #0]
900059d8:	e032      	b.n	90005a40 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
900059da:	687b      	ldr	r3, [r7, #4]
900059dc:	681b      	ldr	r3, [r3, #0]
900059de:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
900059e0:	68fb      	ldr	r3, [r7, #12]
900059e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
900059e6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
900059e8:	683b      	ldr	r3, [r7, #0]
900059ea:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
900059ec:	683b      	ldr	r3, [r7, #0]
900059ee:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
900059f0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
900059f2:	683b      	ldr	r3, [r7, #0]
900059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
900059f6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
900059f8:	68fa      	ldr	r2, [r7, #12]
900059fa:	4313      	orrs	r3, r2
900059fc:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
900059fe:	687b      	ldr	r3, [r7, #4]
90005a00:	685b      	ldr	r3, [r3, #4]
90005a02:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
90005a04:	68ba      	ldr	r2, [r7, #8]
90005a06:	4b12      	ldr	r3, [pc, #72]	; (90005a50 <FMC_SDRAM_Init+0xe0>)
90005a08:	4013      	ands	r3, r2
90005a0a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
90005a0c:	683b      	ldr	r3, [r7, #0]
90005a0e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
90005a10:	683b      	ldr	r3, [r7, #0]
90005a12:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
90005a14:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
90005a16:	683b      	ldr	r3, [r7, #0]
90005a18:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
90005a1a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
90005a1c:	683b      	ldr	r3, [r7, #0]
90005a1e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
90005a20:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
90005a22:	683b      	ldr	r3, [r7, #0]
90005a24:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
90005a26:	431a      	orrs	r2, r3
                       Init->WriteProtection);
90005a28:	683b      	ldr	r3, [r7, #0]
90005a2a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
90005a2c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
90005a2e:	68ba      	ldr	r2, [r7, #8]
90005a30:	4313      	orrs	r3, r2
90005a32:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
90005a34:	687b      	ldr	r3, [r7, #4]
90005a36:	68fa      	ldr	r2, [r7, #12]
90005a38:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
90005a3a:	687b      	ldr	r3, [r7, #4]
90005a3c:	68ba      	ldr	r2, [r7, #8]
90005a3e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
90005a40:	2300      	movs	r3, #0
}
90005a42:	4618      	mov	r0, r3
90005a44:	3714      	adds	r7, #20
90005a46:	46bd      	mov	sp, r7
90005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
90005a4c:	4770      	bx	lr
90005a4e:	bf00      	nop
90005a50:	ffff8000 	.word	0xffff8000

90005a54 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
90005a54:	b480      	push	{r7}
90005a56:	b087      	sub	sp, #28
90005a58:	af00      	add	r7, sp, #0
90005a5a:	60f8      	str	r0, [r7, #12]
90005a5c:	60b9      	str	r1, [r7, #8]
90005a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
90005a60:	2300      	movs	r3, #0
90005a62:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
90005a64:	2300      	movs	r3, #0
90005a66:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
90005a68:	687b      	ldr	r3, [r7, #4]
90005a6a:	2b01      	cmp	r3, #1
90005a6c:	d02e      	beq.n	90005acc <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
90005a6e:	68fb      	ldr	r3, [r7, #12]
90005a70:	689b      	ldr	r3, [r3, #8]
90005a72:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
90005a74:	697b      	ldr	r3, [r7, #20]
90005a76:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
90005a7a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90005a7c:	68bb      	ldr	r3, [r7, #8]
90005a7e:	681b      	ldr	r3, [r3, #0]
90005a80:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
90005a82:	68bb      	ldr	r3, [r7, #8]
90005a84:	685b      	ldr	r3, [r3, #4]
90005a86:	3b01      	subs	r3, #1
90005a88:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90005a8a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
90005a8c:	68bb      	ldr	r3, [r7, #8]
90005a8e:	689b      	ldr	r3, [r3, #8]
90005a90:	3b01      	subs	r3, #1
90005a92:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
90005a94:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
90005a96:	68bb      	ldr	r3, [r7, #8]
90005a98:	68db      	ldr	r3, [r3, #12]
90005a9a:	3b01      	subs	r3, #1
90005a9c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
90005a9e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
90005aa0:	68bb      	ldr	r3, [r7, #8]
90005aa2:	691b      	ldr	r3, [r3, #16]
90005aa4:	3b01      	subs	r3, #1
90005aa6:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
90005aa8:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
90005aaa:	68bb      	ldr	r3, [r7, #8]
90005aac:	695b      	ldr	r3, [r3, #20]
90005aae:	3b01      	subs	r3, #1
90005ab0:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
90005ab2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
90005ab4:	68bb      	ldr	r3, [r7, #8]
90005ab6:	699b      	ldr	r3, [r3, #24]
90005ab8:	3b01      	subs	r3, #1
90005aba:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90005abc:	4313      	orrs	r3, r2
90005abe:	697a      	ldr	r2, [r7, #20]
90005ac0:	4313      	orrs	r3, r2
90005ac2:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
90005ac4:	68fb      	ldr	r3, [r7, #12]
90005ac6:	697a      	ldr	r2, [r7, #20]
90005ac8:	609a      	str	r2, [r3, #8]
90005aca:	e039      	b.n	90005b40 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
90005acc:	68fb      	ldr	r3, [r7, #12]
90005ace:	689b      	ldr	r3, [r3, #8]
90005ad0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
90005ad2:	697a      	ldr	r2, [r7, #20]
90005ad4:	4b1e      	ldr	r3, [pc, #120]	; (90005b50 <FMC_SDRAM_Timing_Init+0xfc>)
90005ad6:	4013      	ands	r3, r2
90005ad8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
90005ada:	68bb      	ldr	r3, [r7, #8]
90005adc:	68db      	ldr	r3, [r3, #12]
90005ade:	3b01      	subs	r3, #1
90005ae0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
90005ae2:	68bb      	ldr	r3, [r7, #8]
90005ae4:	695b      	ldr	r3, [r3, #20]
90005ae6:	3b01      	subs	r3, #1
90005ae8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
90005aea:	4313      	orrs	r3, r2
90005aec:	697a      	ldr	r2, [r7, #20]
90005aee:	4313      	orrs	r3, r2
90005af0:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
90005af2:	68fb      	ldr	r3, [r7, #12]
90005af4:	68db      	ldr	r3, [r3, #12]
90005af6:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
90005af8:	693b      	ldr	r3, [r7, #16]
90005afa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
90005afe:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90005b00:	68bb      	ldr	r3, [r7, #8]
90005b02:	681b      	ldr	r3, [r3, #0]
90005b04:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
90005b06:	68bb      	ldr	r3, [r7, #8]
90005b08:	685b      	ldr	r3, [r3, #4]
90005b0a:	3b01      	subs	r3, #1
90005b0c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90005b0e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
90005b10:	68bb      	ldr	r3, [r7, #8]
90005b12:	689b      	ldr	r3, [r3, #8]
90005b14:	3b01      	subs	r3, #1
90005b16:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
90005b18:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
90005b1a:	68bb      	ldr	r3, [r7, #8]
90005b1c:	691b      	ldr	r3, [r3, #16]
90005b1e:	3b01      	subs	r3, #1
90005b20:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
90005b22:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
90005b24:	68bb      	ldr	r3, [r7, #8]
90005b26:	699b      	ldr	r3, [r3, #24]
90005b28:	3b01      	subs	r3, #1
90005b2a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90005b2c:	4313      	orrs	r3, r2
90005b2e:	693a      	ldr	r2, [r7, #16]
90005b30:	4313      	orrs	r3, r2
90005b32:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
90005b34:	68fb      	ldr	r3, [r7, #12]
90005b36:	697a      	ldr	r2, [r7, #20]
90005b38:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
90005b3a:	68fb      	ldr	r3, [r7, #12]
90005b3c:	693a      	ldr	r2, [r7, #16]
90005b3e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
90005b40:	2300      	movs	r3, #0
}
90005b42:	4618      	mov	r0, r3
90005b44:	371c      	adds	r7, #28
90005b46:	46bd      	mov	sp, r7
90005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
90005b4c:	4770      	bx	lr
90005b4e:	bf00      	nop
90005b50:	ff0f0fff 	.word	0xff0f0fff

90005b54 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
90005b54:	b480      	push	{r7}
90005b56:	b085      	sub	sp, #20
90005b58:	af00      	add	r7, sp, #0
90005b5a:	60f8      	str	r0, [r7, #12]
90005b5c:	60b9      	str	r1, [r7, #8]
90005b5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
90005b60:	68fb      	ldr	r3, [r7, #12]
90005b62:	691a      	ldr	r2, [r3, #16]
90005b64:	4b0c      	ldr	r3, [pc, #48]	; (90005b98 <FMC_SDRAM_SendCommand+0x44>)
90005b66:	4013      	ands	r3, r2
90005b68:	68ba      	ldr	r2, [r7, #8]
90005b6a:	6811      	ldr	r1, [r2, #0]
90005b6c:	68ba      	ldr	r2, [r7, #8]
90005b6e:	6852      	ldr	r2, [r2, #4]
90005b70:	4311      	orrs	r1, r2
90005b72:	68ba      	ldr	r2, [r7, #8]
90005b74:	6892      	ldr	r2, [r2, #8]
90005b76:	3a01      	subs	r2, #1
90005b78:	0152      	lsls	r2, r2, #5
90005b7a:	4311      	orrs	r1, r2
90005b7c:	68ba      	ldr	r2, [r7, #8]
90005b7e:	68d2      	ldr	r2, [r2, #12]
90005b80:	0252      	lsls	r2, r2, #9
90005b82:	430a      	orrs	r2, r1
90005b84:	431a      	orrs	r2, r3
90005b86:	68fb      	ldr	r3, [r7, #12]
90005b88:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
90005b8a:	2300      	movs	r3, #0
}
90005b8c:	4618      	mov	r0, r3
90005b8e:	3714      	adds	r7, #20
90005b90:	46bd      	mov	sp, r7
90005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
90005b96:	4770      	bx	lr
90005b98:	ffc00000 	.word	0xffc00000

90005b9c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
90005b9c:	b480      	push	{r7}
90005b9e:	b083      	sub	sp, #12
90005ba0:	af00      	add	r7, sp, #0
90005ba2:	6078      	str	r0, [r7, #4]
90005ba4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
90005ba6:	687b      	ldr	r3, [r7, #4]
90005ba8:	695a      	ldr	r2, [r3, #20]
90005baa:	683b      	ldr	r3, [r7, #0]
90005bac:	005b      	lsls	r3, r3, #1
90005bae:	431a      	orrs	r2, r3
90005bb0:	687b      	ldr	r3, [r7, #4]
90005bb2:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
90005bb4:	2300      	movs	r3, #0
}
90005bb6:	4618      	mov	r0, r3
90005bb8:	370c      	adds	r7, #12
90005bba:	46bd      	mov	sp, r7
90005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
90005bc0:	4770      	bx	lr
	...

90005bc4 <_ZN15LCD_DISCO_F7508C1Ev>:
*/

#include "LCD_DISCO_F7508.h"

// Constructor
LCD_DISCO_F7508::LCD_DISCO_F7508()
90005bc4:	b590      	push	{r4, r7, lr}
90005bc6:	b083      	sub	sp, #12
90005bc8:	af00      	add	r7, sp, #0
90005bca:	6078      	str	r0, [r7, #4]
{
  BSP_LCD_Init();
90005bcc:	f7fb fbf4 	bl	900013b8 <BSP_LCD_Init>
  
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
90005bd0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
90005bd4:	2000      	movs	r0, #0
90005bd6:	f7fb fc87 	bl	900014e8 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+(BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4));
90005bda:	f7fb fc5d 	bl	90001498 <BSP_LCD_GetXSize>
90005bde:	4604      	mov	r4, r0
90005be0:	f7fb fc6e 	bl	900014c0 <BSP_LCD_GetYSize>
90005be4:	4603      	mov	r3, r0
90005be6:	fb03 f304 	mul.w	r3, r3, r4
90005bea:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
90005bee:	009b      	lsls	r3, r3, #2
90005bf0:	4619      	mov	r1, r3
90005bf2:	2001      	movs	r0, #1
90005bf4:	f7fb fc78 	bl	900014e8 <BSP_LCD_LayerDefaultInit>
  
  BSP_LCD_DisplayOn();
90005bf8:	f7fb ffa2 	bl	90001b40 <BSP_LCD_DisplayOn>
  
  BSP_LCD_SelectLayer(0);
90005bfc:	2000      	movs	r0, #0
90005bfe:	f7fb fcd3 	bl	900015a8 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
90005c02:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
90005c06:	f7fb fd41 	bl	9000168c <BSP_LCD_Clear>

  BSP_LCD_SelectLayer(1);
90005c0a:	2001      	movs	r0, #1
90005c0c:	f7fb fccc 	bl	900015a8 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
90005c10:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
90005c14:	f7fb fd3a 	bl	9000168c <BSP_LCD_Clear>
  
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
90005c18:	4807      	ldr	r0, [pc, #28]	; (90005c38 <_ZN15LCD_DISCO_F7508C1Ev+0x74>)
90005c1a:	f7fb fd07 	bl	9000162c <BSP_LCD_SetFont>
  
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
90005c1e:	f04f 30ff 	mov.w	r0, #4294967295
90005c22:	f7fb fce9 	bl	900015f8 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
90005c26:	4805      	ldr	r0, [pc, #20]	; (90005c3c <_ZN15LCD_DISCO_F7508C1Ev+0x78>)
90005c28:	f7fb fcce 	bl	900015c8 <BSP_LCD_SetTextColor>
}
90005c2c:	687b      	ldr	r3, [r7, #4]
90005c2e:	4618      	mov	r0, r3
90005c30:	370c      	adds	r7, #12
90005c32:	46bd      	mov	sp, r7
90005c34:	bd90      	pop	{r4, r7, pc}
90005c36:	bf00      	nop
90005c38:	2000002c 	.word	0x2000002c
90005c3c:	ff000080 	.word	0xff000080

90005c40 <_ZN15LCD_DISCO_F75088GetXSizeEv>:
{
  return BSP_LCD_DeInit();
}

uint32_t LCD_DISCO_F7508::GetXSize(void)
{
90005c40:	b580      	push	{r7, lr}
90005c42:	b082      	sub	sp, #8
90005c44:	af00      	add	r7, sp, #0
90005c46:	6078      	str	r0, [r7, #4]
  return BSP_LCD_GetXSize();
90005c48:	f7fb fc26 	bl	90001498 <BSP_LCD_GetXSize>
90005c4c:	4603      	mov	r3, r0
}
90005c4e:	4618      	mov	r0, r3
90005c50:	3708      	adds	r7, #8
90005c52:	46bd      	mov	sp, r7
90005c54:	bd80      	pop	{r7, pc}

90005c56 <_ZN15LCD_DISCO_F75088GetYSizeEv>:

uint32_t LCD_DISCO_F7508::GetYSize(void)
{
90005c56:	b580      	push	{r7, lr}
90005c58:	b082      	sub	sp, #8
90005c5a:	af00      	add	r7, sp, #0
90005c5c:	6078      	str	r0, [r7, #4]
  return BSP_LCD_GetYSize();
90005c5e:	f7fb fc2f 	bl	900014c0 <BSP_LCD_GetYSize>
90005c62:	4603      	mov	r3, r0
}
90005c64:	4618      	mov	r0, r3
90005c66:	3708      	adds	r7, #8
90005c68:	46bd      	mov	sp, r7
90005c6a:	bd80      	pop	{r7, pc}

90005c6c <_ZN15LCD_DISCO_F750812SetTextColorEm>:
{
  BSP_LCD_SetLayerVisible(LayerIndex, State);
}

void LCD_DISCO_F7508::SetTextColor(uint32_t Color)
{
90005c6c:	b580      	push	{r7, lr}
90005c6e:	b082      	sub	sp, #8
90005c70:	af00      	add	r7, sp, #0
90005c72:	6078      	str	r0, [r7, #4]
90005c74:	6039      	str	r1, [r7, #0]
  BSP_LCD_SetTextColor(Color);
90005c76:	6838      	ldr	r0, [r7, #0]
90005c78:	f7fb fca6 	bl	900015c8 <BSP_LCD_SetTextColor>
}
90005c7c:	bf00      	nop
90005c7e:	3708      	adds	r7, #8
90005c80:	46bd      	mov	sp, r7
90005c82:	bd80      	pop	{r7, pc}

90005c84 <_ZN15LCD_DISCO_F750812SetBackColorEm>:
{
  return BSP_LCD_GetTextColor();
}

void LCD_DISCO_F7508::SetBackColor(uint32_t Color)
{
90005c84:	b580      	push	{r7, lr}
90005c86:	b082      	sub	sp, #8
90005c88:	af00      	add	r7, sp, #0
90005c8a:	6078      	str	r0, [r7, #4]
90005c8c:	6039      	str	r1, [r7, #0]
  BSP_LCD_SetBackColor(Color);
90005c8e:	6838      	ldr	r0, [r7, #0]
90005c90:	f7fb fcb2 	bl	900015f8 <BSP_LCD_SetBackColor>
}
90005c94:	bf00      	nop
90005c96:	3708      	adds	r7, #8
90005c98:	46bd      	mov	sp, r7
90005c9a:	bd80      	pop	{r7, pc}

90005c9c <_ZN15LCD_DISCO_F75087SetFontEP6_tFont>:
{
  return BSP_LCD_GetBackColor();
}

void LCD_DISCO_F7508::SetFont(sFONT *fonts)
{
90005c9c:	b580      	push	{r7, lr}
90005c9e:	b082      	sub	sp, #8
90005ca0:	af00      	add	r7, sp, #0
90005ca2:	6078      	str	r0, [r7, #4]
90005ca4:	6039      	str	r1, [r7, #0]
  BSP_LCD_SetFont(fonts);
90005ca6:	6838      	ldr	r0, [r7, #0]
90005ca8:	f7fb fcc0 	bl	9000162c <BSP_LCD_SetFont>
}
90005cac:	bf00      	nop
90005cae:	3708      	adds	r7, #8
90005cb0:	46bd      	mov	sp, r7
90005cb2:	bd80      	pop	{r7, pc}

90005cb4 <_ZN15LCD_DISCO_F75089DrawPixelEttm>:
{
  return BSP_LCD_ReadPixel(Xpos, Ypos);
}

void LCD_DISCO_F7508::DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t pixel)
{
90005cb4:	b580      	push	{r7, lr}
90005cb6:	b084      	sub	sp, #16
90005cb8:	af00      	add	r7, sp, #0
90005cba:	60f8      	str	r0, [r7, #12]
90005cbc:	607b      	str	r3, [r7, #4]
90005cbe:	460b      	mov	r3, r1
90005cc0:	817b      	strh	r3, [r7, #10]
90005cc2:	4613      	mov	r3, r2
90005cc4:	813b      	strh	r3, [r7, #8]
  BSP_LCD_DrawPixel(Xpos, Ypos, pixel);
90005cc6:	8939      	ldrh	r1, [r7, #8]
90005cc8:	897b      	ldrh	r3, [r7, #10]
90005cca:	687a      	ldr	r2, [r7, #4]
90005ccc:	4618      	mov	r0, r3
90005cce:	f7fb fe75 	bl	900019bc <BSP_LCD_DrawPixel>
}
90005cd2:	bf00      	nop
90005cd4:	3710      	adds	r7, #16
90005cd6:	46bd      	mov	sp, r7
90005cd8:	bd80      	pop	{r7, pc}

90005cda <_ZN15LCD_DISCO_F75085ClearEm>:

void LCD_DISCO_F7508::Clear(uint32_t Color)
{
90005cda:	b580      	push	{r7, lr}
90005cdc:	b082      	sub	sp, #8
90005cde:	af00      	add	r7, sp, #0
90005ce0:	6078      	str	r0, [r7, #4]
90005ce2:	6039      	str	r1, [r7, #0]
  BSP_LCD_Clear(Color);
90005ce4:	6838      	ldr	r0, [r7, #0]
90005ce6:	f7fb fcd1 	bl	9000168c <BSP_LCD_Clear>
}
90005cea:	bf00      	nop
90005cec:	3708      	adds	r7, #8
90005cee:	46bd      	mov	sp, r7
90005cf0:	bd80      	pop	{r7, pc}

90005cf2 <_ZN15LCD_DISCO_F750815ClearStringLineEm>:

void LCD_DISCO_F7508::ClearStringLine(uint32_t Line)
{
90005cf2:	b580      	push	{r7, lr}
90005cf4:	b082      	sub	sp, #8
90005cf6:	af00      	add	r7, sp, #0
90005cf8:	6078      	str	r0, [r7, #4]
90005cfa:	6039      	str	r1, [r7, #0]
  BSP_LCD_ClearStringLine(Line);
90005cfc:	6838      	ldr	r0, [r7, #0]
90005cfe:	f7fb fced 	bl	900016dc <BSP_LCD_ClearStringLine>
}
90005d02:	bf00      	nop
90005d04:	3708      	adds	r7, #8
90005d06:	46bd      	mov	sp, r7
90005d08:	bd80      	pop	{r7, pc}

90005d0a <_ZN15LCD_DISCO_F750815DisplayStringAtEttPh20Text_AlignModeTypdef>:
{
  BSP_LCD_DisplayStringAtLine(Line, ptr);
}

void LCD_DISCO_F7508::DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
90005d0a:	b580      	push	{r7, lr}
90005d0c:	b084      	sub	sp, #16
90005d0e:	af00      	add	r7, sp, #0
90005d10:	60f8      	str	r0, [r7, #12]
90005d12:	607b      	str	r3, [r7, #4]
90005d14:	460b      	mov	r3, r1
90005d16:	817b      	strh	r3, [r7, #10]
90005d18:	4613      	mov	r3, r2
90005d1a:	813b      	strh	r3, [r7, #8]
  BSP_LCD_DisplayStringAt(Xpos, Ypos, Text, Mode);
90005d1c:	7e3b      	ldrb	r3, [r7, #24]
90005d1e:	8939      	ldrh	r1, [r7, #8]
90005d20:	8978      	ldrh	r0, [r7, #10]
90005d22:	687a      	ldr	r2, [r7, #4]
90005d24:	f7fb fd82 	bl	9000182c <BSP_LCD_DisplayStringAt>
}
90005d28:	bf00      	nop
90005d2a:	3710      	adds	r7, #16
90005d2c:	46bd      	mov	sp, r7
90005d2e:	bd80      	pop	{r7, pc}

90005d30 <_ZN14TS_DISCO_F7508C1Ev>:

#include "TS_DISCO_F7508.h"
#include "stm32f7508_discovery_ts.h"

// Constructor
TS_DISCO_F7508::TS_DISCO_F7508()
90005d30:	b580      	push	{r7, lr}
90005d32:	b082      	sub	sp, #8
90005d34:	af00      	add	r7, sp, #0
90005d36:	6078      	str	r0, [r7, #4]
{
  BSP_TS_Init(100, 100);
90005d38:	2164      	movs	r1, #100	; 0x64
90005d3a:	2064      	movs	r0, #100	; 0x64
90005d3c:	f7fc face 	bl	900022dc <BSP_TS_Init>
}
90005d40:	687b      	ldr	r3, [r7, #4]
90005d42:	4618      	mov	r0, r3
90005d44:	3708      	adds	r7, #8
90005d46:	46bd      	mov	sp, r7
90005d48:	bd80      	pop	{r7, pc}

90005d4a <_ZN14TS_DISCO_F75084InitEtt>:
//=================================================================================================================
// Public methods
//=================================================================================================================

uint8_t TS_DISCO_F7508::Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
90005d4a:	b580      	push	{r7, lr}
90005d4c:	b082      	sub	sp, #8
90005d4e:	af00      	add	r7, sp, #0
90005d50:	6078      	str	r0, [r7, #4]
90005d52:	460b      	mov	r3, r1
90005d54:	807b      	strh	r3, [r7, #2]
90005d56:	4613      	mov	r3, r2
90005d58:	803b      	strh	r3, [r7, #0]
  return BSP_TS_Init(ts_SizeX, ts_SizeY);
90005d5a:	883a      	ldrh	r2, [r7, #0]
90005d5c:	887b      	ldrh	r3, [r7, #2]
90005d5e:	4611      	mov	r1, r2
90005d60:	4618      	mov	r0, r3
90005d62:	f7fc fabb 	bl	900022dc <BSP_TS_Init>
90005d66:	4603      	mov	r3, r0
}
90005d68:	4618      	mov	r0, r3
90005d6a:	3708      	adds	r7, #8
90005d6c:	46bd      	mov	sp, r7
90005d6e:	bd80      	pop	{r7, pc}

90005d70 <_ZN14TS_DISCO_F75088GetStateEP15TS_StateTypeDef>:
{
  return BSP_TS_ITGetStatus();
}

uint8_t TS_DISCO_F7508::GetState(TS_StateTypeDef *TS_State)
{
90005d70:	b580      	push	{r7, lr}
90005d72:	b082      	sub	sp, #8
90005d74:	af00      	add	r7, sp, #0
90005d76:	6078      	str	r0, [r7, #4]
90005d78:	6039      	str	r1, [r7, #0]
  return BSP_TS_GetState(TS_State);
90005d7a:	6838      	ldr	r0, [r7, #0]
90005d7c:	f7fc faee 	bl	9000235c <BSP_TS_GetState>
90005d80:	4603      	mov	r3, r0
}
90005d82:	4618      	mov	r0, r3
90005d84:	3708      	adds	r7, #8
90005d86:	46bd      	mov	sp, r7
90005d88:	bd80      	pop	{r7, pc}
	...

90005d8c <__errno>:
90005d8c:	4b01      	ldr	r3, [pc, #4]	; (90005d94 <__errno+0x8>)
90005d8e:	6818      	ldr	r0, [r3, #0]
90005d90:	4770      	bx	lr
90005d92:	bf00      	nop
90005d94:	20000048 	.word	0x20000048

90005d98 <__libc_init_array>:
90005d98:	b570      	push	{r4, r5, r6, lr}
90005d9a:	4d0d      	ldr	r5, [pc, #52]	; (90005dd0 <__libc_init_array+0x38>)
90005d9c:	4c0d      	ldr	r4, [pc, #52]	; (90005dd4 <__libc_init_array+0x3c>)
90005d9e:	1b64      	subs	r4, r4, r5
90005da0:	10a4      	asrs	r4, r4, #2
90005da2:	2600      	movs	r6, #0
90005da4:	42a6      	cmp	r6, r4
90005da6:	d109      	bne.n	90005dbc <__libc_init_array+0x24>
90005da8:	4d0b      	ldr	r5, [pc, #44]	; (90005dd8 <__libc_init_array+0x40>)
90005daa:	4c0c      	ldr	r4, [pc, #48]	; (90005ddc <__libc_init_array+0x44>)
90005dac:	f000 fc4e 	bl	9000664c <_init>
90005db0:	1b64      	subs	r4, r4, r5
90005db2:	10a4      	asrs	r4, r4, #2
90005db4:	2600      	movs	r6, #0
90005db6:	42a6      	cmp	r6, r4
90005db8:	d105      	bne.n	90005dc6 <__libc_init_array+0x2e>
90005dba:	bd70      	pop	{r4, r5, r6, pc}
90005dbc:	f855 3b04 	ldr.w	r3, [r5], #4
90005dc0:	4798      	blx	r3
90005dc2:	3601      	adds	r6, #1
90005dc4:	e7ee      	b.n	90005da4 <__libc_init_array+0xc>
90005dc6:	f855 3b04 	ldr.w	r3, [r5], #4
90005dca:	4798      	blx	r3
90005dcc:	3601      	adds	r6, #1
90005dce:	e7f2      	b.n	90005db6 <__libc_init_array+0x1e>
90005dd0:	90008654 	.word	0x90008654
90005dd4:	90008654 	.word	0x90008654
90005dd8:	90008654 	.word	0x90008654
90005ddc:	90008658 	.word	0x90008658

90005de0 <memset>:
90005de0:	4402      	add	r2, r0
90005de2:	4603      	mov	r3, r0
90005de4:	4293      	cmp	r3, r2
90005de6:	d100      	bne.n	90005dea <memset+0xa>
90005de8:	4770      	bx	lr
90005dea:	f803 1b01 	strb.w	r1, [r3], #1
90005dee:	e7f9      	b.n	90005de4 <memset+0x4>

90005df0 <siprintf>:
90005df0:	b40e      	push	{r1, r2, r3}
90005df2:	b500      	push	{lr}
90005df4:	b09c      	sub	sp, #112	; 0x70
90005df6:	ab1d      	add	r3, sp, #116	; 0x74
90005df8:	9002      	str	r0, [sp, #8]
90005dfa:	9006      	str	r0, [sp, #24]
90005dfc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
90005e00:	4809      	ldr	r0, [pc, #36]	; (90005e28 <siprintf+0x38>)
90005e02:	9107      	str	r1, [sp, #28]
90005e04:	9104      	str	r1, [sp, #16]
90005e06:	4909      	ldr	r1, [pc, #36]	; (90005e2c <siprintf+0x3c>)
90005e08:	f853 2b04 	ldr.w	r2, [r3], #4
90005e0c:	9105      	str	r1, [sp, #20]
90005e0e:	6800      	ldr	r0, [r0, #0]
90005e10:	9301      	str	r3, [sp, #4]
90005e12:	a902      	add	r1, sp, #8
90005e14:	f000 f868 	bl	90005ee8 <_svfiprintf_r>
90005e18:	9b02      	ldr	r3, [sp, #8]
90005e1a:	2200      	movs	r2, #0
90005e1c:	701a      	strb	r2, [r3, #0]
90005e1e:	b01c      	add	sp, #112	; 0x70
90005e20:	f85d eb04 	ldr.w	lr, [sp], #4
90005e24:	b003      	add	sp, #12
90005e26:	4770      	bx	lr
90005e28:	20000048 	.word	0x20000048
90005e2c:	ffff0208 	.word	0xffff0208

90005e30 <__ssputs_r>:
90005e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90005e34:	688e      	ldr	r6, [r1, #8]
90005e36:	429e      	cmp	r6, r3
90005e38:	4682      	mov	sl, r0
90005e3a:	460c      	mov	r4, r1
90005e3c:	4690      	mov	r8, r2
90005e3e:	461f      	mov	r7, r3
90005e40:	d838      	bhi.n	90005eb4 <__ssputs_r+0x84>
90005e42:	898a      	ldrh	r2, [r1, #12]
90005e44:	f412 6f90 	tst.w	r2, #1152	; 0x480
90005e48:	d032      	beq.n	90005eb0 <__ssputs_r+0x80>
90005e4a:	6825      	ldr	r5, [r4, #0]
90005e4c:	6909      	ldr	r1, [r1, #16]
90005e4e:	eba5 0901 	sub.w	r9, r5, r1
90005e52:	6965      	ldr	r5, [r4, #20]
90005e54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
90005e58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
90005e5c:	3301      	adds	r3, #1
90005e5e:	444b      	add	r3, r9
90005e60:	106d      	asrs	r5, r5, #1
90005e62:	429d      	cmp	r5, r3
90005e64:	bf38      	it	cc
90005e66:	461d      	movcc	r5, r3
90005e68:	0553      	lsls	r3, r2, #21
90005e6a:	d531      	bpl.n	90005ed0 <__ssputs_r+0xa0>
90005e6c:	4629      	mov	r1, r5
90005e6e:	f000 fb47 	bl	90006500 <_malloc_r>
90005e72:	4606      	mov	r6, r0
90005e74:	b950      	cbnz	r0, 90005e8c <__ssputs_r+0x5c>
90005e76:	230c      	movs	r3, #12
90005e78:	f8ca 3000 	str.w	r3, [sl]
90005e7c:	89a3      	ldrh	r3, [r4, #12]
90005e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90005e82:	81a3      	strh	r3, [r4, #12]
90005e84:	f04f 30ff 	mov.w	r0, #4294967295
90005e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90005e8c:	6921      	ldr	r1, [r4, #16]
90005e8e:	464a      	mov	r2, r9
90005e90:	f000 fabe 	bl	90006410 <memcpy>
90005e94:	89a3      	ldrh	r3, [r4, #12]
90005e96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
90005e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90005e9e:	81a3      	strh	r3, [r4, #12]
90005ea0:	6126      	str	r6, [r4, #16]
90005ea2:	6165      	str	r5, [r4, #20]
90005ea4:	444e      	add	r6, r9
90005ea6:	eba5 0509 	sub.w	r5, r5, r9
90005eaa:	6026      	str	r6, [r4, #0]
90005eac:	60a5      	str	r5, [r4, #8]
90005eae:	463e      	mov	r6, r7
90005eb0:	42be      	cmp	r6, r7
90005eb2:	d900      	bls.n	90005eb6 <__ssputs_r+0x86>
90005eb4:	463e      	mov	r6, r7
90005eb6:	4632      	mov	r2, r6
90005eb8:	6820      	ldr	r0, [r4, #0]
90005eba:	4641      	mov	r1, r8
90005ebc:	f000 fab6 	bl	9000642c <memmove>
90005ec0:	68a3      	ldr	r3, [r4, #8]
90005ec2:	6822      	ldr	r2, [r4, #0]
90005ec4:	1b9b      	subs	r3, r3, r6
90005ec6:	4432      	add	r2, r6
90005ec8:	60a3      	str	r3, [r4, #8]
90005eca:	6022      	str	r2, [r4, #0]
90005ecc:	2000      	movs	r0, #0
90005ece:	e7db      	b.n	90005e88 <__ssputs_r+0x58>
90005ed0:	462a      	mov	r2, r5
90005ed2:	f000 fb6f 	bl	900065b4 <_realloc_r>
90005ed6:	4606      	mov	r6, r0
90005ed8:	2800      	cmp	r0, #0
90005eda:	d1e1      	bne.n	90005ea0 <__ssputs_r+0x70>
90005edc:	6921      	ldr	r1, [r4, #16]
90005ede:	4650      	mov	r0, sl
90005ee0:	f000 fabe 	bl	90006460 <_free_r>
90005ee4:	e7c7      	b.n	90005e76 <__ssputs_r+0x46>
	...

90005ee8 <_svfiprintf_r>:
90005ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90005eec:	4698      	mov	r8, r3
90005eee:	898b      	ldrh	r3, [r1, #12]
90005ef0:	061b      	lsls	r3, r3, #24
90005ef2:	b09d      	sub	sp, #116	; 0x74
90005ef4:	4607      	mov	r7, r0
90005ef6:	460d      	mov	r5, r1
90005ef8:	4614      	mov	r4, r2
90005efa:	d50e      	bpl.n	90005f1a <_svfiprintf_r+0x32>
90005efc:	690b      	ldr	r3, [r1, #16]
90005efe:	b963      	cbnz	r3, 90005f1a <_svfiprintf_r+0x32>
90005f00:	2140      	movs	r1, #64	; 0x40
90005f02:	f000 fafd 	bl	90006500 <_malloc_r>
90005f06:	6028      	str	r0, [r5, #0]
90005f08:	6128      	str	r0, [r5, #16]
90005f0a:	b920      	cbnz	r0, 90005f16 <_svfiprintf_r+0x2e>
90005f0c:	230c      	movs	r3, #12
90005f0e:	603b      	str	r3, [r7, #0]
90005f10:	f04f 30ff 	mov.w	r0, #4294967295
90005f14:	e0d1      	b.n	900060ba <_svfiprintf_r+0x1d2>
90005f16:	2340      	movs	r3, #64	; 0x40
90005f18:	616b      	str	r3, [r5, #20]
90005f1a:	2300      	movs	r3, #0
90005f1c:	9309      	str	r3, [sp, #36]	; 0x24
90005f1e:	2320      	movs	r3, #32
90005f20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
90005f24:	f8cd 800c 	str.w	r8, [sp, #12]
90005f28:	2330      	movs	r3, #48	; 0x30
90005f2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 900060d4 <_svfiprintf_r+0x1ec>
90005f2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
90005f32:	f04f 0901 	mov.w	r9, #1
90005f36:	4623      	mov	r3, r4
90005f38:	469a      	mov	sl, r3
90005f3a:	f813 2b01 	ldrb.w	r2, [r3], #1
90005f3e:	b10a      	cbz	r2, 90005f44 <_svfiprintf_r+0x5c>
90005f40:	2a25      	cmp	r2, #37	; 0x25
90005f42:	d1f9      	bne.n	90005f38 <_svfiprintf_r+0x50>
90005f44:	ebba 0b04 	subs.w	fp, sl, r4
90005f48:	d00b      	beq.n	90005f62 <_svfiprintf_r+0x7a>
90005f4a:	465b      	mov	r3, fp
90005f4c:	4622      	mov	r2, r4
90005f4e:	4629      	mov	r1, r5
90005f50:	4638      	mov	r0, r7
90005f52:	f7ff ff6d 	bl	90005e30 <__ssputs_r>
90005f56:	3001      	adds	r0, #1
90005f58:	f000 80aa 	beq.w	900060b0 <_svfiprintf_r+0x1c8>
90005f5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
90005f5e:	445a      	add	r2, fp
90005f60:	9209      	str	r2, [sp, #36]	; 0x24
90005f62:	f89a 3000 	ldrb.w	r3, [sl]
90005f66:	2b00      	cmp	r3, #0
90005f68:	f000 80a2 	beq.w	900060b0 <_svfiprintf_r+0x1c8>
90005f6c:	2300      	movs	r3, #0
90005f6e:	f04f 32ff 	mov.w	r2, #4294967295
90005f72:	e9cd 2305 	strd	r2, r3, [sp, #20]
90005f76:	f10a 0a01 	add.w	sl, sl, #1
90005f7a:	9304      	str	r3, [sp, #16]
90005f7c:	9307      	str	r3, [sp, #28]
90005f7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
90005f82:	931a      	str	r3, [sp, #104]	; 0x68
90005f84:	4654      	mov	r4, sl
90005f86:	2205      	movs	r2, #5
90005f88:	f814 1b01 	ldrb.w	r1, [r4], #1
90005f8c:	4851      	ldr	r0, [pc, #324]	; (900060d4 <_svfiprintf_r+0x1ec>)
90005f8e:	f7fa f93f 	bl	90000210 <memchr>
90005f92:	9a04      	ldr	r2, [sp, #16]
90005f94:	b9d8      	cbnz	r0, 90005fce <_svfiprintf_r+0xe6>
90005f96:	06d0      	lsls	r0, r2, #27
90005f98:	bf44      	itt	mi
90005f9a:	2320      	movmi	r3, #32
90005f9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90005fa0:	0711      	lsls	r1, r2, #28
90005fa2:	bf44      	itt	mi
90005fa4:	232b      	movmi	r3, #43	; 0x2b
90005fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90005faa:	f89a 3000 	ldrb.w	r3, [sl]
90005fae:	2b2a      	cmp	r3, #42	; 0x2a
90005fb0:	d015      	beq.n	90005fde <_svfiprintf_r+0xf6>
90005fb2:	9a07      	ldr	r2, [sp, #28]
90005fb4:	4654      	mov	r4, sl
90005fb6:	2000      	movs	r0, #0
90005fb8:	f04f 0c0a 	mov.w	ip, #10
90005fbc:	4621      	mov	r1, r4
90005fbe:	f811 3b01 	ldrb.w	r3, [r1], #1
90005fc2:	3b30      	subs	r3, #48	; 0x30
90005fc4:	2b09      	cmp	r3, #9
90005fc6:	d94e      	bls.n	90006066 <_svfiprintf_r+0x17e>
90005fc8:	b1b0      	cbz	r0, 90005ff8 <_svfiprintf_r+0x110>
90005fca:	9207      	str	r2, [sp, #28]
90005fcc:	e014      	b.n	90005ff8 <_svfiprintf_r+0x110>
90005fce:	eba0 0308 	sub.w	r3, r0, r8
90005fd2:	fa09 f303 	lsl.w	r3, r9, r3
90005fd6:	4313      	orrs	r3, r2
90005fd8:	9304      	str	r3, [sp, #16]
90005fda:	46a2      	mov	sl, r4
90005fdc:	e7d2      	b.n	90005f84 <_svfiprintf_r+0x9c>
90005fde:	9b03      	ldr	r3, [sp, #12]
90005fe0:	1d19      	adds	r1, r3, #4
90005fe2:	681b      	ldr	r3, [r3, #0]
90005fe4:	9103      	str	r1, [sp, #12]
90005fe6:	2b00      	cmp	r3, #0
90005fe8:	bfbb      	ittet	lt
90005fea:	425b      	neglt	r3, r3
90005fec:	f042 0202 	orrlt.w	r2, r2, #2
90005ff0:	9307      	strge	r3, [sp, #28]
90005ff2:	9307      	strlt	r3, [sp, #28]
90005ff4:	bfb8      	it	lt
90005ff6:	9204      	strlt	r2, [sp, #16]
90005ff8:	7823      	ldrb	r3, [r4, #0]
90005ffa:	2b2e      	cmp	r3, #46	; 0x2e
90005ffc:	d10c      	bne.n	90006018 <_svfiprintf_r+0x130>
90005ffe:	7863      	ldrb	r3, [r4, #1]
90006000:	2b2a      	cmp	r3, #42	; 0x2a
90006002:	d135      	bne.n	90006070 <_svfiprintf_r+0x188>
90006004:	9b03      	ldr	r3, [sp, #12]
90006006:	1d1a      	adds	r2, r3, #4
90006008:	681b      	ldr	r3, [r3, #0]
9000600a:	9203      	str	r2, [sp, #12]
9000600c:	2b00      	cmp	r3, #0
9000600e:	bfb8      	it	lt
90006010:	f04f 33ff 	movlt.w	r3, #4294967295
90006014:	3402      	adds	r4, #2
90006016:	9305      	str	r3, [sp, #20]
90006018:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 900060e4 <_svfiprintf_r+0x1fc>
9000601c:	7821      	ldrb	r1, [r4, #0]
9000601e:	2203      	movs	r2, #3
90006020:	4650      	mov	r0, sl
90006022:	f7fa f8f5 	bl	90000210 <memchr>
90006026:	b140      	cbz	r0, 9000603a <_svfiprintf_r+0x152>
90006028:	2340      	movs	r3, #64	; 0x40
9000602a:	eba0 000a 	sub.w	r0, r0, sl
9000602e:	fa03 f000 	lsl.w	r0, r3, r0
90006032:	9b04      	ldr	r3, [sp, #16]
90006034:	4303      	orrs	r3, r0
90006036:	3401      	adds	r4, #1
90006038:	9304      	str	r3, [sp, #16]
9000603a:	f814 1b01 	ldrb.w	r1, [r4], #1
9000603e:	4826      	ldr	r0, [pc, #152]	; (900060d8 <_svfiprintf_r+0x1f0>)
90006040:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
90006044:	2206      	movs	r2, #6
90006046:	f7fa f8e3 	bl	90000210 <memchr>
9000604a:	2800      	cmp	r0, #0
9000604c:	d038      	beq.n	900060c0 <_svfiprintf_r+0x1d8>
9000604e:	4b23      	ldr	r3, [pc, #140]	; (900060dc <_svfiprintf_r+0x1f4>)
90006050:	bb1b      	cbnz	r3, 9000609a <_svfiprintf_r+0x1b2>
90006052:	9b03      	ldr	r3, [sp, #12]
90006054:	3307      	adds	r3, #7
90006056:	f023 0307 	bic.w	r3, r3, #7
9000605a:	3308      	adds	r3, #8
9000605c:	9303      	str	r3, [sp, #12]
9000605e:	9b09      	ldr	r3, [sp, #36]	; 0x24
90006060:	4433      	add	r3, r6
90006062:	9309      	str	r3, [sp, #36]	; 0x24
90006064:	e767      	b.n	90005f36 <_svfiprintf_r+0x4e>
90006066:	fb0c 3202 	mla	r2, ip, r2, r3
9000606a:	460c      	mov	r4, r1
9000606c:	2001      	movs	r0, #1
9000606e:	e7a5      	b.n	90005fbc <_svfiprintf_r+0xd4>
90006070:	2300      	movs	r3, #0
90006072:	3401      	adds	r4, #1
90006074:	9305      	str	r3, [sp, #20]
90006076:	4619      	mov	r1, r3
90006078:	f04f 0c0a 	mov.w	ip, #10
9000607c:	4620      	mov	r0, r4
9000607e:	f810 2b01 	ldrb.w	r2, [r0], #1
90006082:	3a30      	subs	r2, #48	; 0x30
90006084:	2a09      	cmp	r2, #9
90006086:	d903      	bls.n	90006090 <_svfiprintf_r+0x1a8>
90006088:	2b00      	cmp	r3, #0
9000608a:	d0c5      	beq.n	90006018 <_svfiprintf_r+0x130>
9000608c:	9105      	str	r1, [sp, #20]
9000608e:	e7c3      	b.n	90006018 <_svfiprintf_r+0x130>
90006090:	fb0c 2101 	mla	r1, ip, r1, r2
90006094:	4604      	mov	r4, r0
90006096:	2301      	movs	r3, #1
90006098:	e7f0      	b.n	9000607c <_svfiprintf_r+0x194>
9000609a:	ab03      	add	r3, sp, #12
9000609c:	9300      	str	r3, [sp, #0]
9000609e:	462a      	mov	r2, r5
900060a0:	4b0f      	ldr	r3, [pc, #60]	; (900060e0 <_svfiprintf_r+0x1f8>)
900060a2:	a904      	add	r1, sp, #16
900060a4:	4638      	mov	r0, r7
900060a6:	f3af 8000 	nop.w
900060aa:	1c42      	adds	r2, r0, #1
900060ac:	4606      	mov	r6, r0
900060ae:	d1d6      	bne.n	9000605e <_svfiprintf_r+0x176>
900060b0:	89ab      	ldrh	r3, [r5, #12]
900060b2:	065b      	lsls	r3, r3, #25
900060b4:	f53f af2c 	bmi.w	90005f10 <_svfiprintf_r+0x28>
900060b8:	9809      	ldr	r0, [sp, #36]	; 0x24
900060ba:	b01d      	add	sp, #116	; 0x74
900060bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900060c0:	ab03      	add	r3, sp, #12
900060c2:	9300      	str	r3, [sp, #0]
900060c4:	462a      	mov	r2, r5
900060c6:	4b06      	ldr	r3, [pc, #24]	; (900060e0 <_svfiprintf_r+0x1f8>)
900060c8:	a904      	add	r1, sp, #16
900060ca:	4638      	mov	r0, r7
900060cc:	f000 f87a 	bl	900061c4 <_printf_i>
900060d0:	e7eb      	b.n	900060aa <_svfiprintf_r+0x1c2>
900060d2:	bf00      	nop
900060d4:	90008618 	.word	0x90008618
900060d8:	90008622 	.word	0x90008622
900060dc:	00000000 	.word	0x00000000
900060e0:	90005e31 	.word	0x90005e31
900060e4:	9000861e 	.word	0x9000861e

900060e8 <_printf_common>:
900060e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900060ec:	4616      	mov	r6, r2
900060ee:	4699      	mov	r9, r3
900060f0:	688a      	ldr	r2, [r1, #8]
900060f2:	690b      	ldr	r3, [r1, #16]
900060f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
900060f8:	4293      	cmp	r3, r2
900060fa:	bfb8      	it	lt
900060fc:	4613      	movlt	r3, r2
900060fe:	6033      	str	r3, [r6, #0]
90006100:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
90006104:	4607      	mov	r7, r0
90006106:	460c      	mov	r4, r1
90006108:	b10a      	cbz	r2, 9000610e <_printf_common+0x26>
9000610a:	3301      	adds	r3, #1
9000610c:	6033      	str	r3, [r6, #0]
9000610e:	6823      	ldr	r3, [r4, #0]
90006110:	0699      	lsls	r1, r3, #26
90006112:	bf42      	ittt	mi
90006114:	6833      	ldrmi	r3, [r6, #0]
90006116:	3302      	addmi	r3, #2
90006118:	6033      	strmi	r3, [r6, #0]
9000611a:	6825      	ldr	r5, [r4, #0]
9000611c:	f015 0506 	ands.w	r5, r5, #6
90006120:	d106      	bne.n	90006130 <_printf_common+0x48>
90006122:	f104 0a19 	add.w	sl, r4, #25
90006126:	68e3      	ldr	r3, [r4, #12]
90006128:	6832      	ldr	r2, [r6, #0]
9000612a:	1a9b      	subs	r3, r3, r2
9000612c:	42ab      	cmp	r3, r5
9000612e:	dc26      	bgt.n	9000617e <_printf_common+0x96>
90006130:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
90006134:	1e13      	subs	r3, r2, #0
90006136:	6822      	ldr	r2, [r4, #0]
90006138:	bf18      	it	ne
9000613a:	2301      	movne	r3, #1
9000613c:	0692      	lsls	r2, r2, #26
9000613e:	d42b      	bmi.n	90006198 <_printf_common+0xb0>
90006140:	f104 0243 	add.w	r2, r4, #67	; 0x43
90006144:	4649      	mov	r1, r9
90006146:	4638      	mov	r0, r7
90006148:	47c0      	blx	r8
9000614a:	3001      	adds	r0, #1
9000614c:	d01e      	beq.n	9000618c <_printf_common+0xa4>
9000614e:	6823      	ldr	r3, [r4, #0]
90006150:	68e5      	ldr	r5, [r4, #12]
90006152:	6832      	ldr	r2, [r6, #0]
90006154:	f003 0306 	and.w	r3, r3, #6
90006158:	2b04      	cmp	r3, #4
9000615a:	bf08      	it	eq
9000615c:	1aad      	subeq	r5, r5, r2
9000615e:	68a3      	ldr	r3, [r4, #8]
90006160:	6922      	ldr	r2, [r4, #16]
90006162:	bf0c      	ite	eq
90006164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
90006168:	2500      	movne	r5, #0
9000616a:	4293      	cmp	r3, r2
9000616c:	bfc4      	itt	gt
9000616e:	1a9b      	subgt	r3, r3, r2
90006170:	18ed      	addgt	r5, r5, r3
90006172:	2600      	movs	r6, #0
90006174:	341a      	adds	r4, #26
90006176:	42b5      	cmp	r5, r6
90006178:	d11a      	bne.n	900061b0 <_printf_common+0xc8>
9000617a:	2000      	movs	r0, #0
9000617c:	e008      	b.n	90006190 <_printf_common+0xa8>
9000617e:	2301      	movs	r3, #1
90006180:	4652      	mov	r2, sl
90006182:	4649      	mov	r1, r9
90006184:	4638      	mov	r0, r7
90006186:	47c0      	blx	r8
90006188:	3001      	adds	r0, #1
9000618a:	d103      	bne.n	90006194 <_printf_common+0xac>
9000618c:	f04f 30ff 	mov.w	r0, #4294967295
90006190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90006194:	3501      	adds	r5, #1
90006196:	e7c6      	b.n	90006126 <_printf_common+0x3e>
90006198:	18e1      	adds	r1, r4, r3
9000619a:	1c5a      	adds	r2, r3, #1
9000619c:	2030      	movs	r0, #48	; 0x30
9000619e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
900061a2:	4422      	add	r2, r4
900061a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
900061a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
900061ac:	3302      	adds	r3, #2
900061ae:	e7c7      	b.n	90006140 <_printf_common+0x58>
900061b0:	2301      	movs	r3, #1
900061b2:	4622      	mov	r2, r4
900061b4:	4649      	mov	r1, r9
900061b6:	4638      	mov	r0, r7
900061b8:	47c0      	blx	r8
900061ba:	3001      	adds	r0, #1
900061bc:	d0e6      	beq.n	9000618c <_printf_common+0xa4>
900061be:	3601      	adds	r6, #1
900061c0:	e7d9      	b.n	90006176 <_printf_common+0x8e>
	...

900061c4 <_printf_i>:
900061c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
900061c8:	460c      	mov	r4, r1
900061ca:	4691      	mov	r9, r2
900061cc:	7e27      	ldrb	r7, [r4, #24]
900061ce:	990c      	ldr	r1, [sp, #48]	; 0x30
900061d0:	2f78      	cmp	r7, #120	; 0x78
900061d2:	4680      	mov	r8, r0
900061d4:	469a      	mov	sl, r3
900061d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
900061da:	d807      	bhi.n	900061ec <_printf_i+0x28>
900061dc:	2f62      	cmp	r7, #98	; 0x62
900061de:	d80a      	bhi.n	900061f6 <_printf_i+0x32>
900061e0:	2f00      	cmp	r7, #0
900061e2:	f000 80d8 	beq.w	90006396 <_printf_i+0x1d2>
900061e6:	2f58      	cmp	r7, #88	; 0x58
900061e8:	f000 80a3 	beq.w	90006332 <_printf_i+0x16e>
900061ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
900061f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
900061f4:	e03a      	b.n	9000626c <_printf_i+0xa8>
900061f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
900061fa:	2b15      	cmp	r3, #21
900061fc:	d8f6      	bhi.n	900061ec <_printf_i+0x28>
900061fe:	a001      	add	r0, pc, #4	; (adr r0, 90006204 <_printf_i+0x40>)
90006200:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
90006204:	9000625d 	.word	0x9000625d
90006208:	90006271 	.word	0x90006271
9000620c:	900061ed 	.word	0x900061ed
90006210:	900061ed 	.word	0x900061ed
90006214:	900061ed 	.word	0x900061ed
90006218:	900061ed 	.word	0x900061ed
9000621c:	90006271 	.word	0x90006271
90006220:	900061ed 	.word	0x900061ed
90006224:	900061ed 	.word	0x900061ed
90006228:	900061ed 	.word	0x900061ed
9000622c:	900061ed 	.word	0x900061ed
90006230:	9000637d 	.word	0x9000637d
90006234:	900062a1 	.word	0x900062a1
90006238:	9000635f 	.word	0x9000635f
9000623c:	900061ed 	.word	0x900061ed
90006240:	900061ed 	.word	0x900061ed
90006244:	9000639f 	.word	0x9000639f
90006248:	900061ed 	.word	0x900061ed
9000624c:	900062a1 	.word	0x900062a1
90006250:	900061ed 	.word	0x900061ed
90006254:	900061ed 	.word	0x900061ed
90006258:	90006367 	.word	0x90006367
9000625c:	680b      	ldr	r3, [r1, #0]
9000625e:	1d1a      	adds	r2, r3, #4
90006260:	681b      	ldr	r3, [r3, #0]
90006262:	600a      	str	r2, [r1, #0]
90006264:	f104 0642 	add.w	r6, r4, #66	; 0x42
90006268:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
9000626c:	2301      	movs	r3, #1
9000626e:	e0a3      	b.n	900063b8 <_printf_i+0x1f4>
90006270:	6825      	ldr	r5, [r4, #0]
90006272:	6808      	ldr	r0, [r1, #0]
90006274:	062e      	lsls	r6, r5, #24
90006276:	f100 0304 	add.w	r3, r0, #4
9000627a:	d50a      	bpl.n	90006292 <_printf_i+0xce>
9000627c:	6805      	ldr	r5, [r0, #0]
9000627e:	600b      	str	r3, [r1, #0]
90006280:	2d00      	cmp	r5, #0
90006282:	da03      	bge.n	9000628c <_printf_i+0xc8>
90006284:	232d      	movs	r3, #45	; 0x2d
90006286:	426d      	negs	r5, r5
90006288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
9000628c:	485e      	ldr	r0, [pc, #376]	; (90006408 <_printf_i+0x244>)
9000628e:	230a      	movs	r3, #10
90006290:	e019      	b.n	900062c6 <_printf_i+0x102>
90006292:	f015 0f40 	tst.w	r5, #64	; 0x40
90006296:	6805      	ldr	r5, [r0, #0]
90006298:	600b      	str	r3, [r1, #0]
9000629a:	bf18      	it	ne
9000629c:	b22d      	sxthne	r5, r5
9000629e:	e7ef      	b.n	90006280 <_printf_i+0xbc>
900062a0:	680b      	ldr	r3, [r1, #0]
900062a2:	6825      	ldr	r5, [r4, #0]
900062a4:	1d18      	adds	r0, r3, #4
900062a6:	6008      	str	r0, [r1, #0]
900062a8:	0628      	lsls	r0, r5, #24
900062aa:	d501      	bpl.n	900062b0 <_printf_i+0xec>
900062ac:	681d      	ldr	r5, [r3, #0]
900062ae:	e002      	b.n	900062b6 <_printf_i+0xf2>
900062b0:	0669      	lsls	r1, r5, #25
900062b2:	d5fb      	bpl.n	900062ac <_printf_i+0xe8>
900062b4:	881d      	ldrh	r5, [r3, #0]
900062b6:	4854      	ldr	r0, [pc, #336]	; (90006408 <_printf_i+0x244>)
900062b8:	2f6f      	cmp	r7, #111	; 0x6f
900062ba:	bf0c      	ite	eq
900062bc:	2308      	moveq	r3, #8
900062be:	230a      	movne	r3, #10
900062c0:	2100      	movs	r1, #0
900062c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
900062c6:	6866      	ldr	r6, [r4, #4]
900062c8:	60a6      	str	r6, [r4, #8]
900062ca:	2e00      	cmp	r6, #0
900062cc:	bfa2      	ittt	ge
900062ce:	6821      	ldrge	r1, [r4, #0]
900062d0:	f021 0104 	bicge.w	r1, r1, #4
900062d4:	6021      	strge	r1, [r4, #0]
900062d6:	b90d      	cbnz	r5, 900062dc <_printf_i+0x118>
900062d8:	2e00      	cmp	r6, #0
900062da:	d04d      	beq.n	90006378 <_printf_i+0x1b4>
900062dc:	4616      	mov	r6, r2
900062de:	fbb5 f1f3 	udiv	r1, r5, r3
900062e2:	fb03 5711 	mls	r7, r3, r1, r5
900062e6:	5dc7      	ldrb	r7, [r0, r7]
900062e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
900062ec:	462f      	mov	r7, r5
900062ee:	42bb      	cmp	r3, r7
900062f0:	460d      	mov	r5, r1
900062f2:	d9f4      	bls.n	900062de <_printf_i+0x11a>
900062f4:	2b08      	cmp	r3, #8
900062f6:	d10b      	bne.n	90006310 <_printf_i+0x14c>
900062f8:	6823      	ldr	r3, [r4, #0]
900062fa:	07df      	lsls	r7, r3, #31
900062fc:	d508      	bpl.n	90006310 <_printf_i+0x14c>
900062fe:	6923      	ldr	r3, [r4, #16]
90006300:	6861      	ldr	r1, [r4, #4]
90006302:	4299      	cmp	r1, r3
90006304:	bfde      	ittt	le
90006306:	2330      	movle	r3, #48	; 0x30
90006308:	f806 3c01 	strble.w	r3, [r6, #-1]
9000630c:	f106 36ff 	addle.w	r6, r6, #4294967295
90006310:	1b92      	subs	r2, r2, r6
90006312:	6122      	str	r2, [r4, #16]
90006314:	f8cd a000 	str.w	sl, [sp]
90006318:	464b      	mov	r3, r9
9000631a:	aa03      	add	r2, sp, #12
9000631c:	4621      	mov	r1, r4
9000631e:	4640      	mov	r0, r8
90006320:	f7ff fee2 	bl	900060e8 <_printf_common>
90006324:	3001      	adds	r0, #1
90006326:	d14c      	bne.n	900063c2 <_printf_i+0x1fe>
90006328:	f04f 30ff 	mov.w	r0, #4294967295
9000632c:	b004      	add	sp, #16
9000632e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90006332:	4835      	ldr	r0, [pc, #212]	; (90006408 <_printf_i+0x244>)
90006334:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
90006338:	6823      	ldr	r3, [r4, #0]
9000633a:	680e      	ldr	r6, [r1, #0]
9000633c:	061f      	lsls	r7, r3, #24
9000633e:	f856 5b04 	ldr.w	r5, [r6], #4
90006342:	600e      	str	r6, [r1, #0]
90006344:	d514      	bpl.n	90006370 <_printf_i+0x1ac>
90006346:	07d9      	lsls	r1, r3, #31
90006348:	bf44      	itt	mi
9000634a:	f043 0320 	orrmi.w	r3, r3, #32
9000634e:	6023      	strmi	r3, [r4, #0]
90006350:	b91d      	cbnz	r5, 9000635a <_printf_i+0x196>
90006352:	6823      	ldr	r3, [r4, #0]
90006354:	f023 0320 	bic.w	r3, r3, #32
90006358:	6023      	str	r3, [r4, #0]
9000635a:	2310      	movs	r3, #16
9000635c:	e7b0      	b.n	900062c0 <_printf_i+0xfc>
9000635e:	6823      	ldr	r3, [r4, #0]
90006360:	f043 0320 	orr.w	r3, r3, #32
90006364:	6023      	str	r3, [r4, #0]
90006366:	2378      	movs	r3, #120	; 0x78
90006368:	4828      	ldr	r0, [pc, #160]	; (9000640c <_printf_i+0x248>)
9000636a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000636e:	e7e3      	b.n	90006338 <_printf_i+0x174>
90006370:	065e      	lsls	r6, r3, #25
90006372:	bf48      	it	mi
90006374:	b2ad      	uxthmi	r5, r5
90006376:	e7e6      	b.n	90006346 <_printf_i+0x182>
90006378:	4616      	mov	r6, r2
9000637a:	e7bb      	b.n	900062f4 <_printf_i+0x130>
9000637c:	680b      	ldr	r3, [r1, #0]
9000637e:	6826      	ldr	r6, [r4, #0]
90006380:	6960      	ldr	r0, [r4, #20]
90006382:	1d1d      	adds	r5, r3, #4
90006384:	600d      	str	r5, [r1, #0]
90006386:	0635      	lsls	r5, r6, #24
90006388:	681b      	ldr	r3, [r3, #0]
9000638a:	d501      	bpl.n	90006390 <_printf_i+0x1cc>
9000638c:	6018      	str	r0, [r3, #0]
9000638e:	e002      	b.n	90006396 <_printf_i+0x1d2>
90006390:	0671      	lsls	r1, r6, #25
90006392:	d5fb      	bpl.n	9000638c <_printf_i+0x1c8>
90006394:	8018      	strh	r0, [r3, #0]
90006396:	2300      	movs	r3, #0
90006398:	6123      	str	r3, [r4, #16]
9000639a:	4616      	mov	r6, r2
9000639c:	e7ba      	b.n	90006314 <_printf_i+0x150>
9000639e:	680b      	ldr	r3, [r1, #0]
900063a0:	1d1a      	adds	r2, r3, #4
900063a2:	600a      	str	r2, [r1, #0]
900063a4:	681e      	ldr	r6, [r3, #0]
900063a6:	6862      	ldr	r2, [r4, #4]
900063a8:	2100      	movs	r1, #0
900063aa:	4630      	mov	r0, r6
900063ac:	f7f9 ff30 	bl	90000210 <memchr>
900063b0:	b108      	cbz	r0, 900063b6 <_printf_i+0x1f2>
900063b2:	1b80      	subs	r0, r0, r6
900063b4:	6060      	str	r0, [r4, #4]
900063b6:	6863      	ldr	r3, [r4, #4]
900063b8:	6123      	str	r3, [r4, #16]
900063ba:	2300      	movs	r3, #0
900063bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
900063c0:	e7a8      	b.n	90006314 <_printf_i+0x150>
900063c2:	6923      	ldr	r3, [r4, #16]
900063c4:	4632      	mov	r2, r6
900063c6:	4649      	mov	r1, r9
900063c8:	4640      	mov	r0, r8
900063ca:	47d0      	blx	sl
900063cc:	3001      	adds	r0, #1
900063ce:	d0ab      	beq.n	90006328 <_printf_i+0x164>
900063d0:	6823      	ldr	r3, [r4, #0]
900063d2:	079b      	lsls	r3, r3, #30
900063d4:	d413      	bmi.n	900063fe <_printf_i+0x23a>
900063d6:	68e0      	ldr	r0, [r4, #12]
900063d8:	9b03      	ldr	r3, [sp, #12]
900063da:	4298      	cmp	r0, r3
900063dc:	bfb8      	it	lt
900063de:	4618      	movlt	r0, r3
900063e0:	e7a4      	b.n	9000632c <_printf_i+0x168>
900063e2:	2301      	movs	r3, #1
900063e4:	4632      	mov	r2, r6
900063e6:	4649      	mov	r1, r9
900063e8:	4640      	mov	r0, r8
900063ea:	47d0      	blx	sl
900063ec:	3001      	adds	r0, #1
900063ee:	d09b      	beq.n	90006328 <_printf_i+0x164>
900063f0:	3501      	adds	r5, #1
900063f2:	68e3      	ldr	r3, [r4, #12]
900063f4:	9903      	ldr	r1, [sp, #12]
900063f6:	1a5b      	subs	r3, r3, r1
900063f8:	42ab      	cmp	r3, r5
900063fa:	dcf2      	bgt.n	900063e2 <_printf_i+0x21e>
900063fc:	e7eb      	b.n	900063d6 <_printf_i+0x212>
900063fe:	2500      	movs	r5, #0
90006400:	f104 0619 	add.w	r6, r4, #25
90006404:	e7f5      	b.n	900063f2 <_printf_i+0x22e>
90006406:	bf00      	nop
90006408:	90008629 	.word	0x90008629
9000640c:	9000863a 	.word	0x9000863a

90006410 <memcpy>:
90006410:	440a      	add	r2, r1
90006412:	4291      	cmp	r1, r2
90006414:	f100 33ff 	add.w	r3, r0, #4294967295
90006418:	d100      	bne.n	9000641c <memcpy+0xc>
9000641a:	4770      	bx	lr
9000641c:	b510      	push	{r4, lr}
9000641e:	f811 4b01 	ldrb.w	r4, [r1], #1
90006422:	f803 4f01 	strb.w	r4, [r3, #1]!
90006426:	4291      	cmp	r1, r2
90006428:	d1f9      	bne.n	9000641e <memcpy+0xe>
9000642a:	bd10      	pop	{r4, pc}

9000642c <memmove>:
9000642c:	4288      	cmp	r0, r1
9000642e:	b510      	push	{r4, lr}
90006430:	eb01 0402 	add.w	r4, r1, r2
90006434:	d902      	bls.n	9000643c <memmove+0x10>
90006436:	4284      	cmp	r4, r0
90006438:	4623      	mov	r3, r4
9000643a:	d807      	bhi.n	9000644c <memmove+0x20>
9000643c:	1e43      	subs	r3, r0, #1
9000643e:	42a1      	cmp	r1, r4
90006440:	d008      	beq.n	90006454 <memmove+0x28>
90006442:	f811 2b01 	ldrb.w	r2, [r1], #1
90006446:	f803 2f01 	strb.w	r2, [r3, #1]!
9000644a:	e7f8      	b.n	9000643e <memmove+0x12>
9000644c:	4402      	add	r2, r0
9000644e:	4601      	mov	r1, r0
90006450:	428a      	cmp	r2, r1
90006452:	d100      	bne.n	90006456 <memmove+0x2a>
90006454:	bd10      	pop	{r4, pc}
90006456:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
9000645a:	f802 4d01 	strb.w	r4, [r2, #-1]!
9000645e:	e7f7      	b.n	90006450 <memmove+0x24>

90006460 <_free_r>:
90006460:	b537      	push	{r0, r1, r2, r4, r5, lr}
90006462:	2900      	cmp	r1, #0
90006464:	d048      	beq.n	900064f8 <_free_r+0x98>
90006466:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000646a:	9001      	str	r0, [sp, #4]
9000646c:	2b00      	cmp	r3, #0
9000646e:	f1a1 0404 	sub.w	r4, r1, #4
90006472:	bfb8      	it	lt
90006474:	18e4      	addlt	r4, r4, r3
90006476:	f000 f8d3 	bl	90006620 <__malloc_lock>
9000647a:	4a20      	ldr	r2, [pc, #128]	; (900064fc <_free_r+0x9c>)
9000647c:	9801      	ldr	r0, [sp, #4]
9000647e:	6813      	ldr	r3, [r2, #0]
90006480:	4615      	mov	r5, r2
90006482:	b933      	cbnz	r3, 90006492 <_free_r+0x32>
90006484:	6063      	str	r3, [r4, #4]
90006486:	6014      	str	r4, [r2, #0]
90006488:	b003      	add	sp, #12
9000648a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
9000648e:	f000 b8cd 	b.w	9000662c <__malloc_unlock>
90006492:	42a3      	cmp	r3, r4
90006494:	d90b      	bls.n	900064ae <_free_r+0x4e>
90006496:	6821      	ldr	r1, [r4, #0]
90006498:	1862      	adds	r2, r4, r1
9000649a:	4293      	cmp	r3, r2
9000649c:	bf04      	itt	eq
9000649e:	681a      	ldreq	r2, [r3, #0]
900064a0:	685b      	ldreq	r3, [r3, #4]
900064a2:	6063      	str	r3, [r4, #4]
900064a4:	bf04      	itt	eq
900064a6:	1852      	addeq	r2, r2, r1
900064a8:	6022      	streq	r2, [r4, #0]
900064aa:	602c      	str	r4, [r5, #0]
900064ac:	e7ec      	b.n	90006488 <_free_r+0x28>
900064ae:	461a      	mov	r2, r3
900064b0:	685b      	ldr	r3, [r3, #4]
900064b2:	b10b      	cbz	r3, 900064b8 <_free_r+0x58>
900064b4:	42a3      	cmp	r3, r4
900064b6:	d9fa      	bls.n	900064ae <_free_r+0x4e>
900064b8:	6811      	ldr	r1, [r2, #0]
900064ba:	1855      	adds	r5, r2, r1
900064bc:	42a5      	cmp	r5, r4
900064be:	d10b      	bne.n	900064d8 <_free_r+0x78>
900064c0:	6824      	ldr	r4, [r4, #0]
900064c2:	4421      	add	r1, r4
900064c4:	1854      	adds	r4, r2, r1
900064c6:	42a3      	cmp	r3, r4
900064c8:	6011      	str	r1, [r2, #0]
900064ca:	d1dd      	bne.n	90006488 <_free_r+0x28>
900064cc:	681c      	ldr	r4, [r3, #0]
900064ce:	685b      	ldr	r3, [r3, #4]
900064d0:	6053      	str	r3, [r2, #4]
900064d2:	4421      	add	r1, r4
900064d4:	6011      	str	r1, [r2, #0]
900064d6:	e7d7      	b.n	90006488 <_free_r+0x28>
900064d8:	d902      	bls.n	900064e0 <_free_r+0x80>
900064da:	230c      	movs	r3, #12
900064dc:	6003      	str	r3, [r0, #0]
900064de:	e7d3      	b.n	90006488 <_free_r+0x28>
900064e0:	6825      	ldr	r5, [r4, #0]
900064e2:	1961      	adds	r1, r4, r5
900064e4:	428b      	cmp	r3, r1
900064e6:	bf04      	itt	eq
900064e8:	6819      	ldreq	r1, [r3, #0]
900064ea:	685b      	ldreq	r3, [r3, #4]
900064ec:	6063      	str	r3, [r4, #4]
900064ee:	bf04      	itt	eq
900064f0:	1949      	addeq	r1, r1, r5
900064f2:	6021      	streq	r1, [r4, #0]
900064f4:	6054      	str	r4, [r2, #4]
900064f6:	e7c7      	b.n	90006488 <_free_r+0x28>
900064f8:	b003      	add	sp, #12
900064fa:	bd30      	pop	{r4, r5, pc}
900064fc:	200002c0 	.word	0x200002c0

90006500 <_malloc_r>:
90006500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90006502:	1ccd      	adds	r5, r1, #3
90006504:	f025 0503 	bic.w	r5, r5, #3
90006508:	3508      	adds	r5, #8
9000650a:	2d0c      	cmp	r5, #12
9000650c:	bf38      	it	cc
9000650e:	250c      	movcc	r5, #12
90006510:	2d00      	cmp	r5, #0
90006512:	4606      	mov	r6, r0
90006514:	db01      	blt.n	9000651a <_malloc_r+0x1a>
90006516:	42a9      	cmp	r1, r5
90006518:	d903      	bls.n	90006522 <_malloc_r+0x22>
9000651a:	230c      	movs	r3, #12
9000651c:	6033      	str	r3, [r6, #0]
9000651e:	2000      	movs	r0, #0
90006520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90006522:	f000 f87d 	bl	90006620 <__malloc_lock>
90006526:	4921      	ldr	r1, [pc, #132]	; (900065ac <_malloc_r+0xac>)
90006528:	680a      	ldr	r2, [r1, #0]
9000652a:	4614      	mov	r4, r2
9000652c:	b99c      	cbnz	r4, 90006556 <_malloc_r+0x56>
9000652e:	4f20      	ldr	r7, [pc, #128]	; (900065b0 <_malloc_r+0xb0>)
90006530:	683b      	ldr	r3, [r7, #0]
90006532:	b923      	cbnz	r3, 9000653e <_malloc_r+0x3e>
90006534:	4621      	mov	r1, r4
90006536:	4630      	mov	r0, r6
90006538:	f000 f862 	bl	90006600 <_sbrk_r>
9000653c:	6038      	str	r0, [r7, #0]
9000653e:	4629      	mov	r1, r5
90006540:	4630      	mov	r0, r6
90006542:	f000 f85d 	bl	90006600 <_sbrk_r>
90006546:	1c43      	adds	r3, r0, #1
90006548:	d123      	bne.n	90006592 <_malloc_r+0x92>
9000654a:	230c      	movs	r3, #12
9000654c:	6033      	str	r3, [r6, #0]
9000654e:	4630      	mov	r0, r6
90006550:	f000 f86c 	bl	9000662c <__malloc_unlock>
90006554:	e7e3      	b.n	9000651e <_malloc_r+0x1e>
90006556:	6823      	ldr	r3, [r4, #0]
90006558:	1b5b      	subs	r3, r3, r5
9000655a:	d417      	bmi.n	9000658c <_malloc_r+0x8c>
9000655c:	2b0b      	cmp	r3, #11
9000655e:	d903      	bls.n	90006568 <_malloc_r+0x68>
90006560:	6023      	str	r3, [r4, #0]
90006562:	441c      	add	r4, r3
90006564:	6025      	str	r5, [r4, #0]
90006566:	e004      	b.n	90006572 <_malloc_r+0x72>
90006568:	6863      	ldr	r3, [r4, #4]
9000656a:	42a2      	cmp	r2, r4
9000656c:	bf0c      	ite	eq
9000656e:	600b      	streq	r3, [r1, #0]
90006570:	6053      	strne	r3, [r2, #4]
90006572:	4630      	mov	r0, r6
90006574:	f000 f85a 	bl	9000662c <__malloc_unlock>
90006578:	f104 000b 	add.w	r0, r4, #11
9000657c:	1d23      	adds	r3, r4, #4
9000657e:	f020 0007 	bic.w	r0, r0, #7
90006582:	1ac2      	subs	r2, r0, r3
90006584:	d0cc      	beq.n	90006520 <_malloc_r+0x20>
90006586:	1a1b      	subs	r3, r3, r0
90006588:	50a3      	str	r3, [r4, r2]
9000658a:	e7c9      	b.n	90006520 <_malloc_r+0x20>
9000658c:	4622      	mov	r2, r4
9000658e:	6864      	ldr	r4, [r4, #4]
90006590:	e7cc      	b.n	9000652c <_malloc_r+0x2c>
90006592:	1cc4      	adds	r4, r0, #3
90006594:	f024 0403 	bic.w	r4, r4, #3
90006598:	42a0      	cmp	r0, r4
9000659a:	d0e3      	beq.n	90006564 <_malloc_r+0x64>
9000659c:	1a21      	subs	r1, r4, r0
9000659e:	4630      	mov	r0, r6
900065a0:	f000 f82e 	bl	90006600 <_sbrk_r>
900065a4:	3001      	adds	r0, #1
900065a6:	d1dd      	bne.n	90006564 <_malloc_r+0x64>
900065a8:	e7cf      	b.n	9000654a <_malloc_r+0x4a>
900065aa:	bf00      	nop
900065ac:	200002c0 	.word	0x200002c0
900065b0:	200002c4 	.word	0x200002c4

900065b4 <_realloc_r>:
900065b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900065b6:	4607      	mov	r7, r0
900065b8:	4614      	mov	r4, r2
900065ba:	460e      	mov	r6, r1
900065bc:	b921      	cbnz	r1, 900065c8 <_realloc_r+0x14>
900065be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
900065c2:	4611      	mov	r1, r2
900065c4:	f7ff bf9c 	b.w	90006500 <_malloc_r>
900065c8:	b922      	cbnz	r2, 900065d4 <_realloc_r+0x20>
900065ca:	f7ff ff49 	bl	90006460 <_free_r>
900065ce:	4625      	mov	r5, r4
900065d0:	4628      	mov	r0, r5
900065d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
900065d4:	f000 f830 	bl	90006638 <_malloc_usable_size_r>
900065d8:	42a0      	cmp	r0, r4
900065da:	d20f      	bcs.n	900065fc <_realloc_r+0x48>
900065dc:	4621      	mov	r1, r4
900065de:	4638      	mov	r0, r7
900065e0:	f7ff ff8e 	bl	90006500 <_malloc_r>
900065e4:	4605      	mov	r5, r0
900065e6:	2800      	cmp	r0, #0
900065e8:	d0f2      	beq.n	900065d0 <_realloc_r+0x1c>
900065ea:	4631      	mov	r1, r6
900065ec:	4622      	mov	r2, r4
900065ee:	f7ff ff0f 	bl	90006410 <memcpy>
900065f2:	4631      	mov	r1, r6
900065f4:	4638      	mov	r0, r7
900065f6:	f7ff ff33 	bl	90006460 <_free_r>
900065fa:	e7e9      	b.n	900065d0 <_realloc_r+0x1c>
900065fc:	4635      	mov	r5, r6
900065fe:	e7e7      	b.n	900065d0 <_realloc_r+0x1c>

90006600 <_sbrk_r>:
90006600:	b538      	push	{r3, r4, r5, lr}
90006602:	4d06      	ldr	r5, [pc, #24]	; (9000661c <_sbrk_r+0x1c>)
90006604:	2300      	movs	r3, #0
90006606:	4604      	mov	r4, r0
90006608:	4608      	mov	r0, r1
9000660a:	602b      	str	r3, [r5, #0]
9000660c:	f7fa f9f8 	bl	90000a00 <_sbrk>
90006610:	1c43      	adds	r3, r0, #1
90006612:	d102      	bne.n	9000661a <_sbrk_r+0x1a>
90006614:	682b      	ldr	r3, [r5, #0]
90006616:	b103      	cbz	r3, 9000661a <_sbrk_r+0x1a>
90006618:	6023      	str	r3, [r4, #0]
9000661a:	bd38      	pop	{r3, r4, r5, pc}
9000661c:	200003a8 	.word	0x200003a8

90006620 <__malloc_lock>:
90006620:	4801      	ldr	r0, [pc, #4]	; (90006628 <__malloc_lock+0x8>)
90006622:	f000 b811 	b.w	90006648 <__retarget_lock_acquire_recursive>
90006626:	bf00      	nop
90006628:	200003b0 	.word	0x200003b0

9000662c <__malloc_unlock>:
9000662c:	4801      	ldr	r0, [pc, #4]	; (90006634 <__malloc_unlock+0x8>)
9000662e:	f000 b80c 	b.w	9000664a <__retarget_lock_release_recursive>
90006632:	bf00      	nop
90006634:	200003b0 	.word	0x200003b0

90006638 <_malloc_usable_size_r>:
90006638:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000663c:	1f18      	subs	r0, r3, #4
9000663e:	2b00      	cmp	r3, #0
90006640:	bfbc      	itt	lt
90006642:	580b      	ldrlt	r3, [r1, r0]
90006644:	18c0      	addlt	r0, r0, r3
90006646:	4770      	bx	lr

90006648 <__retarget_lock_acquire_recursive>:
90006648:	4770      	bx	lr

9000664a <__retarget_lock_release_recursive>:
9000664a:	4770      	bx	lr

9000664c <_init>:
9000664c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000664e:	bf00      	nop
90006650:	bcf8      	pop	{r3, r4, r5, r6, r7}
90006652:	bc08      	pop	{r3}
90006654:	469e      	mov	lr, r3
90006656:	4770      	bx	lr

90006658 <_fini>:
90006658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000665a:	bf00      	nop
9000665c:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000665e:	bc08      	pop	{r3}
90006660:	469e      	mov	lr, r3
90006662:	4770      	bx	lr
