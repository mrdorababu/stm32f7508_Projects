
BlinkLed_Cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  90000000  90000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f0c  900001c8  900001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  900020d4  900020d4  000120d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  900020e4  900020e4  000120e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  900020ec  900020ec  000120ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  900020f0  900020f0  000120f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  900020f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000020  2000000c  90002100  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  2000002c  90002100  0002002c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00004e64  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000106b  00000000  00000000  00024ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000480  00000000  00000000  00025f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000003e8  00000000  00000000  00026390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00028ac7  00000000  00000000  00026778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000626e  00000000  00000000  0004f23f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f4aa5  00000000  00000000  000554ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00149f52  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001020  00000000  00000000  00149fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900001c8 <__do_global_dtors_aux>:
900001c8:	b510      	push	{r4, lr}
900001ca:	4c05      	ldr	r4, [pc, #20]	; (900001e0 <__do_global_dtors_aux+0x18>)
900001cc:	7823      	ldrb	r3, [r4, #0]
900001ce:	b933      	cbnz	r3, 900001de <__do_global_dtors_aux+0x16>
900001d0:	4b04      	ldr	r3, [pc, #16]	; (900001e4 <__do_global_dtors_aux+0x1c>)
900001d2:	b113      	cbz	r3, 900001da <__do_global_dtors_aux+0x12>
900001d4:	4804      	ldr	r0, [pc, #16]	; (900001e8 <__do_global_dtors_aux+0x20>)
900001d6:	f3af 8000 	nop.w
900001da:	2301      	movs	r3, #1
900001dc:	7023      	strb	r3, [r4, #0]
900001de:	bd10      	pop	{r4, pc}
900001e0:	2000000c 	.word	0x2000000c
900001e4:	00000000 	.word	0x00000000
900001e8:	900020bc 	.word	0x900020bc

900001ec <frame_dummy>:
900001ec:	b508      	push	{r3, lr}
900001ee:	4b03      	ldr	r3, [pc, #12]	; (900001fc <frame_dummy+0x10>)
900001f0:	b11b      	cbz	r3, 900001fa <frame_dummy+0xe>
900001f2:	4903      	ldr	r1, [pc, #12]	; (90000200 <frame_dummy+0x14>)
900001f4:	4803      	ldr	r0, [pc, #12]	; (90000204 <frame_dummy+0x18>)
900001f6:	f3af 8000 	nop.w
900001fa:	bd08      	pop	{r3, pc}
900001fc:	00000000 	.word	0x00000000
90000200:	20000010 	.word	0x20000010
90000204:	900020bc 	.word	0x900020bc

90000208 <__aeabi_uldivmod>:
90000208:	b953      	cbnz	r3, 90000220 <__aeabi_uldivmod+0x18>
9000020a:	b94a      	cbnz	r2, 90000220 <__aeabi_uldivmod+0x18>
9000020c:	2900      	cmp	r1, #0
9000020e:	bf08      	it	eq
90000210:	2800      	cmpeq	r0, #0
90000212:	bf1c      	itt	ne
90000214:	f04f 31ff 	movne.w	r1, #4294967295
90000218:	f04f 30ff 	movne.w	r0, #4294967295
9000021c:	f000 b96e 	b.w	900004fc <__aeabi_idiv0>
90000220:	f1ad 0c08 	sub.w	ip, sp, #8
90000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
90000228:	f000 f806 	bl	90000238 <__udivmoddi4>
9000022c:	f8dd e004 	ldr.w	lr, [sp, #4]
90000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
90000234:	b004      	add	sp, #16
90000236:	4770      	bx	lr

90000238 <__udivmoddi4>:
90000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000023c:	9d08      	ldr	r5, [sp, #32]
9000023e:	4604      	mov	r4, r0
90000240:	468c      	mov	ip, r1
90000242:	2b00      	cmp	r3, #0
90000244:	f040 8083 	bne.w	9000034e <__udivmoddi4+0x116>
90000248:	428a      	cmp	r2, r1
9000024a:	4617      	mov	r7, r2
9000024c:	d947      	bls.n	900002de <__udivmoddi4+0xa6>
9000024e:	fab2 f282 	clz	r2, r2
90000252:	b142      	cbz	r2, 90000266 <__udivmoddi4+0x2e>
90000254:	f1c2 0020 	rsb	r0, r2, #32
90000258:	fa24 f000 	lsr.w	r0, r4, r0
9000025c:	4091      	lsls	r1, r2
9000025e:	4097      	lsls	r7, r2
90000260:	ea40 0c01 	orr.w	ip, r0, r1
90000264:	4094      	lsls	r4, r2
90000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
9000026a:	0c23      	lsrs	r3, r4, #16
9000026c:	fbbc f6f8 	udiv	r6, ip, r8
90000270:	fa1f fe87 	uxth.w	lr, r7
90000274:	fb08 c116 	mls	r1, r8, r6, ip
90000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000027c:	fb06 f10e 	mul.w	r1, r6, lr
90000280:	4299      	cmp	r1, r3
90000282:	d909      	bls.n	90000298 <__udivmoddi4+0x60>
90000284:	18fb      	adds	r3, r7, r3
90000286:	f106 30ff 	add.w	r0, r6, #4294967295
9000028a:	f080 8119 	bcs.w	900004c0 <__udivmoddi4+0x288>
9000028e:	4299      	cmp	r1, r3
90000290:	f240 8116 	bls.w	900004c0 <__udivmoddi4+0x288>
90000294:	3e02      	subs	r6, #2
90000296:	443b      	add	r3, r7
90000298:	1a5b      	subs	r3, r3, r1
9000029a:	b2a4      	uxth	r4, r4
9000029c:	fbb3 f0f8 	udiv	r0, r3, r8
900002a0:	fb08 3310 	mls	r3, r8, r0, r3
900002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
900002a8:	fb00 fe0e 	mul.w	lr, r0, lr
900002ac:	45a6      	cmp	lr, r4
900002ae:	d909      	bls.n	900002c4 <__udivmoddi4+0x8c>
900002b0:	193c      	adds	r4, r7, r4
900002b2:	f100 33ff 	add.w	r3, r0, #4294967295
900002b6:	f080 8105 	bcs.w	900004c4 <__udivmoddi4+0x28c>
900002ba:	45a6      	cmp	lr, r4
900002bc:	f240 8102 	bls.w	900004c4 <__udivmoddi4+0x28c>
900002c0:	3802      	subs	r0, #2
900002c2:	443c      	add	r4, r7
900002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
900002c8:	eba4 040e 	sub.w	r4, r4, lr
900002cc:	2600      	movs	r6, #0
900002ce:	b11d      	cbz	r5, 900002d8 <__udivmoddi4+0xa0>
900002d0:	40d4      	lsrs	r4, r2
900002d2:	2300      	movs	r3, #0
900002d4:	e9c5 4300 	strd	r4, r3, [r5]
900002d8:	4631      	mov	r1, r6
900002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900002de:	b902      	cbnz	r2, 900002e2 <__udivmoddi4+0xaa>
900002e0:	deff      	udf	#255	; 0xff
900002e2:	fab2 f282 	clz	r2, r2
900002e6:	2a00      	cmp	r2, #0
900002e8:	d150      	bne.n	9000038c <__udivmoddi4+0x154>
900002ea:	1bcb      	subs	r3, r1, r7
900002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900002f0:	fa1f f887 	uxth.w	r8, r7
900002f4:	2601      	movs	r6, #1
900002f6:	fbb3 fcfe 	udiv	ip, r3, lr
900002fa:	0c21      	lsrs	r1, r4, #16
900002fc:	fb0e 331c 	mls	r3, lr, ip, r3
90000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
90000304:	fb08 f30c 	mul.w	r3, r8, ip
90000308:	428b      	cmp	r3, r1
9000030a:	d907      	bls.n	9000031c <__udivmoddi4+0xe4>
9000030c:	1879      	adds	r1, r7, r1
9000030e:	f10c 30ff 	add.w	r0, ip, #4294967295
90000312:	d202      	bcs.n	9000031a <__udivmoddi4+0xe2>
90000314:	428b      	cmp	r3, r1
90000316:	f200 80e9 	bhi.w	900004ec <__udivmoddi4+0x2b4>
9000031a:	4684      	mov	ip, r0
9000031c:	1ac9      	subs	r1, r1, r3
9000031e:	b2a3      	uxth	r3, r4
90000320:	fbb1 f0fe 	udiv	r0, r1, lr
90000324:	fb0e 1110 	mls	r1, lr, r0, r1
90000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
9000032c:	fb08 f800 	mul.w	r8, r8, r0
90000330:	45a0      	cmp	r8, r4
90000332:	d907      	bls.n	90000344 <__udivmoddi4+0x10c>
90000334:	193c      	adds	r4, r7, r4
90000336:	f100 33ff 	add.w	r3, r0, #4294967295
9000033a:	d202      	bcs.n	90000342 <__udivmoddi4+0x10a>
9000033c:	45a0      	cmp	r8, r4
9000033e:	f200 80d9 	bhi.w	900004f4 <__udivmoddi4+0x2bc>
90000342:	4618      	mov	r0, r3
90000344:	eba4 0408 	sub.w	r4, r4, r8
90000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
9000034c:	e7bf      	b.n	900002ce <__udivmoddi4+0x96>
9000034e:	428b      	cmp	r3, r1
90000350:	d909      	bls.n	90000366 <__udivmoddi4+0x12e>
90000352:	2d00      	cmp	r5, #0
90000354:	f000 80b1 	beq.w	900004ba <__udivmoddi4+0x282>
90000358:	2600      	movs	r6, #0
9000035a:	e9c5 0100 	strd	r0, r1, [r5]
9000035e:	4630      	mov	r0, r6
90000360:	4631      	mov	r1, r6
90000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000366:	fab3 f683 	clz	r6, r3
9000036a:	2e00      	cmp	r6, #0
9000036c:	d14a      	bne.n	90000404 <__udivmoddi4+0x1cc>
9000036e:	428b      	cmp	r3, r1
90000370:	d302      	bcc.n	90000378 <__udivmoddi4+0x140>
90000372:	4282      	cmp	r2, r0
90000374:	f200 80b8 	bhi.w	900004e8 <__udivmoddi4+0x2b0>
90000378:	1a84      	subs	r4, r0, r2
9000037a:	eb61 0103 	sbc.w	r1, r1, r3
9000037e:	2001      	movs	r0, #1
90000380:	468c      	mov	ip, r1
90000382:	2d00      	cmp	r5, #0
90000384:	d0a8      	beq.n	900002d8 <__udivmoddi4+0xa0>
90000386:	e9c5 4c00 	strd	r4, ip, [r5]
9000038a:	e7a5      	b.n	900002d8 <__udivmoddi4+0xa0>
9000038c:	f1c2 0320 	rsb	r3, r2, #32
90000390:	fa20 f603 	lsr.w	r6, r0, r3
90000394:	4097      	lsls	r7, r2
90000396:	fa01 f002 	lsl.w	r0, r1, r2
9000039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
9000039e:	40d9      	lsrs	r1, r3
900003a0:	4330      	orrs	r0, r6
900003a2:	0c03      	lsrs	r3, r0, #16
900003a4:	fbb1 f6fe 	udiv	r6, r1, lr
900003a8:	fa1f f887 	uxth.w	r8, r7
900003ac:	fb0e 1116 	mls	r1, lr, r6, r1
900003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
900003b4:	fb06 f108 	mul.w	r1, r6, r8
900003b8:	4299      	cmp	r1, r3
900003ba:	fa04 f402 	lsl.w	r4, r4, r2
900003be:	d909      	bls.n	900003d4 <__udivmoddi4+0x19c>
900003c0:	18fb      	adds	r3, r7, r3
900003c2:	f106 3cff 	add.w	ip, r6, #4294967295
900003c6:	f080 808d 	bcs.w	900004e4 <__udivmoddi4+0x2ac>
900003ca:	4299      	cmp	r1, r3
900003cc:	f240 808a 	bls.w	900004e4 <__udivmoddi4+0x2ac>
900003d0:	3e02      	subs	r6, #2
900003d2:	443b      	add	r3, r7
900003d4:	1a5b      	subs	r3, r3, r1
900003d6:	b281      	uxth	r1, r0
900003d8:	fbb3 f0fe 	udiv	r0, r3, lr
900003dc:	fb0e 3310 	mls	r3, lr, r0, r3
900003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
900003e4:	fb00 f308 	mul.w	r3, r0, r8
900003e8:	428b      	cmp	r3, r1
900003ea:	d907      	bls.n	900003fc <__udivmoddi4+0x1c4>
900003ec:	1879      	adds	r1, r7, r1
900003ee:	f100 3cff 	add.w	ip, r0, #4294967295
900003f2:	d273      	bcs.n	900004dc <__udivmoddi4+0x2a4>
900003f4:	428b      	cmp	r3, r1
900003f6:	d971      	bls.n	900004dc <__udivmoddi4+0x2a4>
900003f8:	3802      	subs	r0, #2
900003fa:	4439      	add	r1, r7
900003fc:	1acb      	subs	r3, r1, r3
900003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
90000402:	e778      	b.n	900002f6 <__udivmoddi4+0xbe>
90000404:	f1c6 0c20 	rsb	ip, r6, #32
90000408:	fa03 f406 	lsl.w	r4, r3, r6
9000040c:	fa22 f30c 	lsr.w	r3, r2, ip
90000410:	431c      	orrs	r4, r3
90000412:	fa20 f70c 	lsr.w	r7, r0, ip
90000416:	fa01 f306 	lsl.w	r3, r1, r6
9000041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
9000041e:	fa21 f10c 	lsr.w	r1, r1, ip
90000422:	431f      	orrs	r7, r3
90000424:	0c3b      	lsrs	r3, r7, #16
90000426:	fbb1 f9fe 	udiv	r9, r1, lr
9000042a:	fa1f f884 	uxth.w	r8, r4
9000042e:	fb0e 1119 	mls	r1, lr, r9, r1
90000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
90000436:	fb09 fa08 	mul.w	sl, r9, r8
9000043a:	458a      	cmp	sl, r1
9000043c:	fa02 f206 	lsl.w	r2, r2, r6
90000440:	fa00 f306 	lsl.w	r3, r0, r6
90000444:	d908      	bls.n	90000458 <__udivmoddi4+0x220>
90000446:	1861      	adds	r1, r4, r1
90000448:	f109 30ff 	add.w	r0, r9, #4294967295
9000044c:	d248      	bcs.n	900004e0 <__udivmoddi4+0x2a8>
9000044e:	458a      	cmp	sl, r1
90000450:	d946      	bls.n	900004e0 <__udivmoddi4+0x2a8>
90000452:	f1a9 0902 	sub.w	r9, r9, #2
90000456:	4421      	add	r1, r4
90000458:	eba1 010a 	sub.w	r1, r1, sl
9000045c:	b2bf      	uxth	r7, r7
9000045e:	fbb1 f0fe 	udiv	r0, r1, lr
90000462:	fb0e 1110 	mls	r1, lr, r0, r1
90000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
9000046a:	fb00 f808 	mul.w	r8, r0, r8
9000046e:	45b8      	cmp	r8, r7
90000470:	d907      	bls.n	90000482 <__udivmoddi4+0x24a>
90000472:	19e7      	adds	r7, r4, r7
90000474:	f100 31ff 	add.w	r1, r0, #4294967295
90000478:	d22e      	bcs.n	900004d8 <__udivmoddi4+0x2a0>
9000047a:	45b8      	cmp	r8, r7
9000047c:	d92c      	bls.n	900004d8 <__udivmoddi4+0x2a0>
9000047e:	3802      	subs	r0, #2
90000480:	4427      	add	r7, r4
90000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
90000486:	eba7 0708 	sub.w	r7, r7, r8
9000048a:	fba0 8902 	umull	r8, r9, r0, r2
9000048e:	454f      	cmp	r7, r9
90000490:	46c6      	mov	lr, r8
90000492:	4649      	mov	r1, r9
90000494:	d31a      	bcc.n	900004cc <__udivmoddi4+0x294>
90000496:	d017      	beq.n	900004c8 <__udivmoddi4+0x290>
90000498:	b15d      	cbz	r5, 900004b2 <__udivmoddi4+0x27a>
9000049a:	ebb3 020e 	subs.w	r2, r3, lr
9000049e:	eb67 0701 	sbc.w	r7, r7, r1
900004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
900004a6:	40f2      	lsrs	r2, r6
900004a8:	ea4c 0202 	orr.w	r2, ip, r2
900004ac:	40f7      	lsrs	r7, r6
900004ae:	e9c5 2700 	strd	r2, r7, [r5]
900004b2:	2600      	movs	r6, #0
900004b4:	4631      	mov	r1, r6
900004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900004ba:	462e      	mov	r6, r5
900004bc:	4628      	mov	r0, r5
900004be:	e70b      	b.n	900002d8 <__udivmoddi4+0xa0>
900004c0:	4606      	mov	r6, r0
900004c2:	e6e9      	b.n	90000298 <__udivmoddi4+0x60>
900004c4:	4618      	mov	r0, r3
900004c6:	e6fd      	b.n	900002c4 <__udivmoddi4+0x8c>
900004c8:	4543      	cmp	r3, r8
900004ca:	d2e5      	bcs.n	90000498 <__udivmoddi4+0x260>
900004cc:	ebb8 0e02 	subs.w	lr, r8, r2
900004d0:	eb69 0104 	sbc.w	r1, r9, r4
900004d4:	3801      	subs	r0, #1
900004d6:	e7df      	b.n	90000498 <__udivmoddi4+0x260>
900004d8:	4608      	mov	r0, r1
900004da:	e7d2      	b.n	90000482 <__udivmoddi4+0x24a>
900004dc:	4660      	mov	r0, ip
900004de:	e78d      	b.n	900003fc <__udivmoddi4+0x1c4>
900004e0:	4681      	mov	r9, r0
900004e2:	e7b9      	b.n	90000458 <__udivmoddi4+0x220>
900004e4:	4666      	mov	r6, ip
900004e6:	e775      	b.n	900003d4 <__udivmoddi4+0x19c>
900004e8:	4630      	mov	r0, r6
900004ea:	e74a      	b.n	90000382 <__udivmoddi4+0x14a>
900004ec:	f1ac 0c02 	sub.w	ip, ip, #2
900004f0:	4439      	add	r1, r7
900004f2:	e713      	b.n	9000031c <__udivmoddi4+0xe4>
900004f4:	3802      	subs	r0, #2
900004f6:	443c      	add	r4, r7
900004f8:	e724      	b.n	90000344 <__udivmoddi4+0x10c>
900004fa:	bf00      	nop

900004fc <__aeabi_idiv0>:
900004fc:	4770      	bx	lr
900004fe:	bf00      	nop

90000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
90000500:	b580      	push	{r7, lr}
90000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
90000504:	f000 fdc8 	bl	90001098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
90000508:	f000 f80e 	bl	90000528 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
9000050c:	f000 f888 	bl	90000620 <_ZL12MX_GPIO_Initv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
   HAL_Delay(1000);
90000510:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
90000514:	f000 fe26 	bl	90001164 <HAL_Delay>
   HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
90000518:	2102      	movs	r1, #2
9000051a:	4802      	ldr	r0, [pc, #8]	; (90000524 <main+0x24>)
9000051c:	f001 f8f1 	bl	90001702 <HAL_GPIO_TogglePin>
   HAL_Delay(1000);
90000520:	e7f6      	b.n	90000510 <main+0x10>
90000522:	bf00      	nop
90000524:	40022000 	.word	0x40022000

90000528 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
90000528:	b580      	push	{r7, lr}
9000052a:	b094      	sub	sp, #80	; 0x50
9000052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
9000052e:	f107 0320 	add.w	r3, r7, #32
90000532:	2230      	movs	r2, #48	; 0x30
90000534:	2100      	movs	r1, #0
90000536:	4618      	mov	r0, r3
90000538:	f001 fdb8 	bl	900020ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
9000053c:	f107 030c 	add.w	r3, r7, #12
90000540:	2200      	movs	r2, #0
90000542:	601a      	str	r2, [r3, #0]
90000544:	605a      	str	r2, [r3, #4]
90000546:	609a      	str	r2, [r3, #8]
90000548:	60da      	str	r2, [r3, #12]
9000054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
9000054c:	4b32      	ldr	r3, [pc, #200]	; (90000618 <_Z18SystemClock_Configv+0xf0>)
9000054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90000550:	4a31      	ldr	r2, [pc, #196]	; (90000618 <_Z18SystemClock_Configv+0xf0>)
90000552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90000556:	6413      	str	r3, [r2, #64]	; 0x40
90000558:	4b2f      	ldr	r3, [pc, #188]	; (90000618 <_Z18SystemClock_Configv+0xf0>)
9000055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90000560:	60bb      	str	r3, [r7, #8]
90000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90000564:	4b2d      	ldr	r3, [pc, #180]	; (9000061c <_Z18SystemClock_Configv+0xf4>)
90000566:	681b      	ldr	r3, [r3, #0]
90000568:	4a2c      	ldr	r2, [pc, #176]	; (9000061c <_Z18SystemClock_Configv+0xf4>)
9000056a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
9000056e:	6013      	str	r3, [r2, #0]
90000570:	4b2a      	ldr	r3, [pc, #168]	; (9000061c <_Z18SystemClock_Configv+0xf4>)
90000572:	681b      	ldr	r3, [r3, #0]
90000574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
90000578:	607b      	str	r3, [r7, #4]
9000057a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
9000057c:	2301      	movs	r3, #1
9000057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
90000580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
90000584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
90000586:	2302      	movs	r3, #2
90000588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
9000058a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
9000058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
90000590:	2319      	movs	r3, #25
90000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
90000594:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
90000598:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
9000059a:	2302      	movs	r3, #2
9000059c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
9000059e:	2302      	movs	r3, #2
900005a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
900005a2:	f107 0320 	add.w	r3, r7, #32
900005a6:	4618      	mov	r0, r3
900005a8:	f001 f916 	bl	900017d8 <HAL_RCC_OscConfig>
900005ac:	4603      	mov	r3, r0
900005ae:	2b00      	cmp	r3, #0
900005b0:	bf14      	ite	ne
900005b2:	2301      	movne	r3, #1
900005b4:	2300      	moveq	r3, #0
900005b6:	b2db      	uxtb	r3, r3
900005b8:	2b00      	cmp	r3, #0
900005ba:	d001      	beq.n	900005c0 <_Z18SystemClock_Configv+0x98>
  {
    Error_Handler();
900005bc:	f000 fcb8 	bl	90000f30 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
900005c0:	f001 f8ba 	bl	90001738 <HAL_PWREx_EnableOverDrive>
900005c4:	4603      	mov	r3, r0
900005c6:	2b00      	cmp	r3, #0
900005c8:	bf14      	ite	ne
900005ca:	2301      	movne	r3, #1
900005cc:	2300      	moveq	r3, #0
900005ce:	b2db      	uxtb	r3, r3
900005d0:	2b00      	cmp	r3, #0
900005d2:	d001      	beq.n	900005d8 <_Z18SystemClock_Configv+0xb0>
  {
    Error_Handler();
900005d4:	f000 fcac 	bl	90000f30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
900005d8:	230f      	movs	r3, #15
900005da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
900005dc:	2302      	movs	r3, #2
900005de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
900005e0:	2300      	movs	r3, #0
900005e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
900005e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
900005e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
900005ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
900005ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
900005f0:	f107 030c 	add.w	r3, r7, #12
900005f4:	2107      	movs	r1, #7
900005f6:	4618      	mov	r0, r3
900005f8:	f001 fb92 	bl	90001d20 <HAL_RCC_ClockConfig>
900005fc:	4603      	mov	r3, r0
900005fe:	2b00      	cmp	r3, #0
90000600:	bf14      	ite	ne
90000602:	2301      	movne	r3, #1
90000604:	2300      	moveq	r3, #0
90000606:	b2db      	uxtb	r3, r3
90000608:	2b00      	cmp	r3, #0
9000060a:	d001      	beq.n	90000610 <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
9000060c:	f000 fc90 	bl	90000f30 <Error_Handler>
  }
}
90000610:	bf00      	nop
90000612:	3750      	adds	r7, #80	; 0x50
90000614:	46bd      	mov	sp, r7
90000616:	bd80      	pop	{r7, pc}
90000618:	40023800 	.word	0x40023800
9000061c:	40007000 	.word	0x40007000

90000620 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
90000620:	b580      	push	{r7, lr}
90000622:	b090      	sub	sp, #64	; 0x40
90000624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90000626:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000062a:	2200      	movs	r2, #0
9000062c:	601a      	str	r2, [r3, #0]
9000062e:	605a      	str	r2, [r3, #4]
90000630:	609a      	str	r2, [r3, #8]
90000632:	60da      	str	r2, [r3, #12]
90000634:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
90000636:	4bad      	ldr	r3, [pc, #692]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
90000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000063a:	4aac      	ldr	r2, [pc, #688]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
9000063c:	f043 0310 	orr.w	r3, r3, #16
90000640:	6313      	str	r3, [r2, #48]	; 0x30
90000642:	4baa      	ldr	r3, [pc, #680]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
90000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000646:	f003 0310 	and.w	r3, r3, #16
9000064a:	62bb      	str	r3, [r7, #40]	; 0x28
9000064c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
9000064e:	4ba7      	ldr	r3, [pc, #668]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
90000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000652:	4aa6      	ldr	r2, [pc, #664]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
90000654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90000658:	6313      	str	r3, [r2, #48]	; 0x30
9000065a:	4ba4      	ldr	r3, [pc, #656]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
9000065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000065e:	f003 0340 	and.w	r3, r3, #64	; 0x40
90000662:	627b      	str	r3, [r7, #36]	; 0x24
90000664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
90000666:	4ba1      	ldr	r3, [pc, #644]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
90000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000066a:	4aa0      	ldr	r2, [pc, #640]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
9000066c:	f043 0302 	orr.w	r3, r3, #2
90000670:	6313      	str	r3, [r2, #48]	; 0x30
90000672:	4b9e      	ldr	r3, [pc, #632]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
90000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000676:	f003 0302 	and.w	r3, r3, #2
9000067a:	623b      	str	r3, [r7, #32]
9000067c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
9000067e:	4b9b      	ldr	r3, [pc, #620]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
90000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000682:	4a9a      	ldr	r2, [pc, #616]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
90000684:	f043 0308 	orr.w	r3, r3, #8
90000688:	6313      	str	r3, [r2, #48]	; 0x30
9000068a:	4b98      	ldr	r3, [pc, #608]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
9000068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000068e:	f003 0308 	and.w	r3, r3, #8
90000692:	61fb      	str	r3, [r7, #28]
90000694:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
90000696:	4b95      	ldr	r3, [pc, #596]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
90000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000069a:	4a94      	ldr	r2, [pc, #592]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
9000069c:	f043 0304 	orr.w	r3, r3, #4
900006a0:	6313      	str	r3, [r2, #48]	; 0x30
900006a2:	4b92      	ldr	r3, [pc, #584]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
900006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900006a6:	f003 0304 	and.w	r3, r3, #4
900006aa:	61bb      	str	r3, [r7, #24]
900006ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
900006ae:	4b8f      	ldr	r3, [pc, #572]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
900006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900006b2:	4a8e      	ldr	r2, [pc, #568]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
900006b4:	f043 0301 	orr.w	r3, r3, #1
900006b8:	6313      	str	r3, [r2, #48]	; 0x30
900006ba:	4b8c      	ldr	r3, [pc, #560]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
900006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900006be:	f003 0301 	and.w	r3, r3, #1
900006c2:	617b      	str	r3, [r7, #20]
900006c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
900006c6:	4b89      	ldr	r3, [pc, #548]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
900006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900006ca:	4a88      	ldr	r2, [pc, #544]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
900006cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
900006d0:	6313      	str	r3, [r2, #48]	; 0x30
900006d2:	4b86      	ldr	r3, [pc, #536]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
900006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900006d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
900006da:	613b      	str	r3, [r7, #16]
900006dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
900006de:	4b83      	ldr	r3, [pc, #524]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
900006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900006e2:	4a82      	ldr	r2, [pc, #520]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
900006e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900006e8:	6313      	str	r3, [r2, #48]	; 0x30
900006ea:	4b80      	ldr	r3, [pc, #512]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
900006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900006ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
900006f2:	60fb      	str	r3, [r7, #12]
900006f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
900006f6:	4b7d      	ldr	r3, [pc, #500]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
900006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900006fa:	4a7c      	ldr	r2, [pc, #496]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
900006fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
90000700:	6313      	str	r3, [r2, #48]	; 0x30
90000702:	4b7a      	ldr	r3, [pc, #488]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
90000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
9000070a:	60bb      	str	r3, [r7, #8]
9000070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
9000070e:	4b77      	ldr	r3, [pc, #476]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
90000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000712:	4a76      	ldr	r2, [pc, #472]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
90000714:	f043 0320 	orr.w	r3, r3, #32
90000718:	6313      	str	r3, [r2, #48]	; 0x30
9000071a:	4b74      	ldr	r3, [pc, #464]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
9000071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000071e:	f003 0320 	and.w	r3, r3, #32
90000722:	607b      	str	r3, [r7, #4]
90000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90000726:	4b71      	ldr	r3, [pc, #452]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
90000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000072a:	4a70      	ldr	r2, [pc, #448]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
9000072c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90000730:	6313      	str	r3, [r2, #48]	; 0x30
90000732:	4b6e      	ldr	r3, [pc, #440]	; (900008ec <_ZL12MX_GPIO_Initv+0x2cc>)
90000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000736:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000073a:	603b      	str	r3, [r7, #0]
9000073c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
9000073e:	2201      	movs	r2, #1
90000740:	2120      	movs	r1, #32
90000742:	486b      	ldr	r0, [pc, #428]	; (900008f0 <_ZL12MX_GPIO_Initv+0x2d0>)
90000744:	f000 ffc4 	bl	900016d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin, GPIO_PIN_RESET);
90000748:	2200      	movs	r2, #0
9000074a:	f241 010e 	movw	r1, #4110	; 0x100e
9000074e:	4869      	ldr	r0, [pc, #420]	; (900008f4 <_ZL12MX_GPIO_Initv+0x2d4>)
90000750:	f000 ffbe 	bl	900016d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
90000754:	2200      	movs	r2, #0
90000756:	2108      	movs	r1, #8
90000758:	4867      	ldr	r0, [pc, #412]	; (900008f8 <_ZL12MX_GPIO_Initv+0x2d8>)
9000075a:	f000 ffb9 	bl	900016d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
9000075e:	2200      	movs	r2, #0
90000760:	f44f 5100 	mov.w	r1, #8192	; 0x2000
90000764:	4865      	ldr	r0, [pc, #404]	; (900008fc <_ZL12MX_GPIO_Initv+0x2dc>)
90000766:	f000 ffb3 	bl	900016d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
9000076a:	2200      	movs	r2, #0
9000076c:	21c8      	movs	r1, #200	; 0xc8
9000076e:	4864      	ldr	r0, [pc, #400]	; (90000900 <_ZL12MX_GPIO_Initv+0x2e0>)
90000770:	f000 ffae 	bl	900016d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
90000774:	2310      	movs	r3, #16
90000776:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000778:	2302      	movs	r3, #2
9000077a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000077c:	2300      	movs	r3, #0
9000077e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000780:	2300      	movs	r3, #0
90000782:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90000784:	230e      	movs	r3, #14
90000786:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
90000788:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000078c:	4619      	mov	r1, r3
9000078e:	485d      	ldr	r0, [pc, #372]	; (90000904 <_ZL12MX_GPIO_Initv+0x2e4>)
90000790:	f000 fdf2 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
90000794:	2308      	movs	r3, #8
90000796:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000798:	2300      	movs	r3, #0
9000079a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000079c:	2300      	movs	r3, #0
9000079e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
900007a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900007a4:	4619      	mov	r1, r3
900007a6:	4857      	ldr	r0, [pc, #348]	; (90000904 <_ZL12MX_GPIO_Initv+0x2e4>)
900007a8:	f000 fde6 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
900007ac:	2304      	movs	r3, #4
900007ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900007b0:	2302      	movs	r3, #2
900007b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900007b4:	2300      	movs	r3, #0
900007b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900007b8:	2303      	movs	r3, #3
900007ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
900007bc:	2309      	movs	r3, #9
900007be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
900007c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900007c4:	4619      	mov	r1, r3
900007c6:	484f      	ldr	r0, [pc, #316]	; (90000904 <_ZL12MX_GPIO_Initv+0x2e4>)
900007c8:	f000 fdd6 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
900007cc:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
900007d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900007d2:	2302      	movs	r3, #2
900007d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900007d6:	2300      	movs	r3, #0
900007d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900007da:	2303      	movs	r3, #3
900007dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
900007de:	230b      	movs	r3, #11
900007e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
900007e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900007e6:	4619      	mov	r1, r3
900007e8:	4845      	ldr	r0, [pc, #276]	; (90000900 <_ZL12MX_GPIO_Initv+0x2e0>)
900007ea:	f000 fdc5 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
900007ee:	f64f 7383 	movw	r3, #65411	; 0xff83
900007f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900007f4:	2302      	movs	r3, #2
900007f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900007f8:	2300      	movs	r3, #0
900007fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900007fc:	2303      	movs	r3, #3
900007fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90000800:	230c      	movs	r3, #12
90000802:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90000804:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000808:	4619      	mov	r1, r3
9000080a:	483e      	ldr	r0, [pc, #248]	; (90000904 <_ZL12MX_GPIO_Initv+0x2e4>)
9000080c:	f000 fdb4 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
90000810:	f44f 7340 	mov.w	r3, #768	; 0x300
90000814:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
90000816:	2312      	movs	r3, #18
90000818:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
9000081a:	2301      	movs	r3, #1
9000081c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000081e:	2300      	movs	r3, #0
90000820:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
90000822:	2304      	movs	r3, #4
90000824:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000826:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000082a:	4619      	mov	r1, r3
9000082c:	4836      	ldr	r0, [pc, #216]	; (90000908 <_ZL12MX_GPIO_Initv+0x2e8>)
9000082e:	f000 fda3 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
90000832:	f643 4323 	movw	r3, #15395	; 0x3c23
90000836:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000838:	2302      	movs	r3, #2
9000083a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000083c:	2300      	movs	r3, #0
9000083e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000840:	2303      	movs	r3, #3
90000842:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
90000844:	230a      	movs	r3, #10
90000846:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000848:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000084c:	4619      	mov	r1, r3
9000084e:	482e      	ldr	r0, [pc, #184]	; (90000908 <_ZL12MX_GPIO_Initv+0x2e8>)
90000850:	f000 fd92 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
90000854:	2310      	movs	r3, #16
90000856:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000858:	2302      	movs	r3, #2
9000085a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000085c:	2300      	movs	r3, #0
9000085e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000860:	2300      	movs	r3, #0
90000862:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
90000864:	2302      	movs	r3, #2
90000866:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
90000868:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000086c:	4619      	mov	r1, r3
9000086e:	4826      	ldr	r0, [pc, #152]	; (90000908 <_ZL12MX_GPIO_Initv+0x2e8>)
90000870:	f000 fd82 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
90000874:	2380      	movs	r3, #128	; 0x80
90000876:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000878:	2302      	movs	r3, #2
9000087a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000087c:	2300      	movs	r3, #0
9000087e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000880:	2300      	movs	r3, #0
90000882:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
90000884:	2308      	movs	r3, #8
90000886:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
90000888:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000088c:	4619      	mov	r1, r3
9000088e:	4818      	ldr	r0, [pc, #96]	; (900008f0 <_ZL12MX_GPIO_Initv+0x2d0>)
90000890:	f000 fd72 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
90000894:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
90000898:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000089a:	2302      	movs	r3, #2
9000089c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000089e:	2300      	movs	r3, #0
900008a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900008a2:	2303      	movs	r3, #3
900008a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
900008a6:	230c      	movs	r3, #12
900008a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
900008aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900008ae:	4619      	mov	r1, r3
900008b0:	4816      	ldr	r0, [pc, #88]	; (9000090c <_ZL12MX_GPIO_Initv+0x2ec>)
900008b2:	f000 fd61 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
900008b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
900008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900008bc:	2302      	movs	r3, #2
900008be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900008c0:	2300      	movs	r3, #0
900008c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900008c4:	2300      	movs	r3, #0
900008c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
900008c8:	2301      	movs	r3, #1
900008ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
900008cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900008d0:	4619      	mov	r1, r3
900008d2:	480f      	ldr	r0, [pc, #60]	; (90000910 <_ZL12MX_GPIO_Initv+0x2f0>)
900008d4:	f000 fd50 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
900008d8:	2360      	movs	r3, #96	; 0x60
900008da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900008dc:	2302      	movs	r3, #2
900008de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900008e0:	2300      	movs	r3, #0
900008e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900008e4:	2300      	movs	r3, #0
900008e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
900008e8:	230d      	movs	r3, #13
900008ea:	e013      	b.n	90000914 <_ZL12MX_GPIO_Initv+0x2f4>
900008ec:	40023800 	.word	0x40023800
900008f0:	40020c00 	.word	0x40020c00
900008f4:	40022000 	.word	0x40022000
900008f8:	40022800 	.word	0x40022800
900008fc:	40021c00 	.word	0x40021c00
90000900:	40021800 	.word	0x40021800
90000904:	40021000 	.word	0x40021000
90000908:	40020400 	.word	0x40020400
9000090c:	40020800 	.word	0x40020800
90000910:	40020000 	.word	0x40020000
90000914:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90000916:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000091a:	4619      	mov	r1, r3
9000091c:	48bb      	ldr	r0, [pc, #748]	; (90000c0c <_ZL12MX_GPIO_Initv+0x5ec>)
9000091e:	f000 fd2b 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
90000922:	2380      	movs	r3, #128	; 0x80
90000924:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000926:	2302      	movs	r3, #2
90000928:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000092a:	2300      	movs	r3, #0
9000092c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000092e:	2300      	movs	r3, #0
90000930:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
90000932:	2307      	movs	r3, #7
90000934:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
90000936:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000093a:	4619      	mov	r1, r3
9000093c:	48b4      	ldr	r0, [pc, #720]	; (90000c10 <_ZL12MX_GPIO_Initv+0x5f0>)
9000093e:	f000 fd1b 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
90000942:	2340      	movs	r3, #64	; 0x40
90000944:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000946:	2302      	movs	r3, #2
90000948:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000094a:	2300      	movs	r3, #0
9000094c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
9000094e:	2303      	movs	r3, #3
90000950:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
90000952:	230a      	movs	r3, #10
90000954:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
90000956:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000095a:	4619      	mov	r1, r3
9000095c:	48ac      	ldr	r0, [pc, #688]	; (90000c10 <_ZL12MX_GPIO_Initv+0x5f0>)
9000095e:	f000 fd0b 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
90000962:	f248 1333 	movw	r3, #33075	; 0x8133
90000966:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000968:	2302      	movs	r3, #2
9000096a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000096c:	2300      	movs	r3, #0
9000096e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000970:	2303      	movs	r3, #3
90000972:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90000974:	230c      	movs	r3, #12
90000976:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90000978:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000097c:	4619      	mov	r1, r3
9000097e:	48a5      	ldr	r0, [pc, #660]	; (90000c14 <_ZL12MX_GPIO_Initv+0x5f4>)
90000980:	f000 fcfa 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
90000984:	f64e 73ff 	movw	r3, #61439	; 0xefff
90000988:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000098a:	2302      	movs	r3, #2
9000098c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000098e:	2300      	movs	r3, #0
90000990:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000992:	2300      	movs	r3, #0
90000994:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90000996:	230e      	movs	r3, #14
90000998:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
9000099a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000099e:	4619      	mov	r1, r3
900009a0:	489d      	ldr	r0, [pc, #628]	; (90000c18 <_ZL12MX_GPIO_Initv+0x5f8>)
900009a2:	f000 fce9 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
900009a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
900009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
900009ac:	2300      	movs	r3, #0
900009ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900009b0:	2300      	movs	r3, #0
900009b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
900009b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900009b8:	4619      	mov	r1, r3
900009ba:	4897      	ldr	r0, [pc, #604]	; (90000c18 <_ZL12MX_GPIO_Initv+0x5f8>)
900009bc:	f000 fcdc 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
900009c0:	2340      	movs	r3, #64	; 0x40
900009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
900009c4:	4b95      	ldr	r3, [pc, #596]	; (90000c1c <_ZL12MX_GPIO_Initv+0x5fc>)
900009c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900009c8:	2300      	movs	r3, #0
900009ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
900009cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900009d0:	4619      	mov	r1, r3
900009d2:	4893      	ldr	r0, [pc, #588]	; (90000c20 <_ZL12MX_GPIO_Initv+0x600>)
900009d4:	f000 fcd0 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
900009d8:	f24c 7303 	movw	r3, #50947	; 0xc703
900009dc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900009de:	2302      	movs	r3, #2
900009e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900009e2:	2300      	movs	r3, #0
900009e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900009e6:	2303      	movs	r3, #3
900009e8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
900009ea:	230c      	movs	r3, #12
900009ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
900009ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900009f2:	4619      	mov	r1, r3
900009f4:	488a      	ldr	r0, [pc, #552]	; (90000c20 <_ZL12MX_GPIO_Initv+0x600>)
900009f6:	f000 fcbf 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
900009fa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
900009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000a00:	2302      	movs	r3, #2
90000a02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000a04:	2300      	movs	r3, #0
90000a06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000a08:	2303      	movs	r3, #3
90000a0a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
90000a0c:	230a      	movs	r3, #10
90000a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90000a10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000a14:	4619      	mov	r1, r3
90000a16:	4883      	ldr	r0, [pc, #524]	; (90000c24 <_ZL12MX_GPIO_Initv+0x604>)
90000a18:	f000 fcae 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
90000a1c:	23f0      	movs	r3, #240	; 0xf0
90000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000a20:	2302      	movs	r3, #2
90000a22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000a24:	2300      	movs	r3, #0
90000a26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000a28:	2300      	movs	r3, #0
90000a2a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
90000a2c:	230a      	movs	r3, #10
90000a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
90000a30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000a34:	4619      	mov	r1, r3
90000a36:	487c      	ldr	r0, [pc, #496]	; (90000c28 <_ZL12MX_GPIO_Initv+0x608>)
90000a38:	f000 fc9e 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
90000a3c:	23f7      	movs	r3, #247	; 0xf7
90000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000a40:	2302      	movs	r3, #2
90000a42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000a44:	2300      	movs	r3, #0
90000a46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000a48:	2300      	movs	r3, #0
90000a4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90000a4c:	230e      	movs	r3, #14
90000a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
90000a50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000a54:	4619      	mov	r1, r3
90000a56:	4875      	ldr	r0, [pc, #468]	; (90000c2c <_ZL12MX_GPIO_Initv+0x60c>)
90000a58:	f000 fc8e 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
90000a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000a62:	2302      	movs	r3, #2
90000a64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000a66:	2300      	movs	r3, #0
90000a68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000a6a:	2300      	movs	r3, #0
90000a6c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
90000a6e:	2309      	movs	r3, #9
90000a70:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
90000a72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000a76:	4619      	mov	r1, r3
90000a78:	4866      	ldr	r0, [pc, #408]	; (90000c14 <_ZL12MX_GPIO_Initv+0x5f4>)
90000a7a:	f000 fc7d 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
90000a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
90000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000a84:	2302      	movs	r3, #2
90000a86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000a88:	2300      	movs	r3, #0
90000a8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000a8c:	2300      	movs	r3, #0
90000a8e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
90000a90:	230a      	movs	r3, #10
90000a92:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
90000a94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000a98:	4619      	mov	r1, r3
90000a9a:	485e      	ldr	r0, [pc, #376]	; (90000c14 <_ZL12MX_GPIO_Initv+0x5f4>)
90000a9c:	f000 fc6c 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
90000aa0:	2320      	movs	r3, #32
90000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000aa4:	2301      	movs	r3, #1
90000aa6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000aa8:	2300      	movs	r3, #0
90000aaa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000aac:	2300      	movs	r3, #0
90000aae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
90000ab0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000ab4:	4619      	mov	r1, r3
90000ab6:	485a      	ldr	r0, [pc, #360]	; (90000c20 <_ZL12MX_GPIO_Initv+0x600>)
90000ab8:	f000 fc5e 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
90000abc:	2308      	movs	r3, #8
90000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000ac0:	2302      	movs	r3, #2
90000ac2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000ac4:	2300      	movs	r3, #0
90000ac6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000ac8:	2300      	movs	r3, #0
90000aca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
90000acc:	230d      	movs	r3, #13
90000ace:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
90000ad0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000ad4:	4619      	mov	r1, r3
90000ad6:	4852      	ldr	r0, [pc, #328]	; (90000c20 <_ZL12MX_GPIO_Initv+0x600>)
90000ad8:	f000 fc4e 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
90000adc:	f241 030e 	movw	r3, #4110	; 0x100e
90000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000ae2:	2301      	movs	r3, #1
90000ae4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000ae6:	2300      	movs	r3, #0
90000ae8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000aea:	2300      	movs	r3, #0
90000aec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
90000aee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000af2:	4619      	mov	r1, r3
90000af4:	484c      	ldr	r0, [pc, #304]	; (90000c28 <_ZL12MX_GPIO_Initv+0x608>)
90000af6:	f000 fc3f 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
90000afa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
90000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000b00:	2300      	movs	r3, #0
90000b02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000b04:	2300      	movs	r3, #0
90000b06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
90000b08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000b0c:	4619      	mov	r1, r3
90000b0e:	4848      	ldr	r0, [pc, #288]	; (90000c30 <_ZL12MX_GPIO_Initv+0x610>)
90000b10:	f000 fc32 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
90000b14:	f64f 033f 	movw	r3, #63551	; 0xf83f
90000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000b1a:	2302      	movs	r3, #2
90000b1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000b1e:	2300      	movs	r3, #0
90000b20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000b22:	2303      	movs	r3, #3
90000b24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90000b26:	230c      	movs	r3, #12
90000b28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90000b2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000b2e:	4619      	mov	r1, r3
90000b30:	4840      	ldr	r0, [pc, #256]	; (90000c34 <_ZL12MX_GPIO_Initv+0x614>)
90000b32:	f000 fc21 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
90000b36:	f44f 4346 	mov.w	r3, #50688	; 0xc600
90000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000b3c:	2302      	movs	r3, #2
90000b3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000b40:	2300      	movs	r3, #0
90000b42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000b44:	2300      	movs	r3, #0
90000b46:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90000b48:	230e      	movs	r3, #14
90000b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
90000b4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000b50:	4619      	mov	r1, r3
90000b52:	4835      	ldr	r0, [pc, #212]	; (90000c28 <_ZL12MX_GPIO_Initv+0x608>)
90000b54:	f000 fc10 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
90000b58:	2308      	movs	r3, #8
90000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000b5c:	2301      	movs	r3, #1
90000b5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000b60:	2300      	movs	r3, #0
90000b62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000b64:	2300      	movs	r3, #0
90000b66:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
90000b68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000b6c:	4619      	mov	r1, r3
90000b6e:	482f      	ldr	r0, [pc, #188]	; (90000c2c <_ZL12MX_GPIO_Initv+0x60c>)
90000b70:	f000 fc02 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
90000b74:	f44f 7300 	mov.w	r3, #512	; 0x200
90000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000b7a:	2302      	movs	r3, #2
90000b7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000b7e:	2300      	movs	r3, #0
90000b80:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000b82:	2300      	movs	r3, #0
90000b84:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
90000b86:	230d      	movs	r3, #13
90000b88:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
90000b8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000b8e:	4619      	mov	r1, r3
90000b90:	4820      	ldr	r0, [pc, #128]	; (90000c14 <_ZL12MX_GPIO_Initv+0x5f4>)
90000b92:	f000 fbf1 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
90000b96:	2310      	movs	r3, #16
90000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000b9a:	2300      	movs	r3, #0
90000b9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000b9e:	2300      	movs	r3, #0
90000ba0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
90000ba2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000ba6:	4619      	mov	r1, r3
90000ba8:	481d      	ldr	r0, [pc, #116]	; (90000c20 <_ZL12MX_GPIO_Initv+0x600>)
90000baa:	f000 fbe5 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
90000bae:	2304      	movs	r3, #4
90000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000bb2:	2302      	movs	r3, #2
90000bb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000bb6:	2300      	movs	r3, #0
90000bb8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000bba:	2303      	movs	r3, #3
90000bbc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
90000bbe:	230c      	movs	r3, #12
90000bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
90000bc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000bc6:	4619      	mov	r1, r3
90000bc8:	4815      	ldr	r0, [pc, #84]	; (90000c20 <_ZL12MX_GPIO_Initv+0x600>)
90000bca:	f000 fbd5 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
90000bce:	f248 0304 	movw	r3, #32772	; 0x8004
90000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000bd4:	2300      	movs	r3, #0
90000bd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000bd8:	2300      	movs	r3, #0
90000bda:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90000bdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000be0:	4619      	mov	r1, r3
90000be2:	4815      	ldr	r0, [pc, #84]	; (90000c38 <_ZL12MX_GPIO_Initv+0x618>)
90000be4:	f000 fbc8 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
90000be8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
90000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000bee:	2301      	movs	r3, #1
90000bf0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000bf2:	2300      	movs	r3, #0
90000bf4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000bf6:	2300      	movs	r3, #0
90000bf8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
90000bfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000bfe:	4619      	mov	r1, r3
90000c00:	480d      	ldr	r0, [pc, #52]	; (90000c38 <_ZL12MX_GPIO_Initv+0x618>)
90000c02:	f000 fbb9 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
90000c06:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
90000c0a:	e017      	b.n	90000c3c <_ZL12MX_GPIO_Initv+0x61c>
90000c0c:	40021000 	.word	0x40021000
90000c10:	40020400 	.word	0x40020400
90000c14:	40021800 	.word	0x40021800
90000c18:	40022400 	.word	0x40022400
90000c1c:	10120000 	.word	0x10120000
90000c20:	40020c00 	.word	0x40020c00
90000c24:	40020000 	.word	0x40020000
90000c28:	40022000 	.word	0x40022000
90000c2c:	40022800 	.word	0x40022800
90000c30:	40020800 	.word	0x40020800
90000c34:	40021400 	.word	0x40021400
90000c38:	40021c00 	.word	0x40021c00
90000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000c3e:	2302      	movs	r3, #2
90000c40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000c42:	2300      	movs	r3, #0
90000c44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000c46:	2300      	movs	r3, #0
90000c48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
90000c4a:	230d      	movs	r3, #13
90000c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90000c4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000c52:	4619      	mov	r1, r3
90000c54:	48ad      	ldr	r0, [pc, #692]	; (90000f0c <_ZL12MX_GPIO_Initv+0x8ec>)
90000c56:	f000 fb8f 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
90000c5a:	2301      	movs	r3, #1
90000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000c5e:	2302      	movs	r3, #2
90000c60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000c62:	2300      	movs	r3, #0
90000c64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000c66:	2300      	movs	r3, #0
90000c68:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
90000c6a:	2302      	movs	r3, #2
90000c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
90000c6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000c72:	4619      	mov	r1, r3
90000c74:	48a6      	ldr	r0, [pc, #664]	; (90000f10 <_ZL12MX_GPIO_Initv+0x8f0>)
90000c76:	f000 fb7f 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
90000c7a:	f44f 7300 	mov.w	r3, #512	; 0x200
90000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000c80:	2302      	movs	r3, #2
90000c82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000c84:	2300      	movs	r3, #0
90000c86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000c88:	2300      	movs	r3, #0
90000c8a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
90000c8c:	2307      	movs	r3, #7
90000c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
90000c90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000c94:	4619      	mov	r1, r3
90000c96:	489f      	ldr	r0, [pc, #636]	; (90000f14 <_ZL12MX_GPIO_Initv+0x8f4>)
90000c98:	f000 fb6e 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
90000c9c:	f44f 7380 	mov.w	r3, #256	; 0x100
90000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000ca2:	2302      	movs	r3, #2
90000ca4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000ca6:	2300      	movs	r3, #0
90000ca8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000caa:	2300      	movs	r3, #0
90000cac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
90000cae:	2301      	movs	r3, #1
90000cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
90000cb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000cb6:	4619      	mov	r1, r3
90000cb8:	4896      	ldr	r0, [pc, #600]	; (90000f14 <_ZL12MX_GPIO_Initv+0x8f4>)
90000cba:	f000 fb5d 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
90000cbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
90000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
90000cc4:	4b94      	ldr	r3, [pc, #592]	; (90000f18 <_ZL12MX_GPIO_Initv+0x8f8>)
90000cc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000cc8:	2300      	movs	r3, #0
90000cca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
90000ccc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000cd0:	4619      	mov	r1, r3
90000cd2:	488f      	ldr	r0, [pc, #572]	; (90000f10 <_ZL12MX_GPIO_Initv+0x8f0>)
90000cd4:	f000 fb50 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
90000cd8:	23c0      	movs	r3, #192	; 0xc0
90000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000cdc:	2302      	movs	r3, #2
90000cde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000ce0:	2300      	movs	r3, #0
90000ce2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000ce4:	2303      	movs	r3, #3
90000ce6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
90000ce8:	2308      	movs	r3, #8
90000cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
90000cec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000cf0:	4619      	mov	r1, r3
90000cf2:	488a      	ldr	r0, [pc, #552]	; (90000f1c <_ZL12MX_GPIO_Initv+0x8fc>)
90000cf4:	f000 fb40 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
90000cf8:	2310      	movs	r3, #16
90000cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000cfc:	2302      	movs	r3, #2
90000cfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000d00:	2300      	movs	r3, #0
90000d02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000d04:	2303      	movs	r3, #3
90000d06:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
90000d08:	230a      	movs	r3, #10
90000d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
90000d0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000d10:	4619      	mov	r1, r3
90000d12:	487e      	ldr	r0, [pc, #504]	; (90000f0c <_ZL12MX_GPIO_Initv+0x8ec>)
90000d14:	f000 fb30 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
90000d18:	2328      	movs	r3, #40	; 0x28
90000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000d1c:	2302      	movs	r3, #2
90000d1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000d20:	2300      	movs	r3, #0
90000d22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000d24:	2303      	movs	r3, #3
90000d26:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90000d28:	230c      	movs	r3, #12
90000d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90000d2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000d30:	4619      	mov	r1, r3
90000d32:	4876      	ldr	r0, [pc, #472]	; (90000f0c <_ZL12MX_GPIO_Initv+0x8ec>)
90000d34:	f000 fb20 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
90000d38:	23c8      	movs	r3, #200	; 0xc8
90000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000d3c:	2301      	movs	r3, #1
90000d3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000d40:	2300      	movs	r3, #0
90000d42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000d44:	2300      	movs	r3, #0
90000d46:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90000d48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000d4c:	4619      	mov	r1, r3
90000d4e:	4874      	ldr	r0, [pc, #464]	; (90000f20 <_ZL12MX_GPIO_Initv+0x900>)
90000d50:	f000 fb12 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
90000d54:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
90000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
90000d5a:	2303      	movs	r3, #3
90000d5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000d5e:	2300      	movs	r3, #0
90000d60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90000d62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000d66:	4619      	mov	r1, r3
90000d68:	486e      	ldr	r0, [pc, #440]	; (90000f24 <_ZL12MX_GPIO_Initv+0x904>)
90000d6a:	f000 fb05 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
90000d6e:	2308      	movs	r3, #8
90000d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000d72:	2302      	movs	r3, #2
90000d74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000d76:	2300      	movs	r3, #0
90000d78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000d7a:	2303      	movs	r3, #3
90000d7c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90000d7e:	230c      	movs	r3, #12
90000d80:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
90000d82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000d86:	4619      	mov	r1, r3
90000d88:	4864      	ldr	r0, [pc, #400]	; (90000f1c <_ZL12MX_GPIO_Initv+0x8fc>)
90000d8a:	f000 faf5 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
90000d8e:	2305      	movs	r3, #5
90000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000d92:	2302      	movs	r3, #2
90000d94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000d96:	2300      	movs	r3, #0
90000d98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000d9a:	2303      	movs	r3, #3
90000d9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
90000d9e:	230a      	movs	r3, #10
90000da0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
90000da2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000da6:	4619      	mov	r1, r3
90000da8:	485c      	ldr	r0, [pc, #368]	; (90000f1c <_ZL12MX_GPIO_Initv+0x8fc>)
90000daa:	f000 fae5 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
90000dae:	2332      	movs	r3, #50	; 0x32
90000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000db2:	2302      	movs	r3, #2
90000db4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000db6:	2300      	movs	r3, #0
90000db8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000dba:	2303      	movs	r3, #3
90000dbc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
90000dbe:	230b      	movs	r3, #11
90000dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
90000dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000dc6:	4619      	mov	r1, r3
90000dc8:	4854      	ldr	r0, [pc, #336]	; (90000f1c <_ZL12MX_GPIO_Initv+0x8fc>)
90000dca:	f000 fad5 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
90000dce:	2304      	movs	r3, #4
90000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000dd2:	2302      	movs	r3, #2
90000dd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000dd6:	2300      	movs	r3, #0
90000dd8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000dda:	2303      	movs	r3, #3
90000ddc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
90000dde:	2309      	movs	r3, #9
90000de0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000de2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000de6:	4619      	mov	r1, r3
90000de8:	484f      	ldr	r0, [pc, #316]	; (90000f28 <_ZL12MX_GPIO_Initv+0x908>)
90000dea:	f000 fac5 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
90000dee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
90000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000df4:	2302      	movs	r3, #2
90000df6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000df8:	2300      	movs	r3, #0
90000dfa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000dfc:	2303      	movs	r3, #3
90000dfe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
90000e00:	2309      	movs	r3, #9
90000e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90000e04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000e08:	4619      	mov	r1, r3
90000e0a:	4848      	ldr	r0, [pc, #288]	; (90000f2c <_ZL12MX_GPIO_Initv+0x90c>)
90000e0c:	f000 fab4 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
90000e10:	2304      	movs	r3, #4
90000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000e14:	2300      	movs	r3, #0
90000e16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000e18:	2300      	movs	r3, #0
90000e1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
90000e1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000e20:	4619      	mov	r1, r3
90000e22:	483f      	ldr	r0, [pc, #252]	; (90000f20 <_ZL12MX_GPIO_Initv+0x900>)
90000e24:	f000 faa8 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
90000e28:	2386      	movs	r3, #134	; 0x86
90000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000e2c:	2302      	movs	r3, #2
90000e2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000e30:	2300      	movs	r3, #0
90000e32:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000e34:	2303      	movs	r3, #3
90000e36:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
90000e38:	230b      	movs	r3, #11
90000e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90000e3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000e40:	4619      	mov	r1, r3
90000e42:	4834      	ldr	r0, [pc, #208]	; (90000f14 <_ZL12MX_GPIO_Initv+0x8f4>)
90000e44:	f000 fa98 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
90000e48:	2301      	movs	r3, #1
90000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
90000e4c:	2303      	movs	r3, #3
90000e4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000e50:	2300      	movs	r3, #0
90000e52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
90000e54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000e58:	4619      	mov	r1, r3
90000e5a:	482e      	ldr	r0, [pc, #184]	; (90000f14 <_ZL12MX_GPIO_Initv+0x8f4>)
90000e5c:	f000 fa8c 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
90000e60:	2350      	movs	r3, #80	; 0x50
90000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000e64:	2302      	movs	r3, #2
90000e66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000e68:	2300      	movs	r3, #0
90000e6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000e6c:	2300      	movs	r3, #0
90000e6e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
90000e70:	230d      	movs	r3, #13
90000e72:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90000e74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000e78:	4619      	mov	r1, r3
90000e7a:	4826      	ldr	r0, [pc, #152]	; (90000f14 <_ZL12MX_GPIO_Initv+0x8f4>)
90000e7c:	f000 fa7c 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
90000e80:	f44f 73c0 	mov.w	r3, #384	; 0x180
90000e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
90000e86:	2312      	movs	r3, #18
90000e88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
90000e8a:	2301      	movs	r3, #1
90000e8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000e8e:	2303      	movs	r3, #3
90000e90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
90000e92:	2304      	movs	r3, #4
90000e94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90000e96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000e9a:	4619      	mov	r1, r3
90000e9c:	481b      	ldr	r0, [pc, #108]	; (90000f0c <_ZL12MX_GPIO_Initv+0x8ec>)
90000e9e:	f000 fa6b 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
90000ea2:	2328      	movs	r3, #40	; 0x28
90000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000ea6:	2302      	movs	r3, #2
90000ea8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000eaa:	2300      	movs	r3, #0
90000eac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000eae:	2303      	movs	r3, #3
90000eb0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
90000eb2:	230a      	movs	r3, #10
90000eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90000eb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000eba:	4619      	mov	r1, r3
90000ebc:	4815      	ldr	r0, [pc, #84]	; (90000f14 <_ZL12MX_GPIO_Initv+0x8f4>)
90000ebe:	f000 fa5b 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
90000ec2:	2340      	movs	r3, #64	; 0x40
90000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000ec6:	2302      	movs	r3, #2
90000ec8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000eca:	2300      	movs	r3, #0
90000ecc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000ece:	2300      	movs	r3, #0
90000ed0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
90000ed2:	2309      	movs	r3, #9
90000ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
90000ed6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000eda:	4619      	mov	r1, r3
90000edc:	480b      	ldr	r0, [pc, #44]	; (90000f0c <_ZL12MX_GPIO_Initv+0x8ec>)
90000ede:	f000 fa4b 	bl	90001378 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
90000ee2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
90000ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000ee8:	2302      	movs	r3, #2
90000eea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000eec:	2300      	movs	r3, #0
90000eee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000ef0:	2300      	movs	r3, #0
90000ef2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
90000ef4:	2305      	movs	r3, #5
90000ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000ef8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000efc:	4619      	mov	r1, r3
90000efe:	480a      	ldr	r0, [pc, #40]	; (90000f28 <_ZL12MX_GPIO_Initv+0x908>)
90000f00:	f000 fa3a 	bl	90001378 <HAL_GPIO_Init>

}
90000f04:	bf00      	nop
90000f06:	3740      	adds	r7, #64	; 0x40
90000f08:	46bd      	mov	sp, r7
90000f0a:	bd80      	pop	{r7, pc}
90000f0c:	40021c00 	.word	0x40021c00
90000f10:	40022000 	.word	0x40022000
90000f14:	40020000 	.word	0x40020000
90000f18:	10120000 	.word	0x10120000
90000f1c:	40020800 	.word	0x40020800
90000f20:	40021800 	.word	0x40021800
90000f24:	40021400 	.word	0x40021400
90000f28:	40020400 	.word	0x40020400
90000f2c:	40020c00 	.word	0x40020c00

90000f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
90000f30:	b480      	push	{r7}
90000f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
90000f34:	b672      	cpsid	i
}
90000f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
90000f38:	e7fe      	b.n	90000f38 <Error_Handler+0x8>
	...

90000f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
90000f3c:	b480      	push	{r7}
90000f3e:	b083      	sub	sp, #12
90000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
90000f42:	4b0f      	ldr	r3, [pc, #60]	; (90000f80 <HAL_MspInit+0x44>)
90000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90000f46:	4a0e      	ldr	r2, [pc, #56]	; (90000f80 <HAL_MspInit+0x44>)
90000f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90000f4c:	6413      	str	r3, [r2, #64]	; 0x40
90000f4e:	4b0c      	ldr	r3, [pc, #48]	; (90000f80 <HAL_MspInit+0x44>)
90000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90000f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90000f56:	607b      	str	r3, [r7, #4]
90000f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
90000f5a:	4b09      	ldr	r3, [pc, #36]	; (90000f80 <HAL_MspInit+0x44>)
90000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90000f5e:	4a08      	ldr	r2, [pc, #32]	; (90000f80 <HAL_MspInit+0x44>)
90000f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
90000f64:	6453      	str	r3, [r2, #68]	; 0x44
90000f66:	4b06      	ldr	r3, [pc, #24]	; (90000f80 <HAL_MspInit+0x44>)
90000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90000f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90000f6e:	603b      	str	r3, [r7, #0]
90000f70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
90000f72:	bf00      	nop
90000f74:	370c      	adds	r7, #12
90000f76:	46bd      	mov	sp, r7
90000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f7c:	4770      	bx	lr
90000f7e:	bf00      	nop
90000f80:	40023800 	.word	0x40023800

90000f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
90000f84:	b480      	push	{r7}
90000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
90000f88:	e7fe      	b.n	90000f88 <NMI_Handler+0x4>

90000f8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
90000f8a:	b480      	push	{r7}
90000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
90000f8e:	e7fe      	b.n	90000f8e <HardFault_Handler+0x4>

90000f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
90000f90:	b480      	push	{r7}
90000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
90000f94:	e7fe      	b.n	90000f94 <MemManage_Handler+0x4>

90000f96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
90000f96:	b480      	push	{r7}
90000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
90000f9a:	e7fe      	b.n	90000f9a <BusFault_Handler+0x4>

90000f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
90000f9c:	b480      	push	{r7}
90000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
90000fa0:	e7fe      	b.n	90000fa0 <UsageFault_Handler+0x4>

90000fa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
90000fa2:	b480      	push	{r7}
90000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
90000fa6:	bf00      	nop
90000fa8:	46bd      	mov	sp, r7
90000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
90000fae:	4770      	bx	lr

90000fb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
90000fb0:	b480      	push	{r7}
90000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
90000fb4:	bf00      	nop
90000fb6:	46bd      	mov	sp, r7
90000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
90000fbc:	4770      	bx	lr

90000fbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
90000fbe:	b480      	push	{r7}
90000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
90000fc2:	bf00      	nop
90000fc4:	46bd      	mov	sp, r7
90000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
90000fca:	4770      	bx	lr

90000fcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
90000fcc:	b580      	push	{r7, lr}
90000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
90000fd0:	f000 f8a8 	bl	90001124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
90000fd4:	bf00      	nop
90000fd6:	bd80      	pop	{r7, pc}

90000fd8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
90000fd8:	b480      	push	{r7}
90000fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
90000fdc:	4b15      	ldr	r3, [pc, #84]	; (90001034 <SystemInit+0x5c>)
90000fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90000fe2:	4a14      	ldr	r2, [pc, #80]	; (90001034 <SystemInit+0x5c>)
90000fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
90000fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
90000fec:	4b12      	ldr	r3, [pc, #72]	; (90001038 <SystemInit+0x60>)
90000fee:	681b      	ldr	r3, [r3, #0]
90000ff0:	4a11      	ldr	r2, [pc, #68]	; (90001038 <SystemInit+0x60>)
90000ff2:	f043 0301 	orr.w	r3, r3, #1
90000ff6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90000ff8:	4b0f      	ldr	r3, [pc, #60]	; (90001038 <SystemInit+0x60>)
90000ffa:	2200      	movs	r2, #0
90000ffc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
90000ffe:	4b0e      	ldr	r3, [pc, #56]	; (90001038 <SystemInit+0x60>)
90001000:	681a      	ldr	r2, [r3, #0]
90001002:	490d      	ldr	r1, [pc, #52]	; (90001038 <SystemInit+0x60>)
90001004:	4b0d      	ldr	r3, [pc, #52]	; (9000103c <SystemInit+0x64>)
90001006:	4013      	ands	r3, r2
90001008:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
9000100a:	4b0b      	ldr	r3, [pc, #44]	; (90001038 <SystemInit+0x60>)
9000100c:	4a0c      	ldr	r2, [pc, #48]	; (90001040 <SystemInit+0x68>)
9000100e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
90001010:	4b09      	ldr	r3, [pc, #36]	; (90001038 <SystemInit+0x60>)
90001012:	681b      	ldr	r3, [r3, #0]
90001014:	4a08      	ldr	r2, [pc, #32]	; (90001038 <SystemInit+0x60>)
90001016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
9000101a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
9000101c:	4b06      	ldr	r3, [pc, #24]	; (90001038 <SystemInit+0x60>)
9000101e:	2200      	movs	r2, #0
90001020:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = APPLICATION_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation to APPLICATION_ADDRESS in preprocessor defines */
90001022:	4b04      	ldr	r3, [pc, #16]	; (90001034 <SystemInit+0x5c>)
90001024:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
90001028:	609a      	str	r2, [r3, #8]
#endif
}
9000102a:	bf00      	nop
9000102c:	46bd      	mov	sp, r7
9000102e:	f85d 7b04 	ldr.w	r7, [sp], #4
90001032:	4770      	bx	lr
90001034:	e000ed00 	.word	0xe000ed00
90001038:	40023800 	.word	0x40023800
9000103c:	fef6ffff 	.word	0xfef6ffff
90001040:	24003010 	.word	0x24003010

90001044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
90001044:	f8df d034 	ldr.w	sp, [pc, #52]	; 9000107c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
90001048:	480d      	ldr	r0, [pc, #52]	; (90001080 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
9000104a:	490e      	ldr	r1, [pc, #56]	; (90001084 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
9000104c:	4a0e      	ldr	r2, [pc, #56]	; (90001088 <LoopFillZerobss+0x1e>)
  movs r3, #0
9000104e:	2300      	movs	r3, #0
  b LoopCopyDataInit
90001050:	e002      	b.n	90001058 <LoopCopyDataInit>

90001052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
90001052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
90001054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
90001056:	3304      	adds	r3, #4

90001058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
90001058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
9000105a:	428c      	cmp	r4, r1
  bcc CopyDataInit
9000105c:	d3f9      	bcc.n	90001052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
9000105e:	4a0b      	ldr	r2, [pc, #44]	; (9000108c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
90001060:	4c0b      	ldr	r4, [pc, #44]	; (90001090 <LoopFillZerobss+0x26>)
  movs r3, #0
90001062:	2300      	movs	r3, #0
  b LoopFillZerobss
90001064:	e001      	b.n	9000106a <LoopFillZerobss>

90001066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
90001066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
90001068:	3204      	adds	r2, #4

9000106a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
9000106a:	42a2      	cmp	r2, r4
  bcc FillZerobss
9000106c:	d3fb      	bcc.n	90001066 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
9000106e:	f7ff ffb3 	bl	90000fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
90001072:	f000 fff7 	bl	90002064 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
90001076:	f7ff fa43 	bl	90000500 <main>
  bx  lr    
9000107a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
9000107c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
90001080:	20000000 	.word	0x20000000
  ldr r1, =_edata
90001084:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
90001088:	900020f4 	.word	0x900020f4
  ldr r2, =_sbss
9000108c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
90001090:	2000002c 	.word	0x2000002c

90001094 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
90001094:	e7fe      	b.n	90001094 <ADC_IRQHandler>
	...

90001098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90001098:	b580      	push	{r7, lr}
9000109a:	af00      	add	r7, sp, #0
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
9000109c:	4b08      	ldr	r3, [pc, #32]	; (900010c0 <HAL_Init+0x28>)
9000109e:	681b      	ldr	r3, [r3, #0]
900010a0:	4a07      	ldr	r2, [pc, #28]	; (900010c0 <HAL_Init+0x28>)
900010a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900010a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
900010a8:	2003      	movs	r0, #3
900010aa:	f000 f931 	bl	90001310 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
900010ae:	200f      	movs	r0, #15
900010b0:	f000 f808 	bl	900010c4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
900010b4:	f7ff ff42 	bl	90000f3c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
900010b8:	2300      	movs	r3, #0
}
900010ba:	4618      	mov	r0, r3
900010bc:	bd80      	pop	{r7, pc}
900010be:	bf00      	nop
900010c0:	40023c00 	.word	0x40023c00

900010c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
900010c4:	b580      	push	{r7, lr}
900010c6:	b082      	sub	sp, #8
900010c8:	af00      	add	r7, sp, #0
900010ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
900010cc:	4b12      	ldr	r3, [pc, #72]	; (90001118 <HAL_InitTick+0x54>)
900010ce:	681a      	ldr	r2, [r3, #0]
900010d0:	4b12      	ldr	r3, [pc, #72]	; (9000111c <HAL_InitTick+0x58>)
900010d2:	781b      	ldrb	r3, [r3, #0]
900010d4:	4619      	mov	r1, r3
900010d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
900010da:	fbb3 f3f1 	udiv	r3, r3, r1
900010de:	fbb2 f3f3 	udiv	r3, r2, r3
900010e2:	4618      	mov	r0, r3
900010e4:	f000 f93b 	bl	9000135e <HAL_SYSTICK_Config>
900010e8:	4603      	mov	r3, r0
900010ea:	2b00      	cmp	r3, #0
900010ec:	d001      	beq.n	900010f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
900010ee:	2301      	movs	r3, #1
900010f0:	e00e      	b.n	90001110 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
900010f2:	687b      	ldr	r3, [r7, #4]
900010f4:	2b0f      	cmp	r3, #15
900010f6:	d80a      	bhi.n	9000110e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
900010f8:	2200      	movs	r2, #0
900010fa:	6879      	ldr	r1, [r7, #4]
900010fc:	f04f 30ff 	mov.w	r0, #4294967295
90001100:	f000 f911 	bl	90001326 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
90001104:	4a06      	ldr	r2, [pc, #24]	; (90001120 <HAL_InitTick+0x5c>)
90001106:	687b      	ldr	r3, [r7, #4]
90001108:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
9000110a:	2300      	movs	r3, #0
9000110c:	e000      	b.n	90001110 <HAL_InitTick+0x4c>
    return HAL_ERROR;
9000110e:	2301      	movs	r3, #1
}
90001110:	4618      	mov	r0, r3
90001112:	3708      	adds	r7, #8
90001114:	46bd      	mov	sp, r7
90001116:	bd80      	pop	{r7, pc}
90001118:	20000000 	.word	0x20000000
9000111c:	20000008 	.word	0x20000008
90001120:	20000004 	.word	0x20000004

90001124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
90001124:	b480      	push	{r7}
90001126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
90001128:	4b06      	ldr	r3, [pc, #24]	; (90001144 <HAL_IncTick+0x20>)
9000112a:	781b      	ldrb	r3, [r3, #0]
9000112c:	461a      	mov	r2, r3
9000112e:	4b06      	ldr	r3, [pc, #24]	; (90001148 <HAL_IncTick+0x24>)
90001130:	681b      	ldr	r3, [r3, #0]
90001132:	4413      	add	r3, r2
90001134:	4a04      	ldr	r2, [pc, #16]	; (90001148 <HAL_IncTick+0x24>)
90001136:	6013      	str	r3, [r2, #0]
}
90001138:	bf00      	nop
9000113a:	46bd      	mov	sp, r7
9000113c:	f85d 7b04 	ldr.w	r7, [sp], #4
90001140:	4770      	bx	lr
90001142:	bf00      	nop
90001144:	20000008 	.word	0x20000008
90001148:	20000028 	.word	0x20000028

9000114c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
9000114c:	b480      	push	{r7}
9000114e:	af00      	add	r7, sp, #0
  return uwTick;
90001150:	4b03      	ldr	r3, [pc, #12]	; (90001160 <HAL_GetTick+0x14>)
90001152:	681b      	ldr	r3, [r3, #0]
}
90001154:	4618      	mov	r0, r3
90001156:	46bd      	mov	sp, r7
90001158:	f85d 7b04 	ldr.w	r7, [sp], #4
9000115c:	4770      	bx	lr
9000115e:	bf00      	nop
90001160:	20000028 	.word	0x20000028

90001164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
90001164:	b580      	push	{r7, lr}
90001166:	b084      	sub	sp, #16
90001168:	af00      	add	r7, sp, #0
9000116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
9000116c:	f7ff ffee 	bl	9000114c <HAL_GetTick>
90001170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
90001172:	687b      	ldr	r3, [r7, #4]
90001174:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
90001176:	68fb      	ldr	r3, [r7, #12]
90001178:	f1b3 3fff 	cmp.w	r3, #4294967295
9000117c:	d005      	beq.n	9000118a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
9000117e:	4b0a      	ldr	r3, [pc, #40]	; (900011a8 <HAL_Delay+0x44>)
90001180:	781b      	ldrb	r3, [r3, #0]
90001182:	461a      	mov	r2, r3
90001184:	68fb      	ldr	r3, [r7, #12]
90001186:	4413      	add	r3, r2
90001188:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
9000118a:	bf00      	nop
9000118c:	f7ff ffde 	bl	9000114c <HAL_GetTick>
90001190:	4602      	mov	r2, r0
90001192:	68bb      	ldr	r3, [r7, #8]
90001194:	1ad3      	subs	r3, r2, r3
90001196:	68fa      	ldr	r2, [r7, #12]
90001198:	429a      	cmp	r2, r3
9000119a:	d8f7      	bhi.n	9000118c <HAL_Delay+0x28>
  {
  }
}
9000119c:	bf00      	nop
9000119e:	bf00      	nop
900011a0:	3710      	adds	r7, #16
900011a2:	46bd      	mov	sp, r7
900011a4:	bd80      	pop	{r7, pc}
900011a6:	bf00      	nop
900011a8:	20000008 	.word	0x20000008

900011ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
900011ac:	b480      	push	{r7}
900011ae:	b085      	sub	sp, #20
900011b0:	af00      	add	r7, sp, #0
900011b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
900011b4:	687b      	ldr	r3, [r7, #4]
900011b6:	f003 0307 	and.w	r3, r3, #7
900011ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
900011bc:	4b0b      	ldr	r3, [pc, #44]	; (900011ec <__NVIC_SetPriorityGrouping+0x40>)
900011be:	68db      	ldr	r3, [r3, #12]
900011c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
900011c2:	68ba      	ldr	r2, [r7, #8]
900011c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
900011c8:	4013      	ands	r3, r2
900011ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
900011cc:	68fb      	ldr	r3, [r7, #12]
900011ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
900011d0:	68bb      	ldr	r3, [r7, #8]
900011d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
900011d4:	4b06      	ldr	r3, [pc, #24]	; (900011f0 <__NVIC_SetPriorityGrouping+0x44>)
900011d6:	4313      	orrs	r3, r2
900011d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
900011da:	4a04      	ldr	r2, [pc, #16]	; (900011ec <__NVIC_SetPriorityGrouping+0x40>)
900011dc:	68bb      	ldr	r3, [r7, #8]
900011de:	60d3      	str	r3, [r2, #12]
}
900011e0:	bf00      	nop
900011e2:	3714      	adds	r7, #20
900011e4:	46bd      	mov	sp, r7
900011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
900011ea:	4770      	bx	lr
900011ec:	e000ed00 	.word	0xe000ed00
900011f0:	05fa0000 	.word	0x05fa0000

900011f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
900011f4:	b480      	push	{r7}
900011f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
900011f8:	4b04      	ldr	r3, [pc, #16]	; (9000120c <__NVIC_GetPriorityGrouping+0x18>)
900011fa:	68db      	ldr	r3, [r3, #12]
900011fc:	0a1b      	lsrs	r3, r3, #8
900011fe:	f003 0307 	and.w	r3, r3, #7
}
90001202:	4618      	mov	r0, r3
90001204:	46bd      	mov	sp, r7
90001206:	f85d 7b04 	ldr.w	r7, [sp], #4
9000120a:	4770      	bx	lr
9000120c:	e000ed00 	.word	0xe000ed00

90001210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
90001210:	b480      	push	{r7}
90001212:	b083      	sub	sp, #12
90001214:	af00      	add	r7, sp, #0
90001216:	4603      	mov	r3, r0
90001218:	6039      	str	r1, [r7, #0]
9000121a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
9000121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
90001220:	2b00      	cmp	r3, #0
90001222:	db0a      	blt.n	9000123a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90001224:	683b      	ldr	r3, [r7, #0]
90001226:	b2da      	uxtb	r2, r3
90001228:	490c      	ldr	r1, [pc, #48]	; (9000125c <__NVIC_SetPriority+0x4c>)
9000122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000122e:	0112      	lsls	r2, r2, #4
90001230:	b2d2      	uxtb	r2, r2
90001232:	440b      	add	r3, r1
90001234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
90001238:	e00a      	b.n	90001250 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000123a:	683b      	ldr	r3, [r7, #0]
9000123c:	b2da      	uxtb	r2, r3
9000123e:	4908      	ldr	r1, [pc, #32]	; (90001260 <__NVIC_SetPriority+0x50>)
90001240:	79fb      	ldrb	r3, [r7, #7]
90001242:	f003 030f 	and.w	r3, r3, #15
90001246:	3b04      	subs	r3, #4
90001248:	0112      	lsls	r2, r2, #4
9000124a:	b2d2      	uxtb	r2, r2
9000124c:	440b      	add	r3, r1
9000124e:	761a      	strb	r2, [r3, #24]
}
90001250:	bf00      	nop
90001252:	370c      	adds	r7, #12
90001254:	46bd      	mov	sp, r7
90001256:	f85d 7b04 	ldr.w	r7, [sp], #4
9000125a:	4770      	bx	lr
9000125c:	e000e100 	.word	0xe000e100
90001260:	e000ed00 	.word	0xe000ed00

90001264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
90001264:	b480      	push	{r7}
90001266:	b089      	sub	sp, #36	; 0x24
90001268:	af00      	add	r7, sp, #0
9000126a:	60f8      	str	r0, [r7, #12]
9000126c:	60b9      	str	r1, [r7, #8]
9000126e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
90001270:	68fb      	ldr	r3, [r7, #12]
90001272:	f003 0307 	and.w	r3, r3, #7
90001276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90001278:	69fb      	ldr	r3, [r7, #28]
9000127a:	f1c3 0307 	rsb	r3, r3, #7
9000127e:	2b04      	cmp	r3, #4
90001280:	bf28      	it	cs
90001282:	2304      	movcs	r3, #4
90001284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90001286:	69fb      	ldr	r3, [r7, #28]
90001288:	3304      	adds	r3, #4
9000128a:	2b06      	cmp	r3, #6
9000128c:	d902      	bls.n	90001294 <NVIC_EncodePriority+0x30>
9000128e:	69fb      	ldr	r3, [r7, #28]
90001290:	3b03      	subs	r3, #3
90001292:	e000      	b.n	90001296 <NVIC_EncodePriority+0x32>
90001294:	2300      	movs	r3, #0
90001296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90001298:	f04f 32ff 	mov.w	r2, #4294967295
9000129c:	69bb      	ldr	r3, [r7, #24]
9000129e:	fa02 f303 	lsl.w	r3, r2, r3
900012a2:	43da      	mvns	r2, r3
900012a4:	68bb      	ldr	r3, [r7, #8]
900012a6:	401a      	ands	r2, r3
900012a8:	697b      	ldr	r3, [r7, #20]
900012aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
900012ac:	f04f 31ff 	mov.w	r1, #4294967295
900012b0:	697b      	ldr	r3, [r7, #20]
900012b2:	fa01 f303 	lsl.w	r3, r1, r3
900012b6:	43d9      	mvns	r1, r3
900012b8:	687b      	ldr	r3, [r7, #4]
900012ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900012bc:	4313      	orrs	r3, r2
         );
}
900012be:	4618      	mov	r0, r3
900012c0:	3724      	adds	r7, #36	; 0x24
900012c2:	46bd      	mov	sp, r7
900012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
900012c8:	4770      	bx	lr
	...

900012cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
900012cc:	b580      	push	{r7, lr}
900012ce:	b082      	sub	sp, #8
900012d0:	af00      	add	r7, sp, #0
900012d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
900012d4:	687b      	ldr	r3, [r7, #4]
900012d6:	3b01      	subs	r3, #1
900012d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
900012dc:	d301      	bcc.n	900012e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
900012de:	2301      	movs	r3, #1
900012e0:	e00f      	b.n	90001302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
900012e2:	4a0a      	ldr	r2, [pc, #40]	; (9000130c <SysTick_Config+0x40>)
900012e4:	687b      	ldr	r3, [r7, #4]
900012e6:	3b01      	subs	r3, #1
900012e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
900012ea:	210f      	movs	r1, #15
900012ec:	f04f 30ff 	mov.w	r0, #4294967295
900012f0:	f7ff ff8e 	bl	90001210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
900012f4:	4b05      	ldr	r3, [pc, #20]	; (9000130c <SysTick_Config+0x40>)
900012f6:	2200      	movs	r2, #0
900012f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
900012fa:	4b04      	ldr	r3, [pc, #16]	; (9000130c <SysTick_Config+0x40>)
900012fc:	2207      	movs	r2, #7
900012fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
90001300:	2300      	movs	r3, #0
}
90001302:	4618      	mov	r0, r3
90001304:	3708      	adds	r7, #8
90001306:	46bd      	mov	sp, r7
90001308:	bd80      	pop	{r7, pc}
9000130a:	bf00      	nop
9000130c:	e000e010 	.word	0xe000e010

90001310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
90001310:	b580      	push	{r7, lr}
90001312:	b082      	sub	sp, #8
90001314:	af00      	add	r7, sp, #0
90001316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
90001318:	6878      	ldr	r0, [r7, #4]
9000131a:	f7ff ff47 	bl	900011ac <__NVIC_SetPriorityGrouping>
}
9000131e:	bf00      	nop
90001320:	3708      	adds	r7, #8
90001322:	46bd      	mov	sp, r7
90001324:	bd80      	pop	{r7, pc}

90001326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
90001326:	b580      	push	{r7, lr}
90001328:	b086      	sub	sp, #24
9000132a:	af00      	add	r7, sp, #0
9000132c:	4603      	mov	r3, r0
9000132e:	60b9      	str	r1, [r7, #8]
90001330:	607a      	str	r2, [r7, #4]
90001332:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
90001334:	2300      	movs	r3, #0
90001336:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
90001338:	f7ff ff5c 	bl	900011f4 <__NVIC_GetPriorityGrouping>
9000133c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
9000133e:	687a      	ldr	r2, [r7, #4]
90001340:	68b9      	ldr	r1, [r7, #8]
90001342:	6978      	ldr	r0, [r7, #20]
90001344:	f7ff ff8e 	bl	90001264 <NVIC_EncodePriority>
90001348:	4602      	mov	r2, r0
9000134a:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000134e:	4611      	mov	r1, r2
90001350:	4618      	mov	r0, r3
90001352:	f7ff ff5d 	bl	90001210 <__NVIC_SetPriority>
}
90001356:	bf00      	nop
90001358:	3718      	adds	r7, #24
9000135a:	46bd      	mov	sp, r7
9000135c:	bd80      	pop	{r7, pc}

9000135e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
9000135e:	b580      	push	{r7, lr}
90001360:	b082      	sub	sp, #8
90001362:	af00      	add	r7, sp, #0
90001364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
90001366:	6878      	ldr	r0, [r7, #4]
90001368:	f7ff ffb0 	bl	900012cc <SysTick_Config>
9000136c:	4603      	mov	r3, r0
}
9000136e:	4618      	mov	r0, r3
90001370:	3708      	adds	r7, #8
90001372:	46bd      	mov	sp, r7
90001374:	bd80      	pop	{r7, pc}
	...

90001378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
90001378:	b480      	push	{r7}
9000137a:	b089      	sub	sp, #36	; 0x24
9000137c:	af00      	add	r7, sp, #0
9000137e:	6078      	str	r0, [r7, #4]
90001380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
90001382:	2300      	movs	r3, #0
90001384:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
90001386:	2300      	movs	r3, #0
90001388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
9000138a:	2300      	movs	r3, #0
9000138c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
9000138e:	2300      	movs	r3, #0
90001390:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
90001392:	2300      	movs	r3, #0
90001394:	61fb      	str	r3, [r7, #28]
90001396:	e175      	b.n	90001684 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
90001398:	2201      	movs	r2, #1
9000139a:	69fb      	ldr	r3, [r7, #28]
9000139c:	fa02 f303 	lsl.w	r3, r2, r3
900013a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
900013a2:	683b      	ldr	r3, [r7, #0]
900013a4:	681b      	ldr	r3, [r3, #0]
900013a6:	697a      	ldr	r2, [r7, #20]
900013a8:	4013      	ands	r3, r2
900013aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
900013ac:	693a      	ldr	r2, [r7, #16]
900013ae:	697b      	ldr	r3, [r7, #20]
900013b0:	429a      	cmp	r2, r3
900013b2:	f040 8164 	bne.w	9000167e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
900013b6:	683b      	ldr	r3, [r7, #0]
900013b8:	685b      	ldr	r3, [r3, #4]
900013ba:	2b01      	cmp	r3, #1
900013bc:	d00b      	beq.n	900013d6 <HAL_GPIO_Init+0x5e>
900013be:	683b      	ldr	r3, [r7, #0]
900013c0:	685b      	ldr	r3, [r3, #4]
900013c2:	2b02      	cmp	r3, #2
900013c4:	d007      	beq.n	900013d6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
900013c6:	683b      	ldr	r3, [r7, #0]
900013c8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
900013ca:	2b11      	cmp	r3, #17
900013cc:	d003      	beq.n	900013d6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
900013ce:	683b      	ldr	r3, [r7, #0]
900013d0:	685b      	ldr	r3, [r3, #4]
900013d2:	2b12      	cmp	r3, #18
900013d4:	d130      	bne.n	90001438 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
900013d6:	687b      	ldr	r3, [r7, #4]
900013d8:	689b      	ldr	r3, [r3, #8]
900013da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
900013dc:	69fb      	ldr	r3, [r7, #28]
900013de:	005b      	lsls	r3, r3, #1
900013e0:	2203      	movs	r2, #3
900013e2:	fa02 f303 	lsl.w	r3, r2, r3
900013e6:	43db      	mvns	r3, r3
900013e8:	69ba      	ldr	r2, [r7, #24]
900013ea:	4013      	ands	r3, r2
900013ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
900013ee:	683b      	ldr	r3, [r7, #0]
900013f0:	68da      	ldr	r2, [r3, #12]
900013f2:	69fb      	ldr	r3, [r7, #28]
900013f4:	005b      	lsls	r3, r3, #1
900013f6:	fa02 f303 	lsl.w	r3, r2, r3
900013fa:	69ba      	ldr	r2, [r7, #24]
900013fc:	4313      	orrs	r3, r2
900013fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
90001400:	687b      	ldr	r3, [r7, #4]
90001402:	69ba      	ldr	r2, [r7, #24]
90001404:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
90001406:	687b      	ldr	r3, [r7, #4]
90001408:	685b      	ldr	r3, [r3, #4]
9000140a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
9000140c:	2201      	movs	r2, #1
9000140e:	69fb      	ldr	r3, [r7, #28]
90001410:	fa02 f303 	lsl.w	r3, r2, r3
90001414:	43db      	mvns	r3, r3
90001416:	69ba      	ldr	r2, [r7, #24]
90001418:	4013      	ands	r3, r2
9000141a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
9000141c:	683b      	ldr	r3, [r7, #0]
9000141e:	685b      	ldr	r3, [r3, #4]
90001420:	091b      	lsrs	r3, r3, #4
90001422:	f003 0201 	and.w	r2, r3, #1
90001426:	69fb      	ldr	r3, [r7, #28]
90001428:	fa02 f303 	lsl.w	r3, r2, r3
9000142c:	69ba      	ldr	r2, [r7, #24]
9000142e:	4313      	orrs	r3, r2
90001430:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
90001432:	687b      	ldr	r3, [r7, #4]
90001434:	69ba      	ldr	r2, [r7, #24]
90001436:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
90001438:	687b      	ldr	r3, [r7, #4]
9000143a:	68db      	ldr	r3, [r3, #12]
9000143c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
9000143e:	69fb      	ldr	r3, [r7, #28]
90001440:	005b      	lsls	r3, r3, #1
90001442:	2203      	movs	r2, #3
90001444:	fa02 f303 	lsl.w	r3, r2, r3
90001448:	43db      	mvns	r3, r3
9000144a:	69ba      	ldr	r2, [r7, #24]
9000144c:	4013      	ands	r3, r2
9000144e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
90001450:	683b      	ldr	r3, [r7, #0]
90001452:	689a      	ldr	r2, [r3, #8]
90001454:	69fb      	ldr	r3, [r7, #28]
90001456:	005b      	lsls	r3, r3, #1
90001458:	fa02 f303 	lsl.w	r3, r2, r3
9000145c:	69ba      	ldr	r2, [r7, #24]
9000145e:	4313      	orrs	r3, r2
90001460:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
90001462:	687b      	ldr	r3, [r7, #4]
90001464:	69ba      	ldr	r2, [r7, #24]
90001466:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
90001468:	683b      	ldr	r3, [r7, #0]
9000146a:	685b      	ldr	r3, [r3, #4]
9000146c:	2b02      	cmp	r3, #2
9000146e:	d003      	beq.n	90001478 <HAL_GPIO_Init+0x100>
90001470:	683b      	ldr	r3, [r7, #0]
90001472:	685b      	ldr	r3, [r3, #4]
90001474:	2b12      	cmp	r3, #18
90001476:	d123      	bne.n	900014c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
90001478:	69fb      	ldr	r3, [r7, #28]
9000147a:	08da      	lsrs	r2, r3, #3
9000147c:	687b      	ldr	r3, [r7, #4]
9000147e:	3208      	adds	r2, #8
90001480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90001484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
90001486:	69fb      	ldr	r3, [r7, #28]
90001488:	f003 0307 	and.w	r3, r3, #7
9000148c:	009b      	lsls	r3, r3, #2
9000148e:	220f      	movs	r2, #15
90001490:	fa02 f303 	lsl.w	r3, r2, r3
90001494:	43db      	mvns	r3, r3
90001496:	69ba      	ldr	r2, [r7, #24]
90001498:	4013      	ands	r3, r2
9000149a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
9000149c:	683b      	ldr	r3, [r7, #0]
9000149e:	691a      	ldr	r2, [r3, #16]
900014a0:	69fb      	ldr	r3, [r7, #28]
900014a2:	f003 0307 	and.w	r3, r3, #7
900014a6:	009b      	lsls	r3, r3, #2
900014a8:	fa02 f303 	lsl.w	r3, r2, r3
900014ac:	69ba      	ldr	r2, [r7, #24]
900014ae:	4313      	orrs	r3, r2
900014b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
900014b2:	69fb      	ldr	r3, [r7, #28]
900014b4:	08da      	lsrs	r2, r3, #3
900014b6:	687b      	ldr	r3, [r7, #4]
900014b8:	3208      	adds	r2, #8
900014ba:	69b9      	ldr	r1, [r7, #24]
900014bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
900014c0:	687b      	ldr	r3, [r7, #4]
900014c2:	681b      	ldr	r3, [r3, #0]
900014c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
900014c6:	69fb      	ldr	r3, [r7, #28]
900014c8:	005b      	lsls	r3, r3, #1
900014ca:	2203      	movs	r2, #3
900014cc:	fa02 f303 	lsl.w	r3, r2, r3
900014d0:	43db      	mvns	r3, r3
900014d2:	69ba      	ldr	r2, [r7, #24]
900014d4:	4013      	ands	r3, r2
900014d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
900014d8:	683b      	ldr	r3, [r7, #0]
900014da:	685b      	ldr	r3, [r3, #4]
900014dc:	f003 0203 	and.w	r2, r3, #3
900014e0:	69fb      	ldr	r3, [r7, #28]
900014e2:	005b      	lsls	r3, r3, #1
900014e4:	fa02 f303 	lsl.w	r3, r2, r3
900014e8:	69ba      	ldr	r2, [r7, #24]
900014ea:	4313      	orrs	r3, r2
900014ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
900014ee:	687b      	ldr	r3, [r7, #4]
900014f0:	69ba      	ldr	r2, [r7, #24]
900014f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
900014f4:	683b      	ldr	r3, [r7, #0]
900014f6:	685b      	ldr	r3, [r3, #4]
900014f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
900014fc:	2b00      	cmp	r3, #0
900014fe:	f000 80be 	beq.w	9000167e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90001502:	4b66      	ldr	r3, [pc, #408]	; (9000169c <HAL_GPIO_Init+0x324>)
90001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001506:	4a65      	ldr	r2, [pc, #404]	; (9000169c <HAL_GPIO_Init+0x324>)
90001508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
9000150c:	6453      	str	r3, [r2, #68]	; 0x44
9000150e:	4b63      	ldr	r3, [pc, #396]	; (9000169c <HAL_GPIO_Init+0x324>)
90001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90001516:	60fb      	str	r3, [r7, #12]
90001518:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
9000151a:	4a61      	ldr	r2, [pc, #388]	; (900016a0 <HAL_GPIO_Init+0x328>)
9000151c:	69fb      	ldr	r3, [r7, #28]
9000151e:	089b      	lsrs	r3, r3, #2
90001520:	3302      	adds	r3, #2
90001522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90001526:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
90001528:	69fb      	ldr	r3, [r7, #28]
9000152a:	f003 0303 	and.w	r3, r3, #3
9000152e:	009b      	lsls	r3, r3, #2
90001530:	220f      	movs	r2, #15
90001532:	fa02 f303 	lsl.w	r3, r2, r3
90001536:	43db      	mvns	r3, r3
90001538:	69ba      	ldr	r2, [r7, #24]
9000153a:	4013      	ands	r3, r2
9000153c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
9000153e:	687b      	ldr	r3, [r7, #4]
90001540:	4a58      	ldr	r2, [pc, #352]	; (900016a4 <HAL_GPIO_Init+0x32c>)
90001542:	4293      	cmp	r3, r2
90001544:	d037      	beq.n	900015b6 <HAL_GPIO_Init+0x23e>
90001546:	687b      	ldr	r3, [r7, #4]
90001548:	4a57      	ldr	r2, [pc, #348]	; (900016a8 <HAL_GPIO_Init+0x330>)
9000154a:	4293      	cmp	r3, r2
9000154c:	d031      	beq.n	900015b2 <HAL_GPIO_Init+0x23a>
9000154e:	687b      	ldr	r3, [r7, #4]
90001550:	4a56      	ldr	r2, [pc, #344]	; (900016ac <HAL_GPIO_Init+0x334>)
90001552:	4293      	cmp	r3, r2
90001554:	d02b      	beq.n	900015ae <HAL_GPIO_Init+0x236>
90001556:	687b      	ldr	r3, [r7, #4]
90001558:	4a55      	ldr	r2, [pc, #340]	; (900016b0 <HAL_GPIO_Init+0x338>)
9000155a:	4293      	cmp	r3, r2
9000155c:	d025      	beq.n	900015aa <HAL_GPIO_Init+0x232>
9000155e:	687b      	ldr	r3, [r7, #4]
90001560:	4a54      	ldr	r2, [pc, #336]	; (900016b4 <HAL_GPIO_Init+0x33c>)
90001562:	4293      	cmp	r3, r2
90001564:	d01f      	beq.n	900015a6 <HAL_GPIO_Init+0x22e>
90001566:	687b      	ldr	r3, [r7, #4]
90001568:	4a53      	ldr	r2, [pc, #332]	; (900016b8 <HAL_GPIO_Init+0x340>)
9000156a:	4293      	cmp	r3, r2
9000156c:	d019      	beq.n	900015a2 <HAL_GPIO_Init+0x22a>
9000156e:	687b      	ldr	r3, [r7, #4]
90001570:	4a52      	ldr	r2, [pc, #328]	; (900016bc <HAL_GPIO_Init+0x344>)
90001572:	4293      	cmp	r3, r2
90001574:	d013      	beq.n	9000159e <HAL_GPIO_Init+0x226>
90001576:	687b      	ldr	r3, [r7, #4]
90001578:	4a51      	ldr	r2, [pc, #324]	; (900016c0 <HAL_GPIO_Init+0x348>)
9000157a:	4293      	cmp	r3, r2
9000157c:	d00d      	beq.n	9000159a <HAL_GPIO_Init+0x222>
9000157e:	687b      	ldr	r3, [r7, #4]
90001580:	4a50      	ldr	r2, [pc, #320]	; (900016c4 <HAL_GPIO_Init+0x34c>)
90001582:	4293      	cmp	r3, r2
90001584:	d007      	beq.n	90001596 <HAL_GPIO_Init+0x21e>
90001586:	687b      	ldr	r3, [r7, #4]
90001588:	4a4f      	ldr	r2, [pc, #316]	; (900016c8 <HAL_GPIO_Init+0x350>)
9000158a:	4293      	cmp	r3, r2
9000158c:	d101      	bne.n	90001592 <HAL_GPIO_Init+0x21a>
9000158e:	2309      	movs	r3, #9
90001590:	e012      	b.n	900015b8 <HAL_GPIO_Init+0x240>
90001592:	230a      	movs	r3, #10
90001594:	e010      	b.n	900015b8 <HAL_GPIO_Init+0x240>
90001596:	2308      	movs	r3, #8
90001598:	e00e      	b.n	900015b8 <HAL_GPIO_Init+0x240>
9000159a:	2307      	movs	r3, #7
9000159c:	e00c      	b.n	900015b8 <HAL_GPIO_Init+0x240>
9000159e:	2306      	movs	r3, #6
900015a0:	e00a      	b.n	900015b8 <HAL_GPIO_Init+0x240>
900015a2:	2305      	movs	r3, #5
900015a4:	e008      	b.n	900015b8 <HAL_GPIO_Init+0x240>
900015a6:	2304      	movs	r3, #4
900015a8:	e006      	b.n	900015b8 <HAL_GPIO_Init+0x240>
900015aa:	2303      	movs	r3, #3
900015ac:	e004      	b.n	900015b8 <HAL_GPIO_Init+0x240>
900015ae:	2302      	movs	r3, #2
900015b0:	e002      	b.n	900015b8 <HAL_GPIO_Init+0x240>
900015b2:	2301      	movs	r3, #1
900015b4:	e000      	b.n	900015b8 <HAL_GPIO_Init+0x240>
900015b6:	2300      	movs	r3, #0
900015b8:	69fa      	ldr	r2, [r7, #28]
900015ba:	f002 0203 	and.w	r2, r2, #3
900015be:	0092      	lsls	r2, r2, #2
900015c0:	4093      	lsls	r3, r2
900015c2:	69ba      	ldr	r2, [r7, #24]
900015c4:	4313      	orrs	r3, r2
900015c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
900015c8:	4935      	ldr	r1, [pc, #212]	; (900016a0 <HAL_GPIO_Init+0x328>)
900015ca:	69fb      	ldr	r3, [r7, #28]
900015cc:	089b      	lsrs	r3, r3, #2
900015ce:	3302      	adds	r3, #2
900015d0:	69ba      	ldr	r2, [r7, #24]
900015d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
900015d6:	4b3d      	ldr	r3, [pc, #244]	; (900016cc <HAL_GPIO_Init+0x354>)
900015d8:	681b      	ldr	r3, [r3, #0]
900015da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
900015dc:	693b      	ldr	r3, [r7, #16]
900015de:	43db      	mvns	r3, r3
900015e0:	69ba      	ldr	r2, [r7, #24]
900015e2:	4013      	ands	r3, r2
900015e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
900015e6:	683b      	ldr	r3, [r7, #0]
900015e8:	685b      	ldr	r3, [r3, #4]
900015ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
900015ee:	2b00      	cmp	r3, #0
900015f0:	d003      	beq.n	900015fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
900015f2:	69ba      	ldr	r2, [r7, #24]
900015f4:	693b      	ldr	r3, [r7, #16]
900015f6:	4313      	orrs	r3, r2
900015f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
900015fa:	4a34      	ldr	r2, [pc, #208]	; (900016cc <HAL_GPIO_Init+0x354>)
900015fc:	69bb      	ldr	r3, [r7, #24]
900015fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
90001600:	4b32      	ldr	r3, [pc, #200]	; (900016cc <HAL_GPIO_Init+0x354>)
90001602:	685b      	ldr	r3, [r3, #4]
90001604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
90001606:	693b      	ldr	r3, [r7, #16]
90001608:	43db      	mvns	r3, r3
9000160a:	69ba      	ldr	r2, [r7, #24]
9000160c:	4013      	ands	r3, r2
9000160e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
90001610:	683b      	ldr	r3, [r7, #0]
90001612:	685b      	ldr	r3, [r3, #4]
90001614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90001618:	2b00      	cmp	r3, #0
9000161a:	d003      	beq.n	90001624 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
9000161c:	69ba      	ldr	r2, [r7, #24]
9000161e:	693b      	ldr	r3, [r7, #16]
90001620:	4313      	orrs	r3, r2
90001622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
90001624:	4a29      	ldr	r2, [pc, #164]	; (900016cc <HAL_GPIO_Init+0x354>)
90001626:	69bb      	ldr	r3, [r7, #24]
90001628:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
9000162a:	4b28      	ldr	r3, [pc, #160]	; (900016cc <HAL_GPIO_Init+0x354>)
9000162c:	689b      	ldr	r3, [r3, #8]
9000162e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
90001630:	693b      	ldr	r3, [r7, #16]
90001632:	43db      	mvns	r3, r3
90001634:	69ba      	ldr	r2, [r7, #24]
90001636:	4013      	ands	r3, r2
90001638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
9000163a:	683b      	ldr	r3, [r7, #0]
9000163c:	685b      	ldr	r3, [r3, #4]
9000163e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
90001642:	2b00      	cmp	r3, #0
90001644:	d003      	beq.n	9000164e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
90001646:	69ba      	ldr	r2, [r7, #24]
90001648:	693b      	ldr	r3, [r7, #16]
9000164a:	4313      	orrs	r3, r2
9000164c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
9000164e:	4a1f      	ldr	r2, [pc, #124]	; (900016cc <HAL_GPIO_Init+0x354>)
90001650:	69bb      	ldr	r3, [r7, #24]
90001652:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
90001654:	4b1d      	ldr	r3, [pc, #116]	; (900016cc <HAL_GPIO_Init+0x354>)
90001656:	68db      	ldr	r3, [r3, #12]
90001658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
9000165a:	693b      	ldr	r3, [r7, #16]
9000165c:	43db      	mvns	r3, r3
9000165e:	69ba      	ldr	r2, [r7, #24]
90001660:	4013      	ands	r3, r2
90001662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
90001664:	683b      	ldr	r3, [r7, #0]
90001666:	685b      	ldr	r3, [r3, #4]
90001668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
9000166c:	2b00      	cmp	r3, #0
9000166e:	d003      	beq.n	90001678 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
90001670:	69ba      	ldr	r2, [r7, #24]
90001672:	693b      	ldr	r3, [r7, #16]
90001674:	4313      	orrs	r3, r2
90001676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
90001678:	4a14      	ldr	r2, [pc, #80]	; (900016cc <HAL_GPIO_Init+0x354>)
9000167a:	69bb      	ldr	r3, [r7, #24]
9000167c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
9000167e:	69fb      	ldr	r3, [r7, #28]
90001680:	3301      	adds	r3, #1
90001682:	61fb      	str	r3, [r7, #28]
90001684:	69fb      	ldr	r3, [r7, #28]
90001686:	2b0f      	cmp	r3, #15
90001688:	f67f ae86 	bls.w	90001398 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
9000168c:	bf00      	nop
9000168e:	bf00      	nop
90001690:	3724      	adds	r7, #36	; 0x24
90001692:	46bd      	mov	sp, r7
90001694:	f85d 7b04 	ldr.w	r7, [sp], #4
90001698:	4770      	bx	lr
9000169a:	bf00      	nop
9000169c:	40023800 	.word	0x40023800
900016a0:	40013800 	.word	0x40013800
900016a4:	40020000 	.word	0x40020000
900016a8:	40020400 	.word	0x40020400
900016ac:	40020800 	.word	0x40020800
900016b0:	40020c00 	.word	0x40020c00
900016b4:	40021000 	.word	0x40021000
900016b8:	40021400 	.word	0x40021400
900016bc:	40021800 	.word	0x40021800
900016c0:	40021c00 	.word	0x40021c00
900016c4:	40022000 	.word	0x40022000
900016c8:	40022400 	.word	0x40022400
900016cc:	40013c00 	.word	0x40013c00

900016d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
900016d0:	b480      	push	{r7}
900016d2:	b083      	sub	sp, #12
900016d4:	af00      	add	r7, sp, #0
900016d6:	6078      	str	r0, [r7, #4]
900016d8:	460b      	mov	r3, r1
900016da:	807b      	strh	r3, [r7, #2]
900016dc:	4613      	mov	r3, r2
900016de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
900016e0:	787b      	ldrb	r3, [r7, #1]
900016e2:	2b00      	cmp	r3, #0
900016e4:	d003      	beq.n	900016ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
900016e6:	887a      	ldrh	r2, [r7, #2]
900016e8:	687b      	ldr	r3, [r7, #4]
900016ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
900016ec:	e003      	b.n	900016f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
900016ee:	887b      	ldrh	r3, [r7, #2]
900016f0:	041a      	lsls	r2, r3, #16
900016f2:	687b      	ldr	r3, [r7, #4]
900016f4:	619a      	str	r2, [r3, #24]
}
900016f6:	bf00      	nop
900016f8:	370c      	adds	r7, #12
900016fa:	46bd      	mov	sp, r7
900016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
90001700:	4770      	bx	lr

90001702 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
90001702:	b480      	push	{r7}
90001704:	b085      	sub	sp, #20
90001706:	af00      	add	r7, sp, #0
90001708:	6078      	str	r0, [r7, #4]
9000170a:	460b      	mov	r3, r1
9000170c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
9000170e:	687b      	ldr	r3, [r7, #4]
90001710:	695b      	ldr	r3, [r3, #20]
90001712:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
90001714:	887a      	ldrh	r2, [r7, #2]
90001716:	68fb      	ldr	r3, [r7, #12]
90001718:	4013      	ands	r3, r2
9000171a:	041a      	lsls	r2, r3, #16
9000171c:	68fb      	ldr	r3, [r7, #12]
9000171e:	43d9      	mvns	r1, r3
90001720:	887b      	ldrh	r3, [r7, #2]
90001722:	400b      	ands	r3, r1
90001724:	431a      	orrs	r2, r3
90001726:	687b      	ldr	r3, [r7, #4]
90001728:	619a      	str	r2, [r3, #24]
}
9000172a:	bf00      	nop
9000172c:	3714      	adds	r7, #20
9000172e:	46bd      	mov	sp, r7
90001730:	f85d 7b04 	ldr.w	r7, [sp], #4
90001734:	4770      	bx	lr
	...

90001738 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
90001738:	b580      	push	{r7, lr}
9000173a:	b082      	sub	sp, #8
9000173c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
9000173e:	2300      	movs	r3, #0
90001740:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
90001742:	4b23      	ldr	r3, [pc, #140]	; (900017d0 <HAL_PWREx_EnableOverDrive+0x98>)
90001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90001746:	4a22      	ldr	r2, [pc, #136]	; (900017d0 <HAL_PWREx_EnableOverDrive+0x98>)
90001748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
9000174c:	6413      	str	r3, [r2, #64]	; 0x40
9000174e:	4b20      	ldr	r3, [pc, #128]	; (900017d0 <HAL_PWREx_EnableOverDrive+0x98>)
90001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90001752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90001756:	603b      	str	r3, [r7, #0]
90001758:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
9000175a:	4b1e      	ldr	r3, [pc, #120]	; (900017d4 <HAL_PWREx_EnableOverDrive+0x9c>)
9000175c:	681b      	ldr	r3, [r3, #0]
9000175e:	4a1d      	ldr	r2, [pc, #116]	; (900017d4 <HAL_PWREx_EnableOverDrive+0x9c>)
90001760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90001764:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
90001766:	f7ff fcf1 	bl	9000114c <HAL_GetTick>
9000176a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
9000176c:	e009      	b.n	90001782 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
9000176e:	f7ff fced 	bl	9000114c <HAL_GetTick>
90001772:	4602      	mov	r2, r0
90001774:	687b      	ldr	r3, [r7, #4]
90001776:	1ad3      	subs	r3, r2, r3
90001778:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
9000177c:	d901      	bls.n	90001782 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
9000177e:	2303      	movs	r3, #3
90001780:	e022      	b.n	900017c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
90001782:	4b14      	ldr	r3, [pc, #80]	; (900017d4 <HAL_PWREx_EnableOverDrive+0x9c>)
90001784:	685b      	ldr	r3, [r3, #4]
90001786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
9000178a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000178e:	d1ee      	bne.n	9000176e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
90001790:	4b10      	ldr	r3, [pc, #64]	; (900017d4 <HAL_PWREx_EnableOverDrive+0x9c>)
90001792:	681b      	ldr	r3, [r3, #0]
90001794:	4a0f      	ldr	r2, [pc, #60]	; (900017d4 <HAL_PWREx_EnableOverDrive+0x9c>)
90001796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000179a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
9000179c:	f7ff fcd6 	bl	9000114c <HAL_GetTick>
900017a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
900017a2:	e009      	b.n	900017b8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
900017a4:	f7ff fcd2 	bl	9000114c <HAL_GetTick>
900017a8:	4602      	mov	r2, r0
900017aa:	687b      	ldr	r3, [r7, #4]
900017ac:	1ad3      	subs	r3, r2, r3
900017ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
900017b2:	d901      	bls.n	900017b8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
900017b4:	2303      	movs	r3, #3
900017b6:	e007      	b.n	900017c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
900017b8:	4b06      	ldr	r3, [pc, #24]	; (900017d4 <HAL_PWREx_EnableOverDrive+0x9c>)
900017ba:	685b      	ldr	r3, [r3, #4]
900017bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900017c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
900017c4:	d1ee      	bne.n	900017a4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
900017c6:	2300      	movs	r3, #0
}
900017c8:	4618      	mov	r0, r3
900017ca:	3708      	adds	r7, #8
900017cc:	46bd      	mov	sp, r7
900017ce:	bd80      	pop	{r7, pc}
900017d0:	40023800 	.word	0x40023800
900017d4:	40007000 	.word	0x40007000

900017d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
900017d8:	b580      	push	{r7, lr}
900017da:	b086      	sub	sp, #24
900017dc:	af00      	add	r7, sp, #0
900017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
900017e0:	2300      	movs	r3, #0
900017e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
900017e4:	687b      	ldr	r3, [r7, #4]
900017e6:	2b00      	cmp	r3, #0
900017e8:	d101      	bne.n	900017ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
900017ea:	2301      	movs	r3, #1
900017ec:	e291      	b.n	90001d12 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
900017ee:	687b      	ldr	r3, [r7, #4]
900017f0:	681b      	ldr	r3, [r3, #0]
900017f2:	f003 0301 	and.w	r3, r3, #1
900017f6:	2b00      	cmp	r3, #0
900017f8:	f000 8087 	beq.w	9000190a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
900017fc:	4b96      	ldr	r3, [pc, #600]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
900017fe:	689b      	ldr	r3, [r3, #8]
90001800:	f003 030c 	and.w	r3, r3, #12
90001804:	2b04      	cmp	r3, #4
90001806:	d00c      	beq.n	90001822 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
90001808:	4b93      	ldr	r3, [pc, #588]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
9000180a:	689b      	ldr	r3, [r3, #8]
9000180c:	f003 030c 	and.w	r3, r3, #12
90001810:	2b08      	cmp	r3, #8
90001812:	d112      	bne.n	9000183a <HAL_RCC_OscConfig+0x62>
90001814:	4b90      	ldr	r3, [pc, #576]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
90001816:	685b      	ldr	r3, [r3, #4]
90001818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
9000181c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90001820:	d10b      	bne.n	9000183a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90001822:	4b8d      	ldr	r3, [pc, #564]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
90001824:	681b      	ldr	r3, [r3, #0]
90001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
9000182a:	2b00      	cmp	r3, #0
9000182c:	d06c      	beq.n	90001908 <HAL_RCC_OscConfig+0x130>
9000182e:	687b      	ldr	r3, [r7, #4]
90001830:	685b      	ldr	r3, [r3, #4]
90001832:	2b00      	cmp	r3, #0
90001834:	d168      	bne.n	90001908 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
90001836:	2301      	movs	r3, #1
90001838:	e26b      	b.n	90001d12 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000183a:	687b      	ldr	r3, [r7, #4]
9000183c:	685b      	ldr	r3, [r3, #4]
9000183e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90001842:	d106      	bne.n	90001852 <HAL_RCC_OscConfig+0x7a>
90001844:	4b84      	ldr	r3, [pc, #528]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
90001846:	681b      	ldr	r3, [r3, #0]
90001848:	4a83      	ldr	r2, [pc, #524]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
9000184a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000184e:	6013      	str	r3, [r2, #0]
90001850:	e02e      	b.n	900018b0 <HAL_RCC_OscConfig+0xd8>
90001852:	687b      	ldr	r3, [r7, #4]
90001854:	685b      	ldr	r3, [r3, #4]
90001856:	2b00      	cmp	r3, #0
90001858:	d10c      	bne.n	90001874 <HAL_RCC_OscConfig+0x9c>
9000185a:	4b7f      	ldr	r3, [pc, #508]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
9000185c:	681b      	ldr	r3, [r3, #0]
9000185e:	4a7e      	ldr	r2, [pc, #504]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
90001860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90001864:	6013      	str	r3, [r2, #0]
90001866:	4b7c      	ldr	r3, [pc, #496]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
90001868:	681b      	ldr	r3, [r3, #0]
9000186a:	4a7b      	ldr	r2, [pc, #492]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
9000186c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90001870:	6013      	str	r3, [r2, #0]
90001872:	e01d      	b.n	900018b0 <HAL_RCC_OscConfig+0xd8>
90001874:	687b      	ldr	r3, [r7, #4]
90001876:	685b      	ldr	r3, [r3, #4]
90001878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
9000187c:	d10c      	bne.n	90001898 <HAL_RCC_OscConfig+0xc0>
9000187e:	4b76      	ldr	r3, [pc, #472]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
90001880:	681b      	ldr	r3, [r3, #0]
90001882:	4a75      	ldr	r2, [pc, #468]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
90001884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
90001888:	6013      	str	r3, [r2, #0]
9000188a:	4b73      	ldr	r3, [pc, #460]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
9000188c:	681b      	ldr	r3, [r3, #0]
9000188e:	4a72      	ldr	r2, [pc, #456]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
90001890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90001894:	6013      	str	r3, [r2, #0]
90001896:	e00b      	b.n	900018b0 <HAL_RCC_OscConfig+0xd8>
90001898:	4b6f      	ldr	r3, [pc, #444]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
9000189a:	681b      	ldr	r3, [r3, #0]
9000189c:	4a6e      	ldr	r2, [pc, #440]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
9000189e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
900018a2:	6013      	str	r3, [r2, #0]
900018a4:	4b6c      	ldr	r3, [pc, #432]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
900018a6:	681b      	ldr	r3, [r3, #0]
900018a8:	4a6b      	ldr	r2, [pc, #428]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
900018aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
900018ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
900018b0:	687b      	ldr	r3, [r7, #4]
900018b2:	685b      	ldr	r3, [r3, #4]
900018b4:	2b00      	cmp	r3, #0
900018b6:	d013      	beq.n	900018e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900018b8:	f7ff fc48 	bl	9000114c <HAL_GetTick>
900018bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
900018be:	e008      	b.n	900018d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
900018c0:	f7ff fc44 	bl	9000114c <HAL_GetTick>
900018c4:	4602      	mov	r2, r0
900018c6:	693b      	ldr	r3, [r7, #16]
900018c8:	1ad3      	subs	r3, r2, r3
900018ca:	2b64      	cmp	r3, #100	; 0x64
900018cc:	d901      	bls.n	900018d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
900018ce:	2303      	movs	r3, #3
900018d0:	e21f      	b.n	90001d12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
900018d2:	4b61      	ldr	r3, [pc, #388]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
900018d4:	681b      	ldr	r3, [r3, #0]
900018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900018da:	2b00      	cmp	r3, #0
900018dc:	d0f0      	beq.n	900018c0 <HAL_RCC_OscConfig+0xe8>
900018de:	e014      	b.n	9000190a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900018e0:	f7ff fc34 	bl	9000114c <HAL_GetTick>
900018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
900018e6:	e008      	b.n	900018fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
900018e8:	f7ff fc30 	bl	9000114c <HAL_GetTick>
900018ec:	4602      	mov	r2, r0
900018ee:	693b      	ldr	r3, [r7, #16]
900018f0:	1ad3      	subs	r3, r2, r3
900018f2:	2b64      	cmp	r3, #100	; 0x64
900018f4:	d901      	bls.n	900018fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
900018f6:	2303      	movs	r3, #3
900018f8:	e20b      	b.n	90001d12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
900018fa:	4b57      	ldr	r3, [pc, #348]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
900018fc:	681b      	ldr	r3, [r3, #0]
900018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90001902:	2b00      	cmp	r3, #0
90001904:	d1f0      	bne.n	900018e8 <HAL_RCC_OscConfig+0x110>
90001906:	e000      	b.n	9000190a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90001908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
9000190a:	687b      	ldr	r3, [r7, #4]
9000190c:	681b      	ldr	r3, [r3, #0]
9000190e:	f003 0302 	and.w	r3, r3, #2
90001912:	2b00      	cmp	r3, #0
90001914:	d069      	beq.n	900019ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
90001916:	4b50      	ldr	r3, [pc, #320]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
90001918:	689b      	ldr	r3, [r3, #8]
9000191a:	f003 030c 	and.w	r3, r3, #12
9000191e:	2b00      	cmp	r3, #0
90001920:	d00b      	beq.n	9000193a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
90001922:	4b4d      	ldr	r3, [pc, #308]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
90001924:	689b      	ldr	r3, [r3, #8]
90001926:	f003 030c 	and.w	r3, r3, #12
9000192a:	2b08      	cmp	r3, #8
9000192c:	d11c      	bne.n	90001968 <HAL_RCC_OscConfig+0x190>
9000192e:	4b4a      	ldr	r3, [pc, #296]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
90001930:	685b      	ldr	r3, [r3, #4]
90001932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90001936:	2b00      	cmp	r3, #0
90001938:	d116      	bne.n	90001968 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
9000193a:	4b47      	ldr	r3, [pc, #284]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
9000193c:	681b      	ldr	r3, [r3, #0]
9000193e:	f003 0302 	and.w	r3, r3, #2
90001942:	2b00      	cmp	r3, #0
90001944:	d005      	beq.n	90001952 <HAL_RCC_OscConfig+0x17a>
90001946:	687b      	ldr	r3, [r7, #4]
90001948:	68db      	ldr	r3, [r3, #12]
9000194a:	2b01      	cmp	r3, #1
9000194c:	d001      	beq.n	90001952 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
9000194e:	2301      	movs	r3, #1
90001950:	e1df      	b.n	90001d12 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90001952:	4b41      	ldr	r3, [pc, #260]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
90001954:	681b      	ldr	r3, [r3, #0]
90001956:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
9000195a:	687b      	ldr	r3, [r7, #4]
9000195c:	691b      	ldr	r3, [r3, #16]
9000195e:	00db      	lsls	r3, r3, #3
90001960:	493d      	ldr	r1, [pc, #244]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
90001962:	4313      	orrs	r3, r2
90001964:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
90001966:	e040      	b.n	900019ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
90001968:	687b      	ldr	r3, [r7, #4]
9000196a:	68db      	ldr	r3, [r3, #12]
9000196c:	2b00      	cmp	r3, #0
9000196e:	d023      	beq.n	900019b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
90001970:	4b39      	ldr	r3, [pc, #228]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
90001972:	681b      	ldr	r3, [r3, #0]
90001974:	4a38      	ldr	r2, [pc, #224]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
90001976:	f043 0301 	orr.w	r3, r3, #1
9000197a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000197c:	f7ff fbe6 	bl	9000114c <HAL_GetTick>
90001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90001982:	e008      	b.n	90001996 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90001984:	f7ff fbe2 	bl	9000114c <HAL_GetTick>
90001988:	4602      	mov	r2, r0
9000198a:	693b      	ldr	r3, [r7, #16]
9000198c:	1ad3      	subs	r3, r2, r3
9000198e:	2b02      	cmp	r3, #2
90001990:	d901      	bls.n	90001996 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
90001992:	2303      	movs	r3, #3
90001994:	e1bd      	b.n	90001d12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90001996:	4b30      	ldr	r3, [pc, #192]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
90001998:	681b      	ldr	r3, [r3, #0]
9000199a:	f003 0302 	and.w	r3, r3, #2
9000199e:	2b00      	cmp	r3, #0
900019a0:	d0f0      	beq.n	90001984 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
900019a2:	4b2d      	ldr	r3, [pc, #180]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
900019a4:	681b      	ldr	r3, [r3, #0]
900019a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
900019aa:	687b      	ldr	r3, [r7, #4]
900019ac:	691b      	ldr	r3, [r3, #16]
900019ae:	00db      	lsls	r3, r3, #3
900019b0:	4929      	ldr	r1, [pc, #164]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
900019b2:	4313      	orrs	r3, r2
900019b4:	600b      	str	r3, [r1, #0]
900019b6:	e018      	b.n	900019ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
900019b8:	4b27      	ldr	r3, [pc, #156]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
900019ba:	681b      	ldr	r3, [r3, #0]
900019bc:	4a26      	ldr	r2, [pc, #152]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
900019be:	f023 0301 	bic.w	r3, r3, #1
900019c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900019c4:	f7ff fbc2 	bl	9000114c <HAL_GetTick>
900019c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
900019ca:	e008      	b.n	900019de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
900019cc:	f7ff fbbe 	bl	9000114c <HAL_GetTick>
900019d0:	4602      	mov	r2, r0
900019d2:	693b      	ldr	r3, [r7, #16]
900019d4:	1ad3      	subs	r3, r2, r3
900019d6:	2b02      	cmp	r3, #2
900019d8:	d901      	bls.n	900019de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
900019da:	2303      	movs	r3, #3
900019dc:	e199      	b.n	90001d12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
900019de:	4b1e      	ldr	r3, [pc, #120]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
900019e0:	681b      	ldr	r3, [r3, #0]
900019e2:	f003 0302 	and.w	r3, r3, #2
900019e6:	2b00      	cmp	r3, #0
900019e8:	d1f0      	bne.n	900019cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
900019ea:	687b      	ldr	r3, [r7, #4]
900019ec:	681b      	ldr	r3, [r3, #0]
900019ee:	f003 0308 	and.w	r3, r3, #8
900019f2:	2b00      	cmp	r3, #0
900019f4:	d038      	beq.n	90001a68 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
900019f6:	687b      	ldr	r3, [r7, #4]
900019f8:	695b      	ldr	r3, [r3, #20]
900019fa:	2b00      	cmp	r3, #0
900019fc:	d019      	beq.n	90001a32 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
900019fe:	4b16      	ldr	r3, [pc, #88]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
90001a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90001a02:	4a15      	ldr	r2, [pc, #84]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
90001a04:	f043 0301 	orr.w	r3, r3, #1
90001a08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90001a0a:	f7ff fb9f 	bl	9000114c <HAL_GetTick>
90001a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
90001a10:	e008      	b.n	90001a24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90001a12:	f7ff fb9b 	bl	9000114c <HAL_GetTick>
90001a16:	4602      	mov	r2, r0
90001a18:	693b      	ldr	r3, [r7, #16]
90001a1a:	1ad3      	subs	r3, r2, r3
90001a1c:	2b02      	cmp	r3, #2
90001a1e:	d901      	bls.n	90001a24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
90001a20:	2303      	movs	r3, #3
90001a22:	e176      	b.n	90001d12 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
90001a24:	4b0c      	ldr	r3, [pc, #48]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
90001a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90001a28:	f003 0302 	and.w	r3, r3, #2
90001a2c:	2b00      	cmp	r3, #0
90001a2e:	d0f0      	beq.n	90001a12 <HAL_RCC_OscConfig+0x23a>
90001a30:	e01a      	b.n	90001a68 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
90001a32:	4b09      	ldr	r3, [pc, #36]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
90001a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90001a36:	4a08      	ldr	r2, [pc, #32]	; (90001a58 <HAL_RCC_OscConfig+0x280>)
90001a38:	f023 0301 	bic.w	r3, r3, #1
90001a3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90001a3e:	f7ff fb85 	bl	9000114c <HAL_GetTick>
90001a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
90001a44:	e00a      	b.n	90001a5c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90001a46:	f7ff fb81 	bl	9000114c <HAL_GetTick>
90001a4a:	4602      	mov	r2, r0
90001a4c:	693b      	ldr	r3, [r7, #16]
90001a4e:	1ad3      	subs	r3, r2, r3
90001a50:	2b02      	cmp	r3, #2
90001a52:	d903      	bls.n	90001a5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
90001a54:	2303      	movs	r3, #3
90001a56:	e15c      	b.n	90001d12 <HAL_RCC_OscConfig+0x53a>
90001a58:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
90001a5c:	4b91      	ldr	r3, [pc, #580]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90001a60:	f003 0302 	and.w	r3, r3, #2
90001a64:	2b00      	cmp	r3, #0
90001a66:	d1ee      	bne.n	90001a46 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
90001a68:	687b      	ldr	r3, [r7, #4]
90001a6a:	681b      	ldr	r3, [r3, #0]
90001a6c:	f003 0304 	and.w	r3, r3, #4
90001a70:	2b00      	cmp	r3, #0
90001a72:	f000 80a4 	beq.w	90001bbe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
90001a76:	4b8b      	ldr	r3, [pc, #556]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90001a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90001a7e:	2b00      	cmp	r3, #0
90001a80:	d10d      	bne.n	90001a9e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
90001a82:	4b88      	ldr	r3, [pc, #544]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90001a86:	4a87      	ldr	r2, [pc, #540]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90001a8c:	6413      	str	r3, [r2, #64]	; 0x40
90001a8e:	4b85      	ldr	r3, [pc, #532]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90001a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90001a96:	60bb      	str	r3, [r7, #8]
90001a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
90001a9a:	2301      	movs	r3, #1
90001a9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
90001a9e:	4b82      	ldr	r3, [pc, #520]	; (90001ca8 <HAL_RCC_OscConfig+0x4d0>)
90001aa0:	681b      	ldr	r3, [r3, #0]
90001aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
90001aa6:	2b00      	cmp	r3, #0
90001aa8:	d118      	bne.n	90001adc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
90001aaa:	4b7f      	ldr	r3, [pc, #508]	; (90001ca8 <HAL_RCC_OscConfig+0x4d0>)
90001aac:	681b      	ldr	r3, [r3, #0]
90001aae:	4a7e      	ldr	r2, [pc, #504]	; (90001ca8 <HAL_RCC_OscConfig+0x4d0>)
90001ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90001ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
90001ab6:	f7ff fb49 	bl	9000114c <HAL_GetTick>
90001aba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
90001abc:	e008      	b.n	90001ad0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90001abe:	f7ff fb45 	bl	9000114c <HAL_GetTick>
90001ac2:	4602      	mov	r2, r0
90001ac4:	693b      	ldr	r3, [r7, #16]
90001ac6:	1ad3      	subs	r3, r2, r3
90001ac8:	2b64      	cmp	r3, #100	; 0x64
90001aca:	d901      	bls.n	90001ad0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
90001acc:	2303      	movs	r3, #3
90001ace:	e120      	b.n	90001d12 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
90001ad0:	4b75      	ldr	r3, [pc, #468]	; (90001ca8 <HAL_RCC_OscConfig+0x4d0>)
90001ad2:	681b      	ldr	r3, [r3, #0]
90001ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
90001ad8:	2b00      	cmp	r3, #0
90001ada:	d0f0      	beq.n	90001abe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90001adc:	687b      	ldr	r3, [r7, #4]
90001ade:	689b      	ldr	r3, [r3, #8]
90001ae0:	2b01      	cmp	r3, #1
90001ae2:	d106      	bne.n	90001af2 <HAL_RCC_OscConfig+0x31a>
90001ae4:	4b6f      	ldr	r3, [pc, #444]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001ae8:	4a6e      	ldr	r2, [pc, #440]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001aea:	f043 0301 	orr.w	r3, r3, #1
90001aee:	6713      	str	r3, [r2, #112]	; 0x70
90001af0:	e02d      	b.n	90001b4e <HAL_RCC_OscConfig+0x376>
90001af2:	687b      	ldr	r3, [r7, #4]
90001af4:	689b      	ldr	r3, [r3, #8]
90001af6:	2b00      	cmp	r3, #0
90001af8:	d10c      	bne.n	90001b14 <HAL_RCC_OscConfig+0x33c>
90001afa:	4b6a      	ldr	r3, [pc, #424]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001afe:	4a69      	ldr	r2, [pc, #420]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001b00:	f023 0301 	bic.w	r3, r3, #1
90001b04:	6713      	str	r3, [r2, #112]	; 0x70
90001b06:	4b67      	ldr	r3, [pc, #412]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001b0a:	4a66      	ldr	r2, [pc, #408]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001b0c:	f023 0304 	bic.w	r3, r3, #4
90001b10:	6713      	str	r3, [r2, #112]	; 0x70
90001b12:	e01c      	b.n	90001b4e <HAL_RCC_OscConfig+0x376>
90001b14:	687b      	ldr	r3, [r7, #4]
90001b16:	689b      	ldr	r3, [r3, #8]
90001b18:	2b05      	cmp	r3, #5
90001b1a:	d10c      	bne.n	90001b36 <HAL_RCC_OscConfig+0x35e>
90001b1c:	4b61      	ldr	r3, [pc, #388]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001b20:	4a60      	ldr	r2, [pc, #384]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001b22:	f043 0304 	orr.w	r3, r3, #4
90001b26:	6713      	str	r3, [r2, #112]	; 0x70
90001b28:	4b5e      	ldr	r3, [pc, #376]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001b2c:	4a5d      	ldr	r2, [pc, #372]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001b2e:	f043 0301 	orr.w	r3, r3, #1
90001b32:	6713      	str	r3, [r2, #112]	; 0x70
90001b34:	e00b      	b.n	90001b4e <HAL_RCC_OscConfig+0x376>
90001b36:	4b5b      	ldr	r3, [pc, #364]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001b3a:	4a5a      	ldr	r2, [pc, #360]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001b3c:	f023 0301 	bic.w	r3, r3, #1
90001b40:	6713      	str	r3, [r2, #112]	; 0x70
90001b42:	4b58      	ldr	r3, [pc, #352]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001b46:	4a57      	ldr	r2, [pc, #348]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001b48:	f023 0304 	bic.w	r3, r3, #4
90001b4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
90001b4e:	687b      	ldr	r3, [r7, #4]
90001b50:	689b      	ldr	r3, [r3, #8]
90001b52:	2b00      	cmp	r3, #0
90001b54:	d015      	beq.n	90001b82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90001b56:	f7ff faf9 	bl	9000114c <HAL_GetTick>
90001b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90001b5c:	e00a      	b.n	90001b74 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90001b5e:	f7ff faf5 	bl	9000114c <HAL_GetTick>
90001b62:	4602      	mov	r2, r0
90001b64:	693b      	ldr	r3, [r7, #16]
90001b66:	1ad3      	subs	r3, r2, r3
90001b68:	f241 3288 	movw	r2, #5000	; 0x1388
90001b6c:	4293      	cmp	r3, r2
90001b6e:	d901      	bls.n	90001b74 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
90001b70:	2303      	movs	r3, #3
90001b72:	e0ce      	b.n	90001d12 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90001b74:	4b4b      	ldr	r3, [pc, #300]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001b78:	f003 0302 	and.w	r3, r3, #2
90001b7c:	2b00      	cmp	r3, #0
90001b7e:	d0ee      	beq.n	90001b5e <HAL_RCC_OscConfig+0x386>
90001b80:	e014      	b.n	90001bac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90001b82:	f7ff fae3 	bl	9000114c <HAL_GetTick>
90001b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
90001b88:	e00a      	b.n	90001ba0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90001b8a:	f7ff fadf 	bl	9000114c <HAL_GetTick>
90001b8e:	4602      	mov	r2, r0
90001b90:	693b      	ldr	r3, [r7, #16]
90001b92:	1ad3      	subs	r3, r2, r3
90001b94:	f241 3288 	movw	r2, #5000	; 0x1388
90001b98:	4293      	cmp	r3, r2
90001b9a:	d901      	bls.n	90001ba0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
90001b9c:	2303      	movs	r3, #3
90001b9e:	e0b8      	b.n	90001d12 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
90001ba0:	4b40      	ldr	r3, [pc, #256]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001ba4:	f003 0302 	and.w	r3, r3, #2
90001ba8:	2b00      	cmp	r3, #0
90001baa:	d1ee      	bne.n	90001b8a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
90001bac:	7dfb      	ldrb	r3, [r7, #23]
90001bae:	2b01      	cmp	r3, #1
90001bb0:	d105      	bne.n	90001bbe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
90001bb2:	4b3c      	ldr	r3, [pc, #240]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90001bb6:	4a3b      	ldr	r2, [pc, #236]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
90001bbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
90001bbe:	687b      	ldr	r3, [r7, #4]
90001bc0:	699b      	ldr	r3, [r3, #24]
90001bc2:	2b00      	cmp	r3, #0
90001bc4:	f000 80a4 	beq.w	90001d10 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
90001bc8:	4b36      	ldr	r3, [pc, #216]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001bca:	689b      	ldr	r3, [r3, #8]
90001bcc:	f003 030c 	and.w	r3, r3, #12
90001bd0:	2b08      	cmp	r3, #8
90001bd2:	d06b      	beq.n	90001cac <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90001bd4:	687b      	ldr	r3, [r7, #4]
90001bd6:	699b      	ldr	r3, [r3, #24]
90001bd8:	2b02      	cmp	r3, #2
90001bda:	d149      	bne.n	90001c70 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90001bdc:	4b31      	ldr	r3, [pc, #196]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001bde:	681b      	ldr	r3, [r3, #0]
90001be0:	4a30      	ldr	r2, [pc, #192]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001be2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90001be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90001be8:	f7ff fab0 	bl	9000114c <HAL_GetTick>
90001bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90001bee:	e008      	b.n	90001c02 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90001bf0:	f7ff faac 	bl	9000114c <HAL_GetTick>
90001bf4:	4602      	mov	r2, r0
90001bf6:	693b      	ldr	r3, [r7, #16]
90001bf8:	1ad3      	subs	r3, r2, r3
90001bfa:	2b02      	cmp	r3, #2
90001bfc:	d901      	bls.n	90001c02 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
90001bfe:	2303      	movs	r3, #3
90001c00:	e087      	b.n	90001d12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90001c02:	4b28      	ldr	r3, [pc, #160]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001c04:	681b      	ldr	r3, [r3, #0]
90001c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90001c0a:	2b00      	cmp	r3, #0
90001c0c:	d1f0      	bne.n	90001bf0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
90001c0e:	687b      	ldr	r3, [r7, #4]
90001c10:	69da      	ldr	r2, [r3, #28]
90001c12:	687b      	ldr	r3, [r7, #4]
90001c14:	6a1b      	ldr	r3, [r3, #32]
90001c16:	431a      	orrs	r2, r3
90001c18:	687b      	ldr	r3, [r7, #4]
90001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90001c1c:	019b      	lsls	r3, r3, #6
90001c1e:	431a      	orrs	r2, r3
90001c20:	687b      	ldr	r3, [r7, #4]
90001c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001c24:	085b      	lsrs	r3, r3, #1
90001c26:	3b01      	subs	r3, #1
90001c28:	041b      	lsls	r3, r3, #16
90001c2a:	431a      	orrs	r2, r3
90001c2c:	687b      	ldr	r3, [r7, #4]
90001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001c30:	061b      	lsls	r3, r3, #24
90001c32:	4313      	orrs	r3, r2
90001c34:	4a1b      	ldr	r2, [pc, #108]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001c36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
90001c3a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
90001c3c:	4b19      	ldr	r3, [pc, #100]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001c3e:	681b      	ldr	r3, [r3, #0]
90001c40:	4a18      	ldr	r2, [pc, #96]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001c42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
90001c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90001c48:	f7ff fa80 	bl	9000114c <HAL_GetTick>
90001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90001c4e:	e008      	b.n	90001c62 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90001c50:	f7ff fa7c 	bl	9000114c <HAL_GetTick>
90001c54:	4602      	mov	r2, r0
90001c56:	693b      	ldr	r3, [r7, #16]
90001c58:	1ad3      	subs	r3, r2, r3
90001c5a:	2b02      	cmp	r3, #2
90001c5c:	d901      	bls.n	90001c62 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
90001c5e:	2303      	movs	r3, #3
90001c60:	e057      	b.n	90001d12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90001c62:	4b10      	ldr	r3, [pc, #64]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001c64:	681b      	ldr	r3, [r3, #0]
90001c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90001c6a:	2b00      	cmp	r3, #0
90001c6c:	d0f0      	beq.n	90001c50 <HAL_RCC_OscConfig+0x478>
90001c6e:	e04f      	b.n	90001d10 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90001c70:	4b0c      	ldr	r3, [pc, #48]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001c72:	681b      	ldr	r3, [r3, #0]
90001c74:	4a0b      	ldr	r2, [pc, #44]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001c76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90001c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90001c7c:	f7ff fa66 	bl	9000114c <HAL_GetTick>
90001c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90001c82:	e008      	b.n	90001c96 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90001c84:	f7ff fa62 	bl	9000114c <HAL_GetTick>
90001c88:	4602      	mov	r2, r0
90001c8a:	693b      	ldr	r3, [r7, #16]
90001c8c:	1ad3      	subs	r3, r2, r3
90001c8e:	2b02      	cmp	r3, #2
90001c90:	d901      	bls.n	90001c96 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
90001c92:	2303      	movs	r3, #3
90001c94:	e03d      	b.n	90001d12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90001c96:	4b03      	ldr	r3, [pc, #12]	; (90001ca4 <HAL_RCC_OscConfig+0x4cc>)
90001c98:	681b      	ldr	r3, [r3, #0]
90001c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90001c9e:	2b00      	cmp	r3, #0
90001ca0:	d1f0      	bne.n	90001c84 <HAL_RCC_OscConfig+0x4ac>
90001ca2:	e035      	b.n	90001d10 <HAL_RCC_OscConfig+0x538>
90001ca4:	40023800 	.word	0x40023800
90001ca8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
90001cac:	4b1b      	ldr	r3, [pc, #108]	; (90001d1c <HAL_RCC_OscConfig+0x544>)
90001cae:	685b      	ldr	r3, [r3, #4]
90001cb0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90001cb2:	687b      	ldr	r3, [r7, #4]
90001cb4:	699b      	ldr	r3, [r3, #24]
90001cb6:	2b01      	cmp	r3, #1
90001cb8:	d028      	beq.n	90001d0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90001cba:	68fb      	ldr	r3, [r7, #12]
90001cbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
90001cc0:	687b      	ldr	r3, [r7, #4]
90001cc2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90001cc4:	429a      	cmp	r2, r3
90001cc6:	d121      	bne.n	90001d0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
90001cc8:	68fb      	ldr	r3, [r7, #12]
90001cca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
90001cce:	687b      	ldr	r3, [r7, #4]
90001cd0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90001cd2:	429a      	cmp	r2, r3
90001cd4:	d11a      	bne.n	90001d0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
90001cd6:	68fa      	ldr	r2, [r7, #12]
90001cd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
90001cdc:	4013      	ands	r3, r2
90001cde:	687a      	ldr	r2, [r7, #4]
90001ce0:	6a52      	ldr	r2, [r2, #36]	; 0x24
90001ce2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
90001ce4:	4293      	cmp	r3, r2
90001ce6:	d111      	bne.n	90001d0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
90001ce8:	68fb      	ldr	r3, [r7, #12]
90001cea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
90001cee:	687b      	ldr	r3, [r7, #4]
90001cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001cf2:	085b      	lsrs	r3, r3, #1
90001cf4:	3b01      	subs	r3, #1
90001cf6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
90001cf8:	429a      	cmp	r2, r3
90001cfa:	d107      	bne.n	90001d0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
90001cfc:	68fb      	ldr	r3, [r7, #12]
90001cfe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
90001d02:	687b      	ldr	r3, [r7, #4]
90001d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001d06:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
90001d08:	429a      	cmp	r2, r3
90001d0a:	d001      	beq.n	90001d10 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
90001d0c:	2301      	movs	r3, #1
90001d0e:	e000      	b.n	90001d12 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
90001d10:	2300      	movs	r3, #0
}
90001d12:	4618      	mov	r0, r3
90001d14:	3718      	adds	r7, #24
90001d16:	46bd      	mov	sp, r7
90001d18:	bd80      	pop	{r7, pc}
90001d1a:	bf00      	nop
90001d1c:	40023800 	.word	0x40023800

90001d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
90001d20:	b580      	push	{r7, lr}
90001d22:	b084      	sub	sp, #16
90001d24:	af00      	add	r7, sp, #0
90001d26:	6078      	str	r0, [r7, #4]
90001d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
90001d2a:	2300      	movs	r3, #0
90001d2c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
90001d2e:	687b      	ldr	r3, [r7, #4]
90001d30:	2b00      	cmp	r3, #0
90001d32:	d101      	bne.n	90001d38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
90001d34:	2301      	movs	r3, #1
90001d36:	e0d0      	b.n	90001eda <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
90001d38:	4b6a      	ldr	r3, [pc, #424]	; (90001ee4 <HAL_RCC_ClockConfig+0x1c4>)
90001d3a:	681b      	ldr	r3, [r3, #0]
90001d3c:	f003 030f 	and.w	r3, r3, #15
90001d40:	683a      	ldr	r2, [r7, #0]
90001d42:	429a      	cmp	r2, r3
90001d44:	d910      	bls.n	90001d68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90001d46:	4b67      	ldr	r3, [pc, #412]	; (90001ee4 <HAL_RCC_ClockConfig+0x1c4>)
90001d48:	681b      	ldr	r3, [r3, #0]
90001d4a:	f023 020f 	bic.w	r2, r3, #15
90001d4e:	4965      	ldr	r1, [pc, #404]	; (90001ee4 <HAL_RCC_ClockConfig+0x1c4>)
90001d50:	683b      	ldr	r3, [r7, #0]
90001d52:	4313      	orrs	r3, r2
90001d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90001d56:	4b63      	ldr	r3, [pc, #396]	; (90001ee4 <HAL_RCC_ClockConfig+0x1c4>)
90001d58:	681b      	ldr	r3, [r3, #0]
90001d5a:	f003 030f 	and.w	r3, r3, #15
90001d5e:	683a      	ldr	r2, [r7, #0]
90001d60:	429a      	cmp	r2, r3
90001d62:	d001      	beq.n	90001d68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
90001d64:	2301      	movs	r3, #1
90001d66:	e0b8      	b.n	90001eda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90001d68:	687b      	ldr	r3, [r7, #4]
90001d6a:	681b      	ldr	r3, [r3, #0]
90001d6c:	f003 0302 	and.w	r3, r3, #2
90001d70:	2b00      	cmp	r3, #0
90001d72:	d020      	beq.n	90001db6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90001d74:	687b      	ldr	r3, [r7, #4]
90001d76:	681b      	ldr	r3, [r3, #0]
90001d78:	f003 0304 	and.w	r3, r3, #4
90001d7c:	2b00      	cmp	r3, #0
90001d7e:	d005      	beq.n	90001d8c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
90001d80:	4b59      	ldr	r3, [pc, #356]	; (90001ee8 <HAL_RCC_ClockConfig+0x1c8>)
90001d82:	689b      	ldr	r3, [r3, #8]
90001d84:	4a58      	ldr	r2, [pc, #352]	; (90001ee8 <HAL_RCC_ClockConfig+0x1c8>)
90001d86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
90001d8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90001d8c:	687b      	ldr	r3, [r7, #4]
90001d8e:	681b      	ldr	r3, [r3, #0]
90001d90:	f003 0308 	and.w	r3, r3, #8
90001d94:	2b00      	cmp	r3, #0
90001d96:	d005      	beq.n	90001da4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
90001d98:	4b53      	ldr	r3, [pc, #332]	; (90001ee8 <HAL_RCC_ClockConfig+0x1c8>)
90001d9a:	689b      	ldr	r3, [r3, #8]
90001d9c:	4a52      	ldr	r2, [pc, #328]	; (90001ee8 <HAL_RCC_ClockConfig+0x1c8>)
90001d9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
90001da2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90001da4:	4b50      	ldr	r3, [pc, #320]	; (90001ee8 <HAL_RCC_ClockConfig+0x1c8>)
90001da6:	689b      	ldr	r3, [r3, #8]
90001da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
90001dac:	687b      	ldr	r3, [r7, #4]
90001dae:	689b      	ldr	r3, [r3, #8]
90001db0:	494d      	ldr	r1, [pc, #308]	; (90001ee8 <HAL_RCC_ClockConfig+0x1c8>)
90001db2:	4313      	orrs	r3, r2
90001db4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
90001db6:	687b      	ldr	r3, [r7, #4]
90001db8:	681b      	ldr	r3, [r3, #0]
90001dba:	f003 0301 	and.w	r3, r3, #1
90001dbe:	2b00      	cmp	r3, #0
90001dc0:	d040      	beq.n	90001e44 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90001dc2:	687b      	ldr	r3, [r7, #4]
90001dc4:	685b      	ldr	r3, [r3, #4]
90001dc6:	2b01      	cmp	r3, #1
90001dc8:	d107      	bne.n	90001dda <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90001dca:	4b47      	ldr	r3, [pc, #284]	; (90001ee8 <HAL_RCC_ClockConfig+0x1c8>)
90001dcc:	681b      	ldr	r3, [r3, #0]
90001dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90001dd2:	2b00      	cmp	r3, #0
90001dd4:	d115      	bne.n	90001e02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
90001dd6:	2301      	movs	r3, #1
90001dd8:	e07f      	b.n	90001eda <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
90001dda:	687b      	ldr	r3, [r7, #4]
90001ddc:	685b      	ldr	r3, [r3, #4]
90001dde:	2b02      	cmp	r3, #2
90001de0:	d107      	bne.n	90001df2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90001de2:	4b41      	ldr	r3, [pc, #260]	; (90001ee8 <HAL_RCC_ClockConfig+0x1c8>)
90001de4:	681b      	ldr	r3, [r3, #0]
90001de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90001dea:	2b00      	cmp	r3, #0
90001dec:	d109      	bne.n	90001e02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
90001dee:	2301      	movs	r3, #1
90001df0:	e073      	b.n	90001eda <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90001df2:	4b3d      	ldr	r3, [pc, #244]	; (90001ee8 <HAL_RCC_ClockConfig+0x1c8>)
90001df4:	681b      	ldr	r3, [r3, #0]
90001df6:	f003 0302 	and.w	r3, r3, #2
90001dfa:	2b00      	cmp	r3, #0
90001dfc:	d101      	bne.n	90001e02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
90001dfe:	2301      	movs	r3, #1
90001e00:	e06b      	b.n	90001eda <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
90001e02:	4b39      	ldr	r3, [pc, #228]	; (90001ee8 <HAL_RCC_ClockConfig+0x1c8>)
90001e04:	689b      	ldr	r3, [r3, #8]
90001e06:	f023 0203 	bic.w	r2, r3, #3
90001e0a:	687b      	ldr	r3, [r7, #4]
90001e0c:	685b      	ldr	r3, [r3, #4]
90001e0e:	4936      	ldr	r1, [pc, #216]	; (90001ee8 <HAL_RCC_ClockConfig+0x1c8>)
90001e10:	4313      	orrs	r3, r2
90001e12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90001e14:	f7ff f99a 	bl	9000114c <HAL_GetTick>
90001e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90001e1a:	e00a      	b.n	90001e32 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
90001e1c:	f7ff f996 	bl	9000114c <HAL_GetTick>
90001e20:	4602      	mov	r2, r0
90001e22:	68fb      	ldr	r3, [r7, #12]
90001e24:	1ad3      	subs	r3, r2, r3
90001e26:	f241 3288 	movw	r2, #5000	; 0x1388
90001e2a:	4293      	cmp	r3, r2
90001e2c:	d901      	bls.n	90001e32 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
90001e2e:	2303      	movs	r3, #3
90001e30:	e053      	b.n	90001eda <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90001e32:	4b2d      	ldr	r3, [pc, #180]	; (90001ee8 <HAL_RCC_ClockConfig+0x1c8>)
90001e34:	689b      	ldr	r3, [r3, #8]
90001e36:	f003 020c 	and.w	r2, r3, #12
90001e3a:	687b      	ldr	r3, [r7, #4]
90001e3c:	685b      	ldr	r3, [r3, #4]
90001e3e:	009b      	lsls	r3, r3, #2
90001e40:	429a      	cmp	r2, r3
90001e42:	d1eb      	bne.n	90001e1c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
90001e44:	4b27      	ldr	r3, [pc, #156]	; (90001ee4 <HAL_RCC_ClockConfig+0x1c4>)
90001e46:	681b      	ldr	r3, [r3, #0]
90001e48:	f003 030f 	and.w	r3, r3, #15
90001e4c:	683a      	ldr	r2, [r7, #0]
90001e4e:	429a      	cmp	r2, r3
90001e50:	d210      	bcs.n	90001e74 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90001e52:	4b24      	ldr	r3, [pc, #144]	; (90001ee4 <HAL_RCC_ClockConfig+0x1c4>)
90001e54:	681b      	ldr	r3, [r3, #0]
90001e56:	f023 020f 	bic.w	r2, r3, #15
90001e5a:	4922      	ldr	r1, [pc, #136]	; (90001ee4 <HAL_RCC_ClockConfig+0x1c4>)
90001e5c:	683b      	ldr	r3, [r7, #0]
90001e5e:	4313      	orrs	r3, r2
90001e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90001e62:	4b20      	ldr	r3, [pc, #128]	; (90001ee4 <HAL_RCC_ClockConfig+0x1c4>)
90001e64:	681b      	ldr	r3, [r3, #0]
90001e66:	f003 030f 	and.w	r3, r3, #15
90001e6a:	683a      	ldr	r2, [r7, #0]
90001e6c:	429a      	cmp	r2, r3
90001e6e:	d001      	beq.n	90001e74 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
90001e70:	2301      	movs	r3, #1
90001e72:	e032      	b.n	90001eda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90001e74:	687b      	ldr	r3, [r7, #4]
90001e76:	681b      	ldr	r3, [r3, #0]
90001e78:	f003 0304 	and.w	r3, r3, #4
90001e7c:	2b00      	cmp	r3, #0
90001e7e:	d008      	beq.n	90001e92 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
90001e80:	4b19      	ldr	r3, [pc, #100]	; (90001ee8 <HAL_RCC_ClockConfig+0x1c8>)
90001e82:	689b      	ldr	r3, [r3, #8]
90001e84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
90001e88:	687b      	ldr	r3, [r7, #4]
90001e8a:	68db      	ldr	r3, [r3, #12]
90001e8c:	4916      	ldr	r1, [pc, #88]	; (90001ee8 <HAL_RCC_ClockConfig+0x1c8>)
90001e8e:	4313      	orrs	r3, r2
90001e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90001e92:	687b      	ldr	r3, [r7, #4]
90001e94:	681b      	ldr	r3, [r3, #0]
90001e96:	f003 0308 	and.w	r3, r3, #8
90001e9a:	2b00      	cmp	r3, #0
90001e9c:	d009      	beq.n	90001eb2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
90001e9e:	4b12      	ldr	r3, [pc, #72]	; (90001ee8 <HAL_RCC_ClockConfig+0x1c8>)
90001ea0:	689b      	ldr	r3, [r3, #8]
90001ea2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
90001ea6:	687b      	ldr	r3, [r7, #4]
90001ea8:	691b      	ldr	r3, [r3, #16]
90001eaa:	00db      	lsls	r3, r3, #3
90001eac:	490e      	ldr	r1, [pc, #56]	; (90001ee8 <HAL_RCC_ClockConfig+0x1c8>)
90001eae:	4313      	orrs	r3, r2
90001eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
90001eb2:	f000 f821 	bl	90001ef8 <HAL_RCC_GetSysClockFreq>
90001eb6:	4602      	mov	r2, r0
90001eb8:	4b0b      	ldr	r3, [pc, #44]	; (90001ee8 <HAL_RCC_ClockConfig+0x1c8>)
90001eba:	689b      	ldr	r3, [r3, #8]
90001ebc:	091b      	lsrs	r3, r3, #4
90001ebe:	f003 030f 	and.w	r3, r3, #15
90001ec2:	490a      	ldr	r1, [pc, #40]	; (90001eec <HAL_RCC_ClockConfig+0x1cc>)
90001ec4:	5ccb      	ldrb	r3, [r1, r3]
90001ec6:	fa22 f303 	lsr.w	r3, r2, r3
90001eca:	4a09      	ldr	r2, [pc, #36]	; (90001ef0 <HAL_RCC_ClockConfig+0x1d0>)
90001ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
90001ece:	4b09      	ldr	r3, [pc, #36]	; (90001ef4 <HAL_RCC_ClockConfig+0x1d4>)
90001ed0:	681b      	ldr	r3, [r3, #0]
90001ed2:	4618      	mov	r0, r3
90001ed4:	f7ff f8f6 	bl	900010c4 <HAL_InitTick>

  return HAL_OK;
90001ed8:	2300      	movs	r3, #0
}
90001eda:	4618      	mov	r0, r3
90001edc:	3710      	adds	r7, #16
90001ede:	46bd      	mov	sp, r7
90001ee0:	bd80      	pop	{r7, pc}
90001ee2:	bf00      	nop
90001ee4:	40023c00 	.word	0x40023c00
90001ee8:	40023800 	.word	0x40023800
90001eec:	900020d4 	.word	0x900020d4
90001ef0:	20000000 	.word	0x20000000
90001ef4:	20000004 	.word	0x20000004

90001ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
90001ef8:	b5b0      	push	{r4, r5, r7, lr}
90001efa:	b084      	sub	sp, #16
90001efc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
90001efe:	2100      	movs	r1, #0
90001f00:	6079      	str	r1, [r7, #4]
90001f02:	2100      	movs	r1, #0
90001f04:	60f9      	str	r1, [r7, #12]
90001f06:	2100      	movs	r1, #0
90001f08:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
90001f0a:	2100      	movs	r1, #0
90001f0c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
90001f0e:	4952      	ldr	r1, [pc, #328]	; (90002058 <HAL_RCC_GetSysClockFreq+0x160>)
90001f10:	6889      	ldr	r1, [r1, #8]
90001f12:	f001 010c 	and.w	r1, r1, #12
90001f16:	2908      	cmp	r1, #8
90001f18:	d00d      	beq.n	90001f36 <HAL_RCC_GetSysClockFreq+0x3e>
90001f1a:	2908      	cmp	r1, #8
90001f1c:	f200 8094 	bhi.w	90002048 <HAL_RCC_GetSysClockFreq+0x150>
90001f20:	2900      	cmp	r1, #0
90001f22:	d002      	beq.n	90001f2a <HAL_RCC_GetSysClockFreq+0x32>
90001f24:	2904      	cmp	r1, #4
90001f26:	d003      	beq.n	90001f30 <HAL_RCC_GetSysClockFreq+0x38>
90001f28:	e08e      	b.n	90002048 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
90001f2a:	4b4c      	ldr	r3, [pc, #304]	; (9000205c <HAL_RCC_GetSysClockFreq+0x164>)
90001f2c:	60bb      	str	r3, [r7, #8]
      break;
90001f2e:	e08e      	b.n	9000204e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
90001f30:	4b4b      	ldr	r3, [pc, #300]	; (90002060 <HAL_RCC_GetSysClockFreq+0x168>)
90001f32:	60bb      	str	r3, [r7, #8]
      break;
90001f34:	e08b      	b.n	9000204e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
90001f36:	4948      	ldr	r1, [pc, #288]	; (90002058 <HAL_RCC_GetSysClockFreq+0x160>)
90001f38:	6849      	ldr	r1, [r1, #4]
90001f3a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
90001f3e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
90001f40:	4945      	ldr	r1, [pc, #276]	; (90002058 <HAL_RCC_GetSysClockFreq+0x160>)
90001f42:	6849      	ldr	r1, [r1, #4]
90001f44:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
90001f48:	2900      	cmp	r1, #0
90001f4a:	d024      	beq.n	90001f96 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
90001f4c:	4942      	ldr	r1, [pc, #264]	; (90002058 <HAL_RCC_GetSysClockFreq+0x160>)
90001f4e:	6849      	ldr	r1, [r1, #4]
90001f50:	0989      	lsrs	r1, r1, #6
90001f52:	4608      	mov	r0, r1
90001f54:	f04f 0100 	mov.w	r1, #0
90001f58:	f240 14ff 	movw	r4, #511	; 0x1ff
90001f5c:	f04f 0500 	mov.w	r5, #0
90001f60:	ea00 0204 	and.w	r2, r0, r4
90001f64:	ea01 0305 	and.w	r3, r1, r5
90001f68:	493d      	ldr	r1, [pc, #244]	; (90002060 <HAL_RCC_GetSysClockFreq+0x168>)
90001f6a:	fb01 f003 	mul.w	r0, r1, r3
90001f6e:	2100      	movs	r1, #0
90001f70:	fb01 f102 	mul.w	r1, r1, r2
90001f74:	1844      	adds	r4, r0, r1
90001f76:	493a      	ldr	r1, [pc, #232]	; (90002060 <HAL_RCC_GetSysClockFreq+0x168>)
90001f78:	fba2 0101 	umull	r0, r1, r2, r1
90001f7c:	1863      	adds	r3, r4, r1
90001f7e:	4619      	mov	r1, r3
90001f80:	687b      	ldr	r3, [r7, #4]
90001f82:	461a      	mov	r2, r3
90001f84:	f04f 0300 	mov.w	r3, #0
90001f88:	f7fe f93e 	bl	90000208 <__aeabi_uldivmod>
90001f8c:	4602      	mov	r2, r0
90001f8e:	460b      	mov	r3, r1
90001f90:	4613      	mov	r3, r2
90001f92:	60fb      	str	r3, [r7, #12]
90001f94:	e04a      	b.n	9000202c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
90001f96:	4b30      	ldr	r3, [pc, #192]	; (90002058 <HAL_RCC_GetSysClockFreq+0x160>)
90001f98:	685b      	ldr	r3, [r3, #4]
90001f9a:	099b      	lsrs	r3, r3, #6
90001f9c:	461a      	mov	r2, r3
90001f9e:	f04f 0300 	mov.w	r3, #0
90001fa2:	f240 10ff 	movw	r0, #511	; 0x1ff
90001fa6:	f04f 0100 	mov.w	r1, #0
90001faa:	ea02 0400 	and.w	r4, r2, r0
90001fae:	ea03 0501 	and.w	r5, r3, r1
90001fb2:	4620      	mov	r0, r4
90001fb4:	4629      	mov	r1, r5
90001fb6:	f04f 0200 	mov.w	r2, #0
90001fba:	f04f 0300 	mov.w	r3, #0
90001fbe:	014b      	lsls	r3, r1, #5
90001fc0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
90001fc4:	0142      	lsls	r2, r0, #5
90001fc6:	4610      	mov	r0, r2
90001fc8:	4619      	mov	r1, r3
90001fca:	1b00      	subs	r0, r0, r4
90001fcc:	eb61 0105 	sbc.w	r1, r1, r5
90001fd0:	f04f 0200 	mov.w	r2, #0
90001fd4:	f04f 0300 	mov.w	r3, #0
90001fd8:	018b      	lsls	r3, r1, #6
90001fda:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
90001fde:	0182      	lsls	r2, r0, #6
90001fe0:	1a12      	subs	r2, r2, r0
90001fe2:	eb63 0301 	sbc.w	r3, r3, r1
90001fe6:	f04f 0000 	mov.w	r0, #0
90001fea:	f04f 0100 	mov.w	r1, #0
90001fee:	00d9      	lsls	r1, r3, #3
90001ff0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
90001ff4:	00d0      	lsls	r0, r2, #3
90001ff6:	4602      	mov	r2, r0
90001ff8:	460b      	mov	r3, r1
90001ffa:	1912      	adds	r2, r2, r4
90001ffc:	eb45 0303 	adc.w	r3, r5, r3
90002000:	f04f 0000 	mov.w	r0, #0
90002004:	f04f 0100 	mov.w	r1, #0
90002008:	0299      	lsls	r1, r3, #10
9000200a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
9000200e:	0290      	lsls	r0, r2, #10
90002010:	4602      	mov	r2, r0
90002012:	460b      	mov	r3, r1
90002014:	4610      	mov	r0, r2
90002016:	4619      	mov	r1, r3
90002018:	687b      	ldr	r3, [r7, #4]
9000201a:	461a      	mov	r2, r3
9000201c:	f04f 0300 	mov.w	r3, #0
90002020:	f7fe f8f2 	bl	90000208 <__aeabi_uldivmod>
90002024:	4602      	mov	r2, r0
90002026:	460b      	mov	r3, r1
90002028:	4613      	mov	r3, r2
9000202a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
9000202c:	4b0a      	ldr	r3, [pc, #40]	; (90002058 <HAL_RCC_GetSysClockFreq+0x160>)
9000202e:	685b      	ldr	r3, [r3, #4]
90002030:	0c1b      	lsrs	r3, r3, #16
90002032:	f003 0303 	and.w	r3, r3, #3
90002036:	3301      	adds	r3, #1
90002038:	005b      	lsls	r3, r3, #1
9000203a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
9000203c:	68fa      	ldr	r2, [r7, #12]
9000203e:	683b      	ldr	r3, [r7, #0]
90002040:	fbb2 f3f3 	udiv	r3, r2, r3
90002044:	60bb      	str	r3, [r7, #8]
      break;
90002046:	e002      	b.n	9000204e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
90002048:	4b04      	ldr	r3, [pc, #16]	; (9000205c <HAL_RCC_GetSysClockFreq+0x164>)
9000204a:	60bb      	str	r3, [r7, #8]
      break;
9000204c:	bf00      	nop
    }
  }
  return sysclockfreq;
9000204e:	68bb      	ldr	r3, [r7, #8]
}
90002050:	4618      	mov	r0, r3
90002052:	3710      	adds	r7, #16
90002054:	46bd      	mov	sp, r7
90002056:	bdb0      	pop	{r4, r5, r7, pc}
90002058:	40023800 	.word	0x40023800
9000205c:	00f42400 	.word	0x00f42400
90002060:	017d7840 	.word	0x017d7840

90002064 <__libc_init_array>:
90002064:	b570      	push	{r4, r5, r6, lr}
90002066:	4d0d      	ldr	r5, [pc, #52]	; (9000209c <__libc_init_array+0x38>)
90002068:	4c0d      	ldr	r4, [pc, #52]	; (900020a0 <__libc_init_array+0x3c>)
9000206a:	1b64      	subs	r4, r4, r5
9000206c:	10a4      	asrs	r4, r4, #2
9000206e:	2600      	movs	r6, #0
90002070:	42a6      	cmp	r6, r4
90002072:	d109      	bne.n	90002088 <__libc_init_array+0x24>
90002074:	4d0b      	ldr	r5, [pc, #44]	; (900020a4 <__libc_init_array+0x40>)
90002076:	4c0c      	ldr	r4, [pc, #48]	; (900020a8 <__libc_init_array+0x44>)
90002078:	f000 f820 	bl	900020bc <_init>
9000207c:	1b64      	subs	r4, r4, r5
9000207e:	10a4      	asrs	r4, r4, #2
90002080:	2600      	movs	r6, #0
90002082:	42a6      	cmp	r6, r4
90002084:	d105      	bne.n	90002092 <__libc_init_array+0x2e>
90002086:	bd70      	pop	{r4, r5, r6, pc}
90002088:	f855 3b04 	ldr.w	r3, [r5], #4
9000208c:	4798      	blx	r3
9000208e:	3601      	adds	r6, #1
90002090:	e7ee      	b.n	90002070 <__libc_init_array+0xc>
90002092:	f855 3b04 	ldr.w	r3, [r5], #4
90002096:	4798      	blx	r3
90002098:	3601      	adds	r6, #1
9000209a:	e7f2      	b.n	90002082 <__libc_init_array+0x1e>
9000209c:	900020ec 	.word	0x900020ec
900020a0:	900020ec 	.word	0x900020ec
900020a4:	900020ec 	.word	0x900020ec
900020a8:	900020f0 	.word	0x900020f0

900020ac <memset>:
900020ac:	4402      	add	r2, r0
900020ae:	4603      	mov	r3, r0
900020b0:	4293      	cmp	r3, r2
900020b2:	d100      	bne.n	900020b6 <memset+0xa>
900020b4:	4770      	bx	lr
900020b6:	f803 1b01 	strb.w	r1, [r3], #1
900020ba:	e7f9      	b.n	900020b0 <memset+0x4>

900020bc <_init>:
900020bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900020be:	bf00      	nop
900020c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
900020c2:	bc08      	pop	{r3}
900020c4:	469e      	mov	lr, r3
900020c6:	4770      	bx	lr

900020c8 <_fini>:
900020c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900020ca:	bf00      	nop
900020cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
900020ce:	bc08      	pop	{r3}
900020d0:	469e      	mov	lr, r3
900020d2:	4770      	bx	lr
