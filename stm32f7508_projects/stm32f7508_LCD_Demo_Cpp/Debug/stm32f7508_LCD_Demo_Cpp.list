
stm32f7508_LCD_Demo_Cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  90000000  90000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046e0  900001c8  900001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b08  900048a8  900048a8  000148a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  900063b0  900063b0  000163b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  900063b8  900063b8  000163b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  900063bc  900063bc  000163bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000018  20000000  900063c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000268  20000018  900063d8  00020018  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  20000280  900063d8  00020280  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ffa2  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002741  00000000  00000000  0002ffea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d40  00000000  00000000  00032730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000c08  00000000  00000000  00033470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002ca65  00000000  00000000  00034078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00010d85  00000000  00000000  00060add  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0010ae8a  00000000  00000000  00071862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0017c6ec  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000359c  00000000  00000000  0017c740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900001c8 <__do_global_dtors_aux>:
900001c8:	b510      	push	{r4, lr}
900001ca:	4c05      	ldr	r4, [pc, #20]	; (900001e0 <__do_global_dtors_aux+0x18>)
900001cc:	7823      	ldrb	r3, [r4, #0]
900001ce:	b933      	cbnz	r3, 900001de <__do_global_dtors_aux+0x16>
900001d0:	4b04      	ldr	r3, [pc, #16]	; (900001e4 <__do_global_dtors_aux+0x1c>)
900001d2:	b113      	cbz	r3, 900001da <__do_global_dtors_aux+0x12>
900001d4:	4804      	ldr	r0, [pc, #16]	; (900001e8 <__do_global_dtors_aux+0x20>)
900001d6:	f3af 8000 	nop.w
900001da:	2301      	movs	r3, #1
900001dc:	7023      	strb	r3, [r4, #0]
900001de:	bd10      	pop	{r4, pc}
900001e0:	20000018 	.word	0x20000018
900001e4:	00000000 	.word	0x00000000
900001e8:	90004890 	.word	0x90004890

900001ec <frame_dummy>:
900001ec:	b508      	push	{r3, lr}
900001ee:	4b03      	ldr	r3, [pc, #12]	; (900001fc <frame_dummy+0x10>)
900001f0:	b11b      	cbz	r3, 900001fa <frame_dummy+0xe>
900001f2:	4903      	ldr	r1, [pc, #12]	; (90000200 <frame_dummy+0x14>)
900001f4:	4803      	ldr	r0, [pc, #12]	; (90000204 <frame_dummy+0x18>)
900001f6:	f3af 8000 	nop.w
900001fa:	bd08      	pop	{r3, pc}
900001fc:	00000000 	.word	0x00000000
90000200:	2000001c 	.word	0x2000001c
90000204:	90004890 	.word	0x90004890

90000208 <__aeabi_uldivmod>:
90000208:	b953      	cbnz	r3, 90000220 <__aeabi_uldivmod+0x18>
9000020a:	b94a      	cbnz	r2, 90000220 <__aeabi_uldivmod+0x18>
9000020c:	2900      	cmp	r1, #0
9000020e:	bf08      	it	eq
90000210:	2800      	cmpeq	r0, #0
90000212:	bf1c      	itt	ne
90000214:	f04f 31ff 	movne.w	r1, #4294967295
90000218:	f04f 30ff 	movne.w	r0, #4294967295
9000021c:	f000 b96e 	b.w	900004fc <__aeabi_idiv0>
90000220:	f1ad 0c08 	sub.w	ip, sp, #8
90000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
90000228:	f000 f806 	bl	90000238 <__udivmoddi4>
9000022c:	f8dd e004 	ldr.w	lr, [sp, #4]
90000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
90000234:	b004      	add	sp, #16
90000236:	4770      	bx	lr

90000238 <__udivmoddi4>:
90000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000023c:	9d08      	ldr	r5, [sp, #32]
9000023e:	4604      	mov	r4, r0
90000240:	468c      	mov	ip, r1
90000242:	2b00      	cmp	r3, #0
90000244:	f040 8083 	bne.w	9000034e <__udivmoddi4+0x116>
90000248:	428a      	cmp	r2, r1
9000024a:	4617      	mov	r7, r2
9000024c:	d947      	bls.n	900002de <__udivmoddi4+0xa6>
9000024e:	fab2 f282 	clz	r2, r2
90000252:	b142      	cbz	r2, 90000266 <__udivmoddi4+0x2e>
90000254:	f1c2 0020 	rsb	r0, r2, #32
90000258:	fa24 f000 	lsr.w	r0, r4, r0
9000025c:	4091      	lsls	r1, r2
9000025e:	4097      	lsls	r7, r2
90000260:	ea40 0c01 	orr.w	ip, r0, r1
90000264:	4094      	lsls	r4, r2
90000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
9000026a:	0c23      	lsrs	r3, r4, #16
9000026c:	fbbc f6f8 	udiv	r6, ip, r8
90000270:	fa1f fe87 	uxth.w	lr, r7
90000274:	fb08 c116 	mls	r1, r8, r6, ip
90000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000027c:	fb06 f10e 	mul.w	r1, r6, lr
90000280:	4299      	cmp	r1, r3
90000282:	d909      	bls.n	90000298 <__udivmoddi4+0x60>
90000284:	18fb      	adds	r3, r7, r3
90000286:	f106 30ff 	add.w	r0, r6, #4294967295
9000028a:	f080 8119 	bcs.w	900004c0 <__udivmoddi4+0x288>
9000028e:	4299      	cmp	r1, r3
90000290:	f240 8116 	bls.w	900004c0 <__udivmoddi4+0x288>
90000294:	3e02      	subs	r6, #2
90000296:	443b      	add	r3, r7
90000298:	1a5b      	subs	r3, r3, r1
9000029a:	b2a4      	uxth	r4, r4
9000029c:	fbb3 f0f8 	udiv	r0, r3, r8
900002a0:	fb08 3310 	mls	r3, r8, r0, r3
900002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
900002a8:	fb00 fe0e 	mul.w	lr, r0, lr
900002ac:	45a6      	cmp	lr, r4
900002ae:	d909      	bls.n	900002c4 <__udivmoddi4+0x8c>
900002b0:	193c      	adds	r4, r7, r4
900002b2:	f100 33ff 	add.w	r3, r0, #4294967295
900002b6:	f080 8105 	bcs.w	900004c4 <__udivmoddi4+0x28c>
900002ba:	45a6      	cmp	lr, r4
900002bc:	f240 8102 	bls.w	900004c4 <__udivmoddi4+0x28c>
900002c0:	3802      	subs	r0, #2
900002c2:	443c      	add	r4, r7
900002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
900002c8:	eba4 040e 	sub.w	r4, r4, lr
900002cc:	2600      	movs	r6, #0
900002ce:	b11d      	cbz	r5, 900002d8 <__udivmoddi4+0xa0>
900002d0:	40d4      	lsrs	r4, r2
900002d2:	2300      	movs	r3, #0
900002d4:	e9c5 4300 	strd	r4, r3, [r5]
900002d8:	4631      	mov	r1, r6
900002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900002de:	b902      	cbnz	r2, 900002e2 <__udivmoddi4+0xaa>
900002e0:	deff      	udf	#255	; 0xff
900002e2:	fab2 f282 	clz	r2, r2
900002e6:	2a00      	cmp	r2, #0
900002e8:	d150      	bne.n	9000038c <__udivmoddi4+0x154>
900002ea:	1bcb      	subs	r3, r1, r7
900002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900002f0:	fa1f f887 	uxth.w	r8, r7
900002f4:	2601      	movs	r6, #1
900002f6:	fbb3 fcfe 	udiv	ip, r3, lr
900002fa:	0c21      	lsrs	r1, r4, #16
900002fc:	fb0e 331c 	mls	r3, lr, ip, r3
90000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
90000304:	fb08 f30c 	mul.w	r3, r8, ip
90000308:	428b      	cmp	r3, r1
9000030a:	d907      	bls.n	9000031c <__udivmoddi4+0xe4>
9000030c:	1879      	adds	r1, r7, r1
9000030e:	f10c 30ff 	add.w	r0, ip, #4294967295
90000312:	d202      	bcs.n	9000031a <__udivmoddi4+0xe2>
90000314:	428b      	cmp	r3, r1
90000316:	f200 80e9 	bhi.w	900004ec <__udivmoddi4+0x2b4>
9000031a:	4684      	mov	ip, r0
9000031c:	1ac9      	subs	r1, r1, r3
9000031e:	b2a3      	uxth	r3, r4
90000320:	fbb1 f0fe 	udiv	r0, r1, lr
90000324:	fb0e 1110 	mls	r1, lr, r0, r1
90000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
9000032c:	fb08 f800 	mul.w	r8, r8, r0
90000330:	45a0      	cmp	r8, r4
90000332:	d907      	bls.n	90000344 <__udivmoddi4+0x10c>
90000334:	193c      	adds	r4, r7, r4
90000336:	f100 33ff 	add.w	r3, r0, #4294967295
9000033a:	d202      	bcs.n	90000342 <__udivmoddi4+0x10a>
9000033c:	45a0      	cmp	r8, r4
9000033e:	f200 80d9 	bhi.w	900004f4 <__udivmoddi4+0x2bc>
90000342:	4618      	mov	r0, r3
90000344:	eba4 0408 	sub.w	r4, r4, r8
90000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
9000034c:	e7bf      	b.n	900002ce <__udivmoddi4+0x96>
9000034e:	428b      	cmp	r3, r1
90000350:	d909      	bls.n	90000366 <__udivmoddi4+0x12e>
90000352:	2d00      	cmp	r5, #0
90000354:	f000 80b1 	beq.w	900004ba <__udivmoddi4+0x282>
90000358:	2600      	movs	r6, #0
9000035a:	e9c5 0100 	strd	r0, r1, [r5]
9000035e:	4630      	mov	r0, r6
90000360:	4631      	mov	r1, r6
90000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000366:	fab3 f683 	clz	r6, r3
9000036a:	2e00      	cmp	r6, #0
9000036c:	d14a      	bne.n	90000404 <__udivmoddi4+0x1cc>
9000036e:	428b      	cmp	r3, r1
90000370:	d302      	bcc.n	90000378 <__udivmoddi4+0x140>
90000372:	4282      	cmp	r2, r0
90000374:	f200 80b8 	bhi.w	900004e8 <__udivmoddi4+0x2b0>
90000378:	1a84      	subs	r4, r0, r2
9000037a:	eb61 0103 	sbc.w	r1, r1, r3
9000037e:	2001      	movs	r0, #1
90000380:	468c      	mov	ip, r1
90000382:	2d00      	cmp	r5, #0
90000384:	d0a8      	beq.n	900002d8 <__udivmoddi4+0xa0>
90000386:	e9c5 4c00 	strd	r4, ip, [r5]
9000038a:	e7a5      	b.n	900002d8 <__udivmoddi4+0xa0>
9000038c:	f1c2 0320 	rsb	r3, r2, #32
90000390:	fa20 f603 	lsr.w	r6, r0, r3
90000394:	4097      	lsls	r7, r2
90000396:	fa01 f002 	lsl.w	r0, r1, r2
9000039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
9000039e:	40d9      	lsrs	r1, r3
900003a0:	4330      	orrs	r0, r6
900003a2:	0c03      	lsrs	r3, r0, #16
900003a4:	fbb1 f6fe 	udiv	r6, r1, lr
900003a8:	fa1f f887 	uxth.w	r8, r7
900003ac:	fb0e 1116 	mls	r1, lr, r6, r1
900003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
900003b4:	fb06 f108 	mul.w	r1, r6, r8
900003b8:	4299      	cmp	r1, r3
900003ba:	fa04 f402 	lsl.w	r4, r4, r2
900003be:	d909      	bls.n	900003d4 <__udivmoddi4+0x19c>
900003c0:	18fb      	adds	r3, r7, r3
900003c2:	f106 3cff 	add.w	ip, r6, #4294967295
900003c6:	f080 808d 	bcs.w	900004e4 <__udivmoddi4+0x2ac>
900003ca:	4299      	cmp	r1, r3
900003cc:	f240 808a 	bls.w	900004e4 <__udivmoddi4+0x2ac>
900003d0:	3e02      	subs	r6, #2
900003d2:	443b      	add	r3, r7
900003d4:	1a5b      	subs	r3, r3, r1
900003d6:	b281      	uxth	r1, r0
900003d8:	fbb3 f0fe 	udiv	r0, r3, lr
900003dc:	fb0e 3310 	mls	r3, lr, r0, r3
900003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
900003e4:	fb00 f308 	mul.w	r3, r0, r8
900003e8:	428b      	cmp	r3, r1
900003ea:	d907      	bls.n	900003fc <__udivmoddi4+0x1c4>
900003ec:	1879      	adds	r1, r7, r1
900003ee:	f100 3cff 	add.w	ip, r0, #4294967295
900003f2:	d273      	bcs.n	900004dc <__udivmoddi4+0x2a4>
900003f4:	428b      	cmp	r3, r1
900003f6:	d971      	bls.n	900004dc <__udivmoddi4+0x2a4>
900003f8:	3802      	subs	r0, #2
900003fa:	4439      	add	r1, r7
900003fc:	1acb      	subs	r3, r1, r3
900003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
90000402:	e778      	b.n	900002f6 <__udivmoddi4+0xbe>
90000404:	f1c6 0c20 	rsb	ip, r6, #32
90000408:	fa03 f406 	lsl.w	r4, r3, r6
9000040c:	fa22 f30c 	lsr.w	r3, r2, ip
90000410:	431c      	orrs	r4, r3
90000412:	fa20 f70c 	lsr.w	r7, r0, ip
90000416:	fa01 f306 	lsl.w	r3, r1, r6
9000041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
9000041e:	fa21 f10c 	lsr.w	r1, r1, ip
90000422:	431f      	orrs	r7, r3
90000424:	0c3b      	lsrs	r3, r7, #16
90000426:	fbb1 f9fe 	udiv	r9, r1, lr
9000042a:	fa1f f884 	uxth.w	r8, r4
9000042e:	fb0e 1119 	mls	r1, lr, r9, r1
90000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
90000436:	fb09 fa08 	mul.w	sl, r9, r8
9000043a:	458a      	cmp	sl, r1
9000043c:	fa02 f206 	lsl.w	r2, r2, r6
90000440:	fa00 f306 	lsl.w	r3, r0, r6
90000444:	d908      	bls.n	90000458 <__udivmoddi4+0x220>
90000446:	1861      	adds	r1, r4, r1
90000448:	f109 30ff 	add.w	r0, r9, #4294967295
9000044c:	d248      	bcs.n	900004e0 <__udivmoddi4+0x2a8>
9000044e:	458a      	cmp	sl, r1
90000450:	d946      	bls.n	900004e0 <__udivmoddi4+0x2a8>
90000452:	f1a9 0902 	sub.w	r9, r9, #2
90000456:	4421      	add	r1, r4
90000458:	eba1 010a 	sub.w	r1, r1, sl
9000045c:	b2bf      	uxth	r7, r7
9000045e:	fbb1 f0fe 	udiv	r0, r1, lr
90000462:	fb0e 1110 	mls	r1, lr, r0, r1
90000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
9000046a:	fb00 f808 	mul.w	r8, r0, r8
9000046e:	45b8      	cmp	r8, r7
90000470:	d907      	bls.n	90000482 <__udivmoddi4+0x24a>
90000472:	19e7      	adds	r7, r4, r7
90000474:	f100 31ff 	add.w	r1, r0, #4294967295
90000478:	d22e      	bcs.n	900004d8 <__udivmoddi4+0x2a0>
9000047a:	45b8      	cmp	r8, r7
9000047c:	d92c      	bls.n	900004d8 <__udivmoddi4+0x2a0>
9000047e:	3802      	subs	r0, #2
90000480:	4427      	add	r7, r4
90000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
90000486:	eba7 0708 	sub.w	r7, r7, r8
9000048a:	fba0 8902 	umull	r8, r9, r0, r2
9000048e:	454f      	cmp	r7, r9
90000490:	46c6      	mov	lr, r8
90000492:	4649      	mov	r1, r9
90000494:	d31a      	bcc.n	900004cc <__udivmoddi4+0x294>
90000496:	d017      	beq.n	900004c8 <__udivmoddi4+0x290>
90000498:	b15d      	cbz	r5, 900004b2 <__udivmoddi4+0x27a>
9000049a:	ebb3 020e 	subs.w	r2, r3, lr
9000049e:	eb67 0701 	sbc.w	r7, r7, r1
900004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
900004a6:	40f2      	lsrs	r2, r6
900004a8:	ea4c 0202 	orr.w	r2, ip, r2
900004ac:	40f7      	lsrs	r7, r6
900004ae:	e9c5 2700 	strd	r2, r7, [r5]
900004b2:	2600      	movs	r6, #0
900004b4:	4631      	mov	r1, r6
900004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900004ba:	462e      	mov	r6, r5
900004bc:	4628      	mov	r0, r5
900004be:	e70b      	b.n	900002d8 <__udivmoddi4+0xa0>
900004c0:	4606      	mov	r6, r0
900004c2:	e6e9      	b.n	90000298 <__udivmoddi4+0x60>
900004c4:	4618      	mov	r0, r3
900004c6:	e6fd      	b.n	900002c4 <__udivmoddi4+0x8c>
900004c8:	4543      	cmp	r3, r8
900004ca:	d2e5      	bcs.n	90000498 <__udivmoddi4+0x260>
900004cc:	ebb8 0e02 	subs.w	lr, r8, r2
900004d0:	eb69 0104 	sbc.w	r1, r9, r4
900004d4:	3801      	subs	r0, #1
900004d6:	e7df      	b.n	90000498 <__udivmoddi4+0x260>
900004d8:	4608      	mov	r0, r1
900004da:	e7d2      	b.n	90000482 <__udivmoddi4+0x24a>
900004dc:	4660      	mov	r0, ip
900004de:	e78d      	b.n	900003fc <__udivmoddi4+0x1c4>
900004e0:	4681      	mov	r9, r0
900004e2:	e7b9      	b.n	90000458 <__udivmoddi4+0x220>
900004e4:	4666      	mov	r6, ip
900004e6:	e775      	b.n	900003d4 <__udivmoddi4+0x19c>
900004e8:	4630      	mov	r0, r6
900004ea:	e74a      	b.n	90000382 <__udivmoddi4+0x14a>
900004ec:	f1ac 0c02 	sub.w	ip, ip, #2
900004f0:	4439      	add	r1, r7
900004f2:	e713      	b.n	9000031c <__udivmoddi4+0xe4>
900004f4:	3802      	subs	r0, #2
900004f6:	443c      	add	r4, r7
900004f8:	e724      	b.n	90000344 <__udivmoddi4+0x10c>
900004fa:	bf00      	nop

900004fc <__aeabi_idiv0>:
900004fc:	4770      	bx	lr
900004fe:	bf00      	nop

90000500 <MainTask>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void MainTask(void)
{
90000500:	b580      	push	{r7, lr}
90000502:	b084      	sub	sp, #16
90000504:	af02      	add	r7, sp, #8

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


  /* USER CODE BEGIN SysInit */
  LCD_DISCO_F7508 lcd;
90000506:	1d3b      	adds	r3, r7, #4
90000508:	4618      	mov	r0, r3
9000050a:	f004 f8c9 	bl	900046a0 <_ZN15LCD_DISCO_F7508C1Ev>

  // audio IN_OUT buffer is stored in the SDRAM, SDRAM needs to be initialized and FMC enabled

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  lcd.DisplayStringAt(0, LINE(1), (uint8_t *)"MBED EXAMPLE", CENTER_MODE);
9000050e:	f000 fb2d 	bl	90000b6c <BSP_LCD_GetFont>
90000512:	4603      	mov	r3, r0
90000514:	88da      	ldrh	r2, [r3, #6]
90000516:	1d38      	adds	r0, r7, #4
90000518:	2301      	movs	r3, #1
9000051a:	9300      	str	r3, [sp, #0]
9000051c:	4b4a      	ldr	r3, [pc, #296]	; (90000648 <MainTask+0x148>)
9000051e:	2100      	movs	r1, #0
90000520:	f004 f920 	bl	90004764 <_ZN15LCD_DISCO_F750815DisplayStringAtEttPh20Text_AlignModeTypdef>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
   //HAL_Delay(50);
   HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
90000524:	2102      	movs	r1, #2
90000526:	4849      	ldr	r0, [pc, #292]	; (9000064c <MainTask+0x14c>)
90000528:	f002 fba5 	bl	90002c76 <HAL_GPIO_TogglePin>

   /* Wait end of half block recording */
   lcd.Clear(LCD_COLOR_BLUE);
9000052c:	1d3b      	adds	r3, r7, #4
9000052e:	4948      	ldr	r1, [pc, #288]	; (90000650 <MainTask+0x150>)
90000530:	4618      	mov	r0, r3
90000532:	f004 f90b 	bl	9000474c <_ZN15LCD_DISCO_F75085ClearEm>
           lcd.SetBackColor(LCD_COLOR_BLUE);
90000536:	1d3b      	adds	r3, r7, #4
90000538:	4945      	ldr	r1, [pc, #276]	; (90000650 <MainTask+0x150>)
9000053a:	4618      	mov	r0, r3
9000053c:	f004 f8fa 	bl	90004734 <_ZN15LCD_DISCO_F750812SetBackColorEm>
           lcd.SetTextColor(LCD_COLOR_WHITE);
90000540:	1d3b      	adds	r3, r7, #4
90000542:	f04f 31ff 	mov.w	r1, #4294967295
90000546:	4618      	mov	r0, r3
90000548:	f004 f8e8 	bl	9000471c <_ZN15LCD_DISCO_F750812SetTextColorEm>
           HAL_Delay(300);
9000054c:	f44f 7096 	mov.w	r0, #300	; 0x12c
90000550:	f001 fc42 	bl	90001dd8 <HAL_Delay>
           lcd.DisplayStringAt(0, LINE(5), (uint8_t *)"DISCOVERY STM32F7508", CENTER_MODE);
90000554:	f000 fb0a 	bl	90000b6c <BSP_LCD_GetFont>
90000558:	4603      	mov	r3, r0
9000055a:	88db      	ldrh	r3, [r3, #6]
9000055c:	461a      	mov	r2, r3
9000055e:	0092      	lsls	r2, r2, #2
90000560:	4413      	add	r3, r2
90000562:	b29a      	uxth	r2, r3
90000564:	1d38      	adds	r0, r7, #4
90000566:	2301      	movs	r3, #1
90000568:	9300      	str	r3, [sp, #0]
9000056a:	4b3a      	ldr	r3, [pc, #232]	; (90000654 <MainTask+0x154>)
9000056c:	2100      	movs	r1, #0
9000056e:	f004 f8f9 	bl	90004764 <_ZN15LCD_DISCO_F750815DisplayStringAtEttPh20Text_AlignModeTypdef>
           HAL_Delay(1000);
90000572:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
90000576:	f001 fc2f 	bl	90001dd8 <HAL_Delay>
           lcd.Clear(LCD_COLOR_GREEN);
9000057a:	1d3b      	adds	r3, r7, #4
9000057c:	f04f 21ff 	mov.w	r1, #4278255360	; 0xff00ff00
90000580:	4618      	mov	r0, r3
90000582:	f004 f8e3 	bl	9000474c <_ZN15LCD_DISCO_F75085ClearEm>
           lcd.SetTextColor(LCD_COLOR_BLUE);
90000586:	1d3b      	adds	r3, r7, #4
90000588:	4931      	ldr	r1, [pc, #196]	; (90000650 <MainTask+0x150>)
9000058a:	4618      	mov	r0, r3
9000058c:	f004 f8c6 	bl	9000471c <_ZN15LCD_DISCO_F750812SetTextColorEm>
           lcd.DrawRect(10, 20, 50, 50);
90000590:	1d38      	adds	r0, r7, #4
90000592:	2332      	movs	r3, #50	; 0x32
90000594:	9300      	str	r3, [sp, #0]
90000596:	2332      	movs	r3, #50	; 0x32
90000598:	2214      	movs	r2, #20
9000059a:	210a      	movs	r1, #10
9000059c:	f004 f8f5 	bl	9000478a <_ZN15LCD_DISCO_F75088DrawRectEtttt>
           HAL_Delay(1000);
900005a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
900005a4:	f001 fc18 	bl	90001dd8 <HAL_Delay>
           lcd.SetTextColor(LCD_COLOR_BROWN);
900005a8:	1d3b      	adds	r3, r7, #4
900005aa:	492b      	ldr	r1, [pc, #172]	; (90000658 <MainTask+0x158>)
900005ac:	4618      	mov	r0, r3
900005ae:	f004 f8b5 	bl	9000471c <_ZN15LCD_DISCO_F750812SetTextColorEm>
           lcd.DrawCircle(80, 80, 50);
900005b2:	1d38      	adds	r0, r7, #4
900005b4:	2332      	movs	r3, #50	; 0x32
900005b6:	2250      	movs	r2, #80	; 0x50
900005b8:	2150      	movs	r1, #80	; 0x50
900005ba:	f004 f8fd 	bl	900047b8 <_ZN15LCD_DISCO_F750810DrawCircleEttt>
           HAL_Delay(1000);
900005be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
900005c2:	f001 fc09 	bl	90001dd8 <HAL_Delay>
           lcd.SetTextColor(LCD_COLOR_YELLOW);
900005c6:	1d3b      	adds	r3, r7, #4
900005c8:	f06f 01ff 	mvn.w	r1, #255	; 0xff
900005cc:	4618      	mov	r0, r3
900005ce:	f004 f8a5 	bl	9000471c <_ZN15LCD_DISCO_F750812SetTextColorEm>
           lcd.DrawEllipse(150, 150, 50, 100);
900005d2:	1d38      	adds	r0, r7, #4
900005d4:	2364      	movs	r3, #100	; 0x64
900005d6:	9300      	str	r3, [sp, #0]
900005d8:	2332      	movs	r3, #50	; 0x32
900005da:	2296      	movs	r2, #150	; 0x96
900005dc:	2196      	movs	r1, #150	; 0x96
900005de:	f004 f902 	bl	900047e6 <_ZN15LCD_DISCO_F750811DrawEllipseEiiii>
           HAL_Delay(1000);
900005e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
900005e6:	f001 fbf7 	bl	90001dd8 <HAL_Delay>
           lcd.SetTextColor(LCD_COLOR_RED);
900005ea:	1d3b      	adds	r3, r7, #4
900005ec:	491b      	ldr	r1, [pc, #108]	; (9000065c <MainTask+0x15c>)
900005ee:	4618      	mov	r0, r3
900005f0:	f004 f894 	bl	9000471c <_ZN15LCD_DISCO_F750812SetTextColorEm>
           lcd.FillCircle(200, 200, 40);
900005f4:	1d38      	adds	r0, r7, #4
900005f6:	2328      	movs	r3, #40	; 0x28
900005f8:	22c8      	movs	r2, #200	; 0xc8
900005fa:	21c8      	movs	r1, #200	; 0xc8
900005fc:	f004 f904 	bl	90004808 <_ZN15LCD_DISCO_F750810FillCircleEttt>
           HAL_Delay(1000);
90000600:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
90000604:	f001 fbe8 	bl	90001dd8 <HAL_Delay>
           lcd.SetBackColor(LCD_COLOR_ORANGE);
90000608:	1d3b      	adds	r3, r7, #4
9000060a:	4915      	ldr	r1, [pc, #84]	; (90000660 <MainTask+0x160>)
9000060c:	4618      	mov	r0, r3
9000060e:	f004 f891 	bl	90004734 <_ZN15LCD_DISCO_F750812SetBackColorEm>
           lcd.SetTextColor(LCD_COLOR_CYAN);
90000612:	1d3b      	adds	r3, r7, #4
90000614:	f46f 017f 	mvn.w	r1, #16711680	; 0xff0000
90000618:	4618      	mov	r0, r3
9000061a:	f004 f87f 	bl	9000471c <_ZN15LCD_DISCO_F750812SetTextColorEm>
           lcd.DisplayStringAt(0, LINE(5), (uint8_t *)"HAVE FUN !!!", CENTER_MODE);
9000061e:	f000 faa5 	bl	90000b6c <BSP_LCD_GetFont>
90000622:	4603      	mov	r3, r0
90000624:	88db      	ldrh	r3, [r3, #6]
90000626:	461a      	mov	r2, r3
90000628:	0092      	lsls	r2, r2, #2
9000062a:	4413      	add	r3, r2
9000062c:	b29a      	uxth	r2, r3
9000062e:	1d38      	adds	r0, r7, #4
90000630:	2301      	movs	r3, #1
90000632:	9300      	str	r3, [sp, #0]
90000634:	4b0b      	ldr	r3, [pc, #44]	; (90000664 <MainTask+0x164>)
90000636:	2100      	movs	r1, #0
90000638:	f004 f894 	bl	90004764 <_ZN15LCD_DISCO_F750815DisplayStringAtEttPh20Text_AlignModeTypdef>
           HAL_Delay(1000);
9000063c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
90000640:	f001 fbca 	bl	90001dd8 <HAL_Delay>
   HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
90000644:	e76e      	b.n	90000524 <MainTask+0x24>
90000646:	bf00      	nop
90000648:	900048a8 	.word	0x900048a8
9000064c:	40022000 	.word	0x40022000
90000650:	ff0000ff 	.word	0xff0000ff
90000654:	900048b8 	.word	0x900048b8
90000658:	ffa52a2a 	.word	0xffa52a2a
9000065c:	ffff0000 	.word	0xffff0000
90000660:	ffffa500 	.word	0xffffa500
90000664:	900048d0 	.word	0x900048d0

90000668 <main>:

void SystemClock_Config(void);
static void MX_GPIO_Init(void);

int main()
{
90000668:	b580      	push	{r7, lr}
9000066a:	af00      	add	r7, sp, #0
	 HAL_Init();
9000066c:	f001 fb4e 	bl	90001d0c <HAL_Init>
	  /* USER CODE BEGIN Init */

	  /* USER CODE END Init */

	  /* Configure the system clock */
	  SystemClock_Config();
90000670:	f000 f806 	bl	90000680 <SystemClock_Config>



	MainTask();
90000674:	f7ff ff44 	bl	90000500 <MainTask>
90000678:	2300      	movs	r3, #0
}
9000067a:	4618      	mov	r0, r3
9000067c:	bd80      	pop	{r7, pc}
	...

90000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
90000680:	b580      	push	{r7, lr}
90000682:	b094      	sub	sp, #80	; 0x50
90000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
90000686:	f107 0320 	add.w	r3, r7, #32
9000068a:	2230      	movs	r2, #48	; 0x30
9000068c:	2100      	movs	r1, #0
9000068e:	4618      	mov	r0, r3
90000690:	f004 f8f6 	bl	90004880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
90000694:	f107 030c 	add.w	r3, r7, #12
90000698:	2200      	movs	r2, #0
9000069a:	601a      	str	r2, [r3, #0]
9000069c:	605a      	str	r2, [r3, #4]
9000069e:	609a      	str	r2, [r3, #8]
900006a0:	60da      	str	r2, [r3, #12]
900006a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
900006a4:	4b2b      	ldr	r3, [pc, #172]	; (90000754 <SystemClock_Config+0xd4>)
900006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900006a8:	4a2a      	ldr	r2, [pc, #168]	; (90000754 <SystemClock_Config+0xd4>)
900006aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
900006ae:	6413      	str	r3, [r2, #64]	; 0x40
900006b0:	4b28      	ldr	r3, [pc, #160]	; (90000754 <SystemClock_Config+0xd4>)
900006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
900006b8:	60bb      	str	r3, [r7, #8]
900006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
900006bc:	4b26      	ldr	r3, [pc, #152]	; (90000758 <SystemClock_Config+0xd8>)
900006be:	681b      	ldr	r3, [r3, #0]
900006c0:	4a25      	ldr	r2, [pc, #148]	; (90000758 <SystemClock_Config+0xd8>)
900006c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
900006c6:	6013      	str	r3, [r2, #0]
900006c8:	4b23      	ldr	r3, [pc, #140]	; (90000758 <SystemClock_Config+0xd8>)
900006ca:	681b      	ldr	r3, [r3, #0]
900006cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
900006d0:	607b      	str	r3, [r7, #4]
900006d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
900006d4:	2301      	movs	r3, #1
900006d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
900006d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
900006dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
900006de:	2302      	movs	r3, #2
900006e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
900006e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
900006e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
900006e8:	2319      	movs	r3, #25
900006ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
900006ec:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
900006f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
900006f2:	2302      	movs	r3, #2
900006f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
900006f6:	2302      	movs	r3, #2
900006f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
900006fa:	f107 0320 	add.w	r3, r7, #32
900006fe:	4618      	mov	r0, r3
90000700:	f002 fde4 	bl	900032cc <HAL_RCC_OscConfig>
90000704:	4603      	mov	r3, r0
90000706:	2b00      	cmp	r3, #0
90000708:	d001      	beq.n	9000070e <SystemClock_Config+0x8e>
  {
    Error_Handler();
9000070a:	f000 f827 	bl	9000075c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
9000070e:	f002 fd8d 	bl	9000322c <HAL_PWREx_EnableOverDrive>
90000712:	4603      	mov	r3, r0
90000714:	2b00      	cmp	r3, #0
90000716:	d001      	beq.n	9000071c <SystemClock_Config+0x9c>
  {
    Error_Handler();
90000718:	f000 f820 	bl	9000075c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
9000071c:	230f      	movs	r3, #15
9000071e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90000720:	2302      	movs	r3, #2
90000722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
90000724:	2300      	movs	r3, #0
90000726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
90000728:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
9000072c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
9000072e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90000732:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
90000734:	f107 030c 	add.w	r3, r7, #12
90000738:	2107      	movs	r1, #7
9000073a:	4618      	mov	r0, r3
9000073c:	f003 f86a 	bl	90003814 <HAL_RCC_ClockConfig>
90000740:	4603      	mov	r3, r0
90000742:	2b00      	cmp	r3, #0
90000744:	d001      	beq.n	9000074a <SystemClock_Config+0xca>
  {
    Error_Handler();
90000746:	f000 f809 	bl	9000075c <Error_Handler>
  }
}
9000074a:	bf00      	nop
9000074c:	3750      	adds	r7, #80	; 0x50
9000074e:	46bd      	mov	sp, r7
90000750:	bd80      	pop	{r7, pc}
90000752:	bf00      	nop
90000754:	40023800 	.word	0x40023800
90000758:	40007000 	.word	0x40007000

9000075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
9000075c:	b480      	push	{r7}
9000075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
90000760:	b672      	cpsid	i
}
90000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
90000764:	e7fe      	b.n	90000764 <Error_Handler+0x8>
	...

90000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
90000768:	b480      	push	{r7}
9000076a:	b083      	sub	sp, #12
9000076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
9000076e:	4b0f      	ldr	r3, [pc, #60]	; (900007ac <HAL_MspInit+0x44>)
90000770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90000772:	4a0e      	ldr	r2, [pc, #56]	; (900007ac <HAL_MspInit+0x44>)
90000774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90000778:	6413      	str	r3, [r2, #64]	; 0x40
9000077a:	4b0c      	ldr	r3, [pc, #48]	; (900007ac <HAL_MspInit+0x44>)
9000077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000077e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90000782:	607b      	str	r3, [r7, #4]
90000784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
90000786:	4b09      	ldr	r3, [pc, #36]	; (900007ac <HAL_MspInit+0x44>)
90000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000078a:	4a08      	ldr	r2, [pc, #32]	; (900007ac <HAL_MspInit+0x44>)
9000078c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
90000790:	6453      	str	r3, [r2, #68]	; 0x44
90000792:	4b06      	ldr	r3, [pc, #24]	; (900007ac <HAL_MspInit+0x44>)
90000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90000796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
9000079a:	603b      	str	r3, [r7, #0]
9000079c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
9000079e:	bf00      	nop
900007a0:	370c      	adds	r7, #12
900007a2:	46bd      	mov	sp, r7
900007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
900007a8:	4770      	bx	lr
900007aa:	bf00      	nop
900007ac:	40023800 	.word	0x40023800

900007b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
900007b0:	b480      	push	{r7}
900007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
900007b4:	e7fe      	b.n	900007b4 <NMI_Handler+0x4>

900007b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
900007b6:	b480      	push	{r7}
900007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
900007ba:	e7fe      	b.n	900007ba <HardFault_Handler+0x4>

900007bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
900007bc:	b480      	push	{r7}
900007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
900007c0:	e7fe      	b.n	900007c0 <MemManage_Handler+0x4>

900007c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
900007c2:	b480      	push	{r7}
900007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
900007c6:	e7fe      	b.n	900007c6 <BusFault_Handler+0x4>

900007c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
900007c8:	b480      	push	{r7}
900007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
900007cc:	e7fe      	b.n	900007cc <UsageFault_Handler+0x4>

900007ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
900007ce:	b480      	push	{r7}
900007d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
900007d2:	bf00      	nop
900007d4:	46bd      	mov	sp, r7
900007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
900007da:	4770      	bx	lr

900007dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
900007dc:	b480      	push	{r7}
900007de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
900007e0:	bf00      	nop
900007e2:	46bd      	mov	sp, r7
900007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
900007e8:	4770      	bx	lr

900007ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
900007ea:	b480      	push	{r7}
900007ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
900007ee:	bf00      	nop
900007f0:	46bd      	mov	sp, r7
900007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
900007f6:	4770      	bx	lr

900007f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
900007f8:	b580      	push	{r7, lr}
900007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
900007fc:	f001 facc 	bl	90001d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
90000800:	bf00      	nop
90000802:	bd80      	pop	{r7, pc}

90000804 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
90000804:	b480      	push	{r7}
90000806:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
90000808:	4b15      	ldr	r3, [pc, #84]	; (90000860 <SystemInit+0x5c>)
9000080a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
9000080e:	4a14      	ldr	r2, [pc, #80]	; (90000860 <SystemInit+0x5c>)
90000810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
90000814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
90000818:	4b12      	ldr	r3, [pc, #72]	; (90000864 <SystemInit+0x60>)
9000081a:	681b      	ldr	r3, [r3, #0]
9000081c:	4a11      	ldr	r2, [pc, #68]	; (90000864 <SystemInit+0x60>)
9000081e:	f043 0301 	orr.w	r3, r3, #1
90000822:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90000824:	4b0f      	ldr	r3, [pc, #60]	; (90000864 <SystemInit+0x60>)
90000826:	2200      	movs	r2, #0
90000828:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
9000082a:	4b0e      	ldr	r3, [pc, #56]	; (90000864 <SystemInit+0x60>)
9000082c:	681a      	ldr	r2, [r3, #0]
9000082e:	490d      	ldr	r1, [pc, #52]	; (90000864 <SystemInit+0x60>)
90000830:	4b0d      	ldr	r3, [pc, #52]	; (90000868 <SystemInit+0x64>)
90000832:	4013      	ands	r3, r2
90000834:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
90000836:	4b0b      	ldr	r3, [pc, #44]	; (90000864 <SystemInit+0x60>)
90000838:	4a0c      	ldr	r2, [pc, #48]	; (9000086c <SystemInit+0x68>)
9000083a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
9000083c:	4b09      	ldr	r3, [pc, #36]	; (90000864 <SystemInit+0x60>)
9000083e:	681b      	ldr	r3, [r3, #0]
90000840:	4a08      	ldr	r2, [pc, #32]	; (90000864 <SystemInit+0x60>)
90000842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90000846:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
90000848:	4b06      	ldr	r3, [pc, #24]	; (90000864 <SystemInit+0x60>)
9000084a:	2200      	movs	r2, #0
9000084c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = APPLICATION_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation to APPLICATION_ADDRESS in preprocessor defines */
9000084e:	4b04      	ldr	r3, [pc, #16]	; (90000860 <SystemInit+0x5c>)
90000850:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
90000854:	609a      	str	r2, [r3, #8]
#endif
}
90000856:	bf00      	nop
90000858:	46bd      	mov	sp, r7
9000085a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000085e:	4770      	bx	lr
90000860:	e000ed00 	.word	0xe000ed00
90000864:	40023800 	.word	0x40023800
90000868:	fef6ffff 	.word	0xfef6ffff
9000086c:	24003010 	.word	0x24003010

90000870 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
90000870:	f8df d034 	ldr.w	sp, [pc, #52]	; 900008a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
90000874:	480d      	ldr	r0, [pc, #52]	; (900008ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
90000876:	490e      	ldr	r1, [pc, #56]	; (900008b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
90000878:	4a0e      	ldr	r2, [pc, #56]	; (900008b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
9000087a:	2300      	movs	r3, #0
  b LoopCopyDataInit
9000087c:	e002      	b.n	90000884 <LoopCopyDataInit>

9000087e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
9000087e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
90000880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
90000882:	3304      	adds	r3, #4

90000884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
90000884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
90000886:	428c      	cmp	r4, r1
  bcc CopyDataInit
90000888:	d3f9      	bcc.n	9000087e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
9000088a:	4a0b      	ldr	r2, [pc, #44]	; (900008b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
9000088c:	4c0b      	ldr	r4, [pc, #44]	; (900008bc <LoopFillZerobss+0x26>)
  movs r3, #0
9000088e:	2300      	movs	r3, #0
  b LoopFillZerobss
90000890:	e001      	b.n	90000896 <LoopFillZerobss>

90000892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
90000892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
90000894:	3204      	adds	r2, #4

90000896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
90000896:	42a2      	cmp	r2, r4
  bcc FillZerobss
90000898:	d3fb      	bcc.n	90000892 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
9000089a:	f7ff ffb3 	bl	90000804 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
9000089e:	f003 ffcb 	bl	90004838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
900008a2:	f7ff fee1 	bl	90000668 <main>
  bx  lr    
900008a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
900008a8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
900008ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
900008b0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
900008b4:	900063c0 	.word	0x900063c0
  ldr r2, =_sbss
900008b8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
900008bc:	20000280 	.word	0x20000280

900008c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
900008c0:	e7fe      	b.n	900008c0 <ADC_IRQHandler>
	...

900008c4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
900008c4:	b580      	push	{r7, lr}
900008c6:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
900008c8:	4b31      	ldr	r3, [pc, #196]	; (90000990 <BSP_LCD_Init+0xcc>)
900008ca:	2228      	movs	r2, #40	; 0x28
900008cc:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
900008ce:	4b30      	ldr	r3, [pc, #192]	; (90000990 <BSP_LCD_Init+0xcc>)
900008d0:	2209      	movs	r2, #9
900008d2:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
900008d4:	4b2e      	ldr	r3, [pc, #184]	; (90000990 <BSP_LCD_Init+0xcc>)
900008d6:	2235      	movs	r2, #53	; 0x35
900008d8:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
900008da:	4b2d      	ldr	r3, [pc, #180]	; (90000990 <BSP_LCD_Init+0xcc>)
900008dc:	220b      	movs	r2, #11
900008de:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
900008e0:	4b2b      	ldr	r3, [pc, #172]	; (90000990 <BSP_LCD_Init+0xcc>)
900008e2:	f240 121b 	movw	r2, #283	; 0x11b
900008e6:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
900008e8:	4b29      	ldr	r3, [pc, #164]	; (90000990 <BSP_LCD_Init+0xcc>)
900008ea:	f240 2215 	movw	r2, #533	; 0x215
900008ee:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
900008f0:	4b27      	ldr	r3, [pc, #156]	; (90000990 <BSP_LCD_Init+0xcc>)
900008f2:	f240 121d 	movw	r2, #285	; 0x11d
900008f6:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
900008f8:	4b25      	ldr	r3, [pc, #148]	; (90000990 <BSP_LCD_Init+0xcc>)
900008fa:	f240 2235 	movw	r2, #565	; 0x235
900008fe:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
90000900:	2100      	movs	r1, #0
90000902:	4823      	ldr	r0, [pc, #140]	; (90000990 <BSP_LCD_Init+0xcc>)
90000904:	f000 ff2c 	bl	90001760 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
90000908:	4b21      	ldr	r3, [pc, #132]	; (90000990 <BSP_LCD_Init+0xcc>)
9000090a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
9000090e:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
90000910:	4b1f      	ldr	r3, [pc, #124]	; (90000990 <BSP_LCD_Init+0xcc>)
90000912:	f44f 7288 	mov.w	r2, #272	; 0x110
90000916:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
90000918:	4b1d      	ldr	r3, [pc, #116]	; (90000990 <BSP_LCD_Init+0xcc>)
9000091a:	2200      	movs	r2, #0
9000091c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
90000920:	4b1b      	ldr	r3, [pc, #108]	; (90000990 <BSP_LCD_Init+0xcc>)
90000922:	2200      	movs	r2, #0
90000924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
90000928:	4b19      	ldr	r3, [pc, #100]	; (90000990 <BSP_LCD_Init+0xcc>)
9000092a:	2200      	movs	r2, #0
9000092c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
90000930:	4b17      	ldr	r3, [pc, #92]	; (90000990 <BSP_LCD_Init+0xcc>)
90000932:	2200      	movs	r2, #0
90000934:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
90000936:	4b16      	ldr	r3, [pc, #88]	; (90000990 <BSP_LCD_Init+0xcc>)
90000938:	2200      	movs	r2, #0
9000093a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
9000093c:	4b14      	ldr	r3, [pc, #80]	; (90000990 <BSP_LCD_Init+0xcc>)
9000093e:	2200      	movs	r2, #0
90000940:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90000942:	4b13      	ldr	r3, [pc, #76]	; (90000990 <BSP_LCD_Init+0xcc>)
90000944:	2200      	movs	r2, #0
90000946:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
90000948:	4b11      	ldr	r3, [pc, #68]	; (90000990 <BSP_LCD_Init+0xcc>)
9000094a:	4a12      	ldr	r2, [pc, #72]	; (90000994 <BSP_LCD_Init+0xd0>)
9000094c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
9000094e:	4810      	ldr	r0, [pc, #64]	; (90000990 <BSP_LCD_Init+0xcc>)
90000950:	f002 fac4 	bl	90002edc <HAL_LTDC_GetState>
90000954:	4603      	mov	r3, r0
90000956:	2b00      	cmp	r3, #0
90000958:	d103      	bne.n	90000962 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
9000095a:	2100      	movs	r1, #0
9000095c:	480c      	ldr	r0, [pc, #48]	; (90000990 <BSP_LCD_Init+0xcc>)
9000095e:	f000 fe25 	bl	900015ac <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
90000962:	480b      	ldr	r0, [pc, #44]	; (90000990 <BSP_LCD_Init+0xcc>)
90000964:	f002 f9a2 	bl	90002cac <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
90000968:	2201      	movs	r2, #1
9000096a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
9000096e:	480a      	ldr	r0, [pc, #40]	; (90000998 <BSP_LCD_Init+0xd4>)
90000970:	f002 f968 	bl	90002c44 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
90000974:	2201      	movs	r2, #1
90000976:	2108      	movs	r1, #8
90000978:	4808      	ldr	r0, [pc, #32]	; (9000099c <BSP_LCD_Init+0xd8>)
9000097a:	f002 f963 	bl	90002c44 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
9000097e:	f001 f80f 	bl	900019a0 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
90000982:	4807      	ldr	r0, [pc, #28]	; (900009a0 <BSP_LCD_Init+0xdc>)
90000984:	f000 f8d8 	bl	90000b38 <BSP_LCD_SetFont>
  
  return LCD_OK;
90000988:	2300      	movs	r3, #0
}
9000098a:	4618      	mov	r0, r3
9000098c:	bd80      	pop	{r7, pc}
9000098e:	bf00      	nop
90000990:	200001a0 	.word	0x200001a0
90000994:	40016800 	.word	0x40016800
90000998:	40022000 	.word	0x40022000
9000099c:	40022800 	.word	0x40022800
900009a0:	20000004 	.word	0x20000004

900009a4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
900009a4:	b480      	push	{r7}
900009a6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
900009a8:	4b06      	ldr	r3, [pc, #24]	; (900009c4 <BSP_LCD_GetXSize+0x20>)
900009aa:	681b      	ldr	r3, [r3, #0]
900009ac:	4a06      	ldr	r2, [pc, #24]	; (900009c8 <BSP_LCD_GetXSize+0x24>)
900009ae:	2134      	movs	r1, #52	; 0x34
900009b0:	fb01 f303 	mul.w	r3, r1, r3
900009b4:	4413      	add	r3, r2
900009b6:	3360      	adds	r3, #96	; 0x60
900009b8:	681b      	ldr	r3, [r3, #0]
}
900009ba:	4618      	mov	r0, r3
900009bc:	46bd      	mov	sp, r7
900009be:	f85d 7b04 	ldr.w	r7, [sp], #4
900009c2:	4770      	bx	lr
900009c4:	20000074 	.word	0x20000074
900009c8:	200001a0 	.word	0x200001a0

900009cc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
900009cc:	b480      	push	{r7}
900009ce:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
900009d0:	4b06      	ldr	r3, [pc, #24]	; (900009ec <BSP_LCD_GetYSize+0x20>)
900009d2:	681b      	ldr	r3, [r3, #0]
900009d4:	4a06      	ldr	r2, [pc, #24]	; (900009f0 <BSP_LCD_GetYSize+0x24>)
900009d6:	2134      	movs	r1, #52	; 0x34
900009d8:	fb01 f303 	mul.w	r3, r1, r3
900009dc:	4413      	add	r3, r2
900009de:	3364      	adds	r3, #100	; 0x64
900009e0:	681b      	ldr	r3, [r3, #0]
}
900009e2:	4618      	mov	r0, r3
900009e4:	46bd      	mov	sp, r7
900009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
900009ea:	4770      	bx	lr
900009ec:	20000074 	.word	0x20000074
900009f0:	200001a0 	.word	0x200001a0

900009f4 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
900009f4:	b580      	push	{r7, lr}
900009f6:	b090      	sub	sp, #64	; 0x40
900009f8:	af00      	add	r7, sp, #0
900009fa:	4603      	mov	r3, r0
900009fc:	6039      	str	r1, [r7, #0]
900009fe:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
90000a00:	2300      	movs	r3, #0
90000a02:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
90000a04:	f7ff ffce 	bl	900009a4 <BSP_LCD_GetXSize>
90000a08:	4603      	mov	r3, r0
90000a0a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
90000a0c:	2300      	movs	r3, #0
90000a0e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
90000a10:	f7ff ffdc 	bl	900009cc <BSP_LCD_GetYSize>
90000a14:	4603      	mov	r3, r0
90000a16:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
90000a18:	2300      	movs	r3, #0
90000a1a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
90000a1c:	683b      	ldr	r3, [r7, #0]
90000a1e:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
90000a20:	23ff      	movs	r3, #255	; 0xff
90000a22:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
90000a24:	2300      	movs	r3, #0
90000a26:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
90000a28:	2300      	movs	r3, #0
90000a2a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
90000a2e:	2300      	movs	r3, #0
90000a30:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
90000a34:	2300      	movs	r3, #0
90000a36:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
90000a3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
90000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
90000a40:	2307      	movs	r3, #7
90000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
90000a44:	f7ff ffae 	bl	900009a4 <BSP_LCD_GetXSize>
90000a48:	4603      	mov	r3, r0
90000a4a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
90000a4c:	f7ff ffbe 	bl	900009cc <BSP_LCD_GetYSize>
90000a50:	4603      	mov	r3, r0
90000a52:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
90000a54:	88fa      	ldrh	r2, [r7, #6]
90000a56:	f107 030c 	add.w	r3, r7, #12
90000a5a:	4619      	mov	r1, r3
90000a5c:	4812      	ldr	r0, [pc, #72]	; (90000aa8 <BSP_LCD_LayerDefaultInit+0xb4>)
90000a5e:	f002 f9ff 	bl	90002e60 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
90000a62:	88fa      	ldrh	r2, [r7, #6]
90000a64:	4911      	ldr	r1, [pc, #68]	; (90000aac <BSP_LCD_LayerDefaultInit+0xb8>)
90000a66:	4613      	mov	r3, r2
90000a68:	005b      	lsls	r3, r3, #1
90000a6a:	4413      	add	r3, r2
90000a6c:	009b      	lsls	r3, r3, #2
90000a6e:	440b      	add	r3, r1
90000a70:	3304      	adds	r3, #4
90000a72:	f04f 32ff 	mov.w	r2, #4294967295
90000a76:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
90000a78:	88fa      	ldrh	r2, [r7, #6]
90000a7a:	490c      	ldr	r1, [pc, #48]	; (90000aac <BSP_LCD_LayerDefaultInit+0xb8>)
90000a7c:	4613      	mov	r3, r2
90000a7e:	005b      	lsls	r3, r3, #1
90000a80:	4413      	add	r3, r2
90000a82:	009b      	lsls	r3, r3, #2
90000a84:	440b      	add	r3, r1
90000a86:	3308      	adds	r3, #8
90000a88:	4a09      	ldr	r2, [pc, #36]	; (90000ab0 <BSP_LCD_LayerDefaultInit+0xbc>)
90000a8a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
90000a8c:	88fa      	ldrh	r2, [r7, #6]
90000a8e:	4907      	ldr	r1, [pc, #28]	; (90000aac <BSP_LCD_LayerDefaultInit+0xb8>)
90000a90:	4613      	mov	r3, r2
90000a92:	005b      	lsls	r3, r3, #1
90000a94:	4413      	add	r3, r2
90000a96:	009b      	lsls	r3, r3, #2
90000a98:	440b      	add	r3, r1
90000a9a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
90000a9e:	601a      	str	r2, [r3, #0]
}
90000aa0:	bf00      	nop
90000aa2:	3740      	adds	r7, #64	; 0x40
90000aa4:	46bd      	mov	sp, r7
90000aa6:	bd80      	pop	{r7, pc}
90000aa8:	200001a0 	.word	0x200001a0
90000aac:	20000078 	.word	0x20000078
90000ab0:	20000004 	.word	0x20000004

90000ab4 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
90000ab4:	b480      	push	{r7}
90000ab6:	b083      	sub	sp, #12
90000ab8:	af00      	add	r7, sp, #0
90000aba:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
90000abc:	4a04      	ldr	r2, [pc, #16]	; (90000ad0 <BSP_LCD_SelectLayer+0x1c>)
90000abe:	687b      	ldr	r3, [r7, #4]
90000ac0:	6013      	str	r3, [r2, #0]
} 
90000ac2:	bf00      	nop
90000ac4:	370c      	adds	r7, #12
90000ac6:	46bd      	mov	sp, r7
90000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
90000acc:	4770      	bx	lr
90000ace:	bf00      	nop
90000ad0:	20000074 	.word	0x20000074

90000ad4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
90000ad4:	b480      	push	{r7}
90000ad6:	b083      	sub	sp, #12
90000ad8:	af00      	add	r7, sp, #0
90000ada:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
90000adc:	4b07      	ldr	r3, [pc, #28]	; (90000afc <BSP_LCD_SetTextColor+0x28>)
90000ade:	681a      	ldr	r2, [r3, #0]
90000ae0:	4907      	ldr	r1, [pc, #28]	; (90000b00 <BSP_LCD_SetTextColor+0x2c>)
90000ae2:	4613      	mov	r3, r2
90000ae4:	005b      	lsls	r3, r3, #1
90000ae6:	4413      	add	r3, r2
90000ae8:	009b      	lsls	r3, r3, #2
90000aea:	440b      	add	r3, r1
90000aec:	687a      	ldr	r2, [r7, #4]
90000aee:	601a      	str	r2, [r3, #0]
}
90000af0:	bf00      	nop
90000af2:	370c      	adds	r7, #12
90000af4:	46bd      	mov	sp, r7
90000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
90000afa:	4770      	bx	lr
90000afc:	20000074 	.word	0x20000074
90000b00:	20000078 	.word	0x20000078

90000b04 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
90000b04:	b480      	push	{r7}
90000b06:	b083      	sub	sp, #12
90000b08:	af00      	add	r7, sp, #0
90000b0a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
90000b0c:	4b08      	ldr	r3, [pc, #32]	; (90000b30 <BSP_LCD_SetBackColor+0x2c>)
90000b0e:	681a      	ldr	r2, [r3, #0]
90000b10:	4908      	ldr	r1, [pc, #32]	; (90000b34 <BSP_LCD_SetBackColor+0x30>)
90000b12:	4613      	mov	r3, r2
90000b14:	005b      	lsls	r3, r3, #1
90000b16:	4413      	add	r3, r2
90000b18:	009b      	lsls	r3, r3, #2
90000b1a:	440b      	add	r3, r1
90000b1c:	3304      	adds	r3, #4
90000b1e:	687a      	ldr	r2, [r7, #4]
90000b20:	601a      	str	r2, [r3, #0]
}
90000b22:	bf00      	nop
90000b24:	370c      	adds	r7, #12
90000b26:	46bd      	mov	sp, r7
90000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
90000b2c:	4770      	bx	lr
90000b2e:	bf00      	nop
90000b30:	20000074 	.word	0x20000074
90000b34:	20000078 	.word	0x20000078

90000b38 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
90000b38:	b480      	push	{r7}
90000b3a:	b083      	sub	sp, #12
90000b3c:	af00      	add	r7, sp, #0
90000b3e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
90000b40:	4b08      	ldr	r3, [pc, #32]	; (90000b64 <BSP_LCD_SetFont+0x2c>)
90000b42:	681a      	ldr	r2, [r3, #0]
90000b44:	4908      	ldr	r1, [pc, #32]	; (90000b68 <BSP_LCD_SetFont+0x30>)
90000b46:	4613      	mov	r3, r2
90000b48:	005b      	lsls	r3, r3, #1
90000b4a:	4413      	add	r3, r2
90000b4c:	009b      	lsls	r3, r3, #2
90000b4e:	440b      	add	r3, r1
90000b50:	3308      	adds	r3, #8
90000b52:	687a      	ldr	r2, [r7, #4]
90000b54:	601a      	str	r2, [r3, #0]
}
90000b56:	bf00      	nop
90000b58:	370c      	adds	r7, #12
90000b5a:	46bd      	mov	sp, r7
90000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
90000b60:	4770      	bx	lr
90000b62:	bf00      	nop
90000b64:	20000074 	.word	0x20000074
90000b68:	20000078 	.word	0x20000078

90000b6c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
90000b6c:	b480      	push	{r7}
90000b6e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
90000b70:	4b07      	ldr	r3, [pc, #28]	; (90000b90 <BSP_LCD_GetFont+0x24>)
90000b72:	681a      	ldr	r2, [r3, #0]
90000b74:	4907      	ldr	r1, [pc, #28]	; (90000b94 <BSP_LCD_GetFont+0x28>)
90000b76:	4613      	mov	r3, r2
90000b78:	005b      	lsls	r3, r3, #1
90000b7a:	4413      	add	r3, r2
90000b7c:	009b      	lsls	r3, r3, #2
90000b7e:	440b      	add	r3, r1
90000b80:	3308      	adds	r3, #8
90000b82:	681b      	ldr	r3, [r3, #0]
}
90000b84:	4618      	mov	r0, r3
90000b86:	46bd      	mov	sp, r7
90000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
90000b8c:	4770      	bx	lr
90000b8e:	bf00      	nop
90000b90:	20000074 	.word	0x20000074
90000b94:	20000078 	.word	0x20000078

90000b98 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
90000b98:	b5f0      	push	{r4, r5, r6, r7, lr}
90000b9a:	b085      	sub	sp, #20
90000b9c:	af02      	add	r7, sp, #8
90000b9e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
90000ba0:	4b0f      	ldr	r3, [pc, #60]	; (90000be0 <BSP_LCD_Clear+0x48>)
90000ba2:	681c      	ldr	r4, [r3, #0]
90000ba4:	4b0e      	ldr	r3, [pc, #56]	; (90000be0 <BSP_LCD_Clear+0x48>)
90000ba6:	681b      	ldr	r3, [r3, #0]
90000ba8:	4a0e      	ldr	r2, [pc, #56]	; (90000be4 <BSP_LCD_Clear+0x4c>)
90000baa:	2134      	movs	r1, #52	; 0x34
90000bac:	fb01 f303 	mul.w	r3, r1, r3
90000bb0:	4413      	add	r3, r2
90000bb2:	335c      	adds	r3, #92	; 0x5c
90000bb4:	681b      	ldr	r3, [r3, #0]
90000bb6:	461e      	mov	r6, r3
90000bb8:	f7ff fef4 	bl	900009a4 <BSP_LCD_GetXSize>
90000bbc:	4605      	mov	r5, r0
90000bbe:	f7ff ff05 	bl	900009cc <BSP_LCD_GetYSize>
90000bc2:	4602      	mov	r2, r0
90000bc4:	687b      	ldr	r3, [r7, #4]
90000bc6:	9301      	str	r3, [sp, #4]
90000bc8:	2300      	movs	r3, #0
90000bca:	9300      	str	r3, [sp, #0]
90000bcc:	4613      	mov	r3, r2
90000bce:	462a      	mov	r2, r5
90000bd0:	4631      	mov	r1, r6
90000bd2:	4620      	mov	r0, r4
90000bd4:	f000 fe98 	bl	90001908 <LL_FillBuffer>
}
90000bd8:	bf00      	nop
90000bda:	370c      	adds	r7, #12
90000bdc:	46bd      	mov	sp, r7
90000bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
90000be0:	20000074 	.word	0x20000074
90000be4:	200001a0 	.word	0x200001a0

90000be8 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
90000be8:	b590      	push	{r4, r7, lr}
90000bea:	b083      	sub	sp, #12
90000bec:	af00      	add	r7, sp, #0
90000bee:	4603      	mov	r3, r0
90000bf0:	80fb      	strh	r3, [r7, #6]
90000bf2:	460b      	mov	r3, r1
90000bf4:	80bb      	strh	r3, [r7, #4]
90000bf6:	4613      	mov	r3, r2
90000bf8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
90000bfa:	4b1b      	ldr	r3, [pc, #108]	; (90000c68 <BSP_LCD_DisplayChar+0x80>)
90000bfc:	681a      	ldr	r2, [r3, #0]
90000bfe:	491b      	ldr	r1, [pc, #108]	; (90000c6c <BSP_LCD_DisplayChar+0x84>)
90000c00:	4613      	mov	r3, r2
90000c02:	005b      	lsls	r3, r3, #1
90000c04:	4413      	add	r3, r2
90000c06:	009b      	lsls	r3, r3, #2
90000c08:	440b      	add	r3, r1
90000c0a:	3308      	adds	r3, #8
90000c0c:	681b      	ldr	r3, [r3, #0]
90000c0e:	6819      	ldr	r1, [r3, #0]
90000c10:	78fb      	ldrb	r3, [r7, #3]
90000c12:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
90000c16:	4b14      	ldr	r3, [pc, #80]	; (90000c68 <BSP_LCD_DisplayChar+0x80>)
90000c18:	681a      	ldr	r2, [r3, #0]
90000c1a:	4c14      	ldr	r4, [pc, #80]	; (90000c6c <BSP_LCD_DisplayChar+0x84>)
90000c1c:	4613      	mov	r3, r2
90000c1e:	005b      	lsls	r3, r3, #1
90000c20:	4413      	add	r3, r2
90000c22:	009b      	lsls	r3, r3, #2
90000c24:	4423      	add	r3, r4
90000c26:	3308      	adds	r3, #8
90000c28:	681b      	ldr	r3, [r3, #0]
90000c2a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
90000c2c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
90000c30:	4b0d      	ldr	r3, [pc, #52]	; (90000c68 <BSP_LCD_DisplayChar+0x80>)
90000c32:	681a      	ldr	r2, [r3, #0]
90000c34:	4c0d      	ldr	r4, [pc, #52]	; (90000c6c <BSP_LCD_DisplayChar+0x84>)
90000c36:	4613      	mov	r3, r2
90000c38:	005b      	lsls	r3, r3, #1
90000c3a:	4413      	add	r3, r2
90000c3c:	009b      	lsls	r3, r3, #2
90000c3e:	4423      	add	r3, r4
90000c40:	3308      	adds	r3, #8
90000c42:	681b      	ldr	r3, [r3, #0]
90000c44:	889b      	ldrh	r3, [r3, #4]
90000c46:	3307      	adds	r3, #7
90000c48:	2b00      	cmp	r3, #0
90000c4a:	da00      	bge.n	90000c4e <BSP_LCD_DisplayChar+0x66>
90000c4c:	3307      	adds	r3, #7
90000c4e:	10db      	asrs	r3, r3, #3
90000c50:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
90000c54:	18ca      	adds	r2, r1, r3
90000c56:	88b9      	ldrh	r1, [r7, #4]
90000c58:	88fb      	ldrh	r3, [r7, #6]
90000c5a:	4618      	mov	r0, r3
90000c5c:	f000 fd9c 	bl	90001798 <DrawChar>
}
90000c60:	bf00      	nop
90000c62:	370c      	adds	r7, #12
90000c64:	46bd      	mov	sp, r7
90000c66:	bd90      	pop	{r4, r7, pc}
90000c68:	20000074 	.word	0x20000074
90000c6c:	20000078 	.word	0x20000078

90000c70 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
90000c70:	b5b0      	push	{r4, r5, r7, lr}
90000c72:	b088      	sub	sp, #32
90000c74:	af00      	add	r7, sp, #0
90000c76:	60ba      	str	r2, [r7, #8]
90000c78:	461a      	mov	r2, r3
90000c7a:	4603      	mov	r3, r0
90000c7c:	81fb      	strh	r3, [r7, #14]
90000c7e:	460b      	mov	r3, r1
90000c80:	81bb      	strh	r3, [r7, #12]
90000c82:	4613      	mov	r3, r2
90000c84:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
90000c86:	2301      	movs	r3, #1
90000c88:	83fb      	strh	r3, [r7, #30]
90000c8a:	2300      	movs	r3, #0
90000c8c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
90000c8e:	2300      	movs	r3, #0
90000c90:	61bb      	str	r3, [r7, #24]
90000c92:	2300      	movs	r3, #0
90000c94:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
90000c96:	68bb      	ldr	r3, [r7, #8]
90000c98:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
90000c9a:	e002      	b.n	90000ca2 <BSP_LCD_DisplayStringAt+0x32>
90000c9c:	69bb      	ldr	r3, [r7, #24]
90000c9e:	3301      	adds	r3, #1
90000ca0:	61bb      	str	r3, [r7, #24]
90000ca2:	697b      	ldr	r3, [r7, #20]
90000ca4:	1c5a      	adds	r2, r3, #1
90000ca6:	617a      	str	r2, [r7, #20]
90000ca8:	781b      	ldrb	r3, [r3, #0]
90000caa:	2b00      	cmp	r3, #0
90000cac:	d1f6      	bne.n	90000c9c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
90000cae:	f7ff fe79 	bl	900009a4 <BSP_LCD_GetXSize>
90000cb2:	4601      	mov	r1, r0
90000cb4:	4b50      	ldr	r3, [pc, #320]	; (90000df8 <BSP_LCD_DisplayStringAt+0x188>)
90000cb6:	681a      	ldr	r2, [r3, #0]
90000cb8:	4850      	ldr	r0, [pc, #320]	; (90000dfc <BSP_LCD_DisplayStringAt+0x18c>)
90000cba:	4613      	mov	r3, r2
90000cbc:	005b      	lsls	r3, r3, #1
90000cbe:	4413      	add	r3, r2
90000cc0:	009b      	lsls	r3, r3, #2
90000cc2:	4403      	add	r3, r0
90000cc4:	3308      	adds	r3, #8
90000cc6:	681b      	ldr	r3, [r3, #0]
90000cc8:	889b      	ldrh	r3, [r3, #4]
90000cca:	fbb1 f3f3 	udiv	r3, r1, r3
90000cce:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
90000cd0:	79fb      	ldrb	r3, [r7, #7]
90000cd2:	2b03      	cmp	r3, #3
90000cd4:	d01c      	beq.n	90000d10 <BSP_LCD_DisplayStringAt+0xa0>
90000cd6:	2b03      	cmp	r3, #3
90000cd8:	dc33      	bgt.n	90000d42 <BSP_LCD_DisplayStringAt+0xd2>
90000cda:	2b01      	cmp	r3, #1
90000cdc:	d002      	beq.n	90000ce4 <BSP_LCD_DisplayStringAt+0x74>
90000cde:	2b02      	cmp	r3, #2
90000ce0:	d019      	beq.n	90000d16 <BSP_LCD_DisplayStringAt+0xa6>
90000ce2:	e02e      	b.n	90000d42 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
90000ce4:	693a      	ldr	r2, [r7, #16]
90000ce6:	69bb      	ldr	r3, [r7, #24]
90000ce8:	1ad1      	subs	r1, r2, r3
90000cea:	4b43      	ldr	r3, [pc, #268]	; (90000df8 <BSP_LCD_DisplayStringAt+0x188>)
90000cec:	681a      	ldr	r2, [r3, #0]
90000cee:	4843      	ldr	r0, [pc, #268]	; (90000dfc <BSP_LCD_DisplayStringAt+0x18c>)
90000cf0:	4613      	mov	r3, r2
90000cf2:	005b      	lsls	r3, r3, #1
90000cf4:	4413      	add	r3, r2
90000cf6:	009b      	lsls	r3, r3, #2
90000cf8:	4403      	add	r3, r0
90000cfa:	3308      	adds	r3, #8
90000cfc:	681b      	ldr	r3, [r3, #0]
90000cfe:	889b      	ldrh	r3, [r3, #4]
90000d00:	fb03 f301 	mul.w	r3, r3, r1
90000d04:	085b      	lsrs	r3, r3, #1
90000d06:	b29a      	uxth	r2, r3
90000d08:	89fb      	ldrh	r3, [r7, #14]
90000d0a:	4413      	add	r3, r2
90000d0c:	83fb      	strh	r3, [r7, #30]
      break;
90000d0e:	e01b      	b.n	90000d48 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
90000d10:	89fb      	ldrh	r3, [r7, #14]
90000d12:	83fb      	strh	r3, [r7, #30]
      break;
90000d14:	e018      	b.n	90000d48 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
90000d16:	693a      	ldr	r2, [r7, #16]
90000d18:	69bb      	ldr	r3, [r7, #24]
90000d1a:	1ad3      	subs	r3, r2, r3
90000d1c:	b299      	uxth	r1, r3
90000d1e:	4b36      	ldr	r3, [pc, #216]	; (90000df8 <BSP_LCD_DisplayStringAt+0x188>)
90000d20:	681a      	ldr	r2, [r3, #0]
90000d22:	4836      	ldr	r0, [pc, #216]	; (90000dfc <BSP_LCD_DisplayStringAt+0x18c>)
90000d24:	4613      	mov	r3, r2
90000d26:	005b      	lsls	r3, r3, #1
90000d28:	4413      	add	r3, r2
90000d2a:	009b      	lsls	r3, r3, #2
90000d2c:	4403      	add	r3, r0
90000d2e:	3308      	adds	r3, #8
90000d30:	681b      	ldr	r3, [r3, #0]
90000d32:	889b      	ldrh	r3, [r3, #4]
90000d34:	fb11 f303 	smulbb	r3, r1, r3
90000d38:	b29a      	uxth	r2, r3
90000d3a:	89fb      	ldrh	r3, [r7, #14]
90000d3c:	1ad3      	subs	r3, r2, r3
90000d3e:	83fb      	strh	r3, [r7, #30]
      break;
90000d40:	e002      	b.n	90000d48 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
90000d42:	89fb      	ldrh	r3, [r7, #14]
90000d44:	83fb      	strh	r3, [r7, #30]
      break;
90000d46:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
90000d48:	8bfb      	ldrh	r3, [r7, #30]
90000d4a:	2b00      	cmp	r3, #0
90000d4c:	d003      	beq.n	90000d56 <BSP_LCD_DisplayStringAt+0xe6>
90000d4e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
90000d52:	2b00      	cmp	r3, #0
90000d54:	da1d      	bge.n	90000d92 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
90000d56:	2301      	movs	r3, #1
90000d58:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
90000d5a:	e01a      	b.n	90000d92 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
90000d5c:	68bb      	ldr	r3, [r7, #8]
90000d5e:	781a      	ldrb	r2, [r3, #0]
90000d60:	89b9      	ldrh	r1, [r7, #12]
90000d62:	8bfb      	ldrh	r3, [r7, #30]
90000d64:	4618      	mov	r0, r3
90000d66:	f7ff ff3f 	bl	90000be8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
90000d6a:	4b23      	ldr	r3, [pc, #140]	; (90000df8 <BSP_LCD_DisplayStringAt+0x188>)
90000d6c:	681a      	ldr	r2, [r3, #0]
90000d6e:	4923      	ldr	r1, [pc, #140]	; (90000dfc <BSP_LCD_DisplayStringAt+0x18c>)
90000d70:	4613      	mov	r3, r2
90000d72:	005b      	lsls	r3, r3, #1
90000d74:	4413      	add	r3, r2
90000d76:	009b      	lsls	r3, r3, #2
90000d78:	440b      	add	r3, r1
90000d7a:	3308      	adds	r3, #8
90000d7c:	681b      	ldr	r3, [r3, #0]
90000d7e:	889a      	ldrh	r2, [r3, #4]
90000d80:	8bfb      	ldrh	r3, [r7, #30]
90000d82:	4413      	add	r3, r2
90000d84:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
90000d86:	68bb      	ldr	r3, [r7, #8]
90000d88:	3301      	adds	r3, #1
90000d8a:	60bb      	str	r3, [r7, #8]
    i++;
90000d8c:	8bbb      	ldrh	r3, [r7, #28]
90000d8e:	3301      	adds	r3, #1
90000d90:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
90000d92:	68bb      	ldr	r3, [r7, #8]
90000d94:	781b      	ldrb	r3, [r3, #0]
90000d96:	2b00      	cmp	r3, #0
90000d98:	bf14      	ite	ne
90000d9a:	2301      	movne	r3, #1
90000d9c:	2300      	moveq	r3, #0
90000d9e:	b2dc      	uxtb	r4, r3
90000da0:	f7ff fe00 	bl	900009a4 <BSP_LCD_GetXSize>
90000da4:	8bb9      	ldrh	r1, [r7, #28]
90000da6:	4b14      	ldr	r3, [pc, #80]	; (90000df8 <BSP_LCD_DisplayStringAt+0x188>)
90000da8:	681a      	ldr	r2, [r3, #0]
90000daa:	4d14      	ldr	r5, [pc, #80]	; (90000dfc <BSP_LCD_DisplayStringAt+0x18c>)
90000dac:	4613      	mov	r3, r2
90000dae:	005b      	lsls	r3, r3, #1
90000db0:	4413      	add	r3, r2
90000db2:	009b      	lsls	r3, r3, #2
90000db4:	442b      	add	r3, r5
90000db6:	3308      	adds	r3, #8
90000db8:	681b      	ldr	r3, [r3, #0]
90000dba:	889b      	ldrh	r3, [r3, #4]
90000dbc:	fb03 f301 	mul.w	r3, r3, r1
90000dc0:	1ac3      	subs	r3, r0, r3
90000dc2:	b299      	uxth	r1, r3
90000dc4:	4b0c      	ldr	r3, [pc, #48]	; (90000df8 <BSP_LCD_DisplayStringAt+0x188>)
90000dc6:	681a      	ldr	r2, [r3, #0]
90000dc8:	480c      	ldr	r0, [pc, #48]	; (90000dfc <BSP_LCD_DisplayStringAt+0x18c>)
90000dca:	4613      	mov	r3, r2
90000dcc:	005b      	lsls	r3, r3, #1
90000dce:	4413      	add	r3, r2
90000dd0:	009b      	lsls	r3, r3, #2
90000dd2:	4403      	add	r3, r0
90000dd4:	3308      	adds	r3, #8
90000dd6:	681b      	ldr	r3, [r3, #0]
90000dd8:	889b      	ldrh	r3, [r3, #4]
90000dda:	4299      	cmp	r1, r3
90000ddc:	bf2c      	ite	cs
90000dde:	2301      	movcs	r3, #1
90000de0:	2300      	movcc	r3, #0
90000de2:	b2db      	uxtb	r3, r3
90000de4:	4023      	ands	r3, r4
90000de6:	b2db      	uxtb	r3, r3
90000de8:	2b00      	cmp	r3, #0
90000dea:	d1b7      	bne.n	90000d5c <BSP_LCD_DisplayStringAt+0xec>
  }  
}
90000dec:	bf00      	nop
90000dee:	bf00      	nop
90000df0:	3720      	adds	r7, #32
90000df2:	46bd      	mov	sp, r7
90000df4:	bdb0      	pop	{r4, r5, r7, pc}
90000df6:	bf00      	nop
90000df8:	20000074 	.word	0x20000074
90000dfc:	20000078 	.word	0x20000078

90000e00 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
90000e00:	b5b0      	push	{r4, r5, r7, lr}
90000e02:	b086      	sub	sp, #24
90000e04:	af02      	add	r7, sp, #8
90000e06:	4603      	mov	r3, r0
90000e08:	80fb      	strh	r3, [r7, #6]
90000e0a:	460b      	mov	r3, r1
90000e0c:	80bb      	strh	r3, [r7, #4]
90000e0e:	4613      	mov	r3, r2
90000e10:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
90000e12:	2300      	movs	r3, #0
90000e14:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90000e16:	4b26      	ldr	r3, [pc, #152]	; (90000eb0 <BSP_LCD_DrawHLine+0xb0>)
90000e18:	681b      	ldr	r3, [r3, #0]
90000e1a:	4a26      	ldr	r2, [pc, #152]	; (90000eb4 <BSP_LCD_DrawHLine+0xb4>)
90000e1c:	2134      	movs	r1, #52	; 0x34
90000e1e:	fb01 f303 	mul.w	r3, r1, r3
90000e22:	4413      	add	r3, r2
90000e24:	3348      	adds	r3, #72	; 0x48
90000e26:	681b      	ldr	r3, [r3, #0]
90000e28:	2b02      	cmp	r3, #2
90000e2a:	d114      	bne.n	90000e56 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
90000e2c:	4b20      	ldr	r3, [pc, #128]	; (90000eb0 <BSP_LCD_DrawHLine+0xb0>)
90000e2e:	681b      	ldr	r3, [r3, #0]
90000e30:	4a20      	ldr	r2, [pc, #128]	; (90000eb4 <BSP_LCD_DrawHLine+0xb4>)
90000e32:	2134      	movs	r1, #52	; 0x34
90000e34:	fb01 f303 	mul.w	r3, r1, r3
90000e38:	4413      	add	r3, r2
90000e3a:	335c      	adds	r3, #92	; 0x5c
90000e3c:	681c      	ldr	r4, [r3, #0]
90000e3e:	f7ff fdb1 	bl	900009a4 <BSP_LCD_GetXSize>
90000e42:	4602      	mov	r2, r0
90000e44:	88bb      	ldrh	r3, [r7, #4]
90000e46:	fb03 f202 	mul.w	r2, r3, r2
90000e4a:	88fb      	ldrh	r3, [r7, #6]
90000e4c:	4413      	add	r3, r2
90000e4e:	005b      	lsls	r3, r3, #1
90000e50:	4423      	add	r3, r4
90000e52:	60fb      	str	r3, [r7, #12]
90000e54:	e013      	b.n	90000e7e <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
90000e56:	4b16      	ldr	r3, [pc, #88]	; (90000eb0 <BSP_LCD_DrawHLine+0xb0>)
90000e58:	681b      	ldr	r3, [r3, #0]
90000e5a:	4a16      	ldr	r2, [pc, #88]	; (90000eb4 <BSP_LCD_DrawHLine+0xb4>)
90000e5c:	2134      	movs	r1, #52	; 0x34
90000e5e:	fb01 f303 	mul.w	r3, r1, r3
90000e62:	4413      	add	r3, r2
90000e64:	335c      	adds	r3, #92	; 0x5c
90000e66:	681c      	ldr	r4, [r3, #0]
90000e68:	f7ff fd9c 	bl	900009a4 <BSP_LCD_GetXSize>
90000e6c:	4602      	mov	r2, r0
90000e6e:	88bb      	ldrh	r3, [r7, #4]
90000e70:	fb03 f202 	mul.w	r2, r3, r2
90000e74:	88fb      	ldrh	r3, [r7, #6]
90000e76:	4413      	add	r3, r2
90000e78:	009b      	lsls	r3, r3, #2
90000e7a:	4423      	add	r3, r4
90000e7c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
90000e7e:	4b0c      	ldr	r3, [pc, #48]	; (90000eb0 <BSP_LCD_DrawHLine+0xb0>)
90000e80:	6818      	ldr	r0, [r3, #0]
90000e82:	68f9      	ldr	r1, [r7, #12]
90000e84:	887c      	ldrh	r4, [r7, #2]
90000e86:	4b0a      	ldr	r3, [pc, #40]	; (90000eb0 <BSP_LCD_DrawHLine+0xb0>)
90000e88:	681a      	ldr	r2, [r3, #0]
90000e8a:	4d0b      	ldr	r5, [pc, #44]	; (90000eb8 <BSP_LCD_DrawHLine+0xb8>)
90000e8c:	4613      	mov	r3, r2
90000e8e:	005b      	lsls	r3, r3, #1
90000e90:	4413      	add	r3, r2
90000e92:	009b      	lsls	r3, r3, #2
90000e94:	442b      	add	r3, r5
90000e96:	681b      	ldr	r3, [r3, #0]
90000e98:	9301      	str	r3, [sp, #4]
90000e9a:	2300      	movs	r3, #0
90000e9c:	9300      	str	r3, [sp, #0]
90000e9e:	2301      	movs	r3, #1
90000ea0:	4622      	mov	r2, r4
90000ea2:	f000 fd31 	bl	90001908 <LL_FillBuffer>
}
90000ea6:	bf00      	nop
90000ea8:	3710      	adds	r7, #16
90000eaa:	46bd      	mov	sp, r7
90000eac:	bdb0      	pop	{r4, r5, r7, pc}
90000eae:	bf00      	nop
90000eb0:	20000074 	.word	0x20000074
90000eb4:	200001a0 	.word	0x200001a0
90000eb8:	20000078 	.word	0x20000078

90000ebc <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
90000ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
90000ebe:	b087      	sub	sp, #28
90000ec0:	af02      	add	r7, sp, #8
90000ec2:	4603      	mov	r3, r0
90000ec4:	80fb      	strh	r3, [r7, #6]
90000ec6:	460b      	mov	r3, r1
90000ec8:	80bb      	strh	r3, [r7, #4]
90000eca:	4613      	mov	r3, r2
90000ecc:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
90000ece:	2300      	movs	r3, #0
90000ed0:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90000ed2:	4b28      	ldr	r3, [pc, #160]	; (90000f74 <BSP_LCD_DrawVLine+0xb8>)
90000ed4:	681b      	ldr	r3, [r3, #0]
90000ed6:	4a28      	ldr	r2, [pc, #160]	; (90000f78 <BSP_LCD_DrawVLine+0xbc>)
90000ed8:	2134      	movs	r1, #52	; 0x34
90000eda:	fb01 f303 	mul.w	r3, r1, r3
90000ede:	4413      	add	r3, r2
90000ee0:	3348      	adds	r3, #72	; 0x48
90000ee2:	681b      	ldr	r3, [r3, #0]
90000ee4:	2b02      	cmp	r3, #2
90000ee6:	d114      	bne.n	90000f12 <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
90000ee8:	4b22      	ldr	r3, [pc, #136]	; (90000f74 <BSP_LCD_DrawVLine+0xb8>)
90000eea:	681b      	ldr	r3, [r3, #0]
90000eec:	4a22      	ldr	r2, [pc, #136]	; (90000f78 <BSP_LCD_DrawVLine+0xbc>)
90000eee:	2134      	movs	r1, #52	; 0x34
90000ef0:	fb01 f303 	mul.w	r3, r1, r3
90000ef4:	4413      	add	r3, r2
90000ef6:	335c      	adds	r3, #92	; 0x5c
90000ef8:	681c      	ldr	r4, [r3, #0]
90000efa:	f7ff fd53 	bl	900009a4 <BSP_LCD_GetXSize>
90000efe:	4602      	mov	r2, r0
90000f00:	88bb      	ldrh	r3, [r7, #4]
90000f02:	fb03 f202 	mul.w	r2, r3, r2
90000f06:	88fb      	ldrh	r3, [r7, #6]
90000f08:	4413      	add	r3, r2
90000f0a:	005b      	lsls	r3, r3, #1
90000f0c:	4423      	add	r3, r4
90000f0e:	60fb      	str	r3, [r7, #12]
90000f10:	e013      	b.n	90000f3a <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
90000f12:	4b18      	ldr	r3, [pc, #96]	; (90000f74 <BSP_LCD_DrawVLine+0xb8>)
90000f14:	681b      	ldr	r3, [r3, #0]
90000f16:	4a18      	ldr	r2, [pc, #96]	; (90000f78 <BSP_LCD_DrawVLine+0xbc>)
90000f18:	2134      	movs	r1, #52	; 0x34
90000f1a:	fb01 f303 	mul.w	r3, r1, r3
90000f1e:	4413      	add	r3, r2
90000f20:	335c      	adds	r3, #92	; 0x5c
90000f22:	681c      	ldr	r4, [r3, #0]
90000f24:	f7ff fd3e 	bl	900009a4 <BSP_LCD_GetXSize>
90000f28:	4602      	mov	r2, r0
90000f2a:	88bb      	ldrh	r3, [r7, #4]
90000f2c:	fb03 f202 	mul.w	r2, r3, r2
90000f30:	88fb      	ldrh	r3, [r7, #6]
90000f32:	4413      	add	r3, r2
90000f34:	009b      	lsls	r3, r3, #2
90000f36:	4423      	add	r3, r4
90000f38:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
90000f3a:	4b0e      	ldr	r3, [pc, #56]	; (90000f74 <BSP_LCD_DrawVLine+0xb8>)
90000f3c:	681c      	ldr	r4, [r3, #0]
90000f3e:	68fd      	ldr	r5, [r7, #12]
90000f40:	887e      	ldrh	r6, [r7, #2]
90000f42:	f7ff fd2f 	bl	900009a4 <BSP_LCD_GetXSize>
90000f46:	4603      	mov	r3, r0
90000f48:	1e59      	subs	r1, r3, #1
90000f4a:	4b0a      	ldr	r3, [pc, #40]	; (90000f74 <BSP_LCD_DrawVLine+0xb8>)
90000f4c:	681a      	ldr	r2, [r3, #0]
90000f4e:	480b      	ldr	r0, [pc, #44]	; (90000f7c <BSP_LCD_DrawVLine+0xc0>)
90000f50:	4613      	mov	r3, r2
90000f52:	005b      	lsls	r3, r3, #1
90000f54:	4413      	add	r3, r2
90000f56:	009b      	lsls	r3, r3, #2
90000f58:	4403      	add	r3, r0
90000f5a:	681b      	ldr	r3, [r3, #0]
90000f5c:	9301      	str	r3, [sp, #4]
90000f5e:	9100      	str	r1, [sp, #0]
90000f60:	4633      	mov	r3, r6
90000f62:	2201      	movs	r2, #1
90000f64:	4629      	mov	r1, r5
90000f66:	4620      	mov	r0, r4
90000f68:	f000 fcce 	bl	90001908 <LL_FillBuffer>
}
90000f6c:	bf00      	nop
90000f6e:	3714      	adds	r7, #20
90000f70:	46bd      	mov	sp, r7
90000f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
90000f74:	20000074 	.word	0x20000074
90000f78:	200001a0 	.word	0x200001a0
90000f7c:	20000078 	.word	0x20000078

90000f80 <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
90000f80:	b590      	push	{r4, r7, lr}
90000f82:	b083      	sub	sp, #12
90000f84:	af00      	add	r7, sp, #0
90000f86:	4604      	mov	r4, r0
90000f88:	4608      	mov	r0, r1
90000f8a:	4611      	mov	r1, r2
90000f8c:	461a      	mov	r2, r3
90000f8e:	4623      	mov	r3, r4
90000f90:	80fb      	strh	r3, [r7, #6]
90000f92:	4603      	mov	r3, r0
90000f94:	80bb      	strh	r3, [r7, #4]
90000f96:	460b      	mov	r3, r1
90000f98:	807b      	strh	r3, [r7, #2]
90000f9a:	4613      	mov	r3, r2
90000f9c:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
90000f9e:	887a      	ldrh	r2, [r7, #2]
90000fa0:	88b9      	ldrh	r1, [r7, #4]
90000fa2:	88fb      	ldrh	r3, [r7, #6]
90000fa4:	4618      	mov	r0, r3
90000fa6:	f7ff ff2b 	bl	90000e00 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
90000faa:	88ba      	ldrh	r2, [r7, #4]
90000fac:	883b      	ldrh	r3, [r7, #0]
90000fae:	4413      	add	r3, r2
90000fb0:	b299      	uxth	r1, r3
90000fb2:	887a      	ldrh	r2, [r7, #2]
90000fb4:	88fb      	ldrh	r3, [r7, #6]
90000fb6:	4618      	mov	r0, r3
90000fb8:	f7ff ff22 	bl	90000e00 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
90000fbc:	883a      	ldrh	r2, [r7, #0]
90000fbe:	88b9      	ldrh	r1, [r7, #4]
90000fc0:	88fb      	ldrh	r3, [r7, #6]
90000fc2:	4618      	mov	r0, r3
90000fc4:	f7ff ff7a 	bl	90000ebc <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
90000fc8:	88fa      	ldrh	r2, [r7, #6]
90000fca:	887b      	ldrh	r3, [r7, #2]
90000fcc:	4413      	add	r3, r2
90000fce:	b29b      	uxth	r3, r3
90000fd0:	883a      	ldrh	r2, [r7, #0]
90000fd2:	88b9      	ldrh	r1, [r7, #4]
90000fd4:	4618      	mov	r0, r3
90000fd6:	f7ff ff71 	bl	90000ebc <BSP_LCD_DrawVLine>
}
90000fda:	bf00      	nop
90000fdc:	370c      	adds	r7, #12
90000fde:	46bd      	mov	sp, r7
90000fe0:	bd90      	pop	{r4, r7, pc}
	...

90000fe4 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
90000fe4:	b590      	push	{r4, r7, lr}
90000fe6:	b087      	sub	sp, #28
90000fe8:	af00      	add	r7, sp, #0
90000fea:	4603      	mov	r3, r0
90000fec:	80fb      	strh	r3, [r7, #6]
90000fee:	460b      	mov	r3, r1
90000ff0:	80bb      	strh	r3, [r7, #4]
90000ff2:	4613      	mov	r3, r2
90000ff4:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
90000ff6:	887b      	ldrh	r3, [r7, #2]
90000ff8:	005b      	lsls	r3, r3, #1
90000ffa:	f1c3 0303 	rsb	r3, r3, #3
90000ffe:	617b      	str	r3, [r7, #20]
  current_x = 0;
90001000:	2300      	movs	r3, #0
90001002:	613b      	str	r3, [r7, #16]
  current_y = Radius;
90001004:	887b      	ldrh	r3, [r7, #2]
90001006:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
90001008:	e0c7      	b.n	9000119a <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
9000100a:	693b      	ldr	r3, [r7, #16]
9000100c:	b29a      	uxth	r2, r3
9000100e:	88fb      	ldrh	r3, [r7, #6]
90001010:	4413      	add	r3, r2
90001012:	b298      	uxth	r0, r3
90001014:	68fb      	ldr	r3, [r7, #12]
90001016:	b29b      	uxth	r3, r3
90001018:	88ba      	ldrh	r2, [r7, #4]
9000101a:	1ad3      	subs	r3, r2, r3
9000101c:	b299      	uxth	r1, r3
9000101e:	4b64      	ldr	r3, [pc, #400]	; (900011b0 <BSP_LCD_DrawCircle+0x1cc>)
90001020:	681a      	ldr	r2, [r3, #0]
90001022:	4c64      	ldr	r4, [pc, #400]	; (900011b4 <BSP_LCD_DrawCircle+0x1d0>)
90001024:	4613      	mov	r3, r2
90001026:	005b      	lsls	r3, r3, #1
90001028:	4413      	add	r3, r2
9000102a:	009b      	lsls	r3, r3, #2
9000102c:	4423      	add	r3, r4
9000102e:	681b      	ldr	r3, [r3, #0]
90001030:	461a      	mov	r2, r3
90001032:	f000 f9b5 	bl	900013a0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
90001036:	693b      	ldr	r3, [r7, #16]
90001038:	b29b      	uxth	r3, r3
9000103a:	88fa      	ldrh	r2, [r7, #6]
9000103c:	1ad3      	subs	r3, r2, r3
9000103e:	b298      	uxth	r0, r3
90001040:	68fb      	ldr	r3, [r7, #12]
90001042:	b29b      	uxth	r3, r3
90001044:	88ba      	ldrh	r2, [r7, #4]
90001046:	1ad3      	subs	r3, r2, r3
90001048:	b299      	uxth	r1, r3
9000104a:	4b59      	ldr	r3, [pc, #356]	; (900011b0 <BSP_LCD_DrawCircle+0x1cc>)
9000104c:	681a      	ldr	r2, [r3, #0]
9000104e:	4c59      	ldr	r4, [pc, #356]	; (900011b4 <BSP_LCD_DrawCircle+0x1d0>)
90001050:	4613      	mov	r3, r2
90001052:	005b      	lsls	r3, r3, #1
90001054:	4413      	add	r3, r2
90001056:	009b      	lsls	r3, r3, #2
90001058:	4423      	add	r3, r4
9000105a:	681b      	ldr	r3, [r3, #0]
9000105c:	461a      	mov	r2, r3
9000105e:	f000 f99f 	bl	900013a0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
90001062:	68fb      	ldr	r3, [r7, #12]
90001064:	b29a      	uxth	r2, r3
90001066:	88fb      	ldrh	r3, [r7, #6]
90001068:	4413      	add	r3, r2
9000106a:	b298      	uxth	r0, r3
9000106c:	693b      	ldr	r3, [r7, #16]
9000106e:	b29b      	uxth	r3, r3
90001070:	88ba      	ldrh	r2, [r7, #4]
90001072:	1ad3      	subs	r3, r2, r3
90001074:	b299      	uxth	r1, r3
90001076:	4b4e      	ldr	r3, [pc, #312]	; (900011b0 <BSP_LCD_DrawCircle+0x1cc>)
90001078:	681a      	ldr	r2, [r3, #0]
9000107a:	4c4e      	ldr	r4, [pc, #312]	; (900011b4 <BSP_LCD_DrawCircle+0x1d0>)
9000107c:	4613      	mov	r3, r2
9000107e:	005b      	lsls	r3, r3, #1
90001080:	4413      	add	r3, r2
90001082:	009b      	lsls	r3, r3, #2
90001084:	4423      	add	r3, r4
90001086:	681b      	ldr	r3, [r3, #0]
90001088:	461a      	mov	r2, r3
9000108a:	f000 f989 	bl	900013a0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
9000108e:	68fb      	ldr	r3, [r7, #12]
90001090:	b29b      	uxth	r3, r3
90001092:	88fa      	ldrh	r2, [r7, #6]
90001094:	1ad3      	subs	r3, r2, r3
90001096:	b298      	uxth	r0, r3
90001098:	693b      	ldr	r3, [r7, #16]
9000109a:	b29b      	uxth	r3, r3
9000109c:	88ba      	ldrh	r2, [r7, #4]
9000109e:	1ad3      	subs	r3, r2, r3
900010a0:	b299      	uxth	r1, r3
900010a2:	4b43      	ldr	r3, [pc, #268]	; (900011b0 <BSP_LCD_DrawCircle+0x1cc>)
900010a4:	681a      	ldr	r2, [r3, #0]
900010a6:	4c43      	ldr	r4, [pc, #268]	; (900011b4 <BSP_LCD_DrawCircle+0x1d0>)
900010a8:	4613      	mov	r3, r2
900010aa:	005b      	lsls	r3, r3, #1
900010ac:	4413      	add	r3, r2
900010ae:	009b      	lsls	r3, r3, #2
900010b0:	4423      	add	r3, r4
900010b2:	681b      	ldr	r3, [r3, #0]
900010b4:	461a      	mov	r2, r3
900010b6:	f000 f973 	bl	900013a0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
900010ba:	693b      	ldr	r3, [r7, #16]
900010bc:	b29a      	uxth	r2, r3
900010be:	88fb      	ldrh	r3, [r7, #6]
900010c0:	4413      	add	r3, r2
900010c2:	b298      	uxth	r0, r3
900010c4:	68fb      	ldr	r3, [r7, #12]
900010c6:	b29a      	uxth	r2, r3
900010c8:	88bb      	ldrh	r3, [r7, #4]
900010ca:	4413      	add	r3, r2
900010cc:	b299      	uxth	r1, r3
900010ce:	4b38      	ldr	r3, [pc, #224]	; (900011b0 <BSP_LCD_DrawCircle+0x1cc>)
900010d0:	681a      	ldr	r2, [r3, #0]
900010d2:	4c38      	ldr	r4, [pc, #224]	; (900011b4 <BSP_LCD_DrawCircle+0x1d0>)
900010d4:	4613      	mov	r3, r2
900010d6:	005b      	lsls	r3, r3, #1
900010d8:	4413      	add	r3, r2
900010da:	009b      	lsls	r3, r3, #2
900010dc:	4423      	add	r3, r4
900010de:	681b      	ldr	r3, [r3, #0]
900010e0:	461a      	mov	r2, r3
900010e2:	f000 f95d 	bl	900013a0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
900010e6:	693b      	ldr	r3, [r7, #16]
900010e8:	b29b      	uxth	r3, r3
900010ea:	88fa      	ldrh	r2, [r7, #6]
900010ec:	1ad3      	subs	r3, r2, r3
900010ee:	b298      	uxth	r0, r3
900010f0:	68fb      	ldr	r3, [r7, #12]
900010f2:	b29a      	uxth	r2, r3
900010f4:	88bb      	ldrh	r3, [r7, #4]
900010f6:	4413      	add	r3, r2
900010f8:	b299      	uxth	r1, r3
900010fa:	4b2d      	ldr	r3, [pc, #180]	; (900011b0 <BSP_LCD_DrawCircle+0x1cc>)
900010fc:	681a      	ldr	r2, [r3, #0]
900010fe:	4c2d      	ldr	r4, [pc, #180]	; (900011b4 <BSP_LCD_DrawCircle+0x1d0>)
90001100:	4613      	mov	r3, r2
90001102:	005b      	lsls	r3, r3, #1
90001104:	4413      	add	r3, r2
90001106:	009b      	lsls	r3, r3, #2
90001108:	4423      	add	r3, r4
9000110a:	681b      	ldr	r3, [r3, #0]
9000110c:	461a      	mov	r2, r3
9000110e:	f000 f947 	bl	900013a0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
90001112:	68fb      	ldr	r3, [r7, #12]
90001114:	b29a      	uxth	r2, r3
90001116:	88fb      	ldrh	r3, [r7, #6]
90001118:	4413      	add	r3, r2
9000111a:	b298      	uxth	r0, r3
9000111c:	693b      	ldr	r3, [r7, #16]
9000111e:	b29a      	uxth	r2, r3
90001120:	88bb      	ldrh	r3, [r7, #4]
90001122:	4413      	add	r3, r2
90001124:	b299      	uxth	r1, r3
90001126:	4b22      	ldr	r3, [pc, #136]	; (900011b0 <BSP_LCD_DrawCircle+0x1cc>)
90001128:	681a      	ldr	r2, [r3, #0]
9000112a:	4c22      	ldr	r4, [pc, #136]	; (900011b4 <BSP_LCD_DrawCircle+0x1d0>)
9000112c:	4613      	mov	r3, r2
9000112e:	005b      	lsls	r3, r3, #1
90001130:	4413      	add	r3, r2
90001132:	009b      	lsls	r3, r3, #2
90001134:	4423      	add	r3, r4
90001136:	681b      	ldr	r3, [r3, #0]
90001138:	461a      	mov	r2, r3
9000113a:	f000 f931 	bl	900013a0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
9000113e:	68fb      	ldr	r3, [r7, #12]
90001140:	b29b      	uxth	r3, r3
90001142:	88fa      	ldrh	r2, [r7, #6]
90001144:	1ad3      	subs	r3, r2, r3
90001146:	b298      	uxth	r0, r3
90001148:	693b      	ldr	r3, [r7, #16]
9000114a:	b29a      	uxth	r2, r3
9000114c:	88bb      	ldrh	r3, [r7, #4]
9000114e:	4413      	add	r3, r2
90001150:	b299      	uxth	r1, r3
90001152:	4b17      	ldr	r3, [pc, #92]	; (900011b0 <BSP_LCD_DrawCircle+0x1cc>)
90001154:	681a      	ldr	r2, [r3, #0]
90001156:	4c17      	ldr	r4, [pc, #92]	; (900011b4 <BSP_LCD_DrawCircle+0x1d0>)
90001158:	4613      	mov	r3, r2
9000115a:	005b      	lsls	r3, r3, #1
9000115c:	4413      	add	r3, r2
9000115e:	009b      	lsls	r3, r3, #2
90001160:	4423      	add	r3, r4
90001162:	681b      	ldr	r3, [r3, #0]
90001164:	461a      	mov	r2, r3
90001166:	f000 f91b 	bl	900013a0 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
9000116a:	697b      	ldr	r3, [r7, #20]
9000116c:	2b00      	cmp	r3, #0
9000116e:	da06      	bge.n	9000117e <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
90001170:	693b      	ldr	r3, [r7, #16]
90001172:	009a      	lsls	r2, r3, #2
90001174:	697b      	ldr	r3, [r7, #20]
90001176:	4413      	add	r3, r2
90001178:	3306      	adds	r3, #6
9000117a:	617b      	str	r3, [r7, #20]
9000117c:	e00a      	b.n	90001194 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
9000117e:	693a      	ldr	r2, [r7, #16]
90001180:	68fb      	ldr	r3, [r7, #12]
90001182:	1ad3      	subs	r3, r2, r3
90001184:	009a      	lsls	r2, r3, #2
90001186:	697b      	ldr	r3, [r7, #20]
90001188:	4413      	add	r3, r2
9000118a:	330a      	adds	r3, #10
9000118c:	617b      	str	r3, [r7, #20]
      current_y--;
9000118e:	68fb      	ldr	r3, [r7, #12]
90001190:	3b01      	subs	r3, #1
90001192:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
90001194:	693b      	ldr	r3, [r7, #16]
90001196:	3301      	adds	r3, #1
90001198:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
9000119a:	693a      	ldr	r2, [r7, #16]
9000119c:	68fb      	ldr	r3, [r7, #12]
9000119e:	429a      	cmp	r2, r3
900011a0:	f67f af33 	bls.w	9000100a <BSP_LCD_DrawCircle+0x26>
  } 
}
900011a4:	bf00      	nop
900011a6:	bf00      	nop
900011a8:	371c      	adds	r7, #28
900011aa:	46bd      	mov	sp, r7
900011ac:	bd90      	pop	{r4, r7, pc}
900011ae:	bf00      	nop
900011b0:	20000074 	.word	0x20000074
900011b4:	20000078 	.word	0x20000078

900011b8 <BSP_LCD_DrawEllipse>:
  * @param  XRadius: Ellipse X radius
  * @param  YRadius: Ellipse Y radius
  * @retval None
  */
void BSP_LCD_DrawEllipse(int Xpos, int Ypos, int XRadius, int YRadius)
{
900011b8:	b590      	push	{r4, r7, lr}
900011ba:	b08d      	sub	sp, #52	; 0x34
900011bc:	af00      	add	r7, sp, #0
900011be:	60f8      	str	r0, [r7, #12]
900011c0:	60b9      	str	r1, [r7, #8]
900011c2:	607a      	str	r2, [r7, #4]
900011c4:	603b      	str	r3, [r7, #0]
  int x = 0, y = -YRadius, err = 2-2*XRadius, e2;
900011c6:	2300      	movs	r3, #0
900011c8:	62fb      	str	r3, [r7, #44]	; 0x2c
900011ca:	683b      	ldr	r3, [r7, #0]
900011cc:	425b      	negs	r3, r3
900011ce:	62bb      	str	r3, [r7, #40]	; 0x28
900011d0:	687b      	ldr	r3, [r7, #4]
900011d2:	f1c3 0301 	rsb	r3, r3, #1
900011d6:	005b      	lsls	r3, r3, #1
900011d8:	627b      	str	r3, [r7, #36]	; 0x24
  float k = 0, rad1 = 0, rad2 = 0;
900011da:	f04f 0300 	mov.w	r3, #0
900011de:	61fb      	str	r3, [r7, #28]
900011e0:	f04f 0300 	mov.w	r3, #0
900011e4:	61bb      	str	r3, [r7, #24]
900011e6:	f04f 0300 	mov.w	r3, #0
900011ea:	617b      	str	r3, [r7, #20]
  
  rad1 = XRadius;
900011ec:	687b      	ldr	r3, [r7, #4]
900011ee:	ee07 3a90 	vmov	s15, r3
900011f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900011f6:	edc7 7a06 	vstr	s15, [r7, #24]
  rad2 = YRadius;
900011fa:	683b      	ldr	r3, [r7, #0]
900011fc:	ee07 3a90 	vmov	s15, r3
90001200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90001204:	edc7 7a05 	vstr	s15, [r7, #20]
  
  k = (float)(rad2/rad1);  
90001208:	edd7 6a05 	vldr	s13, [r7, #20]
9000120c:	ed97 7a06 	vldr	s14, [r7, #24]
90001210:	eec6 7a87 	vdiv.f32	s15, s13, s14
90001214:	edc7 7a07 	vstr	s15, [r7, #28]
  
  do { 
    BSP_LCD_DrawPixel((Xpos-(uint16_t)(x/k)), (Ypos+y), DrawProp[ActiveLayer].TextColor);
90001218:	68fb      	ldr	r3, [r7, #12]
9000121a:	b29a      	uxth	r2, r3
9000121c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000121e:	ee07 3a90 	vmov	s15, r3
90001222:	eef8 6ae7 	vcvt.f32.s32	s13, s15
90001226:	ed97 7a07 	vldr	s14, [r7, #28]
9000122a:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000122e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90001232:	ee17 3a90 	vmov	r3, s15
90001236:	b29b      	uxth	r3, r3
90001238:	1ad3      	subs	r3, r2, r3
9000123a:	b298      	uxth	r0, r3
9000123c:	68bb      	ldr	r3, [r7, #8]
9000123e:	b29a      	uxth	r2, r3
90001240:	6abb      	ldr	r3, [r7, #40]	; 0x28
90001242:	b29b      	uxth	r3, r3
90001244:	4413      	add	r3, r2
90001246:	b299      	uxth	r1, r3
90001248:	4b53      	ldr	r3, [pc, #332]	; (90001398 <BSP_LCD_DrawEllipse+0x1e0>)
9000124a:	681a      	ldr	r2, [r3, #0]
9000124c:	4c53      	ldr	r4, [pc, #332]	; (9000139c <BSP_LCD_DrawEllipse+0x1e4>)
9000124e:	4613      	mov	r3, r2
90001250:	005b      	lsls	r3, r3, #1
90001252:	4413      	add	r3, r2
90001254:	009b      	lsls	r3, r3, #2
90001256:	4423      	add	r3, r4
90001258:	681b      	ldr	r3, [r3, #0]
9000125a:	461a      	mov	r2, r3
9000125c:	f000 f8a0 	bl	900013a0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos+(uint16_t)(x/k)), (Ypos+y), DrawProp[ActiveLayer].TextColor);
90001260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90001262:	ee07 3a90 	vmov	s15, r3
90001266:	eef8 6ae7 	vcvt.f32.s32	s13, s15
9000126a:	ed97 7a07 	vldr	s14, [r7, #28]
9000126e:	eec6 7a87 	vdiv.f32	s15, s13, s14
90001272:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90001276:	ee17 3a90 	vmov	r3, s15
9000127a:	b29a      	uxth	r2, r3
9000127c:	68fb      	ldr	r3, [r7, #12]
9000127e:	b29b      	uxth	r3, r3
90001280:	4413      	add	r3, r2
90001282:	b298      	uxth	r0, r3
90001284:	68bb      	ldr	r3, [r7, #8]
90001286:	b29a      	uxth	r2, r3
90001288:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000128a:	b29b      	uxth	r3, r3
9000128c:	4413      	add	r3, r2
9000128e:	b299      	uxth	r1, r3
90001290:	4b41      	ldr	r3, [pc, #260]	; (90001398 <BSP_LCD_DrawEllipse+0x1e0>)
90001292:	681a      	ldr	r2, [r3, #0]
90001294:	4c41      	ldr	r4, [pc, #260]	; (9000139c <BSP_LCD_DrawEllipse+0x1e4>)
90001296:	4613      	mov	r3, r2
90001298:	005b      	lsls	r3, r3, #1
9000129a:	4413      	add	r3, r2
9000129c:	009b      	lsls	r3, r3, #2
9000129e:	4423      	add	r3, r4
900012a0:	681b      	ldr	r3, [r3, #0]
900012a2:	461a      	mov	r2, r3
900012a4:	f000 f87c 	bl	900013a0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos+(uint16_t)(x/k)), (Ypos-y), DrawProp[ActiveLayer].TextColor);
900012a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900012aa:	ee07 3a90 	vmov	s15, r3
900012ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
900012b2:	ed97 7a07 	vldr	s14, [r7, #28]
900012b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
900012ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900012be:	ee17 3a90 	vmov	r3, s15
900012c2:	b29a      	uxth	r2, r3
900012c4:	68fb      	ldr	r3, [r7, #12]
900012c6:	b29b      	uxth	r3, r3
900012c8:	4413      	add	r3, r2
900012ca:	b298      	uxth	r0, r3
900012cc:	68bb      	ldr	r3, [r7, #8]
900012ce:	b29a      	uxth	r2, r3
900012d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
900012d2:	b29b      	uxth	r3, r3
900012d4:	1ad3      	subs	r3, r2, r3
900012d6:	b299      	uxth	r1, r3
900012d8:	4b2f      	ldr	r3, [pc, #188]	; (90001398 <BSP_LCD_DrawEllipse+0x1e0>)
900012da:	681a      	ldr	r2, [r3, #0]
900012dc:	4c2f      	ldr	r4, [pc, #188]	; (9000139c <BSP_LCD_DrawEllipse+0x1e4>)
900012de:	4613      	mov	r3, r2
900012e0:	005b      	lsls	r3, r3, #1
900012e2:	4413      	add	r3, r2
900012e4:	009b      	lsls	r3, r3, #2
900012e6:	4423      	add	r3, r4
900012e8:	681b      	ldr	r3, [r3, #0]
900012ea:	461a      	mov	r2, r3
900012ec:	f000 f858 	bl	900013a0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos-(uint16_t)(x/k)), (Ypos-y), DrawProp[ActiveLayer].TextColor);      
900012f0:	68fb      	ldr	r3, [r7, #12]
900012f2:	b29a      	uxth	r2, r3
900012f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900012f6:	ee07 3a90 	vmov	s15, r3
900012fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
900012fe:	ed97 7a07 	vldr	s14, [r7, #28]
90001302:	eec6 7a87 	vdiv.f32	s15, s13, s14
90001306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000130a:	ee17 3a90 	vmov	r3, s15
9000130e:	b29b      	uxth	r3, r3
90001310:	1ad3      	subs	r3, r2, r3
90001312:	b298      	uxth	r0, r3
90001314:	68bb      	ldr	r3, [r7, #8]
90001316:	b29a      	uxth	r2, r3
90001318:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000131a:	b29b      	uxth	r3, r3
9000131c:	1ad3      	subs	r3, r2, r3
9000131e:	b299      	uxth	r1, r3
90001320:	4b1d      	ldr	r3, [pc, #116]	; (90001398 <BSP_LCD_DrawEllipse+0x1e0>)
90001322:	681a      	ldr	r2, [r3, #0]
90001324:	4c1d      	ldr	r4, [pc, #116]	; (9000139c <BSP_LCD_DrawEllipse+0x1e4>)
90001326:	4613      	mov	r3, r2
90001328:	005b      	lsls	r3, r3, #1
9000132a:	4413      	add	r3, r2
9000132c:	009b      	lsls	r3, r3, #2
9000132e:	4423      	add	r3, r4
90001330:	681b      	ldr	r3, [r3, #0]
90001332:	461a      	mov	r2, r3
90001334:	f000 f834 	bl	900013a0 <BSP_LCD_DrawPixel>
    
    e2 = err;
90001338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000133a:	623b      	str	r3, [r7, #32]
    if (e2 <= x) {
9000133c:	6a3a      	ldr	r2, [r7, #32]
9000133e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90001340:	429a      	cmp	r2, r3
90001342:	dc13      	bgt.n	9000136c <BSP_LCD_DrawEllipse+0x1b4>
      err += ++x*2+1;
90001344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90001346:	3301      	adds	r3, #1
90001348:	62fb      	str	r3, [r7, #44]	; 0x2c
9000134a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000134c:	005b      	lsls	r3, r3, #1
9000134e:	3301      	adds	r3, #1
90001350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90001352:	4413      	add	r3, r2
90001354:	627b      	str	r3, [r7, #36]	; 0x24
      if (-y == x && e2 <= y) e2 = 0;
90001356:	6abb      	ldr	r3, [r7, #40]	; 0x28
90001358:	425b      	negs	r3, r3
9000135a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000135c:	429a      	cmp	r2, r3
9000135e:	d105      	bne.n	9000136c <BSP_LCD_DrawEllipse+0x1b4>
90001360:	6a3a      	ldr	r2, [r7, #32]
90001362:	6abb      	ldr	r3, [r7, #40]	; 0x28
90001364:	429a      	cmp	r2, r3
90001366:	dc01      	bgt.n	9000136c <BSP_LCD_DrawEllipse+0x1b4>
90001368:	2300      	movs	r3, #0
9000136a:	623b      	str	r3, [r7, #32]
    }
    if (e2 > y) err += ++y*2+1;     
9000136c:	6a3a      	ldr	r2, [r7, #32]
9000136e:	6abb      	ldr	r3, [r7, #40]	; 0x28
90001370:	429a      	cmp	r2, r3
90001372:	dd08      	ble.n	90001386 <BSP_LCD_DrawEllipse+0x1ce>
90001374:	6abb      	ldr	r3, [r7, #40]	; 0x28
90001376:	3301      	adds	r3, #1
90001378:	62bb      	str	r3, [r7, #40]	; 0x28
9000137a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000137c:	005b      	lsls	r3, r3, #1
9000137e:	3301      	adds	r3, #1
90001380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90001382:	4413      	add	r3, r2
90001384:	627b      	str	r3, [r7, #36]	; 0x24
  }
  while (y <= 0);
90001386:	6abb      	ldr	r3, [r7, #40]	; 0x28
90001388:	2b00      	cmp	r3, #0
9000138a:	f77f af45 	ble.w	90001218 <BSP_LCD_DrawEllipse+0x60>
}
9000138e:	bf00      	nop
90001390:	bf00      	nop
90001392:	3734      	adds	r7, #52	; 0x34
90001394:	46bd      	mov	sp, r7
90001396:	bd90      	pop	{r4, r7, pc}
90001398:	20000074 	.word	0x20000074
9000139c:	20000078 	.word	0x20000078

900013a0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
900013a0:	b5b0      	push	{r4, r5, r7, lr}
900013a2:	b082      	sub	sp, #8
900013a4:	af00      	add	r7, sp, #0
900013a6:	4603      	mov	r3, r0
900013a8:	603a      	str	r2, [r7, #0]
900013aa:	80fb      	strh	r3, [r7, #6]
900013ac:	460b      	mov	r3, r1
900013ae:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900013b0:	4b1d      	ldr	r3, [pc, #116]	; (90001428 <BSP_LCD_DrawPixel+0x88>)
900013b2:	681b      	ldr	r3, [r3, #0]
900013b4:	4a1d      	ldr	r2, [pc, #116]	; (9000142c <BSP_LCD_DrawPixel+0x8c>)
900013b6:	2134      	movs	r1, #52	; 0x34
900013b8:	fb01 f303 	mul.w	r3, r1, r3
900013bc:	4413      	add	r3, r2
900013be:	3348      	adds	r3, #72	; 0x48
900013c0:	681b      	ldr	r3, [r3, #0]
900013c2:	2b02      	cmp	r3, #2
900013c4:	d116      	bne.n	900013f4 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
900013c6:	4b18      	ldr	r3, [pc, #96]	; (90001428 <BSP_LCD_DrawPixel+0x88>)
900013c8:	681b      	ldr	r3, [r3, #0]
900013ca:	4a18      	ldr	r2, [pc, #96]	; (9000142c <BSP_LCD_DrawPixel+0x8c>)
900013cc:	2134      	movs	r1, #52	; 0x34
900013ce:	fb01 f303 	mul.w	r3, r1, r3
900013d2:	4413      	add	r3, r2
900013d4:	335c      	adds	r3, #92	; 0x5c
900013d6:	681c      	ldr	r4, [r3, #0]
900013d8:	88bd      	ldrh	r5, [r7, #4]
900013da:	f7ff fae3 	bl	900009a4 <BSP_LCD_GetXSize>
900013de:	4603      	mov	r3, r0
900013e0:	fb03 f205 	mul.w	r2, r3, r5
900013e4:	88fb      	ldrh	r3, [r7, #6]
900013e6:	4413      	add	r3, r2
900013e8:	005b      	lsls	r3, r3, #1
900013ea:	4423      	add	r3, r4
900013ec:	683a      	ldr	r2, [r7, #0]
900013ee:	b292      	uxth	r2, r2
900013f0:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
900013f2:	e015      	b.n	90001420 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
900013f4:	4b0c      	ldr	r3, [pc, #48]	; (90001428 <BSP_LCD_DrawPixel+0x88>)
900013f6:	681b      	ldr	r3, [r3, #0]
900013f8:	4a0c      	ldr	r2, [pc, #48]	; (9000142c <BSP_LCD_DrawPixel+0x8c>)
900013fa:	2134      	movs	r1, #52	; 0x34
900013fc:	fb01 f303 	mul.w	r3, r1, r3
90001400:	4413      	add	r3, r2
90001402:	335c      	adds	r3, #92	; 0x5c
90001404:	681c      	ldr	r4, [r3, #0]
90001406:	88bd      	ldrh	r5, [r7, #4]
90001408:	f7ff facc 	bl	900009a4 <BSP_LCD_GetXSize>
9000140c:	4603      	mov	r3, r0
9000140e:	fb03 f205 	mul.w	r2, r3, r5
90001412:	88fb      	ldrh	r3, [r7, #6]
90001414:	4413      	add	r3, r2
90001416:	009b      	lsls	r3, r3, #2
90001418:	4423      	add	r3, r4
9000141a:	461a      	mov	r2, r3
9000141c:	683b      	ldr	r3, [r7, #0]
9000141e:	6013      	str	r3, [r2, #0]
}
90001420:	bf00      	nop
90001422:	3708      	adds	r7, #8
90001424:	46bd      	mov	sp, r7
90001426:	bdb0      	pop	{r4, r5, r7, pc}
90001428:	20000074 	.word	0x20000074
9000142c:	200001a0 	.word	0x200001a0

90001430 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
90001430:	b580      	push	{r7, lr}
90001432:	b086      	sub	sp, #24
90001434:	af00      	add	r7, sp, #0
90001436:	4603      	mov	r3, r0
90001438:	80fb      	strh	r3, [r7, #6]
9000143a:	460b      	mov	r3, r1
9000143c:	80bb      	strh	r3, [r7, #4]
9000143e:	4613      	mov	r3, r2
90001440:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
90001442:	887b      	ldrh	r3, [r7, #2]
90001444:	005b      	lsls	r3, r3, #1
90001446:	f1c3 0303 	rsb	r3, r3, #3
9000144a:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
9000144c:	2300      	movs	r3, #0
9000144e:	613b      	str	r3, [r7, #16]
  current_y = Radius;
90001450:	887b      	ldrh	r3, [r7, #2]
90001452:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001454:	4b44      	ldr	r3, [pc, #272]	; (90001568 <BSP_LCD_FillCircle+0x138>)
90001456:	681a      	ldr	r2, [r3, #0]
90001458:	4944      	ldr	r1, [pc, #272]	; (9000156c <BSP_LCD_FillCircle+0x13c>)
9000145a:	4613      	mov	r3, r2
9000145c:	005b      	lsls	r3, r3, #1
9000145e:	4413      	add	r3, r2
90001460:	009b      	lsls	r3, r3, #2
90001462:	440b      	add	r3, r1
90001464:	681b      	ldr	r3, [r3, #0]
90001466:	4618      	mov	r0, r3
90001468:	f7ff fb34 	bl	90000ad4 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
9000146c:	e061      	b.n	90001532 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
9000146e:	68fb      	ldr	r3, [r7, #12]
90001470:	2b00      	cmp	r3, #0
90001472:	d021      	beq.n	900014b8 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
90001474:	68fb      	ldr	r3, [r7, #12]
90001476:	b29b      	uxth	r3, r3
90001478:	88fa      	ldrh	r2, [r7, #6]
9000147a:	1ad3      	subs	r3, r2, r3
9000147c:	b298      	uxth	r0, r3
9000147e:	693b      	ldr	r3, [r7, #16]
90001480:	b29a      	uxth	r2, r3
90001482:	88bb      	ldrh	r3, [r7, #4]
90001484:	4413      	add	r3, r2
90001486:	b299      	uxth	r1, r3
90001488:	68fb      	ldr	r3, [r7, #12]
9000148a:	b29b      	uxth	r3, r3
9000148c:	005b      	lsls	r3, r3, #1
9000148e:	b29b      	uxth	r3, r3
90001490:	461a      	mov	r2, r3
90001492:	f7ff fcb5 	bl	90000e00 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
90001496:	68fb      	ldr	r3, [r7, #12]
90001498:	b29b      	uxth	r3, r3
9000149a:	88fa      	ldrh	r2, [r7, #6]
9000149c:	1ad3      	subs	r3, r2, r3
9000149e:	b298      	uxth	r0, r3
900014a0:	693b      	ldr	r3, [r7, #16]
900014a2:	b29b      	uxth	r3, r3
900014a4:	88ba      	ldrh	r2, [r7, #4]
900014a6:	1ad3      	subs	r3, r2, r3
900014a8:	b299      	uxth	r1, r3
900014aa:	68fb      	ldr	r3, [r7, #12]
900014ac:	b29b      	uxth	r3, r3
900014ae:	005b      	lsls	r3, r3, #1
900014b0:	b29b      	uxth	r3, r3
900014b2:	461a      	mov	r2, r3
900014b4:	f7ff fca4 	bl	90000e00 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
900014b8:	693b      	ldr	r3, [r7, #16]
900014ba:	2b00      	cmp	r3, #0
900014bc:	d021      	beq.n	90001502 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
900014be:	693b      	ldr	r3, [r7, #16]
900014c0:	b29b      	uxth	r3, r3
900014c2:	88fa      	ldrh	r2, [r7, #6]
900014c4:	1ad3      	subs	r3, r2, r3
900014c6:	b298      	uxth	r0, r3
900014c8:	68fb      	ldr	r3, [r7, #12]
900014ca:	b29b      	uxth	r3, r3
900014cc:	88ba      	ldrh	r2, [r7, #4]
900014ce:	1ad3      	subs	r3, r2, r3
900014d0:	b299      	uxth	r1, r3
900014d2:	693b      	ldr	r3, [r7, #16]
900014d4:	b29b      	uxth	r3, r3
900014d6:	005b      	lsls	r3, r3, #1
900014d8:	b29b      	uxth	r3, r3
900014da:	461a      	mov	r2, r3
900014dc:	f7ff fc90 	bl	90000e00 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
900014e0:	693b      	ldr	r3, [r7, #16]
900014e2:	b29b      	uxth	r3, r3
900014e4:	88fa      	ldrh	r2, [r7, #6]
900014e6:	1ad3      	subs	r3, r2, r3
900014e8:	b298      	uxth	r0, r3
900014ea:	68fb      	ldr	r3, [r7, #12]
900014ec:	b29a      	uxth	r2, r3
900014ee:	88bb      	ldrh	r3, [r7, #4]
900014f0:	4413      	add	r3, r2
900014f2:	b299      	uxth	r1, r3
900014f4:	693b      	ldr	r3, [r7, #16]
900014f6:	b29b      	uxth	r3, r3
900014f8:	005b      	lsls	r3, r3, #1
900014fa:	b29b      	uxth	r3, r3
900014fc:	461a      	mov	r2, r3
900014fe:	f7ff fc7f 	bl	90000e00 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
90001502:	697b      	ldr	r3, [r7, #20]
90001504:	2b00      	cmp	r3, #0
90001506:	da06      	bge.n	90001516 <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
90001508:	693b      	ldr	r3, [r7, #16]
9000150a:	009a      	lsls	r2, r3, #2
9000150c:	697b      	ldr	r3, [r7, #20]
9000150e:	4413      	add	r3, r2
90001510:	3306      	adds	r3, #6
90001512:	617b      	str	r3, [r7, #20]
90001514:	e00a      	b.n	9000152c <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
90001516:	693a      	ldr	r2, [r7, #16]
90001518:	68fb      	ldr	r3, [r7, #12]
9000151a:	1ad3      	subs	r3, r2, r3
9000151c:	009a      	lsls	r2, r3, #2
9000151e:	697b      	ldr	r3, [r7, #20]
90001520:	4413      	add	r3, r2
90001522:	330a      	adds	r3, #10
90001524:	617b      	str	r3, [r7, #20]
      current_y--;
90001526:	68fb      	ldr	r3, [r7, #12]
90001528:	3b01      	subs	r3, #1
9000152a:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
9000152c:	693b      	ldr	r3, [r7, #16]
9000152e:	3301      	adds	r3, #1
90001530:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
90001532:	693a      	ldr	r2, [r7, #16]
90001534:	68fb      	ldr	r3, [r7, #12]
90001536:	429a      	cmp	r2, r3
90001538:	d999      	bls.n	9000146e <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
9000153a:	4b0b      	ldr	r3, [pc, #44]	; (90001568 <BSP_LCD_FillCircle+0x138>)
9000153c:	681a      	ldr	r2, [r3, #0]
9000153e:	490b      	ldr	r1, [pc, #44]	; (9000156c <BSP_LCD_FillCircle+0x13c>)
90001540:	4613      	mov	r3, r2
90001542:	005b      	lsls	r3, r3, #1
90001544:	4413      	add	r3, r2
90001546:	009b      	lsls	r3, r3, #2
90001548:	440b      	add	r3, r1
9000154a:	681b      	ldr	r3, [r3, #0]
9000154c:	4618      	mov	r0, r3
9000154e:	f7ff fac1 	bl	90000ad4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
90001552:	887a      	ldrh	r2, [r7, #2]
90001554:	88b9      	ldrh	r1, [r7, #4]
90001556:	88fb      	ldrh	r3, [r7, #6]
90001558:	4618      	mov	r0, r3
9000155a:	f7ff fd43 	bl	90000fe4 <BSP_LCD_DrawCircle>
}
9000155e:	bf00      	nop
90001560:	3718      	adds	r7, #24
90001562:	46bd      	mov	sp, r7
90001564:	bd80      	pop	{r7, pc}
90001566:	bf00      	nop
90001568:	20000074 	.word	0x20000074
9000156c:	20000078 	.word	0x20000078

90001570 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
90001570:	b580      	push	{r7, lr}
90001572:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
90001574:	4b0a      	ldr	r3, [pc, #40]	; (900015a0 <BSP_LCD_DisplayOn+0x30>)
90001576:	681b      	ldr	r3, [r3, #0]
90001578:	699a      	ldr	r2, [r3, #24]
9000157a:	4b09      	ldr	r3, [pc, #36]	; (900015a0 <BSP_LCD_DisplayOn+0x30>)
9000157c:	681b      	ldr	r3, [r3, #0]
9000157e:	f042 0201 	orr.w	r2, r2, #1
90001582:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
90001584:	2201      	movs	r2, #1
90001586:	f44f 5180 	mov.w	r1, #4096	; 0x1000
9000158a:	4806      	ldr	r0, [pc, #24]	; (900015a4 <BSP_LCD_DisplayOn+0x34>)
9000158c:	f001 fb5a 	bl	90002c44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
90001590:	2201      	movs	r2, #1
90001592:	2108      	movs	r1, #8
90001594:	4804      	ldr	r0, [pc, #16]	; (900015a8 <BSP_LCD_DisplayOn+0x38>)
90001596:	f001 fb55 	bl	90002c44 <HAL_GPIO_WritePin>
}
9000159a:	bf00      	nop
9000159c:	bd80      	pop	{r7, pc}
9000159e:	bf00      	nop
900015a0:	200001a0 	.word	0x200001a0
900015a4:	40022000 	.word	0x40022000
900015a8:	40022800 	.word	0x40022800

900015ac <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
900015ac:	b580      	push	{r7, lr}
900015ae:	b090      	sub	sp, #64	; 0x40
900015b0:	af00      	add	r7, sp, #0
900015b2:	6078      	str	r0, [r7, #4]
900015b4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
900015b6:	4b64      	ldr	r3, [pc, #400]	; (90001748 <BSP_LCD_MspInit+0x19c>)
900015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900015ba:	4a63      	ldr	r2, [pc, #396]	; (90001748 <BSP_LCD_MspInit+0x19c>)
900015bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
900015c0:	6453      	str	r3, [r2, #68]	; 0x44
900015c2:	4b61      	ldr	r3, [pc, #388]	; (90001748 <BSP_LCD_MspInit+0x19c>)
900015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900015c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
900015ca:	62bb      	str	r3, [r7, #40]	; 0x28
900015cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
900015ce:	4b5e      	ldr	r3, [pc, #376]	; (90001748 <BSP_LCD_MspInit+0x19c>)
900015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900015d2:	4a5d      	ldr	r2, [pc, #372]	; (90001748 <BSP_LCD_MspInit+0x19c>)
900015d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
900015d8:	6313      	str	r3, [r2, #48]	; 0x30
900015da:	4b5b      	ldr	r3, [pc, #364]	; (90001748 <BSP_LCD_MspInit+0x19c>)
900015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900015de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
900015e2:	627b      	str	r3, [r7, #36]	; 0x24
900015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
900015e6:	4b58      	ldr	r3, [pc, #352]	; (90001748 <BSP_LCD_MspInit+0x19c>)
900015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900015ea:	4a57      	ldr	r2, [pc, #348]	; (90001748 <BSP_LCD_MspInit+0x19c>)
900015ec:	f043 0310 	orr.w	r3, r3, #16
900015f0:	6313      	str	r3, [r2, #48]	; 0x30
900015f2:	4b55      	ldr	r3, [pc, #340]	; (90001748 <BSP_LCD_MspInit+0x19c>)
900015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900015f6:	f003 0310 	and.w	r3, r3, #16
900015fa:	623b      	str	r3, [r7, #32]
900015fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
900015fe:	4b52      	ldr	r3, [pc, #328]	; (90001748 <BSP_LCD_MspInit+0x19c>)
90001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001602:	4a51      	ldr	r2, [pc, #324]	; (90001748 <BSP_LCD_MspInit+0x19c>)
90001604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90001608:	6313      	str	r3, [r2, #48]	; 0x30
9000160a:	4b4f      	ldr	r3, [pc, #316]	; (90001748 <BSP_LCD_MspInit+0x19c>)
9000160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000160e:	f003 0340 	and.w	r3, r3, #64	; 0x40
90001612:	61fb      	str	r3, [r7, #28]
90001614:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
90001616:	4b4c      	ldr	r3, [pc, #304]	; (90001748 <BSP_LCD_MspInit+0x19c>)
90001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000161a:	4a4b      	ldr	r2, [pc, #300]	; (90001748 <BSP_LCD_MspInit+0x19c>)
9000161c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90001620:	6313      	str	r3, [r2, #48]	; 0x30
90001622:	4b49      	ldr	r3, [pc, #292]	; (90001748 <BSP_LCD_MspInit+0x19c>)
90001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001626:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000162a:	61bb      	str	r3, [r7, #24]
9000162c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
9000162e:	4b46      	ldr	r3, [pc, #280]	; (90001748 <BSP_LCD_MspInit+0x19c>)
90001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001632:	4a45      	ldr	r2, [pc, #276]	; (90001748 <BSP_LCD_MspInit+0x19c>)
90001634:	f443 7300 	orr.w	r3, r3, #512	; 0x200
90001638:	6313      	str	r3, [r2, #48]	; 0x30
9000163a:	4b43      	ldr	r3, [pc, #268]	; (90001748 <BSP_LCD_MspInit+0x19c>)
9000163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000163e:	f403 7300 	and.w	r3, r3, #512	; 0x200
90001642:	617b      	str	r3, [r7, #20]
90001644:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
90001646:	4b40      	ldr	r3, [pc, #256]	; (90001748 <BSP_LCD_MspInit+0x19c>)
90001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000164a:	4a3f      	ldr	r2, [pc, #252]	; (90001748 <BSP_LCD_MspInit+0x19c>)
9000164c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
90001650:	6313      	str	r3, [r2, #48]	; 0x30
90001652:	4b3d      	ldr	r3, [pc, #244]	; (90001748 <BSP_LCD_MspInit+0x19c>)
90001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
9000165a:	613b      	str	r3, [r7, #16]
9000165c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
9000165e:	4b3a      	ldr	r3, [pc, #232]	; (90001748 <BSP_LCD_MspInit+0x19c>)
90001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001662:	4a39      	ldr	r2, [pc, #228]	; (90001748 <BSP_LCD_MspInit+0x19c>)
90001664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90001668:	6313      	str	r3, [r2, #48]	; 0x30
9000166a:	4b37      	ldr	r3, [pc, #220]	; (90001748 <BSP_LCD_MspInit+0x19c>)
9000166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000166e:	f403 7380 	and.w	r3, r3, #256	; 0x100
90001672:	60fb      	str	r3, [r7, #12]
90001674:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
90001676:	4b34      	ldr	r3, [pc, #208]	; (90001748 <BSP_LCD_MspInit+0x19c>)
90001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000167a:	4a33      	ldr	r2, [pc, #204]	; (90001748 <BSP_LCD_MspInit+0x19c>)
9000167c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
90001680:	6313      	str	r3, [r2, #48]	; 0x30
90001682:	4b31      	ldr	r3, [pc, #196]	; (90001748 <BSP_LCD_MspInit+0x19c>)
90001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
9000168a:	60bb      	str	r3, [r7, #8]
9000168c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
9000168e:	2310      	movs	r3, #16
90001690:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001692:	2302      	movs	r3, #2
90001694:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001696:	2300      	movs	r3, #0
90001698:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
9000169a:	2302      	movs	r3, #2
9000169c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
9000169e:	230e      	movs	r3, #14
900016a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
900016a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900016a6:	4619      	mov	r1, r3
900016a8:	4828      	ldr	r0, [pc, #160]	; (9000174c <BSP_LCD_MspInit+0x1a0>)
900016aa:	f001 f91f 	bl	900028ec <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
900016ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
900016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
900016b4:	2302      	movs	r3, #2
900016b6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
900016b8:	2309      	movs	r3, #9
900016ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
900016bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900016c0:	4619      	mov	r1, r3
900016c2:	4823      	ldr	r0, [pc, #140]	; (90001750 <BSP_LCD_MspInit+0x1a4>)
900016c4:	f001 f912 	bl	900028ec <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
900016c8:	f44f 4366 	mov.w	r3, #58880	; 0xe600
900016cc:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
900016ce:	2302      	movs	r3, #2
900016d0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
900016d2:	230e      	movs	r3, #14
900016d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
900016d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900016da:	4619      	mov	r1, r3
900016dc:	481d      	ldr	r0, [pc, #116]	; (90001754 <BSP_LCD_MspInit+0x1a8>)
900016de:	f001 f905 	bl	900028ec <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
900016e2:	f64e 73ff 	movw	r3, #61439	; 0xefff
900016e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
900016e8:	2302      	movs	r3, #2
900016ea:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
900016ec:	230e      	movs	r3, #14
900016ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
900016f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900016f4:	4619      	mov	r1, r3
900016f6:	4818      	ldr	r0, [pc, #96]	; (90001758 <BSP_LCD_MspInit+0x1ac>)
900016f8:	f001 f8f8 	bl	900028ec <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
900016fc:	23f7      	movs	r3, #247	; 0xf7
900016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001700:	2302      	movs	r3, #2
90001702:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90001704:	230e      	movs	r3, #14
90001706:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
90001708:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000170c:	4619      	mov	r1, r3
9000170e:	4813      	ldr	r0, [pc, #76]	; (9000175c <BSP_LCD_MspInit+0x1b0>)
90001710:	f001 f8ec 	bl	900028ec <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
90001714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90001718:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
9000171a:	2301      	movs	r3, #1
9000171c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
9000171e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001722:	4619      	mov	r1, r3
90001724:	480b      	ldr	r0, [pc, #44]	; (90001754 <BSP_LCD_MspInit+0x1a8>)
90001726:	f001 f8e1 	bl	900028ec <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
9000172a:	2308      	movs	r3, #8
9000172c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
9000172e:	2301      	movs	r3, #1
90001730:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
90001732:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001736:	4619      	mov	r1, r3
90001738:	4808      	ldr	r0, [pc, #32]	; (9000175c <BSP_LCD_MspInit+0x1b0>)
9000173a:	f001 f8d7 	bl	900028ec <HAL_GPIO_Init>
}
9000173e:	bf00      	nop
90001740:	3740      	adds	r7, #64	; 0x40
90001742:	46bd      	mov	sp, r7
90001744:	bd80      	pop	{r7, pc}
90001746:	bf00      	nop
90001748:	40023800 	.word	0x40023800
9000174c:	40021000 	.word	0x40021000
90001750:	40021800 	.word	0x40021800
90001754:	40022000 	.word	0x40022000
90001758:	40022400 	.word	0x40022400
9000175c:	40022800 	.word	0x40022800

90001760 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
90001760:	b580      	push	{r7, lr}
90001762:	b082      	sub	sp, #8
90001764:	af00      	add	r7, sp, #0
90001766:	6078      	str	r0, [r7, #4]
90001768:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
9000176a:	4b0a      	ldr	r3, [pc, #40]	; (90001794 <BSP_LCD_ClockConfig+0x34>)
9000176c:	2208      	movs	r2, #8
9000176e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
90001770:	4b08      	ldr	r3, [pc, #32]	; (90001794 <BSP_LCD_ClockConfig+0x34>)
90001772:	22c0      	movs	r2, #192	; 0xc0
90001774:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
90001776:	4b07      	ldr	r3, [pc, #28]	; (90001794 <BSP_LCD_ClockConfig+0x34>)
90001778:	2205      	movs	r2, #5
9000177a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
9000177c:	4b05      	ldr	r3, [pc, #20]	; (90001794 <BSP_LCD_ClockConfig+0x34>)
9000177e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
90001782:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
90001784:	4803      	ldr	r0, [pc, #12]	; (90001794 <BSP_LCD_ClockConfig+0x34>)
90001786:	f002 f9e7 	bl	90003b58 <HAL_RCCEx_PeriphCLKConfig>
}
9000178a:	bf00      	nop
9000178c:	3708      	adds	r7, #8
9000178e:	46bd      	mov	sp, r7
90001790:	bd80      	pop	{r7, pc}
90001792:	bf00      	nop
90001794:	20000090 	.word	0x20000090

90001798 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
90001798:	b580      	push	{r7, lr}
9000179a:	b088      	sub	sp, #32
9000179c:	af00      	add	r7, sp, #0
9000179e:	4603      	mov	r3, r0
900017a0:	603a      	str	r2, [r7, #0]
900017a2:	80fb      	strh	r3, [r7, #6]
900017a4:	460b      	mov	r3, r1
900017a6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
900017a8:	2300      	movs	r3, #0
900017aa:	61fb      	str	r3, [r7, #28]
900017ac:	2300      	movs	r3, #0
900017ae:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
900017b0:	4b53      	ldr	r3, [pc, #332]	; (90001900 <DrawChar+0x168>)
900017b2:	681a      	ldr	r2, [r3, #0]
900017b4:	4953      	ldr	r1, [pc, #332]	; (90001904 <DrawChar+0x16c>)
900017b6:	4613      	mov	r3, r2
900017b8:	005b      	lsls	r3, r3, #1
900017ba:	4413      	add	r3, r2
900017bc:	009b      	lsls	r3, r3, #2
900017be:	440b      	add	r3, r1
900017c0:	3308      	adds	r3, #8
900017c2:	681b      	ldr	r3, [r3, #0]
900017c4:	88db      	ldrh	r3, [r3, #6]
900017c6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
900017c8:	4b4d      	ldr	r3, [pc, #308]	; (90001900 <DrawChar+0x168>)
900017ca:	681a      	ldr	r2, [r3, #0]
900017cc:	494d      	ldr	r1, [pc, #308]	; (90001904 <DrawChar+0x16c>)
900017ce:	4613      	mov	r3, r2
900017d0:	005b      	lsls	r3, r3, #1
900017d2:	4413      	add	r3, r2
900017d4:	009b      	lsls	r3, r3, #2
900017d6:	440b      	add	r3, r1
900017d8:	3308      	adds	r3, #8
900017da:	681b      	ldr	r3, [r3, #0]
900017dc:	889b      	ldrh	r3, [r3, #4]
900017de:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
900017e0:	8a3b      	ldrh	r3, [r7, #16]
900017e2:	3307      	adds	r3, #7
900017e4:	2b00      	cmp	r3, #0
900017e6:	da00      	bge.n	900017ea <DrawChar+0x52>
900017e8:	3307      	adds	r3, #7
900017ea:	10db      	asrs	r3, r3, #3
900017ec:	b2db      	uxtb	r3, r3
900017ee:	00db      	lsls	r3, r3, #3
900017f0:	b2da      	uxtb	r2, r3
900017f2:	8a3b      	ldrh	r3, [r7, #16]
900017f4:	b2db      	uxtb	r3, r3
900017f6:	1ad3      	subs	r3, r2, r3
900017f8:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
900017fa:	2300      	movs	r3, #0
900017fc:	61fb      	str	r3, [r7, #28]
900017fe:	e076      	b.n	900018ee <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
90001800:	8a3b      	ldrh	r3, [r7, #16]
90001802:	3307      	adds	r3, #7
90001804:	2b00      	cmp	r3, #0
90001806:	da00      	bge.n	9000180a <DrawChar+0x72>
90001808:	3307      	adds	r3, #7
9000180a:	10db      	asrs	r3, r3, #3
9000180c:	461a      	mov	r2, r3
9000180e:	69fb      	ldr	r3, [r7, #28]
90001810:	fb03 f302 	mul.w	r3, r3, r2
90001814:	683a      	ldr	r2, [r7, #0]
90001816:	4413      	add	r3, r2
90001818:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
9000181a:	8a3b      	ldrh	r3, [r7, #16]
9000181c:	3307      	adds	r3, #7
9000181e:	2b00      	cmp	r3, #0
90001820:	da00      	bge.n	90001824 <DrawChar+0x8c>
90001822:	3307      	adds	r3, #7
90001824:	10db      	asrs	r3, r3, #3
90001826:	2b01      	cmp	r3, #1
90001828:	d002      	beq.n	90001830 <DrawChar+0x98>
9000182a:	2b02      	cmp	r3, #2
9000182c:	d004      	beq.n	90001838 <DrawChar+0xa0>
9000182e:	e00c      	b.n	9000184a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
90001830:	68bb      	ldr	r3, [r7, #8]
90001832:	781b      	ldrb	r3, [r3, #0]
90001834:	617b      	str	r3, [r7, #20]
      break;
90001836:	e016      	b.n	90001866 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
90001838:	68bb      	ldr	r3, [r7, #8]
9000183a:	781b      	ldrb	r3, [r3, #0]
9000183c:	021b      	lsls	r3, r3, #8
9000183e:	68ba      	ldr	r2, [r7, #8]
90001840:	3201      	adds	r2, #1
90001842:	7812      	ldrb	r2, [r2, #0]
90001844:	4313      	orrs	r3, r2
90001846:	617b      	str	r3, [r7, #20]
      break;
90001848:	e00d      	b.n	90001866 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
9000184a:	68bb      	ldr	r3, [r7, #8]
9000184c:	781b      	ldrb	r3, [r3, #0]
9000184e:	041a      	lsls	r2, r3, #16
90001850:	68bb      	ldr	r3, [r7, #8]
90001852:	3301      	adds	r3, #1
90001854:	781b      	ldrb	r3, [r3, #0]
90001856:	021b      	lsls	r3, r3, #8
90001858:	4313      	orrs	r3, r2
9000185a:	68ba      	ldr	r2, [r7, #8]
9000185c:	3202      	adds	r2, #2
9000185e:	7812      	ldrb	r2, [r2, #0]
90001860:	4313      	orrs	r3, r2
90001862:	617b      	str	r3, [r7, #20]
      break;
90001864:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
90001866:	2300      	movs	r3, #0
90001868:	61bb      	str	r3, [r7, #24]
9000186a:	e036      	b.n	900018da <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
9000186c:	8a3a      	ldrh	r2, [r7, #16]
9000186e:	69bb      	ldr	r3, [r7, #24]
90001870:	1ad2      	subs	r2, r2, r3
90001872:	7bfb      	ldrb	r3, [r7, #15]
90001874:	4413      	add	r3, r2
90001876:	3b01      	subs	r3, #1
90001878:	2201      	movs	r2, #1
9000187a:	fa02 f303 	lsl.w	r3, r2, r3
9000187e:	461a      	mov	r2, r3
90001880:	697b      	ldr	r3, [r7, #20]
90001882:	4013      	ands	r3, r2
90001884:	2b00      	cmp	r3, #0
90001886:	d012      	beq.n	900018ae <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
90001888:	69bb      	ldr	r3, [r7, #24]
9000188a:	b29a      	uxth	r2, r3
9000188c:	88fb      	ldrh	r3, [r7, #6]
9000188e:	4413      	add	r3, r2
90001890:	b298      	uxth	r0, r3
90001892:	4b1b      	ldr	r3, [pc, #108]	; (90001900 <DrawChar+0x168>)
90001894:	681a      	ldr	r2, [r3, #0]
90001896:	491b      	ldr	r1, [pc, #108]	; (90001904 <DrawChar+0x16c>)
90001898:	4613      	mov	r3, r2
9000189a:	005b      	lsls	r3, r3, #1
9000189c:	4413      	add	r3, r2
9000189e:	009b      	lsls	r3, r3, #2
900018a0:	440b      	add	r3, r1
900018a2:	681a      	ldr	r2, [r3, #0]
900018a4:	88bb      	ldrh	r3, [r7, #4]
900018a6:	4619      	mov	r1, r3
900018a8:	f7ff fd7a 	bl	900013a0 <BSP_LCD_DrawPixel>
900018ac:	e012      	b.n	900018d4 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
900018ae:	69bb      	ldr	r3, [r7, #24]
900018b0:	b29a      	uxth	r2, r3
900018b2:	88fb      	ldrh	r3, [r7, #6]
900018b4:	4413      	add	r3, r2
900018b6:	b298      	uxth	r0, r3
900018b8:	4b11      	ldr	r3, [pc, #68]	; (90001900 <DrawChar+0x168>)
900018ba:	681a      	ldr	r2, [r3, #0]
900018bc:	4911      	ldr	r1, [pc, #68]	; (90001904 <DrawChar+0x16c>)
900018be:	4613      	mov	r3, r2
900018c0:	005b      	lsls	r3, r3, #1
900018c2:	4413      	add	r3, r2
900018c4:	009b      	lsls	r3, r3, #2
900018c6:	440b      	add	r3, r1
900018c8:	3304      	adds	r3, #4
900018ca:	681a      	ldr	r2, [r3, #0]
900018cc:	88bb      	ldrh	r3, [r7, #4]
900018ce:	4619      	mov	r1, r3
900018d0:	f7ff fd66 	bl	900013a0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
900018d4:	69bb      	ldr	r3, [r7, #24]
900018d6:	3301      	adds	r3, #1
900018d8:	61bb      	str	r3, [r7, #24]
900018da:	8a3b      	ldrh	r3, [r7, #16]
900018dc:	69ba      	ldr	r2, [r7, #24]
900018de:	429a      	cmp	r2, r3
900018e0:	d3c4      	bcc.n	9000186c <DrawChar+0xd4>
      } 
    }
    Ypos++;
900018e2:	88bb      	ldrh	r3, [r7, #4]
900018e4:	3301      	adds	r3, #1
900018e6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
900018e8:	69fb      	ldr	r3, [r7, #28]
900018ea:	3301      	adds	r3, #1
900018ec:	61fb      	str	r3, [r7, #28]
900018ee:	8a7b      	ldrh	r3, [r7, #18]
900018f0:	69fa      	ldr	r2, [r7, #28]
900018f2:	429a      	cmp	r2, r3
900018f4:	d384      	bcc.n	90001800 <DrawChar+0x68>
  }
}
900018f6:	bf00      	nop
900018f8:	bf00      	nop
900018fa:	3720      	adds	r7, #32
900018fc:	46bd      	mov	sp, r7
900018fe:	bd80      	pop	{r7, pc}
90001900:	20000074 	.word	0x20000074
90001904:	20000078 	.word	0x20000078

90001908 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
90001908:	b580      	push	{r7, lr}
9000190a:	b086      	sub	sp, #24
9000190c:	af02      	add	r7, sp, #8
9000190e:	60f8      	str	r0, [r7, #12]
90001910:	60b9      	str	r1, [r7, #8]
90001912:	607a      	str	r2, [r7, #4]
90001914:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
90001916:	4b1e      	ldr	r3, [pc, #120]	; (90001990 <LL_FillBuffer+0x88>)
90001918:	f44f 3240 	mov.w	r2, #196608	; 0x30000
9000191c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
9000191e:	4b1d      	ldr	r3, [pc, #116]	; (90001994 <LL_FillBuffer+0x8c>)
90001920:	681b      	ldr	r3, [r3, #0]
90001922:	4a1d      	ldr	r2, [pc, #116]	; (90001998 <LL_FillBuffer+0x90>)
90001924:	2134      	movs	r1, #52	; 0x34
90001926:	fb01 f303 	mul.w	r3, r1, r3
9000192a:	4413      	add	r3, r2
9000192c:	3348      	adds	r3, #72	; 0x48
9000192e:	681b      	ldr	r3, [r3, #0]
90001930:	2b02      	cmp	r3, #2
90001932:	d103      	bne.n	9000193c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
90001934:	4b16      	ldr	r3, [pc, #88]	; (90001990 <LL_FillBuffer+0x88>)
90001936:	2202      	movs	r2, #2
90001938:	609a      	str	r2, [r3, #8]
9000193a:	e002      	b.n	90001942 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
9000193c:	4b14      	ldr	r3, [pc, #80]	; (90001990 <LL_FillBuffer+0x88>)
9000193e:	2200      	movs	r2, #0
90001940:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
90001942:	4a13      	ldr	r2, [pc, #76]	; (90001990 <LL_FillBuffer+0x88>)
90001944:	69bb      	ldr	r3, [r7, #24]
90001946:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
90001948:	4b11      	ldr	r3, [pc, #68]	; (90001990 <LL_FillBuffer+0x88>)
9000194a:	4a14      	ldr	r2, [pc, #80]	; (9000199c <LL_FillBuffer+0x94>)
9000194c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
9000194e:	4810      	ldr	r0, [pc, #64]	; (90001990 <LL_FillBuffer+0x88>)
90001950:	f000 fd36 	bl	900023c0 <HAL_DMA2D_Init>
90001954:	4603      	mov	r3, r0
90001956:	2b00      	cmp	r3, #0
90001958:	d115      	bne.n	90001986 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
9000195a:	68f9      	ldr	r1, [r7, #12]
9000195c:	480c      	ldr	r0, [pc, #48]	; (90001990 <LL_FillBuffer+0x88>)
9000195e:	f000 fe97 	bl	90002690 <HAL_DMA2D_ConfigLayer>
90001962:	4603      	mov	r3, r0
90001964:	2b00      	cmp	r3, #0
90001966:	d10e      	bne.n	90001986 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
90001968:	68ba      	ldr	r2, [r7, #8]
9000196a:	683b      	ldr	r3, [r7, #0]
9000196c:	9300      	str	r3, [sp, #0]
9000196e:	687b      	ldr	r3, [r7, #4]
90001970:	69f9      	ldr	r1, [r7, #28]
90001972:	4807      	ldr	r0, [pc, #28]	; (90001990 <LL_FillBuffer+0x88>)
90001974:	f000 fd78 	bl	90002468 <HAL_DMA2D_Start>
90001978:	4603      	mov	r3, r0
9000197a:	2b00      	cmp	r3, #0
9000197c:	d103      	bne.n	90001986 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
9000197e:	210a      	movs	r1, #10
90001980:	4803      	ldr	r0, [pc, #12]	; (90001990 <LL_FillBuffer+0x88>)
90001982:	f000 fd9c 	bl	900024be <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
90001986:	bf00      	nop
90001988:	3710      	adds	r7, #16
9000198a:	46bd      	mov	sp, r7
9000198c:	bd80      	pop	{r7, pc}
9000198e:	bf00      	nop
90001990:	20000034 	.word	0x20000034
90001994:	20000074 	.word	0x20000074
90001998:	200001a0 	.word	0x200001a0
9000199c:	4002b000 	.word	0x4002b000

900019a0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
900019a0:	b580      	push	{r7, lr}
900019a2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
900019a4:	4b29      	ldr	r3, [pc, #164]	; (90001a4c <BSP_SDRAM_Init+0xac>)
900019a6:	4a2a      	ldr	r2, [pc, #168]	; (90001a50 <BSP_SDRAM_Init+0xb0>)
900019a8:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
900019aa:	4b2a      	ldr	r3, [pc, #168]	; (90001a54 <BSP_SDRAM_Init+0xb4>)
900019ac:	2202      	movs	r2, #2
900019ae:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
900019b0:	4b28      	ldr	r3, [pc, #160]	; (90001a54 <BSP_SDRAM_Init+0xb4>)
900019b2:	2207      	movs	r2, #7
900019b4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
900019b6:	4b27      	ldr	r3, [pc, #156]	; (90001a54 <BSP_SDRAM_Init+0xb4>)
900019b8:	2204      	movs	r2, #4
900019ba:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
900019bc:	4b25      	ldr	r3, [pc, #148]	; (90001a54 <BSP_SDRAM_Init+0xb4>)
900019be:	2207      	movs	r2, #7
900019c0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
900019c2:	4b24      	ldr	r3, [pc, #144]	; (90001a54 <BSP_SDRAM_Init+0xb4>)
900019c4:	2202      	movs	r2, #2
900019c6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
900019c8:	4b22      	ldr	r3, [pc, #136]	; (90001a54 <BSP_SDRAM_Init+0xb4>)
900019ca:	2202      	movs	r2, #2
900019cc:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
900019ce:	4b21      	ldr	r3, [pc, #132]	; (90001a54 <BSP_SDRAM_Init+0xb4>)
900019d0:	2202      	movs	r2, #2
900019d2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
900019d4:	4b1d      	ldr	r3, [pc, #116]	; (90001a4c <BSP_SDRAM_Init+0xac>)
900019d6:	2200      	movs	r2, #0
900019d8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
900019da:	4b1c      	ldr	r3, [pc, #112]	; (90001a4c <BSP_SDRAM_Init+0xac>)
900019dc:	2200      	movs	r2, #0
900019de:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
900019e0:	4b1a      	ldr	r3, [pc, #104]	; (90001a4c <BSP_SDRAM_Init+0xac>)
900019e2:	2204      	movs	r2, #4
900019e4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
900019e6:	4b19      	ldr	r3, [pc, #100]	; (90001a4c <BSP_SDRAM_Init+0xac>)
900019e8:	2210      	movs	r2, #16
900019ea:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
900019ec:	4b17      	ldr	r3, [pc, #92]	; (90001a4c <BSP_SDRAM_Init+0xac>)
900019ee:	2240      	movs	r2, #64	; 0x40
900019f0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
900019f2:	4b16      	ldr	r3, [pc, #88]	; (90001a4c <BSP_SDRAM_Init+0xac>)
900019f4:	f44f 7280 	mov.w	r2, #256	; 0x100
900019f8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
900019fa:	4b14      	ldr	r3, [pc, #80]	; (90001a4c <BSP_SDRAM_Init+0xac>)
900019fc:	2200      	movs	r2, #0
900019fe:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
90001a00:	4b12      	ldr	r3, [pc, #72]	; (90001a4c <BSP_SDRAM_Init+0xac>)
90001a02:	f44f 6200 	mov.w	r2, #2048	; 0x800
90001a06:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90001a08:	4b10      	ldr	r3, [pc, #64]	; (90001a4c <BSP_SDRAM_Init+0xac>)
90001a0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
90001a0e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90001a10:	4b0e      	ldr	r3, [pc, #56]	; (90001a4c <BSP_SDRAM_Init+0xac>)
90001a12:	2200      	movs	r2, #0
90001a14:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
90001a16:	2100      	movs	r1, #0
90001a18:	480c      	ldr	r0, [pc, #48]	; (90001a4c <BSP_SDRAM_Init+0xac>)
90001a1a:	f000 f87f 	bl	90001b1c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
90001a1e:	490d      	ldr	r1, [pc, #52]	; (90001a54 <BSP_SDRAM_Init+0xb4>)
90001a20:	480a      	ldr	r0, [pc, #40]	; (90001a4c <BSP_SDRAM_Init+0xac>)
90001a22:	f002 fc89 	bl	90004338 <HAL_SDRAM_Init>
90001a26:	4603      	mov	r3, r0
90001a28:	2b00      	cmp	r3, #0
90001a2a:	d003      	beq.n	90001a34 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
90001a2c:	4b0a      	ldr	r3, [pc, #40]	; (90001a58 <BSP_SDRAM_Init+0xb8>)
90001a2e:	2201      	movs	r2, #1
90001a30:	701a      	strb	r2, [r3, #0]
90001a32:	e002      	b.n	90001a3a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
90001a34:	4b08      	ldr	r3, [pc, #32]	; (90001a58 <BSP_SDRAM_Init+0xb8>)
90001a36:	2200      	movs	r2, #0
90001a38:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
90001a3a:	f240 6003 	movw	r0, #1539	; 0x603
90001a3e:	f000 f80d 	bl	90001a5c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
90001a42:	4b05      	ldr	r3, [pc, #20]	; (90001a58 <BSP_SDRAM_Init+0xb8>)
90001a44:	781b      	ldrb	r3, [r3, #0]
}
90001a46:	4618      	mov	r0, r3
90001a48:	bd80      	pop	{r7, pc}
90001a4a:	bf00      	nop
90001a4c:	20000248 	.word	0x20000248
90001a50:	a0000140 	.word	0xa0000140
90001a54:	20000114 	.word	0x20000114
90001a58:	2000000c 	.word	0x2000000c

90001a5c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
90001a5c:	b580      	push	{r7, lr}
90001a5e:	b084      	sub	sp, #16
90001a60:	af00      	add	r7, sp, #0
90001a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
90001a64:	2300      	movs	r3, #0
90001a66:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
90001a68:	4b2a      	ldr	r3, [pc, #168]	; (90001b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001a6a:	2201      	movs	r2, #1
90001a6c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90001a6e:	4b29      	ldr	r3, [pc, #164]	; (90001b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001a70:	2210      	movs	r2, #16
90001a72:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
90001a74:	4b27      	ldr	r3, [pc, #156]	; (90001b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001a76:	2201      	movs	r2, #1
90001a78:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90001a7a:	4b26      	ldr	r3, [pc, #152]	; (90001b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001a7c:	2200      	movs	r2, #0
90001a7e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90001a80:	f64f 72ff 	movw	r2, #65535	; 0xffff
90001a84:	4923      	ldr	r1, [pc, #140]	; (90001b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001a86:	4824      	ldr	r0, [pc, #144]	; (90001b18 <BSP_SDRAM_Initialization_sequence+0xbc>)
90001a88:	f002 fc94 	bl	900043b4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
90001a8c:	2001      	movs	r0, #1
90001a8e:	f000 f9a3 	bl	90001dd8 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
90001a92:	4b20      	ldr	r3, [pc, #128]	; (90001b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001a94:	2202      	movs	r2, #2
90001a96:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90001a98:	4b1e      	ldr	r3, [pc, #120]	; (90001b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001a9a:	2210      	movs	r2, #16
90001a9c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
90001a9e:	4b1d      	ldr	r3, [pc, #116]	; (90001b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001aa0:	2201      	movs	r2, #1
90001aa2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90001aa4:	4b1b      	ldr	r3, [pc, #108]	; (90001b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001aa6:	2200      	movs	r2, #0
90001aa8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
90001aaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
90001aae:	4919      	ldr	r1, [pc, #100]	; (90001b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001ab0:	4819      	ldr	r0, [pc, #100]	; (90001b18 <BSP_SDRAM_Initialization_sequence+0xbc>)
90001ab2:	f002 fc7f 	bl	900043b4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
90001ab6:	4b17      	ldr	r3, [pc, #92]	; (90001b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001ab8:	2203      	movs	r2, #3
90001aba:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90001abc:	4b15      	ldr	r3, [pc, #84]	; (90001b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001abe:	2210      	movs	r2, #16
90001ac0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
90001ac2:	4b14      	ldr	r3, [pc, #80]	; (90001b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001ac4:	2208      	movs	r2, #8
90001ac6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90001ac8:	4b12      	ldr	r3, [pc, #72]	; (90001b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001aca:	2200      	movs	r2, #0
90001acc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90001ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
90001ad2:	4910      	ldr	r1, [pc, #64]	; (90001b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001ad4:	4810      	ldr	r0, [pc, #64]	; (90001b18 <BSP_SDRAM_Initialization_sequence+0xbc>)
90001ad6:	f002 fc6d 	bl	900043b4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
90001ada:	f44f 7308 	mov.w	r3, #544	; 0x220
90001ade:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
90001ae0:	4b0c      	ldr	r3, [pc, #48]	; (90001b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001ae2:	2204      	movs	r2, #4
90001ae4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90001ae6:	4b0b      	ldr	r3, [pc, #44]	; (90001b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001ae8:	2210      	movs	r2, #16
90001aea:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
90001aec:	4b09      	ldr	r3, [pc, #36]	; (90001b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001aee:	2201      	movs	r2, #1
90001af0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
90001af2:	68fb      	ldr	r3, [r7, #12]
90001af4:	4a07      	ldr	r2, [pc, #28]	; (90001b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001af6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90001af8:	f64f 72ff 	movw	r2, #65535	; 0xffff
90001afc:	4905      	ldr	r1, [pc, #20]	; (90001b14 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001afe:	4806      	ldr	r0, [pc, #24]	; (90001b18 <BSP_SDRAM_Initialization_sequence+0xbc>)
90001b00:	f002 fc58 	bl	900043b4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
90001b04:	6879      	ldr	r1, [r7, #4]
90001b06:	4804      	ldr	r0, [pc, #16]	; (90001b18 <BSP_SDRAM_Initialization_sequence+0xbc>)
90001b08:	f002 fc7f 	bl	9000440a <HAL_SDRAM_ProgramRefreshRate>
}
90001b0c:	bf00      	nop
90001b0e:	3710      	adds	r7, #16
90001b10:	46bd      	mov	sp, r7
90001b12:	bd80      	pop	{r7, pc}
90001b14:	20000130 	.word	0x20000130
90001b18:	20000248 	.word	0x20000248

90001b1c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
90001b1c:	b580      	push	{r7, lr}
90001b1e:	b090      	sub	sp, #64	; 0x40
90001b20:	af00      	add	r7, sp, #0
90001b22:	6078      	str	r0, [r7, #4]
90001b24:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
90001b26:	4b70      	ldr	r3, [pc, #448]	; (90001ce8 <BSP_SDRAM_MspInit+0x1cc>)
90001b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90001b2a:	4a6f      	ldr	r2, [pc, #444]	; (90001ce8 <BSP_SDRAM_MspInit+0x1cc>)
90001b2c:	f043 0301 	orr.w	r3, r3, #1
90001b30:	6393      	str	r3, [r2, #56]	; 0x38
90001b32:	4b6d      	ldr	r3, [pc, #436]	; (90001ce8 <BSP_SDRAM_MspInit+0x1cc>)
90001b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90001b36:	f003 0301 	and.w	r3, r3, #1
90001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
90001b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
90001b3e:	4b6a      	ldr	r3, [pc, #424]	; (90001ce8 <BSP_SDRAM_MspInit+0x1cc>)
90001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001b42:	4a69      	ldr	r2, [pc, #420]	; (90001ce8 <BSP_SDRAM_MspInit+0x1cc>)
90001b44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
90001b48:	6313      	str	r3, [r2, #48]	; 0x30
90001b4a:	4b67      	ldr	r3, [pc, #412]	; (90001ce8 <BSP_SDRAM_MspInit+0x1cc>)
90001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90001b52:	627b      	str	r3, [r7, #36]	; 0x24
90001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
90001b56:	4b64      	ldr	r3, [pc, #400]	; (90001ce8 <BSP_SDRAM_MspInit+0x1cc>)
90001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001b5a:	4a63      	ldr	r2, [pc, #396]	; (90001ce8 <BSP_SDRAM_MspInit+0x1cc>)
90001b5c:	f043 0304 	orr.w	r3, r3, #4
90001b60:	6313      	str	r3, [r2, #48]	; 0x30
90001b62:	4b61      	ldr	r3, [pc, #388]	; (90001ce8 <BSP_SDRAM_MspInit+0x1cc>)
90001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001b66:	f003 0304 	and.w	r3, r3, #4
90001b6a:	623b      	str	r3, [r7, #32]
90001b6c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
90001b6e:	4b5e      	ldr	r3, [pc, #376]	; (90001ce8 <BSP_SDRAM_MspInit+0x1cc>)
90001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001b72:	4a5d      	ldr	r2, [pc, #372]	; (90001ce8 <BSP_SDRAM_MspInit+0x1cc>)
90001b74:	f043 0308 	orr.w	r3, r3, #8
90001b78:	6313      	str	r3, [r2, #48]	; 0x30
90001b7a:	4b5b      	ldr	r3, [pc, #364]	; (90001ce8 <BSP_SDRAM_MspInit+0x1cc>)
90001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001b7e:	f003 0308 	and.w	r3, r3, #8
90001b82:	61fb      	str	r3, [r7, #28]
90001b84:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90001b86:	4b58      	ldr	r3, [pc, #352]	; (90001ce8 <BSP_SDRAM_MspInit+0x1cc>)
90001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001b8a:	4a57      	ldr	r2, [pc, #348]	; (90001ce8 <BSP_SDRAM_MspInit+0x1cc>)
90001b8c:	f043 0310 	orr.w	r3, r3, #16
90001b90:	6313      	str	r3, [r2, #48]	; 0x30
90001b92:	4b55      	ldr	r3, [pc, #340]	; (90001ce8 <BSP_SDRAM_MspInit+0x1cc>)
90001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001b96:	f003 0310 	and.w	r3, r3, #16
90001b9a:	61bb      	str	r3, [r7, #24]
90001b9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90001b9e:	4b52      	ldr	r3, [pc, #328]	; (90001ce8 <BSP_SDRAM_MspInit+0x1cc>)
90001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001ba2:	4a51      	ldr	r2, [pc, #324]	; (90001ce8 <BSP_SDRAM_MspInit+0x1cc>)
90001ba4:	f043 0320 	orr.w	r3, r3, #32
90001ba8:	6313      	str	r3, [r2, #48]	; 0x30
90001baa:	4b4f      	ldr	r3, [pc, #316]	; (90001ce8 <BSP_SDRAM_MspInit+0x1cc>)
90001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001bae:	f003 0320 	and.w	r3, r3, #32
90001bb2:	617b      	str	r3, [r7, #20]
90001bb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90001bb6:	4b4c      	ldr	r3, [pc, #304]	; (90001ce8 <BSP_SDRAM_MspInit+0x1cc>)
90001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001bba:	4a4b      	ldr	r2, [pc, #300]	; (90001ce8 <BSP_SDRAM_MspInit+0x1cc>)
90001bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90001bc0:	6313      	str	r3, [r2, #48]	; 0x30
90001bc2:	4b49      	ldr	r3, [pc, #292]	; (90001ce8 <BSP_SDRAM_MspInit+0x1cc>)
90001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
90001bca:	613b      	str	r3, [r7, #16]
90001bcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90001bce:	4b46      	ldr	r3, [pc, #280]	; (90001ce8 <BSP_SDRAM_MspInit+0x1cc>)
90001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001bd2:	4a45      	ldr	r2, [pc, #276]	; (90001ce8 <BSP_SDRAM_MspInit+0x1cc>)
90001bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90001bd8:	6313      	str	r3, [r2, #48]	; 0x30
90001bda:	4b43      	ldr	r3, [pc, #268]	; (90001ce8 <BSP_SDRAM_MspInit+0x1cc>)
90001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
90001be2:	60fb      	str	r3, [r7, #12]
90001be4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001be6:	2302      	movs	r3, #2
90001be8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
90001bea:	2301      	movs	r3, #1
90001bec:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
90001bee:	2302      	movs	r3, #2
90001bf0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90001bf2:	230c      	movs	r3, #12
90001bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
90001bf6:	2308      	movs	r3, #8
90001bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
90001bfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001bfe:	4619      	mov	r1, r3
90001c00:	483a      	ldr	r0, [pc, #232]	; (90001cec <BSP_SDRAM_MspInit+0x1d0>)
90001c02:	f000 fe73 	bl	900028ec <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
90001c06:	f24c 7303 	movw	r3, #50947	; 0xc703
90001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90001c0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001c10:	4619      	mov	r1, r3
90001c12:	4837      	ldr	r0, [pc, #220]	; (90001cf0 <BSP_SDRAM_MspInit+0x1d4>)
90001c14:	f000 fe6a 	bl	900028ec <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90001c18:	f64f 7383 	movw	r3, #65411	; 0xff83
90001c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90001c1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001c22:	4619      	mov	r1, r3
90001c24:	4833      	ldr	r0, [pc, #204]	; (90001cf4 <BSP_SDRAM_MspInit+0x1d8>)
90001c26:	f000 fe61 	bl	900028ec <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90001c2a:	f64f 033f 	movw	r3, #63551	; 0xf83f
90001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90001c30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001c34:	4619      	mov	r1, r3
90001c36:	4830      	ldr	r0, [pc, #192]	; (90001cf8 <BSP_SDRAM_MspInit+0x1dc>)
90001c38:	f000 fe58 	bl	900028ec <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
90001c3c:	f248 1333 	movw	r3, #33075	; 0x8133
90001c40:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90001c42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001c46:	4619      	mov	r1, r3
90001c48:	482c      	ldr	r0, [pc, #176]	; (90001cfc <BSP_SDRAM_MspInit+0x1e0>)
90001c4a:	f000 fe4f 	bl	900028ec <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
90001c4e:	2328      	movs	r3, #40	; 0x28
90001c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
90001c52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001c56:	4619      	mov	r1, r3
90001c58:	4829      	ldr	r0, [pc, #164]	; (90001d00 <BSP_SDRAM_MspInit+0x1e4>)
90001c5a:	f000 fe47 	bl	900028ec <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
90001c5e:	4b29      	ldr	r3, [pc, #164]	; (90001d04 <BSP_SDRAM_MspInit+0x1e8>)
90001c60:	2200      	movs	r2, #0
90001c62:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
90001c64:	4b27      	ldr	r3, [pc, #156]	; (90001d04 <BSP_SDRAM_MspInit+0x1e8>)
90001c66:	2280      	movs	r2, #128	; 0x80
90001c68:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
90001c6a:	4b26      	ldr	r3, [pc, #152]	; (90001d04 <BSP_SDRAM_MspInit+0x1e8>)
90001c6c:	f44f 7200 	mov.w	r2, #512	; 0x200
90001c70:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
90001c72:	4b24      	ldr	r3, [pc, #144]	; (90001d04 <BSP_SDRAM_MspInit+0x1e8>)
90001c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
90001c78:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
90001c7a:	4b22      	ldr	r3, [pc, #136]	; (90001d04 <BSP_SDRAM_MspInit+0x1e8>)
90001c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
90001c80:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
90001c82:	4b20      	ldr	r3, [pc, #128]	; (90001d04 <BSP_SDRAM_MspInit+0x1e8>)
90001c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
90001c88:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
90001c8a:	4b1e      	ldr	r3, [pc, #120]	; (90001d04 <BSP_SDRAM_MspInit+0x1e8>)
90001c8c:	2200      	movs	r2, #0
90001c8e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
90001c90:	4b1c      	ldr	r3, [pc, #112]	; (90001d04 <BSP_SDRAM_MspInit+0x1e8>)
90001c92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
90001c96:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
90001c98:	4b1a      	ldr	r3, [pc, #104]	; (90001d04 <BSP_SDRAM_MspInit+0x1e8>)
90001c9a:	2200      	movs	r2, #0
90001c9c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
90001c9e:	4b19      	ldr	r3, [pc, #100]	; (90001d04 <BSP_SDRAM_MspInit+0x1e8>)
90001ca0:	2203      	movs	r2, #3
90001ca2:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
90001ca4:	4b17      	ldr	r3, [pc, #92]	; (90001d04 <BSP_SDRAM_MspInit+0x1e8>)
90001ca6:	2200      	movs	r2, #0
90001ca8:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
90001caa:	4b16      	ldr	r3, [pc, #88]	; (90001d04 <BSP_SDRAM_MspInit+0x1e8>)
90001cac:	2200      	movs	r2, #0
90001cae:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
90001cb0:	4b14      	ldr	r3, [pc, #80]	; (90001d04 <BSP_SDRAM_MspInit+0x1e8>)
90001cb2:	4a15      	ldr	r2, [pc, #84]	; (90001d08 <BSP_SDRAM_MspInit+0x1ec>)
90001cb4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
90001cb6:	687b      	ldr	r3, [r7, #4]
90001cb8:	4a12      	ldr	r2, [pc, #72]	; (90001d04 <BSP_SDRAM_MspInit+0x1e8>)
90001cba:	631a      	str	r2, [r3, #48]	; 0x30
90001cbc:	4a11      	ldr	r2, [pc, #68]	; (90001d04 <BSP_SDRAM_MspInit+0x1e8>)
90001cbe:	687b      	ldr	r3, [r7, #4]
90001cc0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
90001cc2:	4810      	ldr	r0, [pc, #64]	; (90001d04 <BSP_SDRAM_MspInit+0x1e8>)
90001cc4:	f000 fa6c 	bl	900021a0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
90001cc8:	480e      	ldr	r0, [pc, #56]	; (90001d04 <BSP_SDRAM_MspInit+0x1e8>)
90001cca:	f000 f9bb 	bl	90002044 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
90001cce:	2200      	movs	r2, #0
90001cd0:	210f      	movs	r1, #15
90001cd2:	2038      	movs	r0, #56	; 0x38
90001cd4:	f000 f97f 	bl	90001fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
90001cd8:	2038      	movs	r0, #56	; 0x38
90001cda:	f000 f998 	bl	9000200e <HAL_NVIC_EnableIRQ>
}
90001cde:	bf00      	nop
90001ce0:	3740      	adds	r7, #64	; 0x40
90001ce2:	46bd      	mov	sp, r7
90001ce4:	bd80      	pop	{r7, pc}
90001ce6:	bf00      	nop
90001ce8:	40023800 	.word	0x40023800
90001cec:	40020800 	.word	0x40020800
90001cf0:	40020c00 	.word	0x40020c00
90001cf4:	40021000 	.word	0x40021000
90001cf8:	40021400 	.word	0x40021400
90001cfc:	40021800 	.word	0x40021800
90001d00:	40021c00 	.word	0x40021c00
90001d04:	20000140 	.word	0x20000140
90001d08:	40026410 	.word	0x40026410

90001d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90001d0c:	b580      	push	{r7, lr}
90001d0e:	af00      	add	r7, sp, #0
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
90001d10:	4b08      	ldr	r3, [pc, #32]	; (90001d34 <HAL_Init+0x28>)
90001d12:	681b      	ldr	r3, [r3, #0]
90001d14:	4a07      	ldr	r2, [pc, #28]	; (90001d34 <HAL_Init+0x28>)
90001d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90001d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90001d1c:	2003      	movs	r0, #3
90001d1e:	f000 f94f 	bl	90001fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
90001d22:	200f      	movs	r0, #15
90001d24:	f000 f808 	bl	90001d38 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
90001d28:	f7fe fd1e 	bl	90000768 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
90001d2c:	2300      	movs	r3, #0
}
90001d2e:	4618      	mov	r0, r3
90001d30:	bd80      	pop	{r7, pc}
90001d32:	bf00      	nop
90001d34:	40023c00 	.word	0x40023c00

90001d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
90001d38:	b580      	push	{r7, lr}
90001d3a:	b082      	sub	sp, #8
90001d3c:	af00      	add	r7, sp, #0
90001d3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
90001d40:	4b12      	ldr	r3, [pc, #72]	; (90001d8c <HAL_InitTick+0x54>)
90001d42:	681a      	ldr	r2, [r3, #0]
90001d44:	4b12      	ldr	r3, [pc, #72]	; (90001d90 <HAL_InitTick+0x58>)
90001d46:	781b      	ldrb	r3, [r3, #0]
90001d48:	4619      	mov	r1, r3
90001d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
90001d4e:	fbb3 f3f1 	udiv	r3, r3, r1
90001d52:	fbb2 f3f3 	udiv	r3, r2, r3
90001d56:	4618      	mov	r0, r3
90001d58:	f000 f967 	bl	9000202a <HAL_SYSTICK_Config>
90001d5c:	4603      	mov	r3, r0
90001d5e:	2b00      	cmp	r3, #0
90001d60:	d001      	beq.n	90001d66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
90001d62:	2301      	movs	r3, #1
90001d64:	e00e      	b.n	90001d84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90001d66:	687b      	ldr	r3, [r7, #4]
90001d68:	2b0f      	cmp	r3, #15
90001d6a:	d80a      	bhi.n	90001d82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
90001d6c:	2200      	movs	r2, #0
90001d6e:	6879      	ldr	r1, [r7, #4]
90001d70:	f04f 30ff 	mov.w	r0, #4294967295
90001d74:	f000 f92f 	bl	90001fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
90001d78:	4a06      	ldr	r2, [pc, #24]	; (90001d94 <HAL_InitTick+0x5c>)
90001d7a:	687b      	ldr	r3, [r7, #4]
90001d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
90001d7e:	2300      	movs	r3, #0
90001d80:	e000      	b.n	90001d84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
90001d82:	2301      	movs	r3, #1
}
90001d84:	4618      	mov	r0, r3
90001d86:	3708      	adds	r7, #8
90001d88:	46bd      	mov	sp, r7
90001d8a:	bd80      	pop	{r7, pc}
90001d8c:	20000000 	.word	0x20000000
90001d90:	20000014 	.word	0x20000014
90001d94:	20000010 	.word	0x20000010

90001d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
90001d98:	b480      	push	{r7}
90001d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
90001d9c:	4b06      	ldr	r3, [pc, #24]	; (90001db8 <HAL_IncTick+0x20>)
90001d9e:	781b      	ldrb	r3, [r3, #0]
90001da0:	461a      	mov	r2, r3
90001da2:	4b06      	ldr	r3, [pc, #24]	; (90001dbc <HAL_IncTick+0x24>)
90001da4:	681b      	ldr	r3, [r3, #0]
90001da6:	4413      	add	r3, r2
90001da8:	4a04      	ldr	r2, [pc, #16]	; (90001dbc <HAL_IncTick+0x24>)
90001daa:	6013      	str	r3, [r2, #0]
}
90001dac:	bf00      	nop
90001dae:	46bd      	mov	sp, r7
90001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
90001db4:	4770      	bx	lr
90001db6:	bf00      	nop
90001db8:	20000014 	.word	0x20000014
90001dbc:	2000027c 	.word	0x2000027c

90001dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
90001dc0:	b480      	push	{r7}
90001dc2:	af00      	add	r7, sp, #0
  return uwTick;
90001dc4:	4b03      	ldr	r3, [pc, #12]	; (90001dd4 <HAL_GetTick+0x14>)
90001dc6:	681b      	ldr	r3, [r3, #0]
}
90001dc8:	4618      	mov	r0, r3
90001dca:	46bd      	mov	sp, r7
90001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
90001dd0:	4770      	bx	lr
90001dd2:	bf00      	nop
90001dd4:	2000027c 	.word	0x2000027c

90001dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
90001dd8:	b580      	push	{r7, lr}
90001dda:	b084      	sub	sp, #16
90001ddc:	af00      	add	r7, sp, #0
90001dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
90001de0:	f7ff ffee 	bl	90001dc0 <HAL_GetTick>
90001de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
90001de6:	687b      	ldr	r3, [r7, #4]
90001de8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
90001dea:	68fb      	ldr	r3, [r7, #12]
90001dec:	f1b3 3fff 	cmp.w	r3, #4294967295
90001df0:	d005      	beq.n	90001dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
90001df2:	4b0a      	ldr	r3, [pc, #40]	; (90001e1c <HAL_Delay+0x44>)
90001df4:	781b      	ldrb	r3, [r3, #0]
90001df6:	461a      	mov	r2, r3
90001df8:	68fb      	ldr	r3, [r7, #12]
90001dfa:	4413      	add	r3, r2
90001dfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
90001dfe:	bf00      	nop
90001e00:	f7ff ffde 	bl	90001dc0 <HAL_GetTick>
90001e04:	4602      	mov	r2, r0
90001e06:	68bb      	ldr	r3, [r7, #8]
90001e08:	1ad3      	subs	r3, r2, r3
90001e0a:	68fa      	ldr	r2, [r7, #12]
90001e0c:	429a      	cmp	r2, r3
90001e0e:	d8f7      	bhi.n	90001e00 <HAL_Delay+0x28>
  {
  }
}
90001e10:	bf00      	nop
90001e12:	bf00      	nop
90001e14:	3710      	adds	r7, #16
90001e16:	46bd      	mov	sp, r7
90001e18:	bd80      	pop	{r7, pc}
90001e1a:	bf00      	nop
90001e1c:	20000014 	.word	0x20000014

90001e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
90001e20:	b480      	push	{r7}
90001e22:	b085      	sub	sp, #20
90001e24:	af00      	add	r7, sp, #0
90001e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
90001e28:	687b      	ldr	r3, [r7, #4]
90001e2a:	f003 0307 	and.w	r3, r3, #7
90001e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90001e30:	4b0b      	ldr	r3, [pc, #44]	; (90001e60 <__NVIC_SetPriorityGrouping+0x40>)
90001e32:	68db      	ldr	r3, [r3, #12]
90001e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90001e36:	68ba      	ldr	r2, [r7, #8]
90001e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
90001e3c:	4013      	ands	r3, r2
90001e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90001e40:	68fb      	ldr	r3, [r7, #12]
90001e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
90001e44:	68bb      	ldr	r3, [r7, #8]
90001e46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
90001e48:	4b06      	ldr	r3, [pc, #24]	; (90001e64 <__NVIC_SetPriorityGrouping+0x44>)
90001e4a:	4313      	orrs	r3, r2
90001e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
90001e4e:	4a04      	ldr	r2, [pc, #16]	; (90001e60 <__NVIC_SetPriorityGrouping+0x40>)
90001e50:	68bb      	ldr	r3, [r7, #8]
90001e52:	60d3      	str	r3, [r2, #12]
}
90001e54:	bf00      	nop
90001e56:	3714      	adds	r7, #20
90001e58:	46bd      	mov	sp, r7
90001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
90001e5e:	4770      	bx	lr
90001e60:	e000ed00 	.word	0xe000ed00
90001e64:	05fa0000 	.word	0x05fa0000

90001e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
90001e68:	b480      	push	{r7}
90001e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90001e6c:	4b04      	ldr	r3, [pc, #16]	; (90001e80 <__NVIC_GetPriorityGrouping+0x18>)
90001e6e:	68db      	ldr	r3, [r3, #12]
90001e70:	0a1b      	lsrs	r3, r3, #8
90001e72:	f003 0307 	and.w	r3, r3, #7
}
90001e76:	4618      	mov	r0, r3
90001e78:	46bd      	mov	sp, r7
90001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
90001e7e:	4770      	bx	lr
90001e80:	e000ed00 	.word	0xe000ed00

90001e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
90001e84:	b480      	push	{r7}
90001e86:	b083      	sub	sp, #12
90001e88:	af00      	add	r7, sp, #0
90001e8a:	4603      	mov	r3, r0
90001e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
90001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
90001e92:	2b00      	cmp	r3, #0
90001e94:	db0b      	blt.n	90001eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001e96:	79fb      	ldrb	r3, [r7, #7]
90001e98:	f003 021f 	and.w	r2, r3, #31
90001e9c:	4907      	ldr	r1, [pc, #28]	; (90001ebc <__NVIC_EnableIRQ+0x38>)
90001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
90001ea2:	095b      	lsrs	r3, r3, #5
90001ea4:	2001      	movs	r0, #1
90001ea6:	fa00 f202 	lsl.w	r2, r0, r2
90001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
90001eae:	bf00      	nop
90001eb0:	370c      	adds	r7, #12
90001eb2:	46bd      	mov	sp, r7
90001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
90001eb8:	4770      	bx	lr
90001eba:	bf00      	nop
90001ebc:	e000e100 	.word	0xe000e100

90001ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
90001ec0:	b480      	push	{r7}
90001ec2:	b083      	sub	sp, #12
90001ec4:	af00      	add	r7, sp, #0
90001ec6:	4603      	mov	r3, r0
90001ec8:	6039      	str	r1, [r7, #0]
90001eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
90001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
90001ed0:	2b00      	cmp	r3, #0
90001ed2:	db0a      	blt.n	90001eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90001ed4:	683b      	ldr	r3, [r7, #0]
90001ed6:	b2da      	uxtb	r2, r3
90001ed8:	490c      	ldr	r1, [pc, #48]	; (90001f0c <__NVIC_SetPriority+0x4c>)
90001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
90001ede:	0112      	lsls	r2, r2, #4
90001ee0:	b2d2      	uxtb	r2, r2
90001ee2:	440b      	add	r3, r1
90001ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
90001ee8:	e00a      	b.n	90001f00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90001eea:	683b      	ldr	r3, [r7, #0]
90001eec:	b2da      	uxtb	r2, r3
90001eee:	4908      	ldr	r1, [pc, #32]	; (90001f10 <__NVIC_SetPriority+0x50>)
90001ef0:	79fb      	ldrb	r3, [r7, #7]
90001ef2:	f003 030f 	and.w	r3, r3, #15
90001ef6:	3b04      	subs	r3, #4
90001ef8:	0112      	lsls	r2, r2, #4
90001efa:	b2d2      	uxtb	r2, r2
90001efc:	440b      	add	r3, r1
90001efe:	761a      	strb	r2, [r3, #24]
}
90001f00:	bf00      	nop
90001f02:	370c      	adds	r7, #12
90001f04:	46bd      	mov	sp, r7
90001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
90001f0a:	4770      	bx	lr
90001f0c:	e000e100 	.word	0xe000e100
90001f10:	e000ed00 	.word	0xe000ed00

90001f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
90001f14:	b480      	push	{r7}
90001f16:	b089      	sub	sp, #36	; 0x24
90001f18:	af00      	add	r7, sp, #0
90001f1a:	60f8      	str	r0, [r7, #12]
90001f1c:	60b9      	str	r1, [r7, #8]
90001f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
90001f20:	68fb      	ldr	r3, [r7, #12]
90001f22:	f003 0307 	and.w	r3, r3, #7
90001f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90001f28:	69fb      	ldr	r3, [r7, #28]
90001f2a:	f1c3 0307 	rsb	r3, r3, #7
90001f2e:	2b04      	cmp	r3, #4
90001f30:	bf28      	it	cs
90001f32:	2304      	movcs	r3, #4
90001f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90001f36:	69fb      	ldr	r3, [r7, #28]
90001f38:	3304      	adds	r3, #4
90001f3a:	2b06      	cmp	r3, #6
90001f3c:	d902      	bls.n	90001f44 <NVIC_EncodePriority+0x30>
90001f3e:	69fb      	ldr	r3, [r7, #28]
90001f40:	3b03      	subs	r3, #3
90001f42:	e000      	b.n	90001f46 <NVIC_EncodePriority+0x32>
90001f44:	2300      	movs	r3, #0
90001f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90001f48:	f04f 32ff 	mov.w	r2, #4294967295
90001f4c:	69bb      	ldr	r3, [r7, #24]
90001f4e:	fa02 f303 	lsl.w	r3, r2, r3
90001f52:	43da      	mvns	r2, r3
90001f54:	68bb      	ldr	r3, [r7, #8]
90001f56:	401a      	ands	r2, r3
90001f58:	697b      	ldr	r3, [r7, #20]
90001f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90001f5c:	f04f 31ff 	mov.w	r1, #4294967295
90001f60:	697b      	ldr	r3, [r7, #20]
90001f62:	fa01 f303 	lsl.w	r3, r1, r3
90001f66:	43d9      	mvns	r1, r3
90001f68:	687b      	ldr	r3, [r7, #4]
90001f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90001f6c:	4313      	orrs	r3, r2
         );
}
90001f6e:	4618      	mov	r0, r3
90001f70:	3724      	adds	r7, #36	; 0x24
90001f72:	46bd      	mov	sp, r7
90001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
90001f78:	4770      	bx	lr
	...

90001f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
90001f7c:	b580      	push	{r7, lr}
90001f7e:	b082      	sub	sp, #8
90001f80:	af00      	add	r7, sp, #0
90001f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
90001f84:	687b      	ldr	r3, [r7, #4]
90001f86:	3b01      	subs	r3, #1
90001f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
90001f8c:	d301      	bcc.n	90001f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
90001f8e:	2301      	movs	r3, #1
90001f90:	e00f      	b.n	90001fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
90001f92:	4a0a      	ldr	r2, [pc, #40]	; (90001fbc <SysTick_Config+0x40>)
90001f94:	687b      	ldr	r3, [r7, #4]
90001f96:	3b01      	subs	r3, #1
90001f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
90001f9a:	210f      	movs	r1, #15
90001f9c:	f04f 30ff 	mov.w	r0, #4294967295
90001fa0:	f7ff ff8e 	bl	90001ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
90001fa4:	4b05      	ldr	r3, [pc, #20]	; (90001fbc <SysTick_Config+0x40>)
90001fa6:	2200      	movs	r2, #0
90001fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
90001faa:	4b04      	ldr	r3, [pc, #16]	; (90001fbc <SysTick_Config+0x40>)
90001fac:	2207      	movs	r2, #7
90001fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
90001fb0:	2300      	movs	r3, #0
}
90001fb2:	4618      	mov	r0, r3
90001fb4:	3708      	adds	r7, #8
90001fb6:	46bd      	mov	sp, r7
90001fb8:	bd80      	pop	{r7, pc}
90001fba:	bf00      	nop
90001fbc:	e000e010 	.word	0xe000e010

90001fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
90001fc0:	b580      	push	{r7, lr}
90001fc2:	b082      	sub	sp, #8
90001fc4:	af00      	add	r7, sp, #0
90001fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
90001fc8:	6878      	ldr	r0, [r7, #4]
90001fca:	f7ff ff29 	bl	90001e20 <__NVIC_SetPriorityGrouping>
}
90001fce:	bf00      	nop
90001fd0:	3708      	adds	r7, #8
90001fd2:	46bd      	mov	sp, r7
90001fd4:	bd80      	pop	{r7, pc}

90001fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
90001fd6:	b580      	push	{r7, lr}
90001fd8:	b086      	sub	sp, #24
90001fda:	af00      	add	r7, sp, #0
90001fdc:	4603      	mov	r3, r0
90001fde:	60b9      	str	r1, [r7, #8]
90001fe0:	607a      	str	r2, [r7, #4]
90001fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
90001fe4:	2300      	movs	r3, #0
90001fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
90001fe8:	f7ff ff3e 	bl	90001e68 <__NVIC_GetPriorityGrouping>
90001fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
90001fee:	687a      	ldr	r2, [r7, #4]
90001ff0:	68b9      	ldr	r1, [r7, #8]
90001ff2:	6978      	ldr	r0, [r7, #20]
90001ff4:	f7ff ff8e 	bl	90001f14 <NVIC_EncodePriority>
90001ff8:	4602      	mov	r2, r0
90001ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
90001ffe:	4611      	mov	r1, r2
90002000:	4618      	mov	r0, r3
90002002:	f7ff ff5d 	bl	90001ec0 <__NVIC_SetPriority>
}
90002006:	bf00      	nop
90002008:	3718      	adds	r7, #24
9000200a:	46bd      	mov	sp, r7
9000200c:	bd80      	pop	{r7, pc}

9000200e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
9000200e:	b580      	push	{r7, lr}
90002010:	b082      	sub	sp, #8
90002012:	af00      	add	r7, sp, #0
90002014:	4603      	mov	r3, r0
90002016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
90002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000201c:	4618      	mov	r0, r3
9000201e:	f7ff ff31 	bl	90001e84 <__NVIC_EnableIRQ>
}
90002022:	bf00      	nop
90002024:	3708      	adds	r7, #8
90002026:	46bd      	mov	sp, r7
90002028:	bd80      	pop	{r7, pc}

9000202a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
9000202a:	b580      	push	{r7, lr}
9000202c:	b082      	sub	sp, #8
9000202e:	af00      	add	r7, sp, #0
90002030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
90002032:	6878      	ldr	r0, [r7, #4]
90002034:	f7ff ffa2 	bl	90001f7c <SysTick_Config>
90002038:	4603      	mov	r3, r0
}
9000203a:	4618      	mov	r0, r3
9000203c:	3708      	adds	r7, #8
9000203e:	46bd      	mov	sp, r7
90002040:	bd80      	pop	{r7, pc}
	...

90002044 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
90002044:	b580      	push	{r7, lr}
90002046:	b086      	sub	sp, #24
90002048:	af00      	add	r7, sp, #0
9000204a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
9000204c:	2300      	movs	r3, #0
9000204e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
90002050:	f7ff feb6 	bl	90001dc0 <HAL_GetTick>
90002054:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
90002056:	687b      	ldr	r3, [r7, #4]
90002058:	2b00      	cmp	r3, #0
9000205a:	d101      	bne.n	90002060 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
9000205c:	2301      	movs	r3, #1
9000205e:	e099      	b.n	90002194 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
90002060:	687b      	ldr	r3, [r7, #4]
90002062:	2200      	movs	r2, #0
90002064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
90002068:	687b      	ldr	r3, [r7, #4]
9000206a:	2202      	movs	r2, #2
9000206c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
90002070:	687b      	ldr	r3, [r7, #4]
90002072:	681b      	ldr	r3, [r3, #0]
90002074:	681a      	ldr	r2, [r3, #0]
90002076:	687b      	ldr	r3, [r7, #4]
90002078:	681b      	ldr	r3, [r3, #0]
9000207a:	f022 0201 	bic.w	r2, r2, #1
9000207e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
90002080:	e00f      	b.n	900020a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
90002082:	f7ff fe9d 	bl	90001dc0 <HAL_GetTick>
90002086:	4602      	mov	r2, r0
90002088:	693b      	ldr	r3, [r7, #16]
9000208a:	1ad3      	subs	r3, r2, r3
9000208c:	2b05      	cmp	r3, #5
9000208e:	d908      	bls.n	900020a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
90002090:	687b      	ldr	r3, [r7, #4]
90002092:	2220      	movs	r2, #32
90002094:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
90002096:	687b      	ldr	r3, [r7, #4]
90002098:	2203      	movs	r2, #3
9000209a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
9000209e:	2303      	movs	r3, #3
900020a0:	e078      	b.n	90002194 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
900020a2:	687b      	ldr	r3, [r7, #4]
900020a4:	681b      	ldr	r3, [r3, #0]
900020a6:	681b      	ldr	r3, [r3, #0]
900020a8:	f003 0301 	and.w	r3, r3, #1
900020ac:	2b00      	cmp	r3, #0
900020ae:	d1e8      	bne.n	90002082 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
900020b0:	687b      	ldr	r3, [r7, #4]
900020b2:	681b      	ldr	r3, [r3, #0]
900020b4:	681b      	ldr	r3, [r3, #0]
900020b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
900020b8:	697a      	ldr	r2, [r7, #20]
900020ba:	4b38      	ldr	r3, [pc, #224]	; (9000219c <HAL_DMA_Init+0x158>)
900020bc:	4013      	ands	r3, r2
900020be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
900020c0:	687b      	ldr	r3, [r7, #4]
900020c2:	685a      	ldr	r2, [r3, #4]
900020c4:	687b      	ldr	r3, [r7, #4]
900020c6:	689b      	ldr	r3, [r3, #8]
900020c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
900020ca:	687b      	ldr	r3, [r7, #4]
900020cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
900020ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
900020d0:	687b      	ldr	r3, [r7, #4]
900020d2:	691b      	ldr	r3, [r3, #16]
900020d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
900020d6:	687b      	ldr	r3, [r7, #4]
900020d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
900020da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
900020dc:	687b      	ldr	r3, [r7, #4]
900020de:	699b      	ldr	r3, [r3, #24]
900020e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
900020e2:	687b      	ldr	r3, [r7, #4]
900020e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
900020e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
900020e8:	687b      	ldr	r3, [r7, #4]
900020ea:	6a1b      	ldr	r3, [r3, #32]
900020ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
900020ee:	697a      	ldr	r2, [r7, #20]
900020f0:	4313      	orrs	r3, r2
900020f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
900020f4:	687b      	ldr	r3, [r7, #4]
900020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900020f8:	2b04      	cmp	r3, #4
900020fa:	d107      	bne.n	9000210c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
900020fc:	687b      	ldr	r3, [r7, #4]
900020fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90002100:	687b      	ldr	r3, [r7, #4]
90002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90002104:	4313      	orrs	r3, r2
90002106:	697a      	ldr	r2, [r7, #20]
90002108:	4313      	orrs	r3, r2
9000210a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
9000210c:	687b      	ldr	r3, [r7, #4]
9000210e:	681b      	ldr	r3, [r3, #0]
90002110:	697a      	ldr	r2, [r7, #20]
90002112:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
90002114:	687b      	ldr	r3, [r7, #4]
90002116:	681b      	ldr	r3, [r3, #0]
90002118:	695b      	ldr	r3, [r3, #20]
9000211a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
9000211c:	697b      	ldr	r3, [r7, #20]
9000211e:	f023 0307 	bic.w	r3, r3, #7
90002122:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
90002124:	687b      	ldr	r3, [r7, #4]
90002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002128:	697a      	ldr	r2, [r7, #20]
9000212a:	4313      	orrs	r3, r2
9000212c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
9000212e:	687b      	ldr	r3, [r7, #4]
90002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002132:	2b04      	cmp	r3, #4
90002134:	d117      	bne.n	90002166 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
90002136:	687b      	ldr	r3, [r7, #4]
90002138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000213a:	697a      	ldr	r2, [r7, #20]
9000213c:	4313      	orrs	r3, r2
9000213e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
90002140:	687b      	ldr	r3, [r7, #4]
90002142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002144:	2b00      	cmp	r3, #0
90002146:	d00e      	beq.n	90002166 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
90002148:	6878      	ldr	r0, [r7, #4]
9000214a:	f000 f8bd 	bl	900022c8 <DMA_CheckFifoParam>
9000214e:	4603      	mov	r3, r0
90002150:	2b00      	cmp	r3, #0
90002152:	d008      	beq.n	90002166 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
90002154:	687b      	ldr	r3, [r7, #4]
90002156:	2240      	movs	r2, #64	; 0x40
90002158:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
9000215a:	687b      	ldr	r3, [r7, #4]
9000215c:	2201      	movs	r2, #1
9000215e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
90002162:	2301      	movs	r3, #1
90002164:	e016      	b.n	90002194 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
90002166:	687b      	ldr	r3, [r7, #4]
90002168:	681b      	ldr	r3, [r3, #0]
9000216a:	697a      	ldr	r2, [r7, #20]
9000216c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
9000216e:	6878      	ldr	r0, [r7, #4]
90002170:	f000 f874 	bl	9000225c <DMA_CalcBaseAndBitshift>
90002174:	4603      	mov	r3, r0
90002176:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
90002178:	687b      	ldr	r3, [r7, #4]
9000217a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
9000217c:	223f      	movs	r2, #63	; 0x3f
9000217e:	409a      	lsls	r2, r3
90002180:	68fb      	ldr	r3, [r7, #12]
90002182:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
90002184:	687b      	ldr	r3, [r7, #4]
90002186:	2200      	movs	r2, #0
90002188:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
9000218a:	687b      	ldr	r3, [r7, #4]
9000218c:	2201      	movs	r2, #1
9000218e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
90002192:	2300      	movs	r3, #0
}
90002194:	4618      	mov	r0, r3
90002196:	3718      	adds	r7, #24
90002198:	46bd      	mov	sp, r7
9000219a:	bd80      	pop	{r7, pc}
9000219c:	f010803f 	.word	0xf010803f

900021a0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
900021a0:	b580      	push	{r7, lr}
900021a2:	b084      	sub	sp, #16
900021a4:	af00      	add	r7, sp, #0
900021a6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
900021a8:	687b      	ldr	r3, [r7, #4]
900021aa:	2b00      	cmp	r3, #0
900021ac:	d101      	bne.n	900021b2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
900021ae:	2301      	movs	r3, #1
900021b0:	e050      	b.n	90002254 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
900021b2:	687b      	ldr	r3, [r7, #4]
900021b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
900021b8:	b2db      	uxtb	r3, r3
900021ba:	2b02      	cmp	r3, #2
900021bc:	d101      	bne.n	900021c2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
900021be:	2302      	movs	r3, #2
900021c0:	e048      	b.n	90002254 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
900021c2:	687b      	ldr	r3, [r7, #4]
900021c4:	681b      	ldr	r3, [r3, #0]
900021c6:	681a      	ldr	r2, [r3, #0]
900021c8:	687b      	ldr	r3, [r7, #4]
900021ca:	681b      	ldr	r3, [r3, #0]
900021cc:	f022 0201 	bic.w	r2, r2, #1
900021d0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
900021d2:	687b      	ldr	r3, [r7, #4]
900021d4:	681b      	ldr	r3, [r3, #0]
900021d6:	2200      	movs	r2, #0
900021d8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
900021da:	687b      	ldr	r3, [r7, #4]
900021dc:	681b      	ldr	r3, [r3, #0]
900021de:	2200      	movs	r2, #0
900021e0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
900021e2:	687b      	ldr	r3, [r7, #4]
900021e4:	681b      	ldr	r3, [r3, #0]
900021e6:	2200      	movs	r2, #0
900021e8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
900021ea:	687b      	ldr	r3, [r7, #4]
900021ec:	681b      	ldr	r3, [r3, #0]
900021ee:	2200      	movs	r2, #0
900021f0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
900021f2:	687b      	ldr	r3, [r7, #4]
900021f4:	681b      	ldr	r3, [r3, #0]
900021f6:	2200      	movs	r2, #0
900021f8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
900021fa:	687b      	ldr	r3, [r7, #4]
900021fc:	681b      	ldr	r3, [r3, #0]
900021fe:	2221      	movs	r2, #33	; 0x21
90002200:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
90002202:	6878      	ldr	r0, [r7, #4]
90002204:	f000 f82a 	bl	9000225c <DMA_CalcBaseAndBitshift>
90002208:	4603      	mov	r3, r0
9000220a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
9000220c:	687b      	ldr	r3, [r7, #4]
9000220e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90002210:	223f      	movs	r2, #63	; 0x3f
90002212:	409a      	lsls	r2, r3
90002214:	68fb      	ldr	r3, [r7, #12]
90002216:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
90002218:	687b      	ldr	r3, [r7, #4]
9000221a:	2200      	movs	r2, #0
9000221c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
9000221e:	687b      	ldr	r3, [r7, #4]
90002220:	2200      	movs	r2, #0
90002222:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
90002224:	687b      	ldr	r3, [r7, #4]
90002226:	2200      	movs	r2, #0
90002228:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
9000222a:	687b      	ldr	r3, [r7, #4]
9000222c:	2200      	movs	r2, #0
9000222e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
90002230:	687b      	ldr	r3, [r7, #4]
90002232:	2200      	movs	r2, #0
90002234:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
90002236:	687b      	ldr	r3, [r7, #4]
90002238:	2200      	movs	r2, #0
9000223a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
9000223c:	687b      	ldr	r3, [r7, #4]
9000223e:	2200      	movs	r2, #0
90002240:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
90002242:	687b      	ldr	r3, [r7, #4]
90002244:	2200      	movs	r2, #0
90002246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
9000224a:	687b      	ldr	r3, [r7, #4]
9000224c:	2200      	movs	r2, #0
9000224e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
90002252:	2300      	movs	r3, #0
}
90002254:	4618      	mov	r0, r3
90002256:	3710      	adds	r7, #16
90002258:	46bd      	mov	sp, r7
9000225a:	bd80      	pop	{r7, pc}

9000225c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
9000225c:	b480      	push	{r7}
9000225e:	b085      	sub	sp, #20
90002260:	af00      	add	r7, sp, #0
90002262:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
90002264:	687b      	ldr	r3, [r7, #4]
90002266:	681b      	ldr	r3, [r3, #0]
90002268:	b2db      	uxtb	r3, r3
9000226a:	3b10      	subs	r3, #16
9000226c:	4a13      	ldr	r2, [pc, #76]	; (900022bc <DMA_CalcBaseAndBitshift+0x60>)
9000226e:	fba2 2303 	umull	r2, r3, r2, r3
90002272:	091b      	lsrs	r3, r3, #4
90002274:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
90002276:	4a12      	ldr	r2, [pc, #72]	; (900022c0 <DMA_CalcBaseAndBitshift+0x64>)
90002278:	68fb      	ldr	r3, [r7, #12]
9000227a:	4413      	add	r3, r2
9000227c:	781b      	ldrb	r3, [r3, #0]
9000227e:	461a      	mov	r2, r3
90002280:	687b      	ldr	r3, [r7, #4]
90002282:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
90002284:	68fb      	ldr	r3, [r7, #12]
90002286:	2b03      	cmp	r3, #3
90002288:	d908      	bls.n	9000229c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
9000228a:	687b      	ldr	r3, [r7, #4]
9000228c:	681b      	ldr	r3, [r3, #0]
9000228e:	461a      	mov	r2, r3
90002290:	4b0c      	ldr	r3, [pc, #48]	; (900022c4 <DMA_CalcBaseAndBitshift+0x68>)
90002292:	4013      	ands	r3, r2
90002294:	1d1a      	adds	r2, r3, #4
90002296:	687b      	ldr	r3, [r7, #4]
90002298:	659a      	str	r2, [r3, #88]	; 0x58
9000229a:	e006      	b.n	900022aa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
9000229c:	687b      	ldr	r3, [r7, #4]
9000229e:	681b      	ldr	r3, [r3, #0]
900022a0:	461a      	mov	r2, r3
900022a2:	4b08      	ldr	r3, [pc, #32]	; (900022c4 <DMA_CalcBaseAndBitshift+0x68>)
900022a4:	4013      	ands	r3, r2
900022a6:	687a      	ldr	r2, [r7, #4]
900022a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
900022aa:	687b      	ldr	r3, [r7, #4]
900022ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
900022ae:	4618      	mov	r0, r3
900022b0:	3714      	adds	r7, #20
900022b2:	46bd      	mov	sp, r7
900022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
900022b8:	4770      	bx	lr
900022ba:	bf00      	nop
900022bc:	aaaaaaab 	.word	0xaaaaaaab
900022c0:	900063a8 	.word	0x900063a8
900022c4:	fffffc00 	.word	0xfffffc00

900022c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
900022c8:	b480      	push	{r7}
900022ca:	b085      	sub	sp, #20
900022cc:	af00      	add	r7, sp, #0
900022ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
900022d0:	2300      	movs	r3, #0
900022d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
900022d4:	687b      	ldr	r3, [r7, #4]
900022d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900022d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
900022da:	687b      	ldr	r3, [r7, #4]
900022dc:	699b      	ldr	r3, [r3, #24]
900022de:	2b00      	cmp	r3, #0
900022e0:	d11f      	bne.n	90002322 <DMA_CheckFifoParam+0x5a>
900022e2:	68bb      	ldr	r3, [r7, #8]
900022e4:	2b03      	cmp	r3, #3
900022e6:	d856      	bhi.n	90002396 <DMA_CheckFifoParam+0xce>
900022e8:	a201      	add	r2, pc, #4	; (adr r2, 900022f0 <DMA_CheckFifoParam+0x28>)
900022ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900022ee:	bf00      	nop
900022f0:	90002301 	.word	0x90002301
900022f4:	90002313 	.word	0x90002313
900022f8:	90002301 	.word	0x90002301
900022fc:	90002397 	.word	0x90002397
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
90002300:	687b      	ldr	r3, [r7, #4]
90002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002304:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
90002308:	2b00      	cmp	r3, #0
9000230a:	d046      	beq.n	9000239a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
9000230c:	2301      	movs	r3, #1
9000230e:	73fb      	strb	r3, [r7, #15]
      }
      break;
90002310:	e043      	b.n	9000239a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
90002312:	687b      	ldr	r3, [r7, #4]
90002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002316:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
9000231a:	d140      	bne.n	9000239e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
9000231c:	2301      	movs	r3, #1
9000231e:	73fb      	strb	r3, [r7, #15]
      }
      break;
90002320:	e03d      	b.n	9000239e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
90002322:	687b      	ldr	r3, [r7, #4]
90002324:	699b      	ldr	r3, [r3, #24]
90002326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
9000232a:	d121      	bne.n	90002370 <DMA_CheckFifoParam+0xa8>
9000232c:	68bb      	ldr	r3, [r7, #8]
9000232e:	2b03      	cmp	r3, #3
90002330:	d837      	bhi.n	900023a2 <DMA_CheckFifoParam+0xda>
90002332:	a201      	add	r2, pc, #4	; (adr r2, 90002338 <DMA_CheckFifoParam+0x70>)
90002334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90002338:	90002349 	.word	0x90002349
9000233c:	9000234f 	.word	0x9000234f
90002340:	90002349 	.word	0x90002349
90002344:	90002361 	.word	0x90002361
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
90002348:	2301      	movs	r3, #1
9000234a:	73fb      	strb	r3, [r7, #15]
      break;
9000234c:	e030      	b.n	900023b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
9000234e:	687b      	ldr	r3, [r7, #4]
90002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002352:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
90002356:	2b00      	cmp	r3, #0
90002358:	d025      	beq.n	900023a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
9000235a:	2301      	movs	r3, #1
9000235c:	73fb      	strb	r3, [r7, #15]
      }
      break;
9000235e:	e022      	b.n	900023a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
90002360:	687b      	ldr	r3, [r7, #4]
90002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002364:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
90002368:	d11f      	bne.n	900023aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
9000236a:	2301      	movs	r3, #1
9000236c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
9000236e:	e01c      	b.n	900023aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
90002370:	68bb      	ldr	r3, [r7, #8]
90002372:	2b02      	cmp	r3, #2
90002374:	d903      	bls.n	9000237e <DMA_CheckFifoParam+0xb6>
90002376:	68bb      	ldr	r3, [r7, #8]
90002378:	2b03      	cmp	r3, #3
9000237a:	d003      	beq.n	90002384 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
9000237c:	e018      	b.n	900023b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
9000237e:	2301      	movs	r3, #1
90002380:	73fb      	strb	r3, [r7, #15]
      break;
90002382:	e015      	b.n	900023b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
90002384:	687b      	ldr	r3, [r7, #4]
90002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002388:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
9000238c:	2b00      	cmp	r3, #0
9000238e:	d00e      	beq.n	900023ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
90002390:	2301      	movs	r3, #1
90002392:	73fb      	strb	r3, [r7, #15]
      break;
90002394:	e00b      	b.n	900023ae <DMA_CheckFifoParam+0xe6>
      break;
90002396:	bf00      	nop
90002398:	e00a      	b.n	900023b0 <DMA_CheckFifoParam+0xe8>
      break;
9000239a:	bf00      	nop
9000239c:	e008      	b.n	900023b0 <DMA_CheckFifoParam+0xe8>
      break;
9000239e:	bf00      	nop
900023a0:	e006      	b.n	900023b0 <DMA_CheckFifoParam+0xe8>
      break;
900023a2:	bf00      	nop
900023a4:	e004      	b.n	900023b0 <DMA_CheckFifoParam+0xe8>
      break;
900023a6:	bf00      	nop
900023a8:	e002      	b.n	900023b0 <DMA_CheckFifoParam+0xe8>
      break;   
900023aa:	bf00      	nop
900023ac:	e000      	b.n	900023b0 <DMA_CheckFifoParam+0xe8>
      break;
900023ae:	bf00      	nop
    }
  } 
  
  return status; 
900023b0:	7bfb      	ldrb	r3, [r7, #15]
}
900023b2:	4618      	mov	r0, r3
900023b4:	3714      	adds	r7, #20
900023b6:	46bd      	mov	sp, r7
900023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
900023bc:	4770      	bx	lr
900023be:	bf00      	nop

900023c0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
900023c0:	b580      	push	{r7, lr}
900023c2:	b082      	sub	sp, #8
900023c4:	af00      	add	r7, sp, #0
900023c6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
900023c8:	687b      	ldr	r3, [r7, #4]
900023ca:	2b00      	cmp	r3, #0
900023cc:	d101      	bne.n	900023d2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
900023ce:	2301      	movs	r3, #1
900023d0:	e039      	b.n	90002446 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
900023d2:	687b      	ldr	r3, [r7, #4]
900023d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
900023d8:	b2db      	uxtb	r3, r3
900023da:	2b00      	cmp	r3, #0
900023dc:	d106      	bne.n	900023ec <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
900023de:	687b      	ldr	r3, [r7, #4]
900023e0:	2200      	movs	r2, #0
900023e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
900023e6:	6878      	ldr	r0, [r7, #4]
900023e8:	f000 f834 	bl	90002454 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900023ec:	687b      	ldr	r3, [r7, #4]
900023ee:	2202      	movs	r2, #2
900023f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
900023f4:	687b      	ldr	r3, [r7, #4]
900023f6:	681b      	ldr	r3, [r3, #0]
900023f8:	681b      	ldr	r3, [r3, #0]
900023fa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
900023fe:	687b      	ldr	r3, [r7, #4]
90002400:	685a      	ldr	r2, [r3, #4]
90002402:	687b      	ldr	r3, [r7, #4]
90002404:	681b      	ldr	r3, [r3, #0]
90002406:	430a      	orrs	r2, r1
90002408:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
9000240a:	687b      	ldr	r3, [r7, #4]
9000240c:	681b      	ldr	r3, [r3, #0]
9000240e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90002410:	f023 0107 	bic.w	r1, r3, #7
90002414:	687b      	ldr	r3, [r7, #4]
90002416:	689a      	ldr	r2, [r3, #8]
90002418:	687b      	ldr	r3, [r7, #4]
9000241a:	681b      	ldr	r3, [r3, #0]
9000241c:	430a      	orrs	r2, r1
9000241e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90002420:	687b      	ldr	r3, [r7, #4]
90002422:	681b      	ldr	r3, [r3, #0]
90002424:	6c1a      	ldr	r2, [r3, #64]	; 0x40
90002426:	4b0a      	ldr	r3, [pc, #40]	; (90002450 <HAL_DMA2D_Init+0x90>)
90002428:	4013      	ands	r3, r2
9000242a:	687a      	ldr	r2, [r7, #4]
9000242c:	68d1      	ldr	r1, [r2, #12]
9000242e:	687a      	ldr	r2, [r7, #4]
90002430:	6812      	ldr	r2, [r2, #0]
90002432:	430b      	orrs	r3, r1
90002434:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90002436:	687b      	ldr	r3, [r7, #4]
90002438:	2200      	movs	r2, #0
9000243a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
9000243c:	687b      	ldr	r3, [r7, #4]
9000243e:	2201      	movs	r2, #1
90002440:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
90002444:	2300      	movs	r3, #0
}
90002446:	4618      	mov	r0, r3
90002448:	3708      	adds	r7, #8
9000244a:	46bd      	mov	sp, r7
9000244c:	bd80      	pop	{r7, pc}
9000244e:	bf00      	nop
90002450:	ffffc000 	.word	0xffffc000

90002454 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
90002454:	b480      	push	{r7}
90002456:	b083      	sub	sp, #12
90002458:	af00      	add	r7, sp, #0
9000245a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
9000245c:	bf00      	nop
9000245e:	370c      	adds	r7, #12
90002460:	46bd      	mov	sp, r7
90002462:	f85d 7b04 	ldr.w	r7, [sp], #4
90002466:	4770      	bx	lr

90002468 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
90002468:	b580      	push	{r7, lr}
9000246a:	b086      	sub	sp, #24
9000246c:	af02      	add	r7, sp, #8
9000246e:	60f8      	str	r0, [r7, #12]
90002470:	60b9      	str	r1, [r7, #8]
90002472:	607a      	str	r2, [r7, #4]
90002474:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
90002476:	68fb      	ldr	r3, [r7, #12]
90002478:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
9000247c:	2b01      	cmp	r3, #1
9000247e:	d101      	bne.n	90002484 <HAL_DMA2D_Start+0x1c>
90002480:	2302      	movs	r3, #2
90002482:	e018      	b.n	900024b6 <HAL_DMA2D_Start+0x4e>
90002484:	68fb      	ldr	r3, [r7, #12]
90002486:	2201      	movs	r2, #1
90002488:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
9000248c:	68fb      	ldr	r3, [r7, #12]
9000248e:	2202      	movs	r2, #2
90002490:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
90002494:	69bb      	ldr	r3, [r7, #24]
90002496:	9300      	str	r3, [sp, #0]
90002498:	683b      	ldr	r3, [r7, #0]
9000249a:	687a      	ldr	r2, [r7, #4]
9000249c:	68b9      	ldr	r1, [r7, #8]
9000249e:	68f8      	ldr	r0, [r7, #12]
900024a0:	f000 f988 	bl	900027b4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
900024a4:	68fb      	ldr	r3, [r7, #12]
900024a6:	681b      	ldr	r3, [r3, #0]
900024a8:	681a      	ldr	r2, [r3, #0]
900024aa:	68fb      	ldr	r3, [r7, #12]
900024ac:	681b      	ldr	r3, [r3, #0]
900024ae:	f042 0201 	orr.w	r2, r2, #1
900024b2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
900024b4:	2300      	movs	r3, #0
}
900024b6:	4618      	mov	r0, r3
900024b8:	3710      	adds	r7, #16
900024ba:	46bd      	mov	sp, r7
900024bc:	bd80      	pop	{r7, pc}

900024be <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
900024be:	b580      	push	{r7, lr}
900024c0:	b086      	sub	sp, #24
900024c2:	af00      	add	r7, sp, #0
900024c4:	6078      	str	r0, [r7, #4]
900024c6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
900024c8:	2300      	movs	r3, #0
900024ca:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
900024cc:	687b      	ldr	r3, [r7, #4]
900024ce:	681b      	ldr	r3, [r3, #0]
900024d0:	681b      	ldr	r3, [r3, #0]
900024d2:	f003 0301 	and.w	r3, r3, #1
900024d6:	2b00      	cmp	r3, #0
900024d8:	d056      	beq.n	90002588 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
900024da:	f7ff fc71 	bl	90001dc0 <HAL_GetTick>
900024de:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
900024e0:	e04b      	b.n	9000257a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
900024e2:	687b      	ldr	r3, [r7, #4]
900024e4:	681b      	ldr	r3, [r3, #0]
900024e6:	685b      	ldr	r3, [r3, #4]
900024e8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
900024ea:	68fb      	ldr	r3, [r7, #12]
900024ec:	f003 0321 	and.w	r3, r3, #33	; 0x21
900024f0:	2b00      	cmp	r3, #0
900024f2:	d023      	beq.n	9000253c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
900024f4:	68fb      	ldr	r3, [r7, #12]
900024f6:	f003 0320 	and.w	r3, r3, #32
900024fa:	2b00      	cmp	r3, #0
900024fc:	d005      	beq.n	9000250a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
900024fe:	687b      	ldr	r3, [r7, #4]
90002500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90002502:	f043 0202 	orr.w	r2, r3, #2
90002506:	687b      	ldr	r3, [r7, #4]
90002508:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
9000250a:	68fb      	ldr	r3, [r7, #12]
9000250c:	f003 0301 	and.w	r3, r3, #1
90002510:	2b00      	cmp	r3, #0
90002512:	d005      	beq.n	90002520 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90002514:	687b      	ldr	r3, [r7, #4]
90002516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90002518:	f043 0201 	orr.w	r2, r3, #1
9000251c:	687b      	ldr	r3, [r7, #4]
9000251e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90002520:	687b      	ldr	r3, [r7, #4]
90002522:	681b      	ldr	r3, [r3, #0]
90002524:	2221      	movs	r2, #33	; 0x21
90002526:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
90002528:	687b      	ldr	r3, [r7, #4]
9000252a:	2204      	movs	r2, #4
9000252c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
90002530:	687b      	ldr	r3, [r7, #4]
90002532:	2200      	movs	r2, #0
90002534:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
90002538:	2301      	movs	r3, #1
9000253a:	e0a5      	b.n	90002688 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
9000253c:	683b      	ldr	r3, [r7, #0]
9000253e:	f1b3 3fff 	cmp.w	r3, #4294967295
90002542:	d01a      	beq.n	9000257a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90002544:	f7ff fc3c 	bl	90001dc0 <HAL_GetTick>
90002548:	4602      	mov	r2, r0
9000254a:	697b      	ldr	r3, [r7, #20]
9000254c:	1ad3      	subs	r3, r2, r3
9000254e:	683a      	ldr	r2, [r7, #0]
90002550:	429a      	cmp	r2, r3
90002552:	d302      	bcc.n	9000255a <HAL_DMA2D_PollForTransfer+0x9c>
90002554:	683b      	ldr	r3, [r7, #0]
90002556:	2b00      	cmp	r3, #0
90002558:	d10f      	bne.n	9000257a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
9000255a:	687b      	ldr	r3, [r7, #4]
9000255c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000255e:	f043 0220 	orr.w	r2, r3, #32
90002562:	687b      	ldr	r3, [r7, #4]
90002564:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
90002566:	687b      	ldr	r3, [r7, #4]
90002568:	2203      	movs	r2, #3
9000256a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
9000256e:	687b      	ldr	r3, [r7, #4]
90002570:	2200      	movs	r2, #0
90002572:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
90002576:	2303      	movs	r3, #3
90002578:	e086      	b.n	90002688 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
9000257a:	687b      	ldr	r3, [r7, #4]
9000257c:	681b      	ldr	r3, [r3, #0]
9000257e:	685b      	ldr	r3, [r3, #4]
90002580:	f003 0302 	and.w	r3, r3, #2
90002584:	2b00      	cmp	r3, #0
90002586:	d0ac      	beq.n	900024e2 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
90002588:	687b      	ldr	r3, [r7, #4]
9000258a:	681b      	ldr	r3, [r3, #0]
9000258c:	69db      	ldr	r3, [r3, #28]
9000258e:	f003 0320 	and.w	r3, r3, #32
90002592:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
90002594:	687b      	ldr	r3, [r7, #4]
90002596:	681b      	ldr	r3, [r3, #0]
90002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000259a:	f003 0320 	and.w	r3, r3, #32
9000259e:	693a      	ldr	r2, [r7, #16]
900025a0:	4313      	orrs	r3, r2
900025a2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
900025a4:	693b      	ldr	r3, [r7, #16]
900025a6:	2b00      	cmp	r3, #0
900025a8:	d061      	beq.n	9000266e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
900025aa:	f7ff fc09 	bl	90001dc0 <HAL_GetTick>
900025ae:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
900025b0:	e056      	b.n	90002660 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
900025b2:	687b      	ldr	r3, [r7, #4]
900025b4:	681b      	ldr	r3, [r3, #0]
900025b6:	685b      	ldr	r3, [r3, #4]
900025b8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
900025ba:	68fb      	ldr	r3, [r7, #12]
900025bc:	f003 0329 	and.w	r3, r3, #41	; 0x29
900025c0:	2b00      	cmp	r3, #0
900025c2:	d02e      	beq.n	90002622 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
900025c4:	68fb      	ldr	r3, [r7, #12]
900025c6:	f003 0308 	and.w	r3, r3, #8
900025ca:	2b00      	cmp	r3, #0
900025cc:	d005      	beq.n	900025da <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
900025ce:	687b      	ldr	r3, [r7, #4]
900025d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900025d2:	f043 0204 	orr.w	r2, r3, #4
900025d6:	687b      	ldr	r3, [r7, #4]
900025d8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
900025da:	68fb      	ldr	r3, [r7, #12]
900025dc:	f003 0320 	and.w	r3, r3, #32
900025e0:	2b00      	cmp	r3, #0
900025e2:	d005      	beq.n	900025f0 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
900025e4:	687b      	ldr	r3, [r7, #4]
900025e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900025e8:	f043 0202 	orr.w	r2, r3, #2
900025ec:	687b      	ldr	r3, [r7, #4]
900025ee:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
900025f0:	68fb      	ldr	r3, [r7, #12]
900025f2:	f003 0301 	and.w	r3, r3, #1
900025f6:	2b00      	cmp	r3, #0
900025f8:	d005      	beq.n	90002606 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
900025fa:	687b      	ldr	r3, [r7, #4]
900025fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900025fe:	f043 0201 	orr.w	r2, r3, #1
90002602:	687b      	ldr	r3, [r7, #4]
90002604:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90002606:	687b      	ldr	r3, [r7, #4]
90002608:	681b      	ldr	r3, [r3, #0]
9000260a:	2229      	movs	r2, #41	; 0x29
9000260c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
9000260e:	687b      	ldr	r3, [r7, #4]
90002610:	2204      	movs	r2, #4
90002612:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
90002616:	687b      	ldr	r3, [r7, #4]
90002618:	2200      	movs	r2, #0
9000261a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
9000261e:	2301      	movs	r3, #1
90002620:	e032      	b.n	90002688 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90002622:	683b      	ldr	r3, [r7, #0]
90002624:	f1b3 3fff 	cmp.w	r3, #4294967295
90002628:	d01a      	beq.n	90002660 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000262a:	f7ff fbc9 	bl	90001dc0 <HAL_GetTick>
9000262e:	4602      	mov	r2, r0
90002630:	697b      	ldr	r3, [r7, #20]
90002632:	1ad3      	subs	r3, r2, r3
90002634:	683a      	ldr	r2, [r7, #0]
90002636:	429a      	cmp	r2, r3
90002638:	d302      	bcc.n	90002640 <HAL_DMA2D_PollForTransfer+0x182>
9000263a:	683b      	ldr	r3, [r7, #0]
9000263c:	2b00      	cmp	r3, #0
9000263e:	d10f      	bne.n	90002660 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90002640:	687b      	ldr	r3, [r7, #4]
90002642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90002644:	f043 0220 	orr.w	r2, r3, #32
90002648:	687b      	ldr	r3, [r7, #4]
9000264a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
9000264c:	687b      	ldr	r3, [r7, #4]
9000264e:	2203      	movs	r2, #3
90002650:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
90002654:	687b      	ldr	r3, [r7, #4]
90002656:	2200      	movs	r2, #0
90002658:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
9000265c:	2303      	movs	r3, #3
9000265e:	e013      	b.n	90002688 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
90002660:	687b      	ldr	r3, [r7, #4]
90002662:	681b      	ldr	r3, [r3, #0]
90002664:	685b      	ldr	r3, [r3, #4]
90002666:	f003 0310 	and.w	r3, r3, #16
9000266a:	2b00      	cmp	r3, #0
9000266c:	d0a1      	beq.n	900025b2 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
9000266e:	687b      	ldr	r3, [r7, #4]
90002670:	681b      	ldr	r3, [r3, #0]
90002672:	2212      	movs	r2, #18
90002674:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
90002676:	687b      	ldr	r3, [r7, #4]
90002678:	2201      	movs	r2, #1
9000267a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
9000267e:	687b      	ldr	r3, [r7, #4]
90002680:	2200      	movs	r2, #0
90002682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
90002686:	2300      	movs	r3, #0
}
90002688:	4618      	mov	r0, r3
9000268a:	3718      	adds	r7, #24
9000268c:	46bd      	mov	sp, r7
9000268e:	bd80      	pop	{r7, pc}

90002690 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
90002690:	b480      	push	{r7}
90002692:	b087      	sub	sp, #28
90002694:	af00      	add	r7, sp, #0
90002696:	6078      	str	r0, [r7, #4]
90002698:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
9000269a:	687b      	ldr	r3, [r7, #4]
9000269c:	685b      	ldr	r3, [r3, #4]
9000269e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
900026a2:	687b      	ldr	r3, [r7, #4]
900026a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
900026a8:	2b01      	cmp	r3, #1
900026aa:	d101      	bne.n	900026b0 <HAL_DMA2D_ConfigLayer+0x20>
900026ac:	2302      	movs	r3, #2
900026ae:	e079      	b.n	900027a4 <HAL_DMA2D_ConfigLayer+0x114>
900026b0:	687b      	ldr	r3, [r7, #4]
900026b2:	2201      	movs	r2, #1
900026b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900026b8:	687b      	ldr	r3, [r7, #4]
900026ba:	2202      	movs	r2, #2
900026bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
900026c0:	683b      	ldr	r3, [r7, #0]
900026c2:	011b      	lsls	r3, r3, #4
900026c4:	3318      	adds	r3, #24
900026c6:	687a      	ldr	r2, [r7, #4]
900026c8:	4413      	add	r3, r2
900026ca:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
900026cc:	693b      	ldr	r3, [r7, #16]
900026ce:	685a      	ldr	r2, [r3, #4]
900026d0:	693b      	ldr	r3, [r7, #16]
900026d2:	689b      	ldr	r3, [r3, #8]
900026d4:	041b      	lsls	r3, r3, #16
900026d6:	4313      	orrs	r3, r2
900026d8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
900026da:	4b35      	ldr	r3, [pc, #212]	; (900027b0 <HAL_DMA2D_ConfigLayer+0x120>)
900026dc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900026de:	693b      	ldr	r3, [r7, #16]
900026e0:	685b      	ldr	r3, [r3, #4]
900026e2:	2b0a      	cmp	r3, #10
900026e4:	d003      	beq.n	900026ee <HAL_DMA2D_ConfigLayer+0x5e>
900026e6:	693b      	ldr	r3, [r7, #16]
900026e8:	685b      	ldr	r3, [r3, #4]
900026ea:	2b09      	cmp	r3, #9
900026ec:	d107      	bne.n	900026fe <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
900026ee:	693b      	ldr	r3, [r7, #16]
900026f0:	68db      	ldr	r3, [r3, #12]
900026f2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
900026f6:	697a      	ldr	r2, [r7, #20]
900026f8:	4313      	orrs	r3, r2
900026fa:	617b      	str	r3, [r7, #20]
900026fc:	e005      	b.n	9000270a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
900026fe:	693b      	ldr	r3, [r7, #16]
90002700:	68db      	ldr	r3, [r3, #12]
90002702:	061b      	lsls	r3, r3, #24
90002704:	697a      	ldr	r2, [r7, #20]
90002706:	4313      	orrs	r3, r2
90002708:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
9000270a:	683b      	ldr	r3, [r7, #0]
9000270c:	2b00      	cmp	r3, #0
9000270e:	d120      	bne.n	90002752 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90002710:	687b      	ldr	r3, [r7, #4]
90002712:	681b      	ldr	r3, [r3, #0]
90002714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90002716:	68fb      	ldr	r3, [r7, #12]
90002718:	43db      	mvns	r3, r3
9000271a:	ea02 0103 	and.w	r1, r2, r3
9000271e:	687b      	ldr	r3, [r7, #4]
90002720:	681b      	ldr	r3, [r3, #0]
90002722:	697a      	ldr	r2, [r7, #20]
90002724:	430a      	orrs	r2, r1
90002726:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90002728:	687b      	ldr	r3, [r7, #4]
9000272a:	681b      	ldr	r3, [r3, #0]
9000272c:	693a      	ldr	r2, [r7, #16]
9000272e:	6812      	ldr	r2, [r2, #0]
90002730:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90002732:	693b      	ldr	r3, [r7, #16]
90002734:	685b      	ldr	r3, [r3, #4]
90002736:	2b0a      	cmp	r3, #10
90002738:	d003      	beq.n	90002742 <HAL_DMA2D_ConfigLayer+0xb2>
9000273a:	693b      	ldr	r3, [r7, #16]
9000273c:	685b      	ldr	r3, [r3, #4]
9000273e:	2b09      	cmp	r3, #9
90002740:	d127      	bne.n	90002792 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90002742:	693b      	ldr	r3, [r7, #16]
90002744:	68da      	ldr	r2, [r3, #12]
90002746:	687b      	ldr	r3, [r7, #4]
90002748:	681b      	ldr	r3, [r3, #0]
9000274a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
9000274e:	629a      	str	r2, [r3, #40]	; 0x28
90002750:	e01f      	b.n	90002792 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90002752:	687b      	ldr	r3, [r7, #4]
90002754:	681b      	ldr	r3, [r3, #0]
90002756:	69da      	ldr	r2, [r3, #28]
90002758:	68fb      	ldr	r3, [r7, #12]
9000275a:	43db      	mvns	r3, r3
9000275c:	ea02 0103 	and.w	r1, r2, r3
90002760:	687b      	ldr	r3, [r7, #4]
90002762:	681b      	ldr	r3, [r3, #0]
90002764:	697a      	ldr	r2, [r7, #20]
90002766:	430a      	orrs	r2, r1
90002768:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
9000276a:	687b      	ldr	r3, [r7, #4]
9000276c:	681b      	ldr	r3, [r3, #0]
9000276e:	693a      	ldr	r2, [r7, #16]
90002770:	6812      	ldr	r2, [r2, #0]
90002772:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90002774:	693b      	ldr	r3, [r7, #16]
90002776:	685b      	ldr	r3, [r3, #4]
90002778:	2b0a      	cmp	r3, #10
9000277a:	d003      	beq.n	90002784 <HAL_DMA2D_ConfigLayer+0xf4>
9000277c:	693b      	ldr	r3, [r7, #16]
9000277e:	685b      	ldr	r3, [r3, #4]
90002780:	2b09      	cmp	r3, #9
90002782:	d106      	bne.n	90002792 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90002784:	693b      	ldr	r3, [r7, #16]
90002786:	68da      	ldr	r2, [r3, #12]
90002788:	687b      	ldr	r3, [r7, #4]
9000278a:	681b      	ldr	r3, [r3, #0]
9000278c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
90002790:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
90002792:	687b      	ldr	r3, [r7, #4]
90002794:	2201      	movs	r2, #1
90002796:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
9000279a:	687b      	ldr	r3, [r7, #4]
9000279c:	2200      	movs	r2, #0
9000279e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
900027a2:	2300      	movs	r3, #0
}
900027a4:	4618      	mov	r0, r3
900027a6:	371c      	adds	r7, #28
900027a8:	46bd      	mov	sp, r7
900027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
900027ae:	4770      	bx	lr
900027b0:	ff03000f 	.word	0xff03000f

900027b4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
900027b4:	b480      	push	{r7}
900027b6:	b08b      	sub	sp, #44	; 0x2c
900027b8:	af00      	add	r7, sp, #0
900027ba:	60f8      	str	r0, [r7, #12]
900027bc:	60b9      	str	r1, [r7, #8]
900027be:	607a      	str	r2, [r7, #4]
900027c0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
900027c2:	68fb      	ldr	r3, [r7, #12]
900027c4:	681b      	ldr	r3, [r3, #0]
900027c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900027c8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
900027cc:	683b      	ldr	r3, [r7, #0]
900027ce:	041a      	lsls	r2, r3, #16
900027d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900027d2:	431a      	orrs	r2, r3
900027d4:	68fb      	ldr	r3, [r7, #12]
900027d6:	681b      	ldr	r3, [r3, #0]
900027d8:	430a      	orrs	r2, r1
900027da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
900027dc:	68fb      	ldr	r3, [r7, #12]
900027de:	681b      	ldr	r3, [r3, #0]
900027e0:	687a      	ldr	r2, [r7, #4]
900027e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
900027e4:	68fb      	ldr	r3, [r7, #12]
900027e6:	685b      	ldr	r3, [r3, #4]
900027e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
900027ec:	d174      	bne.n	900028d8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
900027ee:	68bb      	ldr	r3, [r7, #8]
900027f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
900027f4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
900027f6:	68bb      	ldr	r3, [r7, #8]
900027f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
900027fc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
900027fe:	68bb      	ldr	r3, [r7, #8]
90002800:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90002804:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
90002806:	68bb      	ldr	r3, [r7, #8]
90002808:	b2db      	uxtb	r3, r3
9000280a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
9000280c:	68fb      	ldr	r3, [r7, #12]
9000280e:	689b      	ldr	r3, [r3, #8]
90002810:	2b00      	cmp	r3, #0
90002812:	d108      	bne.n	90002826 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
90002814:	69ba      	ldr	r2, [r7, #24]
90002816:	69fb      	ldr	r3, [r7, #28]
90002818:	431a      	orrs	r2, r3
9000281a:	6a3b      	ldr	r3, [r7, #32]
9000281c:	4313      	orrs	r3, r2
9000281e:	697a      	ldr	r2, [r7, #20]
90002820:	4313      	orrs	r3, r2
90002822:	627b      	str	r3, [r7, #36]	; 0x24
90002824:	e053      	b.n	900028ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
90002826:	68fb      	ldr	r3, [r7, #12]
90002828:	689b      	ldr	r3, [r3, #8]
9000282a:	2b01      	cmp	r3, #1
9000282c:	d106      	bne.n	9000283c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
9000282e:	69ba      	ldr	r2, [r7, #24]
90002830:	69fb      	ldr	r3, [r7, #28]
90002832:	4313      	orrs	r3, r2
90002834:	697a      	ldr	r2, [r7, #20]
90002836:	4313      	orrs	r3, r2
90002838:	627b      	str	r3, [r7, #36]	; 0x24
9000283a:	e048      	b.n	900028ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
9000283c:	68fb      	ldr	r3, [r7, #12]
9000283e:	689b      	ldr	r3, [r3, #8]
90002840:	2b02      	cmp	r3, #2
90002842:	d111      	bne.n	90002868 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
90002844:	69fb      	ldr	r3, [r7, #28]
90002846:	0cdb      	lsrs	r3, r3, #19
90002848:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
9000284a:	69bb      	ldr	r3, [r7, #24]
9000284c:	0a9b      	lsrs	r3, r3, #10
9000284e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90002850:	697b      	ldr	r3, [r7, #20]
90002852:	08db      	lsrs	r3, r3, #3
90002854:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
90002856:	69bb      	ldr	r3, [r7, #24]
90002858:	015a      	lsls	r2, r3, #5
9000285a:	69fb      	ldr	r3, [r7, #28]
9000285c:	02db      	lsls	r3, r3, #11
9000285e:	4313      	orrs	r3, r2
90002860:	697a      	ldr	r2, [r7, #20]
90002862:	4313      	orrs	r3, r2
90002864:	627b      	str	r3, [r7, #36]	; 0x24
90002866:	e032      	b.n	900028ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
90002868:	68fb      	ldr	r3, [r7, #12]
9000286a:	689b      	ldr	r3, [r3, #8]
9000286c:	2b03      	cmp	r3, #3
9000286e:	d117      	bne.n	900028a0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
90002870:	6a3b      	ldr	r3, [r7, #32]
90002872:	0fdb      	lsrs	r3, r3, #31
90002874:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
90002876:	69fb      	ldr	r3, [r7, #28]
90002878:	0cdb      	lsrs	r3, r3, #19
9000287a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
9000287c:	69bb      	ldr	r3, [r7, #24]
9000287e:	0adb      	lsrs	r3, r3, #11
90002880:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90002882:	697b      	ldr	r3, [r7, #20]
90002884:	08db      	lsrs	r3, r3, #3
90002886:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
90002888:	69bb      	ldr	r3, [r7, #24]
9000288a:	015a      	lsls	r2, r3, #5
9000288c:	69fb      	ldr	r3, [r7, #28]
9000288e:	029b      	lsls	r3, r3, #10
90002890:	431a      	orrs	r2, r3
90002892:	6a3b      	ldr	r3, [r7, #32]
90002894:	03db      	lsls	r3, r3, #15
90002896:	4313      	orrs	r3, r2
90002898:	697a      	ldr	r2, [r7, #20]
9000289a:	4313      	orrs	r3, r2
9000289c:	627b      	str	r3, [r7, #36]	; 0x24
9000289e:	e016      	b.n	900028ce <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
900028a0:	6a3b      	ldr	r3, [r7, #32]
900028a2:	0f1b      	lsrs	r3, r3, #28
900028a4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
900028a6:	69fb      	ldr	r3, [r7, #28]
900028a8:	0d1b      	lsrs	r3, r3, #20
900028aa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
900028ac:	69bb      	ldr	r3, [r7, #24]
900028ae:	0b1b      	lsrs	r3, r3, #12
900028b0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
900028b2:	697b      	ldr	r3, [r7, #20]
900028b4:	091b      	lsrs	r3, r3, #4
900028b6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
900028b8:	69bb      	ldr	r3, [r7, #24]
900028ba:	011a      	lsls	r2, r3, #4
900028bc:	69fb      	ldr	r3, [r7, #28]
900028be:	021b      	lsls	r3, r3, #8
900028c0:	431a      	orrs	r2, r3
900028c2:	6a3b      	ldr	r3, [r7, #32]
900028c4:	031b      	lsls	r3, r3, #12
900028c6:	4313      	orrs	r3, r2
900028c8:	697a      	ldr	r2, [r7, #20]
900028ca:	4313      	orrs	r3, r2
900028cc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
900028ce:	68fb      	ldr	r3, [r7, #12]
900028d0:	681b      	ldr	r3, [r3, #0]
900028d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
900028d4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
900028d6:	e003      	b.n	900028e0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
900028d8:	68fb      	ldr	r3, [r7, #12]
900028da:	681b      	ldr	r3, [r3, #0]
900028dc:	68ba      	ldr	r2, [r7, #8]
900028de:	60da      	str	r2, [r3, #12]
}
900028e0:	bf00      	nop
900028e2:	372c      	adds	r7, #44	; 0x2c
900028e4:	46bd      	mov	sp, r7
900028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
900028ea:	4770      	bx	lr

900028ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
900028ec:	b480      	push	{r7}
900028ee:	b089      	sub	sp, #36	; 0x24
900028f0:	af00      	add	r7, sp, #0
900028f2:	6078      	str	r0, [r7, #4]
900028f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
900028f6:	2300      	movs	r3, #0
900028f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
900028fa:	2300      	movs	r3, #0
900028fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
900028fe:	2300      	movs	r3, #0
90002900:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
90002902:	2300      	movs	r3, #0
90002904:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
90002906:	2300      	movs	r3, #0
90002908:	61fb      	str	r3, [r7, #28]
9000290a:	e175      	b.n	90002bf8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
9000290c:	2201      	movs	r2, #1
9000290e:	69fb      	ldr	r3, [r7, #28]
90002910:	fa02 f303 	lsl.w	r3, r2, r3
90002914:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
90002916:	683b      	ldr	r3, [r7, #0]
90002918:	681b      	ldr	r3, [r3, #0]
9000291a:	697a      	ldr	r2, [r7, #20]
9000291c:	4013      	ands	r3, r2
9000291e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
90002920:	693a      	ldr	r2, [r7, #16]
90002922:	697b      	ldr	r3, [r7, #20]
90002924:	429a      	cmp	r2, r3
90002926:	f040 8164 	bne.w	90002bf2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
9000292a:	683b      	ldr	r3, [r7, #0]
9000292c:	685b      	ldr	r3, [r3, #4]
9000292e:	2b01      	cmp	r3, #1
90002930:	d00b      	beq.n	9000294a <HAL_GPIO_Init+0x5e>
90002932:	683b      	ldr	r3, [r7, #0]
90002934:	685b      	ldr	r3, [r3, #4]
90002936:	2b02      	cmp	r3, #2
90002938:	d007      	beq.n	9000294a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
9000293a:	683b      	ldr	r3, [r7, #0]
9000293c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
9000293e:	2b11      	cmp	r3, #17
90002940:	d003      	beq.n	9000294a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
90002942:	683b      	ldr	r3, [r7, #0]
90002944:	685b      	ldr	r3, [r3, #4]
90002946:	2b12      	cmp	r3, #18
90002948:	d130      	bne.n	900029ac <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
9000294a:	687b      	ldr	r3, [r7, #4]
9000294c:	689b      	ldr	r3, [r3, #8]
9000294e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
90002950:	69fb      	ldr	r3, [r7, #28]
90002952:	005b      	lsls	r3, r3, #1
90002954:	2203      	movs	r2, #3
90002956:	fa02 f303 	lsl.w	r3, r2, r3
9000295a:	43db      	mvns	r3, r3
9000295c:	69ba      	ldr	r2, [r7, #24]
9000295e:	4013      	ands	r3, r2
90002960:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
90002962:	683b      	ldr	r3, [r7, #0]
90002964:	68da      	ldr	r2, [r3, #12]
90002966:	69fb      	ldr	r3, [r7, #28]
90002968:	005b      	lsls	r3, r3, #1
9000296a:	fa02 f303 	lsl.w	r3, r2, r3
9000296e:	69ba      	ldr	r2, [r7, #24]
90002970:	4313      	orrs	r3, r2
90002972:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
90002974:	687b      	ldr	r3, [r7, #4]
90002976:	69ba      	ldr	r2, [r7, #24]
90002978:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
9000297a:	687b      	ldr	r3, [r7, #4]
9000297c:	685b      	ldr	r3, [r3, #4]
9000297e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
90002980:	2201      	movs	r2, #1
90002982:	69fb      	ldr	r3, [r7, #28]
90002984:	fa02 f303 	lsl.w	r3, r2, r3
90002988:	43db      	mvns	r3, r3
9000298a:	69ba      	ldr	r2, [r7, #24]
9000298c:	4013      	ands	r3, r2
9000298e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
90002990:	683b      	ldr	r3, [r7, #0]
90002992:	685b      	ldr	r3, [r3, #4]
90002994:	091b      	lsrs	r3, r3, #4
90002996:	f003 0201 	and.w	r2, r3, #1
9000299a:	69fb      	ldr	r3, [r7, #28]
9000299c:	fa02 f303 	lsl.w	r3, r2, r3
900029a0:	69ba      	ldr	r2, [r7, #24]
900029a2:	4313      	orrs	r3, r2
900029a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
900029a6:	687b      	ldr	r3, [r7, #4]
900029a8:	69ba      	ldr	r2, [r7, #24]
900029aa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
900029ac:	687b      	ldr	r3, [r7, #4]
900029ae:	68db      	ldr	r3, [r3, #12]
900029b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
900029b2:	69fb      	ldr	r3, [r7, #28]
900029b4:	005b      	lsls	r3, r3, #1
900029b6:	2203      	movs	r2, #3
900029b8:	fa02 f303 	lsl.w	r3, r2, r3
900029bc:	43db      	mvns	r3, r3
900029be:	69ba      	ldr	r2, [r7, #24]
900029c0:	4013      	ands	r3, r2
900029c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
900029c4:	683b      	ldr	r3, [r7, #0]
900029c6:	689a      	ldr	r2, [r3, #8]
900029c8:	69fb      	ldr	r3, [r7, #28]
900029ca:	005b      	lsls	r3, r3, #1
900029cc:	fa02 f303 	lsl.w	r3, r2, r3
900029d0:	69ba      	ldr	r2, [r7, #24]
900029d2:	4313      	orrs	r3, r2
900029d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
900029d6:	687b      	ldr	r3, [r7, #4]
900029d8:	69ba      	ldr	r2, [r7, #24]
900029da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
900029dc:	683b      	ldr	r3, [r7, #0]
900029de:	685b      	ldr	r3, [r3, #4]
900029e0:	2b02      	cmp	r3, #2
900029e2:	d003      	beq.n	900029ec <HAL_GPIO_Init+0x100>
900029e4:	683b      	ldr	r3, [r7, #0]
900029e6:	685b      	ldr	r3, [r3, #4]
900029e8:	2b12      	cmp	r3, #18
900029ea:	d123      	bne.n	90002a34 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
900029ec:	69fb      	ldr	r3, [r7, #28]
900029ee:	08da      	lsrs	r2, r3, #3
900029f0:	687b      	ldr	r3, [r7, #4]
900029f2:	3208      	adds	r2, #8
900029f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
900029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
900029fa:	69fb      	ldr	r3, [r7, #28]
900029fc:	f003 0307 	and.w	r3, r3, #7
90002a00:	009b      	lsls	r3, r3, #2
90002a02:	220f      	movs	r2, #15
90002a04:	fa02 f303 	lsl.w	r3, r2, r3
90002a08:	43db      	mvns	r3, r3
90002a0a:	69ba      	ldr	r2, [r7, #24]
90002a0c:	4013      	ands	r3, r2
90002a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
90002a10:	683b      	ldr	r3, [r7, #0]
90002a12:	691a      	ldr	r2, [r3, #16]
90002a14:	69fb      	ldr	r3, [r7, #28]
90002a16:	f003 0307 	and.w	r3, r3, #7
90002a1a:	009b      	lsls	r3, r3, #2
90002a1c:	fa02 f303 	lsl.w	r3, r2, r3
90002a20:	69ba      	ldr	r2, [r7, #24]
90002a22:	4313      	orrs	r3, r2
90002a24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
90002a26:	69fb      	ldr	r3, [r7, #28]
90002a28:	08da      	lsrs	r2, r3, #3
90002a2a:	687b      	ldr	r3, [r7, #4]
90002a2c:	3208      	adds	r2, #8
90002a2e:	69b9      	ldr	r1, [r7, #24]
90002a30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
90002a34:	687b      	ldr	r3, [r7, #4]
90002a36:	681b      	ldr	r3, [r3, #0]
90002a38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
90002a3a:	69fb      	ldr	r3, [r7, #28]
90002a3c:	005b      	lsls	r3, r3, #1
90002a3e:	2203      	movs	r2, #3
90002a40:	fa02 f303 	lsl.w	r3, r2, r3
90002a44:	43db      	mvns	r3, r3
90002a46:	69ba      	ldr	r2, [r7, #24]
90002a48:	4013      	ands	r3, r2
90002a4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
90002a4c:	683b      	ldr	r3, [r7, #0]
90002a4e:	685b      	ldr	r3, [r3, #4]
90002a50:	f003 0203 	and.w	r2, r3, #3
90002a54:	69fb      	ldr	r3, [r7, #28]
90002a56:	005b      	lsls	r3, r3, #1
90002a58:	fa02 f303 	lsl.w	r3, r2, r3
90002a5c:	69ba      	ldr	r2, [r7, #24]
90002a5e:	4313      	orrs	r3, r2
90002a60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
90002a62:	687b      	ldr	r3, [r7, #4]
90002a64:	69ba      	ldr	r2, [r7, #24]
90002a66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
90002a68:	683b      	ldr	r3, [r7, #0]
90002a6a:	685b      	ldr	r3, [r3, #4]
90002a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90002a70:	2b00      	cmp	r3, #0
90002a72:	f000 80be 	beq.w	90002bf2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90002a76:	4b66      	ldr	r3, [pc, #408]	; (90002c10 <HAL_GPIO_Init+0x324>)
90002a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90002a7a:	4a65      	ldr	r2, [pc, #404]	; (90002c10 <HAL_GPIO_Init+0x324>)
90002a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
90002a80:	6453      	str	r3, [r2, #68]	; 0x44
90002a82:	4b63      	ldr	r3, [pc, #396]	; (90002c10 <HAL_GPIO_Init+0x324>)
90002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90002a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90002a8a:	60fb      	str	r3, [r7, #12]
90002a8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
90002a8e:	4a61      	ldr	r2, [pc, #388]	; (90002c14 <HAL_GPIO_Init+0x328>)
90002a90:	69fb      	ldr	r3, [r7, #28]
90002a92:	089b      	lsrs	r3, r3, #2
90002a94:	3302      	adds	r3, #2
90002a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90002a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
90002a9c:	69fb      	ldr	r3, [r7, #28]
90002a9e:	f003 0303 	and.w	r3, r3, #3
90002aa2:	009b      	lsls	r3, r3, #2
90002aa4:	220f      	movs	r2, #15
90002aa6:	fa02 f303 	lsl.w	r3, r2, r3
90002aaa:	43db      	mvns	r3, r3
90002aac:	69ba      	ldr	r2, [r7, #24]
90002aae:	4013      	ands	r3, r2
90002ab0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
90002ab2:	687b      	ldr	r3, [r7, #4]
90002ab4:	4a58      	ldr	r2, [pc, #352]	; (90002c18 <HAL_GPIO_Init+0x32c>)
90002ab6:	4293      	cmp	r3, r2
90002ab8:	d037      	beq.n	90002b2a <HAL_GPIO_Init+0x23e>
90002aba:	687b      	ldr	r3, [r7, #4]
90002abc:	4a57      	ldr	r2, [pc, #348]	; (90002c1c <HAL_GPIO_Init+0x330>)
90002abe:	4293      	cmp	r3, r2
90002ac0:	d031      	beq.n	90002b26 <HAL_GPIO_Init+0x23a>
90002ac2:	687b      	ldr	r3, [r7, #4]
90002ac4:	4a56      	ldr	r2, [pc, #344]	; (90002c20 <HAL_GPIO_Init+0x334>)
90002ac6:	4293      	cmp	r3, r2
90002ac8:	d02b      	beq.n	90002b22 <HAL_GPIO_Init+0x236>
90002aca:	687b      	ldr	r3, [r7, #4]
90002acc:	4a55      	ldr	r2, [pc, #340]	; (90002c24 <HAL_GPIO_Init+0x338>)
90002ace:	4293      	cmp	r3, r2
90002ad0:	d025      	beq.n	90002b1e <HAL_GPIO_Init+0x232>
90002ad2:	687b      	ldr	r3, [r7, #4]
90002ad4:	4a54      	ldr	r2, [pc, #336]	; (90002c28 <HAL_GPIO_Init+0x33c>)
90002ad6:	4293      	cmp	r3, r2
90002ad8:	d01f      	beq.n	90002b1a <HAL_GPIO_Init+0x22e>
90002ada:	687b      	ldr	r3, [r7, #4]
90002adc:	4a53      	ldr	r2, [pc, #332]	; (90002c2c <HAL_GPIO_Init+0x340>)
90002ade:	4293      	cmp	r3, r2
90002ae0:	d019      	beq.n	90002b16 <HAL_GPIO_Init+0x22a>
90002ae2:	687b      	ldr	r3, [r7, #4]
90002ae4:	4a52      	ldr	r2, [pc, #328]	; (90002c30 <HAL_GPIO_Init+0x344>)
90002ae6:	4293      	cmp	r3, r2
90002ae8:	d013      	beq.n	90002b12 <HAL_GPIO_Init+0x226>
90002aea:	687b      	ldr	r3, [r7, #4]
90002aec:	4a51      	ldr	r2, [pc, #324]	; (90002c34 <HAL_GPIO_Init+0x348>)
90002aee:	4293      	cmp	r3, r2
90002af0:	d00d      	beq.n	90002b0e <HAL_GPIO_Init+0x222>
90002af2:	687b      	ldr	r3, [r7, #4]
90002af4:	4a50      	ldr	r2, [pc, #320]	; (90002c38 <HAL_GPIO_Init+0x34c>)
90002af6:	4293      	cmp	r3, r2
90002af8:	d007      	beq.n	90002b0a <HAL_GPIO_Init+0x21e>
90002afa:	687b      	ldr	r3, [r7, #4]
90002afc:	4a4f      	ldr	r2, [pc, #316]	; (90002c3c <HAL_GPIO_Init+0x350>)
90002afe:	4293      	cmp	r3, r2
90002b00:	d101      	bne.n	90002b06 <HAL_GPIO_Init+0x21a>
90002b02:	2309      	movs	r3, #9
90002b04:	e012      	b.n	90002b2c <HAL_GPIO_Init+0x240>
90002b06:	230a      	movs	r3, #10
90002b08:	e010      	b.n	90002b2c <HAL_GPIO_Init+0x240>
90002b0a:	2308      	movs	r3, #8
90002b0c:	e00e      	b.n	90002b2c <HAL_GPIO_Init+0x240>
90002b0e:	2307      	movs	r3, #7
90002b10:	e00c      	b.n	90002b2c <HAL_GPIO_Init+0x240>
90002b12:	2306      	movs	r3, #6
90002b14:	e00a      	b.n	90002b2c <HAL_GPIO_Init+0x240>
90002b16:	2305      	movs	r3, #5
90002b18:	e008      	b.n	90002b2c <HAL_GPIO_Init+0x240>
90002b1a:	2304      	movs	r3, #4
90002b1c:	e006      	b.n	90002b2c <HAL_GPIO_Init+0x240>
90002b1e:	2303      	movs	r3, #3
90002b20:	e004      	b.n	90002b2c <HAL_GPIO_Init+0x240>
90002b22:	2302      	movs	r3, #2
90002b24:	e002      	b.n	90002b2c <HAL_GPIO_Init+0x240>
90002b26:	2301      	movs	r3, #1
90002b28:	e000      	b.n	90002b2c <HAL_GPIO_Init+0x240>
90002b2a:	2300      	movs	r3, #0
90002b2c:	69fa      	ldr	r2, [r7, #28]
90002b2e:	f002 0203 	and.w	r2, r2, #3
90002b32:	0092      	lsls	r2, r2, #2
90002b34:	4093      	lsls	r3, r2
90002b36:	69ba      	ldr	r2, [r7, #24]
90002b38:	4313      	orrs	r3, r2
90002b3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
90002b3c:	4935      	ldr	r1, [pc, #212]	; (90002c14 <HAL_GPIO_Init+0x328>)
90002b3e:	69fb      	ldr	r3, [r7, #28]
90002b40:	089b      	lsrs	r3, r3, #2
90002b42:	3302      	adds	r3, #2
90002b44:	69ba      	ldr	r2, [r7, #24]
90002b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
90002b4a:	4b3d      	ldr	r3, [pc, #244]	; (90002c40 <HAL_GPIO_Init+0x354>)
90002b4c:	681b      	ldr	r3, [r3, #0]
90002b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
90002b50:	693b      	ldr	r3, [r7, #16]
90002b52:	43db      	mvns	r3, r3
90002b54:	69ba      	ldr	r2, [r7, #24]
90002b56:	4013      	ands	r3, r2
90002b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
90002b5a:	683b      	ldr	r3, [r7, #0]
90002b5c:	685b      	ldr	r3, [r3, #4]
90002b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
90002b62:	2b00      	cmp	r3, #0
90002b64:	d003      	beq.n	90002b6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
90002b66:	69ba      	ldr	r2, [r7, #24]
90002b68:	693b      	ldr	r3, [r7, #16]
90002b6a:	4313      	orrs	r3, r2
90002b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
90002b6e:	4a34      	ldr	r2, [pc, #208]	; (90002c40 <HAL_GPIO_Init+0x354>)
90002b70:	69bb      	ldr	r3, [r7, #24]
90002b72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
90002b74:	4b32      	ldr	r3, [pc, #200]	; (90002c40 <HAL_GPIO_Init+0x354>)
90002b76:	685b      	ldr	r3, [r3, #4]
90002b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
90002b7a:	693b      	ldr	r3, [r7, #16]
90002b7c:	43db      	mvns	r3, r3
90002b7e:	69ba      	ldr	r2, [r7, #24]
90002b80:	4013      	ands	r3, r2
90002b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
90002b84:	683b      	ldr	r3, [r7, #0]
90002b86:	685b      	ldr	r3, [r3, #4]
90002b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90002b8c:	2b00      	cmp	r3, #0
90002b8e:	d003      	beq.n	90002b98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
90002b90:	69ba      	ldr	r2, [r7, #24]
90002b92:	693b      	ldr	r3, [r7, #16]
90002b94:	4313      	orrs	r3, r2
90002b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
90002b98:	4a29      	ldr	r2, [pc, #164]	; (90002c40 <HAL_GPIO_Init+0x354>)
90002b9a:	69bb      	ldr	r3, [r7, #24]
90002b9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
90002b9e:	4b28      	ldr	r3, [pc, #160]	; (90002c40 <HAL_GPIO_Init+0x354>)
90002ba0:	689b      	ldr	r3, [r3, #8]
90002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
90002ba4:	693b      	ldr	r3, [r7, #16]
90002ba6:	43db      	mvns	r3, r3
90002ba8:	69ba      	ldr	r2, [r7, #24]
90002baa:	4013      	ands	r3, r2
90002bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
90002bae:	683b      	ldr	r3, [r7, #0]
90002bb0:	685b      	ldr	r3, [r3, #4]
90002bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
90002bb6:	2b00      	cmp	r3, #0
90002bb8:	d003      	beq.n	90002bc2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
90002bba:	69ba      	ldr	r2, [r7, #24]
90002bbc:	693b      	ldr	r3, [r7, #16]
90002bbe:	4313      	orrs	r3, r2
90002bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
90002bc2:	4a1f      	ldr	r2, [pc, #124]	; (90002c40 <HAL_GPIO_Init+0x354>)
90002bc4:	69bb      	ldr	r3, [r7, #24]
90002bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
90002bc8:	4b1d      	ldr	r3, [pc, #116]	; (90002c40 <HAL_GPIO_Init+0x354>)
90002bca:	68db      	ldr	r3, [r3, #12]
90002bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
90002bce:	693b      	ldr	r3, [r7, #16]
90002bd0:	43db      	mvns	r3, r3
90002bd2:	69ba      	ldr	r2, [r7, #24]
90002bd4:	4013      	ands	r3, r2
90002bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
90002bd8:	683b      	ldr	r3, [r7, #0]
90002bda:	685b      	ldr	r3, [r3, #4]
90002bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90002be0:	2b00      	cmp	r3, #0
90002be2:	d003      	beq.n	90002bec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
90002be4:	69ba      	ldr	r2, [r7, #24]
90002be6:	693b      	ldr	r3, [r7, #16]
90002be8:	4313      	orrs	r3, r2
90002bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
90002bec:	4a14      	ldr	r2, [pc, #80]	; (90002c40 <HAL_GPIO_Init+0x354>)
90002bee:	69bb      	ldr	r3, [r7, #24]
90002bf0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
90002bf2:	69fb      	ldr	r3, [r7, #28]
90002bf4:	3301      	adds	r3, #1
90002bf6:	61fb      	str	r3, [r7, #28]
90002bf8:	69fb      	ldr	r3, [r7, #28]
90002bfa:	2b0f      	cmp	r3, #15
90002bfc:	f67f ae86 	bls.w	9000290c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
90002c00:	bf00      	nop
90002c02:	bf00      	nop
90002c04:	3724      	adds	r7, #36	; 0x24
90002c06:	46bd      	mov	sp, r7
90002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
90002c0c:	4770      	bx	lr
90002c0e:	bf00      	nop
90002c10:	40023800 	.word	0x40023800
90002c14:	40013800 	.word	0x40013800
90002c18:	40020000 	.word	0x40020000
90002c1c:	40020400 	.word	0x40020400
90002c20:	40020800 	.word	0x40020800
90002c24:	40020c00 	.word	0x40020c00
90002c28:	40021000 	.word	0x40021000
90002c2c:	40021400 	.word	0x40021400
90002c30:	40021800 	.word	0x40021800
90002c34:	40021c00 	.word	0x40021c00
90002c38:	40022000 	.word	0x40022000
90002c3c:	40022400 	.word	0x40022400
90002c40:	40013c00 	.word	0x40013c00

90002c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
90002c44:	b480      	push	{r7}
90002c46:	b083      	sub	sp, #12
90002c48:	af00      	add	r7, sp, #0
90002c4a:	6078      	str	r0, [r7, #4]
90002c4c:	460b      	mov	r3, r1
90002c4e:	807b      	strh	r3, [r7, #2]
90002c50:	4613      	mov	r3, r2
90002c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
90002c54:	787b      	ldrb	r3, [r7, #1]
90002c56:	2b00      	cmp	r3, #0
90002c58:	d003      	beq.n	90002c62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
90002c5a:	887a      	ldrh	r2, [r7, #2]
90002c5c:	687b      	ldr	r3, [r7, #4]
90002c5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
90002c60:	e003      	b.n	90002c6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
90002c62:	887b      	ldrh	r3, [r7, #2]
90002c64:	041a      	lsls	r2, r3, #16
90002c66:	687b      	ldr	r3, [r7, #4]
90002c68:	619a      	str	r2, [r3, #24]
}
90002c6a:	bf00      	nop
90002c6c:	370c      	adds	r7, #12
90002c6e:	46bd      	mov	sp, r7
90002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
90002c74:	4770      	bx	lr

90002c76 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
90002c76:	b480      	push	{r7}
90002c78:	b085      	sub	sp, #20
90002c7a:	af00      	add	r7, sp, #0
90002c7c:	6078      	str	r0, [r7, #4]
90002c7e:	460b      	mov	r3, r1
90002c80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
90002c82:	687b      	ldr	r3, [r7, #4]
90002c84:	695b      	ldr	r3, [r3, #20]
90002c86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
90002c88:	887a      	ldrh	r2, [r7, #2]
90002c8a:	68fb      	ldr	r3, [r7, #12]
90002c8c:	4013      	ands	r3, r2
90002c8e:	041a      	lsls	r2, r3, #16
90002c90:	68fb      	ldr	r3, [r7, #12]
90002c92:	43d9      	mvns	r1, r3
90002c94:	887b      	ldrh	r3, [r7, #2]
90002c96:	400b      	ands	r3, r1
90002c98:	431a      	orrs	r2, r3
90002c9a:	687b      	ldr	r3, [r7, #4]
90002c9c:	619a      	str	r2, [r3, #24]
}
90002c9e:	bf00      	nop
90002ca0:	3714      	adds	r7, #20
90002ca2:	46bd      	mov	sp, r7
90002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
90002ca8:	4770      	bx	lr
	...

90002cac <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
90002cac:	b580      	push	{r7, lr}
90002cae:	b084      	sub	sp, #16
90002cb0:	af00      	add	r7, sp, #0
90002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
90002cb4:	687b      	ldr	r3, [r7, #4]
90002cb6:	2b00      	cmp	r3, #0
90002cb8:	d101      	bne.n	90002cbe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
90002cba:	2301      	movs	r3, #1
90002cbc:	e0bf      	b.n	90002e3e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
90002cbe:	687b      	ldr	r3, [r7, #4]
90002cc0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
90002cc4:	b2db      	uxtb	r3, r3
90002cc6:	2b00      	cmp	r3, #0
90002cc8:	d106      	bne.n	90002cd8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
90002cca:	687b      	ldr	r3, [r7, #4]
90002ccc:	2200      	movs	r2, #0
90002cce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
90002cd2:	6878      	ldr	r0, [r7, #4]
90002cd4:	f000 f8ba 	bl	90002e4c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90002cd8:	687b      	ldr	r3, [r7, #4]
90002cda:	2202      	movs	r2, #2
90002cdc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90002ce0:	687b      	ldr	r3, [r7, #4]
90002ce2:	681b      	ldr	r3, [r3, #0]
90002ce4:	699a      	ldr	r2, [r3, #24]
90002ce6:	687b      	ldr	r3, [r7, #4]
90002ce8:	681b      	ldr	r3, [r3, #0]
90002cea:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
90002cee:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90002cf0:	687b      	ldr	r3, [r7, #4]
90002cf2:	681b      	ldr	r3, [r3, #0]
90002cf4:	6999      	ldr	r1, [r3, #24]
90002cf6:	687b      	ldr	r3, [r7, #4]
90002cf8:	685a      	ldr	r2, [r3, #4]
90002cfa:	687b      	ldr	r3, [r7, #4]
90002cfc:	689b      	ldr	r3, [r3, #8]
90002cfe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90002d00:	687b      	ldr	r3, [r7, #4]
90002d02:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90002d04:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90002d06:	687b      	ldr	r3, [r7, #4]
90002d08:	691b      	ldr	r3, [r3, #16]
90002d0a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90002d0c:	687b      	ldr	r3, [r7, #4]
90002d0e:	681b      	ldr	r3, [r3, #0]
90002d10:	430a      	orrs	r2, r1
90002d12:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
90002d14:	687b      	ldr	r3, [r7, #4]
90002d16:	681b      	ldr	r3, [r3, #0]
90002d18:	6899      	ldr	r1, [r3, #8]
90002d1a:	687b      	ldr	r3, [r7, #4]
90002d1c:	681a      	ldr	r2, [r3, #0]
90002d1e:	4b4a      	ldr	r3, [pc, #296]	; (90002e48 <HAL_LTDC_Init+0x19c>)
90002d20:	400b      	ands	r3, r1
90002d22:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
90002d24:	687b      	ldr	r3, [r7, #4]
90002d26:	695b      	ldr	r3, [r3, #20]
90002d28:	041b      	lsls	r3, r3, #16
90002d2a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
90002d2c:	687b      	ldr	r3, [r7, #4]
90002d2e:	681b      	ldr	r3, [r3, #0]
90002d30:	6899      	ldr	r1, [r3, #8]
90002d32:	687b      	ldr	r3, [r7, #4]
90002d34:	699a      	ldr	r2, [r3, #24]
90002d36:	68fb      	ldr	r3, [r7, #12]
90002d38:	431a      	orrs	r2, r3
90002d3a:	687b      	ldr	r3, [r7, #4]
90002d3c:	681b      	ldr	r3, [r3, #0]
90002d3e:	430a      	orrs	r2, r1
90002d40:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
90002d42:	687b      	ldr	r3, [r7, #4]
90002d44:	681b      	ldr	r3, [r3, #0]
90002d46:	68d9      	ldr	r1, [r3, #12]
90002d48:	687b      	ldr	r3, [r7, #4]
90002d4a:	681a      	ldr	r2, [r3, #0]
90002d4c:	4b3e      	ldr	r3, [pc, #248]	; (90002e48 <HAL_LTDC_Init+0x19c>)
90002d4e:	400b      	ands	r3, r1
90002d50:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
90002d52:	687b      	ldr	r3, [r7, #4]
90002d54:	69db      	ldr	r3, [r3, #28]
90002d56:	041b      	lsls	r3, r3, #16
90002d58:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
90002d5a:	687b      	ldr	r3, [r7, #4]
90002d5c:	681b      	ldr	r3, [r3, #0]
90002d5e:	68d9      	ldr	r1, [r3, #12]
90002d60:	687b      	ldr	r3, [r7, #4]
90002d62:	6a1a      	ldr	r2, [r3, #32]
90002d64:	68fb      	ldr	r3, [r7, #12]
90002d66:	431a      	orrs	r2, r3
90002d68:	687b      	ldr	r3, [r7, #4]
90002d6a:	681b      	ldr	r3, [r3, #0]
90002d6c:	430a      	orrs	r2, r1
90002d6e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
90002d70:	687b      	ldr	r3, [r7, #4]
90002d72:	681b      	ldr	r3, [r3, #0]
90002d74:	6919      	ldr	r1, [r3, #16]
90002d76:	687b      	ldr	r3, [r7, #4]
90002d78:	681a      	ldr	r2, [r3, #0]
90002d7a:	4b33      	ldr	r3, [pc, #204]	; (90002e48 <HAL_LTDC_Init+0x19c>)
90002d7c:	400b      	ands	r3, r1
90002d7e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
90002d80:	687b      	ldr	r3, [r7, #4]
90002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002d84:	041b      	lsls	r3, r3, #16
90002d86:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
90002d88:	687b      	ldr	r3, [r7, #4]
90002d8a:	681b      	ldr	r3, [r3, #0]
90002d8c:	6919      	ldr	r1, [r3, #16]
90002d8e:	687b      	ldr	r3, [r7, #4]
90002d90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
90002d92:	68fb      	ldr	r3, [r7, #12]
90002d94:	431a      	orrs	r2, r3
90002d96:	687b      	ldr	r3, [r7, #4]
90002d98:	681b      	ldr	r3, [r3, #0]
90002d9a:	430a      	orrs	r2, r1
90002d9c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
90002d9e:	687b      	ldr	r3, [r7, #4]
90002da0:	681b      	ldr	r3, [r3, #0]
90002da2:	6959      	ldr	r1, [r3, #20]
90002da4:	687b      	ldr	r3, [r7, #4]
90002da6:	681a      	ldr	r2, [r3, #0]
90002da8:	4b27      	ldr	r3, [pc, #156]	; (90002e48 <HAL_LTDC_Init+0x19c>)
90002daa:	400b      	ands	r3, r1
90002dac:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
90002dae:	687b      	ldr	r3, [r7, #4]
90002db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002db2:	041b      	lsls	r3, r3, #16
90002db4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
90002db6:	687b      	ldr	r3, [r7, #4]
90002db8:	681b      	ldr	r3, [r3, #0]
90002dba:	6959      	ldr	r1, [r3, #20]
90002dbc:	687b      	ldr	r3, [r7, #4]
90002dbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002dc0:	68fb      	ldr	r3, [r7, #12]
90002dc2:	431a      	orrs	r2, r3
90002dc4:	687b      	ldr	r3, [r7, #4]
90002dc6:	681b      	ldr	r3, [r3, #0]
90002dc8:	430a      	orrs	r2, r1
90002dca:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
90002dcc:	687b      	ldr	r3, [r7, #4]
90002dce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
90002dd2:	021b      	lsls	r3, r3, #8
90002dd4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
90002dd6:	687b      	ldr	r3, [r7, #4]
90002dd8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
90002ddc:	041b      	lsls	r3, r3, #16
90002dde:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90002de0:	687b      	ldr	r3, [r7, #4]
90002de2:	681b      	ldr	r3, [r3, #0]
90002de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90002de6:	687b      	ldr	r3, [r7, #4]
90002de8:	681b      	ldr	r3, [r3, #0]
90002dea:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
90002dee:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
90002df0:	687b      	ldr	r3, [r7, #4]
90002df2:	681b      	ldr	r3, [r3, #0]
90002df4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
90002df6:	68ba      	ldr	r2, [r7, #8]
90002df8:	68fb      	ldr	r3, [r7, #12]
90002dfa:	4313      	orrs	r3, r2
90002dfc:	687a      	ldr	r2, [r7, #4]
90002dfe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
90002e02:	431a      	orrs	r2, r3
90002e04:	687b      	ldr	r3, [r7, #4]
90002e06:	681b      	ldr	r3, [r3, #0]
90002e08:	430a      	orrs	r2, r1
90002e0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
90002e0c:	687b      	ldr	r3, [r7, #4]
90002e0e:	681b      	ldr	r3, [r3, #0]
90002e10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90002e12:	687b      	ldr	r3, [r7, #4]
90002e14:	681b      	ldr	r3, [r3, #0]
90002e16:	f042 0206 	orr.w	r2, r2, #6
90002e1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
90002e1c:	687b      	ldr	r3, [r7, #4]
90002e1e:	681b      	ldr	r3, [r3, #0]
90002e20:	699a      	ldr	r2, [r3, #24]
90002e22:	687b      	ldr	r3, [r7, #4]
90002e24:	681b      	ldr	r3, [r3, #0]
90002e26:	f042 0201 	orr.w	r2, r2, #1
90002e2a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
90002e2c:	687b      	ldr	r3, [r7, #4]
90002e2e:	2200      	movs	r2, #0
90002e30:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
90002e34:	687b      	ldr	r3, [r7, #4]
90002e36:	2201      	movs	r2, #1
90002e38:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
90002e3c:	2300      	movs	r3, #0
}
90002e3e:	4618      	mov	r0, r3
90002e40:	3710      	adds	r7, #16
90002e42:	46bd      	mov	sp, r7
90002e44:	bd80      	pop	{r7, pc}
90002e46:	bf00      	nop
90002e48:	f000f800 	.word	0xf000f800

90002e4c <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
90002e4c:	b480      	push	{r7}
90002e4e:	b083      	sub	sp, #12
90002e50:	af00      	add	r7, sp, #0
90002e52:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
90002e54:	bf00      	nop
90002e56:	370c      	adds	r7, #12
90002e58:	46bd      	mov	sp, r7
90002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
90002e5e:	4770      	bx	lr

90002e60 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
90002e60:	b5b0      	push	{r4, r5, r7, lr}
90002e62:	b084      	sub	sp, #16
90002e64:	af00      	add	r7, sp, #0
90002e66:	60f8      	str	r0, [r7, #12]
90002e68:	60b9      	str	r1, [r7, #8]
90002e6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
90002e6c:	68fb      	ldr	r3, [r7, #12]
90002e6e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
90002e72:	2b01      	cmp	r3, #1
90002e74:	d101      	bne.n	90002e7a <HAL_LTDC_ConfigLayer+0x1a>
90002e76:	2302      	movs	r3, #2
90002e78:	e02c      	b.n	90002ed4 <HAL_LTDC_ConfigLayer+0x74>
90002e7a:	68fb      	ldr	r3, [r7, #12]
90002e7c:	2201      	movs	r2, #1
90002e7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90002e82:	68fb      	ldr	r3, [r7, #12]
90002e84:	2202      	movs	r2, #2
90002e86:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90002e8a:	68fa      	ldr	r2, [r7, #12]
90002e8c:	687b      	ldr	r3, [r7, #4]
90002e8e:	2134      	movs	r1, #52	; 0x34
90002e90:	fb01 f303 	mul.w	r3, r1, r3
90002e94:	4413      	add	r3, r2
90002e96:	f103 0238 	add.w	r2, r3, #56	; 0x38
90002e9a:	68bb      	ldr	r3, [r7, #8]
90002e9c:	4614      	mov	r4, r2
90002e9e:	461d      	mov	r5, r3
90002ea0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90002ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90002ea4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90002ea6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90002ea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90002eaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90002eac:	682b      	ldr	r3, [r5, #0]
90002eae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
90002eb0:	687a      	ldr	r2, [r7, #4]
90002eb2:	68b9      	ldr	r1, [r7, #8]
90002eb4:	68f8      	ldr	r0, [r7, #12]
90002eb6:	f000 f81f 	bl	90002ef8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90002eba:	68fb      	ldr	r3, [r7, #12]
90002ebc:	681b      	ldr	r3, [r3, #0]
90002ebe:	2201      	movs	r2, #1
90002ec0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
90002ec2:	68fb      	ldr	r3, [r7, #12]
90002ec4:	2201      	movs	r2, #1
90002ec6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
90002eca:	68fb      	ldr	r3, [r7, #12]
90002ecc:	2200      	movs	r2, #0
90002ece:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
90002ed2:	2300      	movs	r3, #0
}
90002ed4:	4618      	mov	r0, r3
90002ed6:	3710      	adds	r7, #16
90002ed8:	46bd      	mov	sp, r7
90002eda:	bdb0      	pop	{r4, r5, r7, pc}

90002edc <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
90002edc:	b480      	push	{r7}
90002ede:	b083      	sub	sp, #12
90002ee0:	af00      	add	r7, sp, #0
90002ee2:	6078      	str	r0, [r7, #4]
  return hltdc->State;
90002ee4:	687b      	ldr	r3, [r7, #4]
90002ee6:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
90002eea:	b2db      	uxtb	r3, r3
}
90002eec:	4618      	mov	r0, r3
90002eee:	370c      	adds	r7, #12
90002ef0:	46bd      	mov	sp, r7
90002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
90002ef6:	4770      	bx	lr

90002ef8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
90002ef8:	b480      	push	{r7}
90002efa:	b089      	sub	sp, #36	; 0x24
90002efc:	af00      	add	r7, sp, #0
90002efe:	60f8      	str	r0, [r7, #12]
90002f00:	60b9      	str	r1, [r7, #8]
90002f02:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90002f04:	68bb      	ldr	r3, [r7, #8]
90002f06:	685a      	ldr	r2, [r3, #4]
90002f08:	68fb      	ldr	r3, [r7, #12]
90002f0a:	681b      	ldr	r3, [r3, #0]
90002f0c:	68db      	ldr	r3, [r3, #12]
90002f0e:	0c1b      	lsrs	r3, r3, #16
90002f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
90002f14:	4413      	add	r3, r2
90002f16:	041b      	lsls	r3, r3, #16
90002f18:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90002f1a:	68fb      	ldr	r3, [r7, #12]
90002f1c:	681b      	ldr	r3, [r3, #0]
90002f1e:	461a      	mov	r2, r3
90002f20:	687b      	ldr	r3, [r7, #4]
90002f22:	01db      	lsls	r3, r3, #7
90002f24:	4413      	add	r3, r2
90002f26:	3384      	adds	r3, #132	; 0x84
90002f28:	685b      	ldr	r3, [r3, #4]
90002f2a:	68fa      	ldr	r2, [r7, #12]
90002f2c:	6812      	ldr	r2, [r2, #0]
90002f2e:	4611      	mov	r1, r2
90002f30:	687a      	ldr	r2, [r7, #4]
90002f32:	01d2      	lsls	r2, r2, #7
90002f34:	440a      	add	r2, r1
90002f36:	3284      	adds	r2, #132	; 0x84
90002f38:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
90002f3c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90002f3e:	68bb      	ldr	r3, [r7, #8]
90002f40:	681a      	ldr	r2, [r3, #0]
90002f42:	68fb      	ldr	r3, [r7, #12]
90002f44:	681b      	ldr	r3, [r3, #0]
90002f46:	68db      	ldr	r3, [r3, #12]
90002f48:	0c1b      	lsrs	r3, r3, #16
90002f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
90002f4e:	4413      	add	r3, r2
90002f50:	1c5a      	adds	r2, r3, #1
90002f52:	68fb      	ldr	r3, [r7, #12]
90002f54:	681b      	ldr	r3, [r3, #0]
90002f56:	4619      	mov	r1, r3
90002f58:	687b      	ldr	r3, [r7, #4]
90002f5a:	01db      	lsls	r3, r3, #7
90002f5c:	440b      	add	r3, r1
90002f5e:	3384      	adds	r3, #132	; 0x84
90002f60:	4619      	mov	r1, r3
90002f62:	69fb      	ldr	r3, [r7, #28]
90002f64:	4313      	orrs	r3, r2
90002f66:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90002f68:	68bb      	ldr	r3, [r7, #8]
90002f6a:	68da      	ldr	r2, [r3, #12]
90002f6c:	68fb      	ldr	r3, [r7, #12]
90002f6e:	681b      	ldr	r3, [r3, #0]
90002f70:	68db      	ldr	r3, [r3, #12]
90002f72:	f3c3 030a 	ubfx	r3, r3, #0, #11
90002f76:	4413      	add	r3, r2
90002f78:	041b      	lsls	r3, r3, #16
90002f7a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
90002f7c:	68fb      	ldr	r3, [r7, #12]
90002f7e:	681b      	ldr	r3, [r3, #0]
90002f80:	461a      	mov	r2, r3
90002f82:	687b      	ldr	r3, [r7, #4]
90002f84:	01db      	lsls	r3, r3, #7
90002f86:	4413      	add	r3, r2
90002f88:	3384      	adds	r3, #132	; 0x84
90002f8a:	689b      	ldr	r3, [r3, #8]
90002f8c:	68fa      	ldr	r2, [r7, #12]
90002f8e:	6812      	ldr	r2, [r2, #0]
90002f90:	4611      	mov	r1, r2
90002f92:	687a      	ldr	r2, [r7, #4]
90002f94:	01d2      	lsls	r2, r2, #7
90002f96:	440a      	add	r2, r1
90002f98:	3284      	adds	r2, #132	; 0x84
90002f9a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
90002f9e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
90002fa0:	68bb      	ldr	r3, [r7, #8]
90002fa2:	689a      	ldr	r2, [r3, #8]
90002fa4:	68fb      	ldr	r3, [r7, #12]
90002fa6:	681b      	ldr	r3, [r3, #0]
90002fa8:	68db      	ldr	r3, [r3, #12]
90002faa:	f3c3 030a 	ubfx	r3, r3, #0, #11
90002fae:	4413      	add	r3, r2
90002fb0:	1c5a      	adds	r2, r3, #1
90002fb2:	68fb      	ldr	r3, [r7, #12]
90002fb4:	681b      	ldr	r3, [r3, #0]
90002fb6:	4619      	mov	r1, r3
90002fb8:	687b      	ldr	r3, [r7, #4]
90002fba:	01db      	lsls	r3, r3, #7
90002fbc:	440b      	add	r3, r1
90002fbe:	3384      	adds	r3, #132	; 0x84
90002fc0:	4619      	mov	r1, r3
90002fc2:	69fb      	ldr	r3, [r7, #28]
90002fc4:	4313      	orrs	r3, r2
90002fc6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
90002fc8:	68fb      	ldr	r3, [r7, #12]
90002fca:	681b      	ldr	r3, [r3, #0]
90002fcc:	461a      	mov	r2, r3
90002fce:	687b      	ldr	r3, [r7, #4]
90002fd0:	01db      	lsls	r3, r3, #7
90002fd2:	4413      	add	r3, r2
90002fd4:	3384      	adds	r3, #132	; 0x84
90002fd6:	691b      	ldr	r3, [r3, #16]
90002fd8:	68fa      	ldr	r2, [r7, #12]
90002fda:	6812      	ldr	r2, [r2, #0]
90002fdc:	4611      	mov	r1, r2
90002fde:	687a      	ldr	r2, [r7, #4]
90002fe0:	01d2      	lsls	r2, r2, #7
90002fe2:	440a      	add	r2, r1
90002fe4:	3284      	adds	r2, #132	; 0x84
90002fe6:	f023 0307 	bic.w	r3, r3, #7
90002fea:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
90002fec:	68fb      	ldr	r3, [r7, #12]
90002fee:	681b      	ldr	r3, [r3, #0]
90002ff0:	461a      	mov	r2, r3
90002ff2:	687b      	ldr	r3, [r7, #4]
90002ff4:	01db      	lsls	r3, r3, #7
90002ff6:	4413      	add	r3, r2
90002ff8:	3384      	adds	r3, #132	; 0x84
90002ffa:	461a      	mov	r2, r3
90002ffc:	68bb      	ldr	r3, [r7, #8]
90002ffe:	691b      	ldr	r3, [r3, #16]
90003000:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
90003002:	68bb      	ldr	r3, [r7, #8]
90003004:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
90003008:	021b      	lsls	r3, r3, #8
9000300a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
9000300c:	68bb      	ldr	r3, [r7, #8]
9000300e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
90003012:	041b      	lsls	r3, r3, #16
90003014:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
90003016:	68bb      	ldr	r3, [r7, #8]
90003018:	699b      	ldr	r3, [r3, #24]
9000301a:	061b      	lsls	r3, r3, #24
9000301c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
9000301e:	68fb      	ldr	r3, [r7, #12]
90003020:	681b      	ldr	r3, [r3, #0]
90003022:	461a      	mov	r2, r3
90003024:	687b      	ldr	r3, [r7, #4]
90003026:	01db      	lsls	r3, r3, #7
90003028:	4413      	add	r3, r2
9000302a:	3384      	adds	r3, #132	; 0x84
9000302c:	699b      	ldr	r3, [r3, #24]
9000302e:	68fb      	ldr	r3, [r7, #12]
90003030:	681b      	ldr	r3, [r3, #0]
90003032:	461a      	mov	r2, r3
90003034:	687b      	ldr	r3, [r7, #4]
90003036:	01db      	lsls	r3, r3, #7
90003038:	4413      	add	r3, r2
9000303a:	3384      	adds	r3, #132	; 0x84
9000303c:	461a      	mov	r2, r3
9000303e:	2300      	movs	r3, #0
90003040:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
90003042:	68bb      	ldr	r3, [r7, #8]
90003044:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
90003048:	461a      	mov	r2, r3
9000304a:	69fb      	ldr	r3, [r7, #28]
9000304c:	431a      	orrs	r2, r3
9000304e:	69bb      	ldr	r3, [r7, #24]
90003050:	431a      	orrs	r2, r3
90003052:	68fb      	ldr	r3, [r7, #12]
90003054:	681b      	ldr	r3, [r3, #0]
90003056:	4619      	mov	r1, r3
90003058:	687b      	ldr	r3, [r7, #4]
9000305a:	01db      	lsls	r3, r3, #7
9000305c:	440b      	add	r3, r1
9000305e:	3384      	adds	r3, #132	; 0x84
90003060:	4619      	mov	r1, r3
90003062:	697b      	ldr	r3, [r7, #20]
90003064:	4313      	orrs	r3, r2
90003066:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
90003068:	68fb      	ldr	r3, [r7, #12]
9000306a:	681b      	ldr	r3, [r3, #0]
9000306c:	461a      	mov	r2, r3
9000306e:	687b      	ldr	r3, [r7, #4]
90003070:	01db      	lsls	r3, r3, #7
90003072:	4413      	add	r3, r2
90003074:	3384      	adds	r3, #132	; 0x84
90003076:	695b      	ldr	r3, [r3, #20]
90003078:	68fa      	ldr	r2, [r7, #12]
9000307a:	6812      	ldr	r2, [r2, #0]
9000307c:	4611      	mov	r1, r2
9000307e:	687a      	ldr	r2, [r7, #4]
90003080:	01d2      	lsls	r2, r2, #7
90003082:	440a      	add	r2, r1
90003084:	3284      	adds	r2, #132	; 0x84
90003086:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
9000308a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
9000308c:	68fb      	ldr	r3, [r7, #12]
9000308e:	681b      	ldr	r3, [r3, #0]
90003090:	461a      	mov	r2, r3
90003092:	687b      	ldr	r3, [r7, #4]
90003094:	01db      	lsls	r3, r3, #7
90003096:	4413      	add	r3, r2
90003098:	3384      	adds	r3, #132	; 0x84
9000309a:	461a      	mov	r2, r3
9000309c:	68bb      	ldr	r3, [r7, #8]
9000309e:	695b      	ldr	r3, [r3, #20]
900030a0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
900030a2:	68fb      	ldr	r3, [r7, #12]
900030a4:	681b      	ldr	r3, [r3, #0]
900030a6:	461a      	mov	r2, r3
900030a8:	687b      	ldr	r3, [r7, #4]
900030aa:	01db      	lsls	r3, r3, #7
900030ac:	4413      	add	r3, r2
900030ae:	3384      	adds	r3, #132	; 0x84
900030b0:	69da      	ldr	r2, [r3, #28]
900030b2:	68fb      	ldr	r3, [r7, #12]
900030b4:	681b      	ldr	r3, [r3, #0]
900030b6:	4619      	mov	r1, r3
900030b8:	687b      	ldr	r3, [r7, #4]
900030ba:	01db      	lsls	r3, r3, #7
900030bc:	440b      	add	r3, r1
900030be:	3384      	adds	r3, #132	; 0x84
900030c0:	4619      	mov	r1, r3
900030c2:	4b58      	ldr	r3, [pc, #352]	; (90003224 <LTDC_SetConfig+0x32c>)
900030c4:	4013      	ands	r3, r2
900030c6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
900030c8:	68bb      	ldr	r3, [r7, #8]
900030ca:	69da      	ldr	r2, [r3, #28]
900030cc:	68bb      	ldr	r3, [r7, #8]
900030ce:	6a1b      	ldr	r3, [r3, #32]
900030d0:	68f9      	ldr	r1, [r7, #12]
900030d2:	6809      	ldr	r1, [r1, #0]
900030d4:	4608      	mov	r0, r1
900030d6:	6879      	ldr	r1, [r7, #4]
900030d8:	01c9      	lsls	r1, r1, #7
900030da:	4401      	add	r1, r0
900030dc:	3184      	adds	r1, #132	; 0x84
900030de:	4313      	orrs	r3, r2
900030e0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
900030e2:	68fb      	ldr	r3, [r7, #12]
900030e4:	681b      	ldr	r3, [r3, #0]
900030e6:	461a      	mov	r2, r3
900030e8:	687b      	ldr	r3, [r7, #4]
900030ea:	01db      	lsls	r3, r3, #7
900030ec:	4413      	add	r3, r2
900030ee:	3384      	adds	r3, #132	; 0x84
900030f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900030f2:	68fb      	ldr	r3, [r7, #12]
900030f4:	681b      	ldr	r3, [r3, #0]
900030f6:	461a      	mov	r2, r3
900030f8:	687b      	ldr	r3, [r7, #4]
900030fa:	01db      	lsls	r3, r3, #7
900030fc:	4413      	add	r3, r2
900030fe:	3384      	adds	r3, #132	; 0x84
90003100:	461a      	mov	r2, r3
90003102:	2300      	movs	r3, #0
90003104:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
90003106:	68fb      	ldr	r3, [r7, #12]
90003108:	681b      	ldr	r3, [r3, #0]
9000310a:	461a      	mov	r2, r3
9000310c:	687b      	ldr	r3, [r7, #4]
9000310e:	01db      	lsls	r3, r3, #7
90003110:	4413      	add	r3, r2
90003112:	3384      	adds	r3, #132	; 0x84
90003114:	461a      	mov	r2, r3
90003116:	68bb      	ldr	r3, [r7, #8]
90003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000311a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
9000311c:	68bb      	ldr	r3, [r7, #8]
9000311e:	691b      	ldr	r3, [r3, #16]
90003120:	2b00      	cmp	r3, #0
90003122:	d102      	bne.n	9000312a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
90003124:	2304      	movs	r3, #4
90003126:	61fb      	str	r3, [r7, #28]
90003128:	e01b      	b.n	90003162 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
9000312a:	68bb      	ldr	r3, [r7, #8]
9000312c:	691b      	ldr	r3, [r3, #16]
9000312e:	2b01      	cmp	r3, #1
90003130:	d102      	bne.n	90003138 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
90003132:	2303      	movs	r3, #3
90003134:	61fb      	str	r3, [r7, #28]
90003136:	e014      	b.n	90003162 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90003138:	68bb      	ldr	r3, [r7, #8]
9000313a:	691b      	ldr	r3, [r3, #16]
9000313c:	2b04      	cmp	r3, #4
9000313e:	d00b      	beq.n	90003158 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
90003140:	68bb      	ldr	r3, [r7, #8]
90003142:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90003144:	2b02      	cmp	r3, #2
90003146:	d007      	beq.n	90003158 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90003148:	68bb      	ldr	r3, [r7, #8]
9000314a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
9000314c:	2b03      	cmp	r3, #3
9000314e:	d003      	beq.n	90003158 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
90003150:	68bb      	ldr	r3, [r7, #8]
90003152:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90003154:	2b07      	cmp	r3, #7
90003156:	d102      	bne.n	9000315e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
90003158:	2302      	movs	r3, #2
9000315a:	61fb      	str	r3, [r7, #28]
9000315c:	e001      	b.n	90003162 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
9000315e:	2301      	movs	r3, #1
90003160:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
90003162:	68fb      	ldr	r3, [r7, #12]
90003164:	681b      	ldr	r3, [r3, #0]
90003166:	461a      	mov	r2, r3
90003168:	687b      	ldr	r3, [r7, #4]
9000316a:	01db      	lsls	r3, r3, #7
9000316c:	4413      	add	r3, r2
9000316e:	3384      	adds	r3, #132	; 0x84
90003170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003172:	68fa      	ldr	r2, [r7, #12]
90003174:	6812      	ldr	r2, [r2, #0]
90003176:	4611      	mov	r1, r2
90003178:	687a      	ldr	r2, [r7, #4]
9000317a:	01d2      	lsls	r2, r2, #7
9000317c:	440a      	add	r2, r1
9000317e:	3284      	adds	r2, #132	; 0x84
90003180:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
90003184:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
90003186:	68bb      	ldr	r3, [r7, #8]
90003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000318a:	69fa      	ldr	r2, [r7, #28]
9000318c:	fb02 f303 	mul.w	r3, r2, r3
90003190:	041a      	lsls	r2, r3, #16
90003192:	68bb      	ldr	r3, [r7, #8]
90003194:	6859      	ldr	r1, [r3, #4]
90003196:	68bb      	ldr	r3, [r7, #8]
90003198:	681b      	ldr	r3, [r3, #0]
9000319a:	1acb      	subs	r3, r1, r3
9000319c:	69f9      	ldr	r1, [r7, #28]
9000319e:	fb01 f303 	mul.w	r3, r1, r3
900031a2:	3303      	adds	r3, #3
900031a4:	68f9      	ldr	r1, [r7, #12]
900031a6:	6809      	ldr	r1, [r1, #0]
900031a8:	4608      	mov	r0, r1
900031aa:	6879      	ldr	r1, [r7, #4]
900031ac:	01c9      	lsls	r1, r1, #7
900031ae:	4401      	add	r1, r0
900031b0:	3184      	adds	r1, #132	; 0x84
900031b2:	4313      	orrs	r3, r2
900031b4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
900031b6:	68fb      	ldr	r3, [r7, #12]
900031b8:	681b      	ldr	r3, [r3, #0]
900031ba:	461a      	mov	r2, r3
900031bc:	687b      	ldr	r3, [r7, #4]
900031be:	01db      	lsls	r3, r3, #7
900031c0:	4413      	add	r3, r2
900031c2:	3384      	adds	r3, #132	; 0x84
900031c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900031c6:	68fb      	ldr	r3, [r7, #12]
900031c8:	681b      	ldr	r3, [r3, #0]
900031ca:	4619      	mov	r1, r3
900031cc:	687b      	ldr	r3, [r7, #4]
900031ce:	01db      	lsls	r3, r3, #7
900031d0:	440b      	add	r3, r1
900031d2:	3384      	adds	r3, #132	; 0x84
900031d4:	4619      	mov	r1, r3
900031d6:	4b14      	ldr	r3, [pc, #80]	; (90003228 <LTDC_SetConfig+0x330>)
900031d8:	4013      	ands	r3, r2
900031da:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
900031dc:	68fb      	ldr	r3, [r7, #12]
900031de:	681b      	ldr	r3, [r3, #0]
900031e0:	461a      	mov	r2, r3
900031e2:	687b      	ldr	r3, [r7, #4]
900031e4:	01db      	lsls	r3, r3, #7
900031e6:	4413      	add	r3, r2
900031e8:	3384      	adds	r3, #132	; 0x84
900031ea:	461a      	mov	r2, r3
900031ec:	68bb      	ldr	r3, [r7, #8]
900031ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900031f0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
900031f2:	68fb      	ldr	r3, [r7, #12]
900031f4:	681b      	ldr	r3, [r3, #0]
900031f6:	461a      	mov	r2, r3
900031f8:	687b      	ldr	r3, [r7, #4]
900031fa:	01db      	lsls	r3, r3, #7
900031fc:	4413      	add	r3, r2
900031fe:	3384      	adds	r3, #132	; 0x84
90003200:	681b      	ldr	r3, [r3, #0]
90003202:	68fa      	ldr	r2, [r7, #12]
90003204:	6812      	ldr	r2, [r2, #0]
90003206:	4611      	mov	r1, r2
90003208:	687a      	ldr	r2, [r7, #4]
9000320a:	01d2      	lsls	r2, r2, #7
9000320c:	440a      	add	r2, r1
9000320e:	3284      	adds	r2, #132	; 0x84
90003210:	f043 0301 	orr.w	r3, r3, #1
90003214:	6013      	str	r3, [r2, #0]
}
90003216:	bf00      	nop
90003218:	3724      	adds	r7, #36	; 0x24
9000321a:	46bd      	mov	sp, r7
9000321c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003220:	4770      	bx	lr
90003222:	bf00      	nop
90003224:	fffff8f8 	.word	0xfffff8f8
90003228:	fffff800 	.word	0xfffff800

9000322c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
9000322c:	b580      	push	{r7, lr}
9000322e:	b082      	sub	sp, #8
90003230:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
90003232:	2300      	movs	r3, #0
90003234:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
90003236:	4b23      	ldr	r3, [pc, #140]	; (900032c4 <HAL_PWREx_EnableOverDrive+0x98>)
90003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000323a:	4a22      	ldr	r2, [pc, #136]	; (900032c4 <HAL_PWREx_EnableOverDrive+0x98>)
9000323c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90003240:	6413      	str	r3, [r2, #64]	; 0x40
90003242:	4b20      	ldr	r3, [pc, #128]	; (900032c4 <HAL_PWREx_EnableOverDrive+0x98>)
90003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
9000324a:	603b      	str	r3, [r7, #0]
9000324c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
9000324e:	4b1e      	ldr	r3, [pc, #120]	; (900032c8 <HAL_PWREx_EnableOverDrive+0x9c>)
90003250:	681b      	ldr	r3, [r3, #0]
90003252:	4a1d      	ldr	r2, [pc, #116]	; (900032c8 <HAL_PWREx_EnableOverDrive+0x9c>)
90003254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90003258:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
9000325a:	f7fe fdb1 	bl	90001dc0 <HAL_GetTick>
9000325e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
90003260:	e009      	b.n	90003276 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
90003262:	f7fe fdad 	bl	90001dc0 <HAL_GetTick>
90003266:	4602      	mov	r2, r0
90003268:	687b      	ldr	r3, [r7, #4]
9000326a:	1ad3      	subs	r3, r2, r3
9000326c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
90003270:	d901      	bls.n	90003276 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
90003272:	2303      	movs	r3, #3
90003274:	e022      	b.n	900032bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
90003276:	4b14      	ldr	r3, [pc, #80]	; (900032c8 <HAL_PWREx_EnableOverDrive+0x9c>)
90003278:	685b      	ldr	r3, [r3, #4]
9000327a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
9000327e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90003282:	d1ee      	bne.n	90003262 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
90003284:	4b10      	ldr	r3, [pc, #64]	; (900032c8 <HAL_PWREx_EnableOverDrive+0x9c>)
90003286:	681b      	ldr	r3, [r3, #0]
90003288:	4a0f      	ldr	r2, [pc, #60]	; (900032c8 <HAL_PWREx_EnableOverDrive+0x9c>)
9000328a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000328e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
90003290:	f7fe fd96 	bl	90001dc0 <HAL_GetTick>
90003294:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
90003296:	e009      	b.n	900032ac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
90003298:	f7fe fd92 	bl	90001dc0 <HAL_GetTick>
9000329c:	4602      	mov	r2, r0
9000329e:	687b      	ldr	r3, [r7, #4]
900032a0:	1ad3      	subs	r3, r2, r3
900032a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
900032a6:	d901      	bls.n	900032ac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
900032a8:	2303      	movs	r3, #3
900032aa:	e007      	b.n	900032bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
900032ac:	4b06      	ldr	r3, [pc, #24]	; (900032c8 <HAL_PWREx_EnableOverDrive+0x9c>)
900032ae:	685b      	ldr	r3, [r3, #4]
900032b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900032b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
900032b8:	d1ee      	bne.n	90003298 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
900032ba:	2300      	movs	r3, #0
}
900032bc:	4618      	mov	r0, r3
900032be:	3708      	adds	r7, #8
900032c0:	46bd      	mov	sp, r7
900032c2:	bd80      	pop	{r7, pc}
900032c4:	40023800 	.word	0x40023800
900032c8:	40007000 	.word	0x40007000

900032cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
900032cc:	b580      	push	{r7, lr}
900032ce:	b086      	sub	sp, #24
900032d0:	af00      	add	r7, sp, #0
900032d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
900032d4:	2300      	movs	r3, #0
900032d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
900032d8:	687b      	ldr	r3, [r7, #4]
900032da:	2b00      	cmp	r3, #0
900032dc:	d101      	bne.n	900032e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
900032de:	2301      	movs	r3, #1
900032e0:	e291      	b.n	90003806 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
900032e2:	687b      	ldr	r3, [r7, #4]
900032e4:	681b      	ldr	r3, [r3, #0]
900032e6:	f003 0301 	and.w	r3, r3, #1
900032ea:	2b00      	cmp	r3, #0
900032ec:	f000 8087 	beq.w	900033fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
900032f0:	4b96      	ldr	r3, [pc, #600]	; (9000354c <HAL_RCC_OscConfig+0x280>)
900032f2:	689b      	ldr	r3, [r3, #8]
900032f4:	f003 030c 	and.w	r3, r3, #12
900032f8:	2b04      	cmp	r3, #4
900032fa:	d00c      	beq.n	90003316 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
900032fc:	4b93      	ldr	r3, [pc, #588]	; (9000354c <HAL_RCC_OscConfig+0x280>)
900032fe:	689b      	ldr	r3, [r3, #8]
90003300:	f003 030c 	and.w	r3, r3, #12
90003304:	2b08      	cmp	r3, #8
90003306:	d112      	bne.n	9000332e <HAL_RCC_OscConfig+0x62>
90003308:	4b90      	ldr	r3, [pc, #576]	; (9000354c <HAL_RCC_OscConfig+0x280>)
9000330a:	685b      	ldr	r3, [r3, #4]
9000330c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90003310:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90003314:	d10b      	bne.n	9000332e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90003316:	4b8d      	ldr	r3, [pc, #564]	; (9000354c <HAL_RCC_OscConfig+0x280>)
90003318:	681b      	ldr	r3, [r3, #0]
9000331a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
9000331e:	2b00      	cmp	r3, #0
90003320:	d06c      	beq.n	900033fc <HAL_RCC_OscConfig+0x130>
90003322:	687b      	ldr	r3, [r7, #4]
90003324:	685b      	ldr	r3, [r3, #4]
90003326:	2b00      	cmp	r3, #0
90003328:	d168      	bne.n	900033fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
9000332a:	2301      	movs	r3, #1
9000332c:	e26b      	b.n	90003806 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000332e:	687b      	ldr	r3, [r7, #4]
90003330:	685b      	ldr	r3, [r3, #4]
90003332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90003336:	d106      	bne.n	90003346 <HAL_RCC_OscConfig+0x7a>
90003338:	4b84      	ldr	r3, [pc, #528]	; (9000354c <HAL_RCC_OscConfig+0x280>)
9000333a:	681b      	ldr	r3, [r3, #0]
9000333c:	4a83      	ldr	r2, [pc, #524]	; (9000354c <HAL_RCC_OscConfig+0x280>)
9000333e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90003342:	6013      	str	r3, [r2, #0]
90003344:	e02e      	b.n	900033a4 <HAL_RCC_OscConfig+0xd8>
90003346:	687b      	ldr	r3, [r7, #4]
90003348:	685b      	ldr	r3, [r3, #4]
9000334a:	2b00      	cmp	r3, #0
9000334c:	d10c      	bne.n	90003368 <HAL_RCC_OscConfig+0x9c>
9000334e:	4b7f      	ldr	r3, [pc, #508]	; (9000354c <HAL_RCC_OscConfig+0x280>)
90003350:	681b      	ldr	r3, [r3, #0]
90003352:	4a7e      	ldr	r2, [pc, #504]	; (9000354c <HAL_RCC_OscConfig+0x280>)
90003354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90003358:	6013      	str	r3, [r2, #0]
9000335a:	4b7c      	ldr	r3, [pc, #496]	; (9000354c <HAL_RCC_OscConfig+0x280>)
9000335c:	681b      	ldr	r3, [r3, #0]
9000335e:	4a7b      	ldr	r2, [pc, #492]	; (9000354c <HAL_RCC_OscConfig+0x280>)
90003360:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90003364:	6013      	str	r3, [r2, #0]
90003366:	e01d      	b.n	900033a4 <HAL_RCC_OscConfig+0xd8>
90003368:	687b      	ldr	r3, [r7, #4]
9000336a:	685b      	ldr	r3, [r3, #4]
9000336c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
90003370:	d10c      	bne.n	9000338c <HAL_RCC_OscConfig+0xc0>
90003372:	4b76      	ldr	r3, [pc, #472]	; (9000354c <HAL_RCC_OscConfig+0x280>)
90003374:	681b      	ldr	r3, [r3, #0]
90003376:	4a75      	ldr	r2, [pc, #468]	; (9000354c <HAL_RCC_OscConfig+0x280>)
90003378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
9000337c:	6013      	str	r3, [r2, #0]
9000337e:	4b73      	ldr	r3, [pc, #460]	; (9000354c <HAL_RCC_OscConfig+0x280>)
90003380:	681b      	ldr	r3, [r3, #0]
90003382:	4a72      	ldr	r2, [pc, #456]	; (9000354c <HAL_RCC_OscConfig+0x280>)
90003384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90003388:	6013      	str	r3, [r2, #0]
9000338a:	e00b      	b.n	900033a4 <HAL_RCC_OscConfig+0xd8>
9000338c:	4b6f      	ldr	r3, [pc, #444]	; (9000354c <HAL_RCC_OscConfig+0x280>)
9000338e:	681b      	ldr	r3, [r3, #0]
90003390:	4a6e      	ldr	r2, [pc, #440]	; (9000354c <HAL_RCC_OscConfig+0x280>)
90003392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90003396:	6013      	str	r3, [r2, #0]
90003398:	4b6c      	ldr	r3, [pc, #432]	; (9000354c <HAL_RCC_OscConfig+0x280>)
9000339a:	681b      	ldr	r3, [r3, #0]
9000339c:	4a6b      	ldr	r2, [pc, #428]	; (9000354c <HAL_RCC_OscConfig+0x280>)
9000339e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
900033a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
900033a4:	687b      	ldr	r3, [r7, #4]
900033a6:	685b      	ldr	r3, [r3, #4]
900033a8:	2b00      	cmp	r3, #0
900033aa:	d013      	beq.n	900033d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900033ac:	f7fe fd08 	bl	90001dc0 <HAL_GetTick>
900033b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
900033b2:	e008      	b.n	900033c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
900033b4:	f7fe fd04 	bl	90001dc0 <HAL_GetTick>
900033b8:	4602      	mov	r2, r0
900033ba:	693b      	ldr	r3, [r7, #16]
900033bc:	1ad3      	subs	r3, r2, r3
900033be:	2b64      	cmp	r3, #100	; 0x64
900033c0:	d901      	bls.n	900033c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
900033c2:	2303      	movs	r3, #3
900033c4:	e21f      	b.n	90003806 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
900033c6:	4b61      	ldr	r3, [pc, #388]	; (9000354c <HAL_RCC_OscConfig+0x280>)
900033c8:	681b      	ldr	r3, [r3, #0]
900033ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900033ce:	2b00      	cmp	r3, #0
900033d0:	d0f0      	beq.n	900033b4 <HAL_RCC_OscConfig+0xe8>
900033d2:	e014      	b.n	900033fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900033d4:	f7fe fcf4 	bl	90001dc0 <HAL_GetTick>
900033d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
900033da:	e008      	b.n	900033ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
900033dc:	f7fe fcf0 	bl	90001dc0 <HAL_GetTick>
900033e0:	4602      	mov	r2, r0
900033e2:	693b      	ldr	r3, [r7, #16]
900033e4:	1ad3      	subs	r3, r2, r3
900033e6:	2b64      	cmp	r3, #100	; 0x64
900033e8:	d901      	bls.n	900033ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
900033ea:	2303      	movs	r3, #3
900033ec:	e20b      	b.n	90003806 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
900033ee:	4b57      	ldr	r3, [pc, #348]	; (9000354c <HAL_RCC_OscConfig+0x280>)
900033f0:	681b      	ldr	r3, [r3, #0]
900033f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900033f6:	2b00      	cmp	r3, #0
900033f8:	d1f0      	bne.n	900033dc <HAL_RCC_OscConfig+0x110>
900033fa:	e000      	b.n	900033fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
900033fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
900033fe:	687b      	ldr	r3, [r7, #4]
90003400:	681b      	ldr	r3, [r3, #0]
90003402:	f003 0302 	and.w	r3, r3, #2
90003406:	2b00      	cmp	r3, #0
90003408:	d069      	beq.n	900034de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
9000340a:	4b50      	ldr	r3, [pc, #320]	; (9000354c <HAL_RCC_OscConfig+0x280>)
9000340c:	689b      	ldr	r3, [r3, #8]
9000340e:	f003 030c 	and.w	r3, r3, #12
90003412:	2b00      	cmp	r3, #0
90003414:	d00b      	beq.n	9000342e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
90003416:	4b4d      	ldr	r3, [pc, #308]	; (9000354c <HAL_RCC_OscConfig+0x280>)
90003418:	689b      	ldr	r3, [r3, #8]
9000341a:	f003 030c 	and.w	r3, r3, #12
9000341e:	2b08      	cmp	r3, #8
90003420:	d11c      	bne.n	9000345c <HAL_RCC_OscConfig+0x190>
90003422:	4b4a      	ldr	r3, [pc, #296]	; (9000354c <HAL_RCC_OscConfig+0x280>)
90003424:	685b      	ldr	r3, [r3, #4]
90003426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
9000342a:	2b00      	cmp	r3, #0
9000342c:	d116      	bne.n	9000345c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
9000342e:	4b47      	ldr	r3, [pc, #284]	; (9000354c <HAL_RCC_OscConfig+0x280>)
90003430:	681b      	ldr	r3, [r3, #0]
90003432:	f003 0302 	and.w	r3, r3, #2
90003436:	2b00      	cmp	r3, #0
90003438:	d005      	beq.n	90003446 <HAL_RCC_OscConfig+0x17a>
9000343a:	687b      	ldr	r3, [r7, #4]
9000343c:	68db      	ldr	r3, [r3, #12]
9000343e:	2b01      	cmp	r3, #1
90003440:	d001      	beq.n	90003446 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
90003442:	2301      	movs	r3, #1
90003444:	e1df      	b.n	90003806 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90003446:	4b41      	ldr	r3, [pc, #260]	; (9000354c <HAL_RCC_OscConfig+0x280>)
90003448:	681b      	ldr	r3, [r3, #0]
9000344a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
9000344e:	687b      	ldr	r3, [r7, #4]
90003450:	691b      	ldr	r3, [r3, #16]
90003452:	00db      	lsls	r3, r3, #3
90003454:	493d      	ldr	r1, [pc, #244]	; (9000354c <HAL_RCC_OscConfig+0x280>)
90003456:	4313      	orrs	r3, r2
90003458:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
9000345a:	e040      	b.n	900034de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
9000345c:	687b      	ldr	r3, [r7, #4]
9000345e:	68db      	ldr	r3, [r3, #12]
90003460:	2b00      	cmp	r3, #0
90003462:	d023      	beq.n	900034ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
90003464:	4b39      	ldr	r3, [pc, #228]	; (9000354c <HAL_RCC_OscConfig+0x280>)
90003466:	681b      	ldr	r3, [r3, #0]
90003468:	4a38      	ldr	r2, [pc, #224]	; (9000354c <HAL_RCC_OscConfig+0x280>)
9000346a:	f043 0301 	orr.w	r3, r3, #1
9000346e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90003470:	f7fe fca6 	bl	90001dc0 <HAL_GetTick>
90003474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90003476:	e008      	b.n	9000348a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90003478:	f7fe fca2 	bl	90001dc0 <HAL_GetTick>
9000347c:	4602      	mov	r2, r0
9000347e:	693b      	ldr	r3, [r7, #16]
90003480:	1ad3      	subs	r3, r2, r3
90003482:	2b02      	cmp	r3, #2
90003484:	d901      	bls.n	9000348a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
90003486:	2303      	movs	r3, #3
90003488:	e1bd      	b.n	90003806 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
9000348a:	4b30      	ldr	r3, [pc, #192]	; (9000354c <HAL_RCC_OscConfig+0x280>)
9000348c:	681b      	ldr	r3, [r3, #0]
9000348e:	f003 0302 	and.w	r3, r3, #2
90003492:	2b00      	cmp	r3, #0
90003494:	d0f0      	beq.n	90003478 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90003496:	4b2d      	ldr	r3, [pc, #180]	; (9000354c <HAL_RCC_OscConfig+0x280>)
90003498:	681b      	ldr	r3, [r3, #0]
9000349a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
9000349e:	687b      	ldr	r3, [r7, #4]
900034a0:	691b      	ldr	r3, [r3, #16]
900034a2:	00db      	lsls	r3, r3, #3
900034a4:	4929      	ldr	r1, [pc, #164]	; (9000354c <HAL_RCC_OscConfig+0x280>)
900034a6:	4313      	orrs	r3, r2
900034a8:	600b      	str	r3, [r1, #0]
900034aa:	e018      	b.n	900034de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
900034ac:	4b27      	ldr	r3, [pc, #156]	; (9000354c <HAL_RCC_OscConfig+0x280>)
900034ae:	681b      	ldr	r3, [r3, #0]
900034b0:	4a26      	ldr	r2, [pc, #152]	; (9000354c <HAL_RCC_OscConfig+0x280>)
900034b2:	f023 0301 	bic.w	r3, r3, #1
900034b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900034b8:	f7fe fc82 	bl	90001dc0 <HAL_GetTick>
900034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
900034be:	e008      	b.n	900034d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
900034c0:	f7fe fc7e 	bl	90001dc0 <HAL_GetTick>
900034c4:	4602      	mov	r2, r0
900034c6:	693b      	ldr	r3, [r7, #16]
900034c8:	1ad3      	subs	r3, r2, r3
900034ca:	2b02      	cmp	r3, #2
900034cc:	d901      	bls.n	900034d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
900034ce:	2303      	movs	r3, #3
900034d0:	e199      	b.n	90003806 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
900034d2:	4b1e      	ldr	r3, [pc, #120]	; (9000354c <HAL_RCC_OscConfig+0x280>)
900034d4:	681b      	ldr	r3, [r3, #0]
900034d6:	f003 0302 	and.w	r3, r3, #2
900034da:	2b00      	cmp	r3, #0
900034dc:	d1f0      	bne.n	900034c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
900034de:	687b      	ldr	r3, [r7, #4]
900034e0:	681b      	ldr	r3, [r3, #0]
900034e2:	f003 0308 	and.w	r3, r3, #8
900034e6:	2b00      	cmp	r3, #0
900034e8:	d038      	beq.n	9000355c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
900034ea:	687b      	ldr	r3, [r7, #4]
900034ec:	695b      	ldr	r3, [r3, #20]
900034ee:	2b00      	cmp	r3, #0
900034f0:	d019      	beq.n	90003526 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
900034f2:	4b16      	ldr	r3, [pc, #88]	; (9000354c <HAL_RCC_OscConfig+0x280>)
900034f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900034f6:	4a15      	ldr	r2, [pc, #84]	; (9000354c <HAL_RCC_OscConfig+0x280>)
900034f8:	f043 0301 	orr.w	r3, r3, #1
900034fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
900034fe:	f7fe fc5f 	bl	90001dc0 <HAL_GetTick>
90003502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
90003504:	e008      	b.n	90003518 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90003506:	f7fe fc5b 	bl	90001dc0 <HAL_GetTick>
9000350a:	4602      	mov	r2, r0
9000350c:	693b      	ldr	r3, [r7, #16]
9000350e:	1ad3      	subs	r3, r2, r3
90003510:	2b02      	cmp	r3, #2
90003512:	d901      	bls.n	90003518 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
90003514:	2303      	movs	r3, #3
90003516:	e176      	b.n	90003806 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
90003518:	4b0c      	ldr	r3, [pc, #48]	; (9000354c <HAL_RCC_OscConfig+0x280>)
9000351a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000351c:	f003 0302 	and.w	r3, r3, #2
90003520:	2b00      	cmp	r3, #0
90003522:	d0f0      	beq.n	90003506 <HAL_RCC_OscConfig+0x23a>
90003524:	e01a      	b.n	9000355c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
90003526:	4b09      	ldr	r3, [pc, #36]	; (9000354c <HAL_RCC_OscConfig+0x280>)
90003528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000352a:	4a08      	ldr	r2, [pc, #32]	; (9000354c <HAL_RCC_OscConfig+0x280>)
9000352c:	f023 0301 	bic.w	r3, r3, #1
90003530:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90003532:	f7fe fc45 	bl	90001dc0 <HAL_GetTick>
90003536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
90003538:	e00a      	b.n	90003550 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000353a:	f7fe fc41 	bl	90001dc0 <HAL_GetTick>
9000353e:	4602      	mov	r2, r0
90003540:	693b      	ldr	r3, [r7, #16]
90003542:	1ad3      	subs	r3, r2, r3
90003544:	2b02      	cmp	r3, #2
90003546:	d903      	bls.n	90003550 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
90003548:	2303      	movs	r3, #3
9000354a:	e15c      	b.n	90003806 <HAL_RCC_OscConfig+0x53a>
9000354c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
90003550:	4b91      	ldr	r3, [pc, #580]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
90003552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90003554:	f003 0302 	and.w	r3, r3, #2
90003558:	2b00      	cmp	r3, #0
9000355a:	d1ee      	bne.n	9000353a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
9000355c:	687b      	ldr	r3, [r7, #4]
9000355e:	681b      	ldr	r3, [r3, #0]
90003560:	f003 0304 	and.w	r3, r3, #4
90003564:	2b00      	cmp	r3, #0
90003566:	f000 80a4 	beq.w	900036b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
9000356a:	4b8b      	ldr	r3, [pc, #556]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
9000356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000356e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90003572:	2b00      	cmp	r3, #0
90003574:	d10d      	bne.n	90003592 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
90003576:	4b88      	ldr	r3, [pc, #544]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
90003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000357a:	4a87      	ldr	r2, [pc, #540]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
9000357c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90003580:	6413      	str	r3, [r2, #64]	; 0x40
90003582:	4b85      	ldr	r3, [pc, #532]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
90003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
9000358a:	60bb      	str	r3, [r7, #8]
9000358c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
9000358e:	2301      	movs	r3, #1
90003590:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
90003592:	4b82      	ldr	r3, [pc, #520]	; (9000379c <HAL_RCC_OscConfig+0x4d0>)
90003594:	681b      	ldr	r3, [r3, #0]
90003596:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000359a:	2b00      	cmp	r3, #0
9000359c:	d118      	bne.n	900035d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
9000359e:	4b7f      	ldr	r3, [pc, #508]	; (9000379c <HAL_RCC_OscConfig+0x4d0>)
900035a0:	681b      	ldr	r3, [r3, #0]
900035a2:	4a7e      	ldr	r2, [pc, #504]	; (9000379c <HAL_RCC_OscConfig+0x4d0>)
900035a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900035a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
900035aa:	f7fe fc09 	bl	90001dc0 <HAL_GetTick>
900035ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
900035b0:	e008      	b.n	900035c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
900035b2:	f7fe fc05 	bl	90001dc0 <HAL_GetTick>
900035b6:	4602      	mov	r2, r0
900035b8:	693b      	ldr	r3, [r7, #16]
900035ba:	1ad3      	subs	r3, r2, r3
900035bc:	2b64      	cmp	r3, #100	; 0x64
900035be:	d901      	bls.n	900035c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
900035c0:	2303      	movs	r3, #3
900035c2:	e120      	b.n	90003806 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
900035c4:	4b75      	ldr	r3, [pc, #468]	; (9000379c <HAL_RCC_OscConfig+0x4d0>)
900035c6:	681b      	ldr	r3, [r3, #0]
900035c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
900035cc:	2b00      	cmp	r3, #0
900035ce:	d0f0      	beq.n	900035b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
900035d0:	687b      	ldr	r3, [r7, #4]
900035d2:	689b      	ldr	r3, [r3, #8]
900035d4:	2b01      	cmp	r3, #1
900035d6:	d106      	bne.n	900035e6 <HAL_RCC_OscConfig+0x31a>
900035d8:	4b6f      	ldr	r3, [pc, #444]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
900035da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900035dc:	4a6e      	ldr	r2, [pc, #440]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
900035de:	f043 0301 	orr.w	r3, r3, #1
900035e2:	6713      	str	r3, [r2, #112]	; 0x70
900035e4:	e02d      	b.n	90003642 <HAL_RCC_OscConfig+0x376>
900035e6:	687b      	ldr	r3, [r7, #4]
900035e8:	689b      	ldr	r3, [r3, #8]
900035ea:	2b00      	cmp	r3, #0
900035ec:	d10c      	bne.n	90003608 <HAL_RCC_OscConfig+0x33c>
900035ee:	4b6a      	ldr	r3, [pc, #424]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
900035f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900035f2:	4a69      	ldr	r2, [pc, #420]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
900035f4:	f023 0301 	bic.w	r3, r3, #1
900035f8:	6713      	str	r3, [r2, #112]	; 0x70
900035fa:	4b67      	ldr	r3, [pc, #412]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
900035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900035fe:	4a66      	ldr	r2, [pc, #408]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
90003600:	f023 0304 	bic.w	r3, r3, #4
90003604:	6713      	str	r3, [r2, #112]	; 0x70
90003606:	e01c      	b.n	90003642 <HAL_RCC_OscConfig+0x376>
90003608:	687b      	ldr	r3, [r7, #4]
9000360a:	689b      	ldr	r3, [r3, #8]
9000360c:	2b05      	cmp	r3, #5
9000360e:	d10c      	bne.n	9000362a <HAL_RCC_OscConfig+0x35e>
90003610:	4b61      	ldr	r3, [pc, #388]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
90003612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90003614:	4a60      	ldr	r2, [pc, #384]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
90003616:	f043 0304 	orr.w	r3, r3, #4
9000361a:	6713      	str	r3, [r2, #112]	; 0x70
9000361c:	4b5e      	ldr	r3, [pc, #376]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
9000361e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90003620:	4a5d      	ldr	r2, [pc, #372]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
90003622:	f043 0301 	orr.w	r3, r3, #1
90003626:	6713      	str	r3, [r2, #112]	; 0x70
90003628:	e00b      	b.n	90003642 <HAL_RCC_OscConfig+0x376>
9000362a:	4b5b      	ldr	r3, [pc, #364]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
9000362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000362e:	4a5a      	ldr	r2, [pc, #360]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
90003630:	f023 0301 	bic.w	r3, r3, #1
90003634:	6713      	str	r3, [r2, #112]	; 0x70
90003636:	4b58      	ldr	r3, [pc, #352]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
90003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000363a:	4a57      	ldr	r2, [pc, #348]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
9000363c:	f023 0304 	bic.w	r3, r3, #4
90003640:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
90003642:	687b      	ldr	r3, [r7, #4]
90003644:	689b      	ldr	r3, [r3, #8]
90003646:	2b00      	cmp	r3, #0
90003648:	d015      	beq.n	90003676 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
9000364a:	f7fe fbb9 	bl	90001dc0 <HAL_GetTick>
9000364e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90003650:	e00a      	b.n	90003668 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90003652:	f7fe fbb5 	bl	90001dc0 <HAL_GetTick>
90003656:	4602      	mov	r2, r0
90003658:	693b      	ldr	r3, [r7, #16]
9000365a:	1ad3      	subs	r3, r2, r3
9000365c:	f241 3288 	movw	r2, #5000	; 0x1388
90003660:	4293      	cmp	r3, r2
90003662:	d901      	bls.n	90003668 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
90003664:	2303      	movs	r3, #3
90003666:	e0ce      	b.n	90003806 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90003668:	4b4b      	ldr	r3, [pc, #300]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
9000366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000366c:	f003 0302 	and.w	r3, r3, #2
90003670:	2b00      	cmp	r3, #0
90003672:	d0ee      	beq.n	90003652 <HAL_RCC_OscConfig+0x386>
90003674:	e014      	b.n	900036a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90003676:	f7fe fba3 	bl	90001dc0 <HAL_GetTick>
9000367a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
9000367c:	e00a      	b.n	90003694 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000367e:	f7fe fb9f 	bl	90001dc0 <HAL_GetTick>
90003682:	4602      	mov	r2, r0
90003684:	693b      	ldr	r3, [r7, #16]
90003686:	1ad3      	subs	r3, r2, r3
90003688:	f241 3288 	movw	r2, #5000	; 0x1388
9000368c:	4293      	cmp	r3, r2
9000368e:	d901      	bls.n	90003694 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
90003690:	2303      	movs	r3, #3
90003692:	e0b8      	b.n	90003806 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
90003694:	4b40      	ldr	r3, [pc, #256]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
90003696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90003698:	f003 0302 	and.w	r3, r3, #2
9000369c:	2b00      	cmp	r3, #0
9000369e:	d1ee      	bne.n	9000367e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
900036a0:	7dfb      	ldrb	r3, [r7, #23]
900036a2:	2b01      	cmp	r3, #1
900036a4:	d105      	bne.n	900036b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
900036a6:	4b3c      	ldr	r3, [pc, #240]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
900036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900036aa:	4a3b      	ldr	r2, [pc, #236]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
900036ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
900036b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
900036b2:	687b      	ldr	r3, [r7, #4]
900036b4:	699b      	ldr	r3, [r3, #24]
900036b6:	2b00      	cmp	r3, #0
900036b8:	f000 80a4 	beq.w	90003804 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
900036bc:	4b36      	ldr	r3, [pc, #216]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
900036be:	689b      	ldr	r3, [r3, #8]
900036c0:	f003 030c 	and.w	r3, r3, #12
900036c4:	2b08      	cmp	r3, #8
900036c6:	d06b      	beq.n	900037a0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
900036c8:	687b      	ldr	r3, [r7, #4]
900036ca:	699b      	ldr	r3, [r3, #24]
900036cc:	2b02      	cmp	r3, #2
900036ce:	d149      	bne.n	90003764 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
900036d0:	4b31      	ldr	r3, [pc, #196]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
900036d2:	681b      	ldr	r3, [r3, #0]
900036d4:	4a30      	ldr	r2, [pc, #192]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
900036d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
900036da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900036dc:	f7fe fb70 	bl	90001dc0 <HAL_GetTick>
900036e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
900036e2:	e008      	b.n	900036f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900036e4:	f7fe fb6c 	bl	90001dc0 <HAL_GetTick>
900036e8:	4602      	mov	r2, r0
900036ea:	693b      	ldr	r3, [r7, #16]
900036ec:	1ad3      	subs	r3, r2, r3
900036ee:	2b02      	cmp	r3, #2
900036f0:	d901      	bls.n	900036f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
900036f2:	2303      	movs	r3, #3
900036f4:	e087      	b.n	90003806 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
900036f6:	4b28      	ldr	r3, [pc, #160]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
900036f8:	681b      	ldr	r3, [r3, #0]
900036fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
900036fe:	2b00      	cmp	r3, #0
90003700:	d1f0      	bne.n	900036e4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
90003702:	687b      	ldr	r3, [r7, #4]
90003704:	69da      	ldr	r2, [r3, #28]
90003706:	687b      	ldr	r3, [r7, #4]
90003708:	6a1b      	ldr	r3, [r3, #32]
9000370a:	431a      	orrs	r2, r3
9000370c:	687b      	ldr	r3, [r7, #4]
9000370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90003710:	019b      	lsls	r3, r3, #6
90003712:	431a      	orrs	r2, r3
90003714:	687b      	ldr	r3, [r7, #4]
90003716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90003718:	085b      	lsrs	r3, r3, #1
9000371a:	3b01      	subs	r3, #1
9000371c:	041b      	lsls	r3, r3, #16
9000371e:	431a      	orrs	r2, r3
90003720:	687b      	ldr	r3, [r7, #4]
90003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003724:	061b      	lsls	r3, r3, #24
90003726:	4313      	orrs	r3, r2
90003728:	4a1b      	ldr	r2, [pc, #108]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
9000372a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
9000372e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
90003730:	4b19      	ldr	r3, [pc, #100]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
90003732:	681b      	ldr	r3, [r3, #0]
90003734:	4a18      	ldr	r2, [pc, #96]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
90003736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
9000373a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000373c:	f7fe fb40 	bl	90001dc0 <HAL_GetTick>
90003740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90003742:	e008      	b.n	90003756 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90003744:	f7fe fb3c 	bl	90001dc0 <HAL_GetTick>
90003748:	4602      	mov	r2, r0
9000374a:	693b      	ldr	r3, [r7, #16]
9000374c:	1ad3      	subs	r3, r2, r3
9000374e:	2b02      	cmp	r3, #2
90003750:	d901      	bls.n	90003756 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
90003752:	2303      	movs	r3, #3
90003754:	e057      	b.n	90003806 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90003756:	4b10      	ldr	r3, [pc, #64]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
90003758:	681b      	ldr	r3, [r3, #0]
9000375a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
9000375e:	2b00      	cmp	r3, #0
90003760:	d0f0      	beq.n	90003744 <HAL_RCC_OscConfig+0x478>
90003762:	e04f      	b.n	90003804 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90003764:	4b0c      	ldr	r3, [pc, #48]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
90003766:	681b      	ldr	r3, [r3, #0]
90003768:	4a0b      	ldr	r2, [pc, #44]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
9000376a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
9000376e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90003770:	f7fe fb26 	bl	90001dc0 <HAL_GetTick>
90003774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90003776:	e008      	b.n	9000378a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90003778:	f7fe fb22 	bl	90001dc0 <HAL_GetTick>
9000377c:	4602      	mov	r2, r0
9000377e:	693b      	ldr	r3, [r7, #16]
90003780:	1ad3      	subs	r3, r2, r3
90003782:	2b02      	cmp	r3, #2
90003784:	d901      	bls.n	9000378a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
90003786:	2303      	movs	r3, #3
90003788:	e03d      	b.n	90003806 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
9000378a:	4b03      	ldr	r3, [pc, #12]	; (90003798 <HAL_RCC_OscConfig+0x4cc>)
9000378c:	681b      	ldr	r3, [r3, #0]
9000378e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90003792:	2b00      	cmp	r3, #0
90003794:	d1f0      	bne.n	90003778 <HAL_RCC_OscConfig+0x4ac>
90003796:	e035      	b.n	90003804 <HAL_RCC_OscConfig+0x538>
90003798:	40023800 	.word	0x40023800
9000379c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
900037a0:	4b1b      	ldr	r3, [pc, #108]	; (90003810 <HAL_RCC_OscConfig+0x544>)
900037a2:	685b      	ldr	r3, [r3, #4]
900037a4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
900037a6:	687b      	ldr	r3, [r7, #4]
900037a8:	699b      	ldr	r3, [r3, #24]
900037aa:	2b01      	cmp	r3, #1
900037ac:	d028      	beq.n	90003800 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
900037ae:	68fb      	ldr	r3, [r7, #12]
900037b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
900037b4:	687b      	ldr	r3, [r7, #4]
900037b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
900037b8:	429a      	cmp	r2, r3
900037ba:	d121      	bne.n	90003800 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
900037bc:	68fb      	ldr	r3, [r7, #12]
900037be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
900037c2:	687b      	ldr	r3, [r7, #4]
900037c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
900037c6:	429a      	cmp	r2, r3
900037c8:	d11a      	bne.n	90003800 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
900037ca:	68fa      	ldr	r2, [r7, #12]
900037cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
900037d0:	4013      	ands	r3, r2
900037d2:	687a      	ldr	r2, [r7, #4]
900037d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
900037d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
900037d8:	4293      	cmp	r3, r2
900037da:	d111      	bne.n	90003800 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
900037dc:	68fb      	ldr	r3, [r7, #12]
900037de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
900037e2:	687b      	ldr	r3, [r7, #4]
900037e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900037e6:	085b      	lsrs	r3, r3, #1
900037e8:	3b01      	subs	r3, #1
900037ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
900037ec:	429a      	cmp	r2, r3
900037ee:	d107      	bne.n	90003800 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
900037f0:	68fb      	ldr	r3, [r7, #12]
900037f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
900037f6:	687b      	ldr	r3, [r7, #4]
900037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900037fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
900037fc:	429a      	cmp	r2, r3
900037fe:	d001      	beq.n	90003804 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
90003800:	2301      	movs	r3, #1
90003802:	e000      	b.n	90003806 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
90003804:	2300      	movs	r3, #0
}
90003806:	4618      	mov	r0, r3
90003808:	3718      	adds	r7, #24
9000380a:	46bd      	mov	sp, r7
9000380c:	bd80      	pop	{r7, pc}
9000380e:	bf00      	nop
90003810:	40023800 	.word	0x40023800

90003814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
90003814:	b580      	push	{r7, lr}
90003816:	b084      	sub	sp, #16
90003818:	af00      	add	r7, sp, #0
9000381a:	6078      	str	r0, [r7, #4]
9000381c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
9000381e:	2300      	movs	r3, #0
90003820:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
90003822:	687b      	ldr	r3, [r7, #4]
90003824:	2b00      	cmp	r3, #0
90003826:	d101      	bne.n	9000382c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
90003828:	2301      	movs	r3, #1
9000382a:	e0d0      	b.n	900039ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
9000382c:	4b6a      	ldr	r3, [pc, #424]	; (900039d8 <HAL_RCC_ClockConfig+0x1c4>)
9000382e:	681b      	ldr	r3, [r3, #0]
90003830:	f003 030f 	and.w	r3, r3, #15
90003834:	683a      	ldr	r2, [r7, #0]
90003836:	429a      	cmp	r2, r3
90003838:	d910      	bls.n	9000385c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
9000383a:	4b67      	ldr	r3, [pc, #412]	; (900039d8 <HAL_RCC_ClockConfig+0x1c4>)
9000383c:	681b      	ldr	r3, [r3, #0]
9000383e:	f023 020f 	bic.w	r2, r3, #15
90003842:	4965      	ldr	r1, [pc, #404]	; (900039d8 <HAL_RCC_ClockConfig+0x1c4>)
90003844:	683b      	ldr	r3, [r7, #0]
90003846:	4313      	orrs	r3, r2
90003848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000384a:	4b63      	ldr	r3, [pc, #396]	; (900039d8 <HAL_RCC_ClockConfig+0x1c4>)
9000384c:	681b      	ldr	r3, [r3, #0]
9000384e:	f003 030f 	and.w	r3, r3, #15
90003852:	683a      	ldr	r2, [r7, #0]
90003854:	429a      	cmp	r2, r3
90003856:	d001      	beq.n	9000385c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
90003858:	2301      	movs	r3, #1
9000385a:	e0b8      	b.n	900039ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000385c:	687b      	ldr	r3, [r7, #4]
9000385e:	681b      	ldr	r3, [r3, #0]
90003860:	f003 0302 	and.w	r3, r3, #2
90003864:	2b00      	cmp	r3, #0
90003866:	d020      	beq.n	900038aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90003868:	687b      	ldr	r3, [r7, #4]
9000386a:	681b      	ldr	r3, [r3, #0]
9000386c:	f003 0304 	and.w	r3, r3, #4
90003870:	2b00      	cmp	r3, #0
90003872:	d005      	beq.n	90003880 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
90003874:	4b59      	ldr	r3, [pc, #356]	; (900039dc <HAL_RCC_ClockConfig+0x1c8>)
90003876:	689b      	ldr	r3, [r3, #8]
90003878:	4a58      	ldr	r2, [pc, #352]	; (900039dc <HAL_RCC_ClockConfig+0x1c8>)
9000387a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
9000387e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90003880:	687b      	ldr	r3, [r7, #4]
90003882:	681b      	ldr	r3, [r3, #0]
90003884:	f003 0308 	and.w	r3, r3, #8
90003888:	2b00      	cmp	r3, #0
9000388a:	d005      	beq.n	90003898 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
9000388c:	4b53      	ldr	r3, [pc, #332]	; (900039dc <HAL_RCC_ClockConfig+0x1c8>)
9000388e:	689b      	ldr	r3, [r3, #8]
90003890:	4a52      	ldr	r2, [pc, #328]	; (900039dc <HAL_RCC_ClockConfig+0x1c8>)
90003892:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
90003896:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90003898:	4b50      	ldr	r3, [pc, #320]	; (900039dc <HAL_RCC_ClockConfig+0x1c8>)
9000389a:	689b      	ldr	r3, [r3, #8]
9000389c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
900038a0:	687b      	ldr	r3, [r7, #4]
900038a2:	689b      	ldr	r3, [r3, #8]
900038a4:	494d      	ldr	r1, [pc, #308]	; (900039dc <HAL_RCC_ClockConfig+0x1c8>)
900038a6:	4313      	orrs	r3, r2
900038a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
900038aa:	687b      	ldr	r3, [r7, #4]
900038ac:	681b      	ldr	r3, [r3, #0]
900038ae:	f003 0301 	and.w	r3, r3, #1
900038b2:	2b00      	cmp	r3, #0
900038b4:	d040      	beq.n	90003938 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
900038b6:	687b      	ldr	r3, [r7, #4]
900038b8:	685b      	ldr	r3, [r3, #4]
900038ba:	2b01      	cmp	r3, #1
900038bc:	d107      	bne.n	900038ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
900038be:	4b47      	ldr	r3, [pc, #284]	; (900039dc <HAL_RCC_ClockConfig+0x1c8>)
900038c0:	681b      	ldr	r3, [r3, #0]
900038c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900038c6:	2b00      	cmp	r3, #0
900038c8:	d115      	bne.n	900038f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
900038ca:	2301      	movs	r3, #1
900038cc:	e07f      	b.n	900039ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
900038ce:	687b      	ldr	r3, [r7, #4]
900038d0:	685b      	ldr	r3, [r3, #4]
900038d2:	2b02      	cmp	r3, #2
900038d4:	d107      	bne.n	900038e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
900038d6:	4b41      	ldr	r3, [pc, #260]	; (900039dc <HAL_RCC_ClockConfig+0x1c8>)
900038d8:	681b      	ldr	r3, [r3, #0]
900038da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
900038de:	2b00      	cmp	r3, #0
900038e0:	d109      	bne.n	900038f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
900038e2:	2301      	movs	r3, #1
900038e4:	e073      	b.n	900039ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
900038e6:	4b3d      	ldr	r3, [pc, #244]	; (900039dc <HAL_RCC_ClockConfig+0x1c8>)
900038e8:	681b      	ldr	r3, [r3, #0]
900038ea:	f003 0302 	and.w	r3, r3, #2
900038ee:	2b00      	cmp	r3, #0
900038f0:	d101      	bne.n	900038f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
900038f2:	2301      	movs	r3, #1
900038f4:	e06b      	b.n	900039ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
900038f6:	4b39      	ldr	r3, [pc, #228]	; (900039dc <HAL_RCC_ClockConfig+0x1c8>)
900038f8:	689b      	ldr	r3, [r3, #8]
900038fa:	f023 0203 	bic.w	r2, r3, #3
900038fe:	687b      	ldr	r3, [r7, #4]
90003900:	685b      	ldr	r3, [r3, #4]
90003902:	4936      	ldr	r1, [pc, #216]	; (900039dc <HAL_RCC_ClockConfig+0x1c8>)
90003904:	4313      	orrs	r3, r2
90003906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90003908:	f7fe fa5a 	bl	90001dc0 <HAL_GetTick>
9000390c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000390e:	e00a      	b.n	90003926 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
90003910:	f7fe fa56 	bl	90001dc0 <HAL_GetTick>
90003914:	4602      	mov	r2, r0
90003916:	68fb      	ldr	r3, [r7, #12]
90003918:	1ad3      	subs	r3, r2, r3
9000391a:	f241 3288 	movw	r2, #5000	; 0x1388
9000391e:	4293      	cmp	r3, r2
90003920:	d901      	bls.n	90003926 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
90003922:	2303      	movs	r3, #3
90003924:	e053      	b.n	900039ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90003926:	4b2d      	ldr	r3, [pc, #180]	; (900039dc <HAL_RCC_ClockConfig+0x1c8>)
90003928:	689b      	ldr	r3, [r3, #8]
9000392a:	f003 020c 	and.w	r2, r3, #12
9000392e:	687b      	ldr	r3, [r7, #4]
90003930:	685b      	ldr	r3, [r3, #4]
90003932:	009b      	lsls	r3, r3, #2
90003934:	429a      	cmp	r2, r3
90003936:	d1eb      	bne.n	90003910 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
90003938:	4b27      	ldr	r3, [pc, #156]	; (900039d8 <HAL_RCC_ClockConfig+0x1c4>)
9000393a:	681b      	ldr	r3, [r3, #0]
9000393c:	f003 030f 	and.w	r3, r3, #15
90003940:	683a      	ldr	r2, [r7, #0]
90003942:	429a      	cmp	r2, r3
90003944:	d210      	bcs.n	90003968 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90003946:	4b24      	ldr	r3, [pc, #144]	; (900039d8 <HAL_RCC_ClockConfig+0x1c4>)
90003948:	681b      	ldr	r3, [r3, #0]
9000394a:	f023 020f 	bic.w	r2, r3, #15
9000394e:	4922      	ldr	r1, [pc, #136]	; (900039d8 <HAL_RCC_ClockConfig+0x1c4>)
90003950:	683b      	ldr	r3, [r7, #0]
90003952:	4313      	orrs	r3, r2
90003954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90003956:	4b20      	ldr	r3, [pc, #128]	; (900039d8 <HAL_RCC_ClockConfig+0x1c4>)
90003958:	681b      	ldr	r3, [r3, #0]
9000395a:	f003 030f 	and.w	r3, r3, #15
9000395e:	683a      	ldr	r2, [r7, #0]
90003960:	429a      	cmp	r2, r3
90003962:	d001      	beq.n	90003968 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
90003964:	2301      	movs	r3, #1
90003966:	e032      	b.n	900039ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90003968:	687b      	ldr	r3, [r7, #4]
9000396a:	681b      	ldr	r3, [r3, #0]
9000396c:	f003 0304 	and.w	r3, r3, #4
90003970:	2b00      	cmp	r3, #0
90003972:	d008      	beq.n	90003986 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
90003974:	4b19      	ldr	r3, [pc, #100]	; (900039dc <HAL_RCC_ClockConfig+0x1c8>)
90003976:	689b      	ldr	r3, [r3, #8]
90003978:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
9000397c:	687b      	ldr	r3, [r7, #4]
9000397e:	68db      	ldr	r3, [r3, #12]
90003980:	4916      	ldr	r1, [pc, #88]	; (900039dc <HAL_RCC_ClockConfig+0x1c8>)
90003982:	4313      	orrs	r3, r2
90003984:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90003986:	687b      	ldr	r3, [r7, #4]
90003988:	681b      	ldr	r3, [r3, #0]
9000398a:	f003 0308 	and.w	r3, r3, #8
9000398e:	2b00      	cmp	r3, #0
90003990:	d009      	beq.n	900039a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
90003992:	4b12      	ldr	r3, [pc, #72]	; (900039dc <HAL_RCC_ClockConfig+0x1c8>)
90003994:	689b      	ldr	r3, [r3, #8]
90003996:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
9000399a:	687b      	ldr	r3, [r7, #4]
9000399c:	691b      	ldr	r3, [r3, #16]
9000399e:	00db      	lsls	r3, r3, #3
900039a0:	490e      	ldr	r1, [pc, #56]	; (900039dc <HAL_RCC_ClockConfig+0x1c8>)
900039a2:	4313      	orrs	r3, r2
900039a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
900039a6:	f000 f821 	bl	900039ec <HAL_RCC_GetSysClockFreq>
900039aa:	4602      	mov	r2, r0
900039ac:	4b0b      	ldr	r3, [pc, #44]	; (900039dc <HAL_RCC_ClockConfig+0x1c8>)
900039ae:	689b      	ldr	r3, [r3, #8]
900039b0:	091b      	lsrs	r3, r3, #4
900039b2:	f003 030f 	and.w	r3, r3, #15
900039b6:	490a      	ldr	r1, [pc, #40]	; (900039e0 <HAL_RCC_ClockConfig+0x1cc>)
900039b8:	5ccb      	ldrb	r3, [r1, r3]
900039ba:	fa22 f303 	lsr.w	r3, r2, r3
900039be:	4a09      	ldr	r2, [pc, #36]	; (900039e4 <HAL_RCC_ClockConfig+0x1d0>)
900039c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
900039c2:	4b09      	ldr	r3, [pc, #36]	; (900039e8 <HAL_RCC_ClockConfig+0x1d4>)
900039c4:	681b      	ldr	r3, [r3, #0]
900039c6:	4618      	mov	r0, r3
900039c8:	f7fe f9b6 	bl	90001d38 <HAL_InitTick>

  return HAL_OK;
900039cc:	2300      	movs	r3, #0
}
900039ce:	4618      	mov	r0, r3
900039d0:	3710      	adds	r7, #16
900039d2:	46bd      	mov	sp, r7
900039d4:	bd80      	pop	{r7, pc}
900039d6:	bf00      	nop
900039d8:	40023c00 	.word	0x40023c00
900039dc:	40023800 	.word	0x40023800
900039e0:	900048e0 	.word	0x900048e0
900039e4:	20000000 	.word	0x20000000
900039e8:	20000010 	.word	0x20000010

900039ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
900039ec:	b5b0      	push	{r4, r5, r7, lr}
900039ee:	b084      	sub	sp, #16
900039f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
900039f2:	2100      	movs	r1, #0
900039f4:	6079      	str	r1, [r7, #4]
900039f6:	2100      	movs	r1, #0
900039f8:	60f9      	str	r1, [r7, #12]
900039fa:	2100      	movs	r1, #0
900039fc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
900039fe:	2100      	movs	r1, #0
90003a00:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
90003a02:	4952      	ldr	r1, [pc, #328]	; (90003b4c <HAL_RCC_GetSysClockFreq+0x160>)
90003a04:	6889      	ldr	r1, [r1, #8]
90003a06:	f001 010c 	and.w	r1, r1, #12
90003a0a:	2908      	cmp	r1, #8
90003a0c:	d00d      	beq.n	90003a2a <HAL_RCC_GetSysClockFreq+0x3e>
90003a0e:	2908      	cmp	r1, #8
90003a10:	f200 8094 	bhi.w	90003b3c <HAL_RCC_GetSysClockFreq+0x150>
90003a14:	2900      	cmp	r1, #0
90003a16:	d002      	beq.n	90003a1e <HAL_RCC_GetSysClockFreq+0x32>
90003a18:	2904      	cmp	r1, #4
90003a1a:	d003      	beq.n	90003a24 <HAL_RCC_GetSysClockFreq+0x38>
90003a1c:	e08e      	b.n	90003b3c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
90003a1e:	4b4c      	ldr	r3, [pc, #304]	; (90003b50 <HAL_RCC_GetSysClockFreq+0x164>)
90003a20:	60bb      	str	r3, [r7, #8]
      break;
90003a22:	e08e      	b.n	90003b42 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
90003a24:	4b4b      	ldr	r3, [pc, #300]	; (90003b54 <HAL_RCC_GetSysClockFreq+0x168>)
90003a26:	60bb      	str	r3, [r7, #8]
      break;
90003a28:	e08b      	b.n	90003b42 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
90003a2a:	4948      	ldr	r1, [pc, #288]	; (90003b4c <HAL_RCC_GetSysClockFreq+0x160>)
90003a2c:	6849      	ldr	r1, [r1, #4]
90003a2e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
90003a32:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
90003a34:	4945      	ldr	r1, [pc, #276]	; (90003b4c <HAL_RCC_GetSysClockFreq+0x160>)
90003a36:	6849      	ldr	r1, [r1, #4]
90003a38:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
90003a3c:	2900      	cmp	r1, #0
90003a3e:	d024      	beq.n	90003a8a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
90003a40:	4942      	ldr	r1, [pc, #264]	; (90003b4c <HAL_RCC_GetSysClockFreq+0x160>)
90003a42:	6849      	ldr	r1, [r1, #4]
90003a44:	0989      	lsrs	r1, r1, #6
90003a46:	4608      	mov	r0, r1
90003a48:	f04f 0100 	mov.w	r1, #0
90003a4c:	f240 14ff 	movw	r4, #511	; 0x1ff
90003a50:	f04f 0500 	mov.w	r5, #0
90003a54:	ea00 0204 	and.w	r2, r0, r4
90003a58:	ea01 0305 	and.w	r3, r1, r5
90003a5c:	493d      	ldr	r1, [pc, #244]	; (90003b54 <HAL_RCC_GetSysClockFreq+0x168>)
90003a5e:	fb01 f003 	mul.w	r0, r1, r3
90003a62:	2100      	movs	r1, #0
90003a64:	fb01 f102 	mul.w	r1, r1, r2
90003a68:	1844      	adds	r4, r0, r1
90003a6a:	493a      	ldr	r1, [pc, #232]	; (90003b54 <HAL_RCC_GetSysClockFreq+0x168>)
90003a6c:	fba2 0101 	umull	r0, r1, r2, r1
90003a70:	1863      	adds	r3, r4, r1
90003a72:	4619      	mov	r1, r3
90003a74:	687b      	ldr	r3, [r7, #4]
90003a76:	461a      	mov	r2, r3
90003a78:	f04f 0300 	mov.w	r3, #0
90003a7c:	f7fc fbc4 	bl	90000208 <__aeabi_uldivmod>
90003a80:	4602      	mov	r2, r0
90003a82:	460b      	mov	r3, r1
90003a84:	4613      	mov	r3, r2
90003a86:	60fb      	str	r3, [r7, #12]
90003a88:	e04a      	b.n	90003b20 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
90003a8a:	4b30      	ldr	r3, [pc, #192]	; (90003b4c <HAL_RCC_GetSysClockFreq+0x160>)
90003a8c:	685b      	ldr	r3, [r3, #4]
90003a8e:	099b      	lsrs	r3, r3, #6
90003a90:	461a      	mov	r2, r3
90003a92:	f04f 0300 	mov.w	r3, #0
90003a96:	f240 10ff 	movw	r0, #511	; 0x1ff
90003a9a:	f04f 0100 	mov.w	r1, #0
90003a9e:	ea02 0400 	and.w	r4, r2, r0
90003aa2:	ea03 0501 	and.w	r5, r3, r1
90003aa6:	4620      	mov	r0, r4
90003aa8:	4629      	mov	r1, r5
90003aaa:	f04f 0200 	mov.w	r2, #0
90003aae:	f04f 0300 	mov.w	r3, #0
90003ab2:	014b      	lsls	r3, r1, #5
90003ab4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
90003ab8:	0142      	lsls	r2, r0, #5
90003aba:	4610      	mov	r0, r2
90003abc:	4619      	mov	r1, r3
90003abe:	1b00      	subs	r0, r0, r4
90003ac0:	eb61 0105 	sbc.w	r1, r1, r5
90003ac4:	f04f 0200 	mov.w	r2, #0
90003ac8:	f04f 0300 	mov.w	r3, #0
90003acc:	018b      	lsls	r3, r1, #6
90003ace:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
90003ad2:	0182      	lsls	r2, r0, #6
90003ad4:	1a12      	subs	r2, r2, r0
90003ad6:	eb63 0301 	sbc.w	r3, r3, r1
90003ada:	f04f 0000 	mov.w	r0, #0
90003ade:	f04f 0100 	mov.w	r1, #0
90003ae2:	00d9      	lsls	r1, r3, #3
90003ae4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
90003ae8:	00d0      	lsls	r0, r2, #3
90003aea:	4602      	mov	r2, r0
90003aec:	460b      	mov	r3, r1
90003aee:	1912      	adds	r2, r2, r4
90003af0:	eb45 0303 	adc.w	r3, r5, r3
90003af4:	f04f 0000 	mov.w	r0, #0
90003af8:	f04f 0100 	mov.w	r1, #0
90003afc:	0299      	lsls	r1, r3, #10
90003afe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
90003b02:	0290      	lsls	r0, r2, #10
90003b04:	4602      	mov	r2, r0
90003b06:	460b      	mov	r3, r1
90003b08:	4610      	mov	r0, r2
90003b0a:	4619      	mov	r1, r3
90003b0c:	687b      	ldr	r3, [r7, #4]
90003b0e:	461a      	mov	r2, r3
90003b10:	f04f 0300 	mov.w	r3, #0
90003b14:	f7fc fb78 	bl	90000208 <__aeabi_uldivmod>
90003b18:	4602      	mov	r2, r0
90003b1a:	460b      	mov	r3, r1
90003b1c:	4613      	mov	r3, r2
90003b1e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
90003b20:	4b0a      	ldr	r3, [pc, #40]	; (90003b4c <HAL_RCC_GetSysClockFreq+0x160>)
90003b22:	685b      	ldr	r3, [r3, #4]
90003b24:	0c1b      	lsrs	r3, r3, #16
90003b26:	f003 0303 	and.w	r3, r3, #3
90003b2a:	3301      	adds	r3, #1
90003b2c:	005b      	lsls	r3, r3, #1
90003b2e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
90003b30:	68fa      	ldr	r2, [r7, #12]
90003b32:	683b      	ldr	r3, [r7, #0]
90003b34:	fbb2 f3f3 	udiv	r3, r2, r3
90003b38:	60bb      	str	r3, [r7, #8]
      break;
90003b3a:	e002      	b.n	90003b42 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
90003b3c:	4b04      	ldr	r3, [pc, #16]	; (90003b50 <HAL_RCC_GetSysClockFreq+0x164>)
90003b3e:	60bb      	str	r3, [r7, #8]
      break;
90003b40:	bf00      	nop
    }
  }
  return sysclockfreq;
90003b42:	68bb      	ldr	r3, [r7, #8]
}
90003b44:	4618      	mov	r0, r3
90003b46:	3710      	adds	r7, #16
90003b48:	46bd      	mov	sp, r7
90003b4a:	bdb0      	pop	{r4, r5, r7, pc}
90003b4c:	40023800 	.word	0x40023800
90003b50:	00f42400 	.word	0x00f42400
90003b54:	017d7840 	.word	0x017d7840

90003b58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
90003b58:	b580      	push	{r7, lr}
90003b5a:	b088      	sub	sp, #32
90003b5c:	af00      	add	r7, sp, #0
90003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
90003b60:	2300      	movs	r3, #0
90003b62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
90003b64:	2300      	movs	r3, #0
90003b66:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
90003b68:	2300      	movs	r3, #0
90003b6a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
90003b6c:	2300      	movs	r3, #0
90003b6e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
90003b70:	2300      	movs	r3, #0
90003b72:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
90003b74:	687b      	ldr	r3, [r7, #4]
90003b76:	681b      	ldr	r3, [r3, #0]
90003b78:	f003 0301 	and.w	r3, r3, #1
90003b7c:	2b00      	cmp	r3, #0
90003b7e:	d012      	beq.n	90003ba6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
90003b80:	4b69      	ldr	r3, [pc, #420]	; (90003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003b82:	689b      	ldr	r3, [r3, #8]
90003b84:	4a68      	ldr	r2, [pc, #416]	; (90003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003b86:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
90003b8a:	6093      	str	r3, [r2, #8]
90003b8c:	4b66      	ldr	r3, [pc, #408]	; (90003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003b8e:	689a      	ldr	r2, [r3, #8]
90003b90:	687b      	ldr	r3, [r7, #4]
90003b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90003b94:	4964      	ldr	r1, [pc, #400]	; (90003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003b96:	4313      	orrs	r3, r2
90003b98:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
90003b9a:	687b      	ldr	r3, [r7, #4]
90003b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90003b9e:	2b00      	cmp	r3, #0
90003ba0:	d101      	bne.n	90003ba6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
90003ba2:	2301      	movs	r3, #1
90003ba4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
90003ba6:	687b      	ldr	r3, [r7, #4]
90003ba8:	681b      	ldr	r3, [r3, #0]
90003baa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
90003bae:	2b00      	cmp	r3, #0
90003bb0:	d017      	beq.n	90003be2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90003bb2:	4b5d      	ldr	r3, [pc, #372]	; (90003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90003bb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
90003bbc:	687b      	ldr	r3, [r7, #4]
90003bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90003bc0:	4959      	ldr	r1, [pc, #356]	; (90003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003bc2:	4313      	orrs	r3, r2
90003bc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
90003bc8:	687b      	ldr	r3, [r7, #4]
90003bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90003bcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90003bd0:	d101      	bne.n	90003bd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
90003bd2:	2301      	movs	r3, #1
90003bd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
90003bd6:	687b      	ldr	r3, [r7, #4]
90003bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90003bda:	2b00      	cmp	r3, #0
90003bdc:	d101      	bne.n	90003be2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
90003bde:	2301      	movs	r3, #1
90003be0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
90003be2:	687b      	ldr	r3, [r7, #4]
90003be4:	681b      	ldr	r3, [r3, #0]
90003be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
90003bea:	2b00      	cmp	r3, #0
90003bec:	d017      	beq.n	90003c1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
90003bee:	4b4e      	ldr	r3, [pc, #312]	; (90003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90003bf4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
90003bf8:	687b      	ldr	r3, [r7, #4]
90003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003bfc:	494a      	ldr	r1, [pc, #296]	; (90003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003bfe:	4313      	orrs	r3, r2
90003c00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
90003c04:	687b      	ldr	r3, [r7, #4]
90003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003c08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90003c0c:	d101      	bne.n	90003c12 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
90003c0e:	2301      	movs	r3, #1
90003c10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
90003c12:	687b      	ldr	r3, [r7, #4]
90003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003c16:	2b00      	cmp	r3, #0
90003c18:	d101      	bne.n	90003c1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
90003c1a:	2301      	movs	r3, #1
90003c1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
90003c1e:	687b      	ldr	r3, [r7, #4]
90003c20:	681b      	ldr	r3, [r3, #0]
90003c22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
90003c26:	2b00      	cmp	r3, #0
90003c28:	d001      	beq.n	90003c2e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
90003c2a:	2301      	movs	r3, #1
90003c2c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
90003c2e:	687b      	ldr	r3, [r7, #4]
90003c30:	681b      	ldr	r3, [r3, #0]
90003c32:	f003 0320 	and.w	r3, r3, #32
90003c36:	2b00      	cmp	r3, #0
90003c38:	f000 808b 	beq.w	90003d52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
90003c3c:	4b3a      	ldr	r3, [pc, #232]	; (90003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003c40:	4a39      	ldr	r2, [pc, #228]	; (90003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90003c46:	6413      	str	r3, [r2, #64]	; 0x40
90003c48:	4b37      	ldr	r3, [pc, #220]	; (90003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90003c50:	60bb      	str	r3, [r7, #8]
90003c52:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
90003c54:	4b35      	ldr	r3, [pc, #212]	; (90003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
90003c56:	681b      	ldr	r3, [r3, #0]
90003c58:	4a34      	ldr	r2, [pc, #208]	; (90003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
90003c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90003c5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90003c60:	f7fe f8ae 	bl	90001dc0 <HAL_GetTick>
90003c64:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
90003c66:	e008      	b.n	90003c7a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90003c68:	f7fe f8aa 	bl	90001dc0 <HAL_GetTick>
90003c6c:	4602      	mov	r2, r0
90003c6e:	697b      	ldr	r3, [r7, #20]
90003c70:	1ad3      	subs	r3, r2, r3
90003c72:	2b64      	cmp	r3, #100	; 0x64
90003c74:	d901      	bls.n	90003c7a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
90003c76:	2303      	movs	r3, #3
90003c78:	e357      	b.n	9000432a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
90003c7a:	4b2c      	ldr	r3, [pc, #176]	; (90003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
90003c7c:	681b      	ldr	r3, [r3, #0]
90003c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
90003c82:	2b00      	cmp	r3, #0
90003c84:	d0f0      	beq.n	90003c68 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
90003c86:	4b28      	ldr	r3, [pc, #160]	; (90003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90003c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
90003c8e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
90003c90:	693b      	ldr	r3, [r7, #16]
90003c92:	2b00      	cmp	r3, #0
90003c94:	d035      	beq.n	90003d02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
90003c96:	687b      	ldr	r3, [r7, #4]
90003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90003c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
90003c9e:	693a      	ldr	r2, [r7, #16]
90003ca0:	429a      	cmp	r2, r3
90003ca2:	d02e      	beq.n	90003d02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
90003ca4:	4b20      	ldr	r3, [pc, #128]	; (90003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90003ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
90003cac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
90003cae:	4b1e      	ldr	r3, [pc, #120]	; (90003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90003cb2:	4a1d      	ldr	r2, [pc, #116]	; (90003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90003cb8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
90003cba:	4b1b      	ldr	r3, [pc, #108]	; (90003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90003cbe:	4a1a      	ldr	r2, [pc, #104]	; (90003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90003cc4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
90003cc6:	4a18      	ldr	r2, [pc, #96]	; (90003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003cc8:	693b      	ldr	r3, [r7, #16]
90003cca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
90003ccc:	4b16      	ldr	r3, [pc, #88]	; (90003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90003cd0:	f003 0301 	and.w	r3, r3, #1
90003cd4:	2b01      	cmp	r3, #1
90003cd6:	d114      	bne.n	90003d02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90003cd8:	f7fe f872 	bl	90001dc0 <HAL_GetTick>
90003cdc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90003cde:	e00a      	b.n	90003cf6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
90003ce0:	f7fe f86e 	bl	90001dc0 <HAL_GetTick>
90003ce4:	4602      	mov	r2, r0
90003ce6:	697b      	ldr	r3, [r7, #20]
90003ce8:	1ad3      	subs	r3, r2, r3
90003cea:	f241 3288 	movw	r2, #5000	; 0x1388
90003cee:	4293      	cmp	r3, r2
90003cf0:	d901      	bls.n	90003cf6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
90003cf2:	2303      	movs	r3, #3
90003cf4:	e319      	b.n	9000432a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90003cf6:	4b0c      	ldr	r3, [pc, #48]	; (90003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90003cfa:	f003 0302 	and.w	r3, r3, #2
90003cfe:	2b00      	cmp	r3, #0
90003d00:	d0ee      	beq.n	90003ce0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
90003d02:	687b      	ldr	r3, [r7, #4]
90003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90003d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
90003d0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90003d0e:	d111      	bne.n	90003d34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
90003d10:	4b05      	ldr	r3, [pc, #20]	; (90003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003d12:	689b      	ldr	r3, [r3, #8]
90003d14:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
90003d18:	687b      	ldr	r3, [r7, #4]
90003d1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
90003d1c:	4b04      	ldr	r3, [pc, #16]	; (90003d30 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
90003d1e:	400b      	ands	r3, r1
90003d20:	4901      	ldr	r1, [pc, #4]	; (90003d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003d22:	4313      	orrs	r3, r2
90003d24:	608b      	str	r3, [r1, #8]
90003d26:	e00b      	b.n	90003d40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
90003d28:	40023800 	.word	0x40023800
90003d2c:	40007000 	.word	0x40007000
90003d30:	0ffffcff 	.word	0x0ffffcff
90003d34:	4bb1      	ldr	r3, [pc, #708]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003d36:	689b      	ldr	r3, [r3, #8]
90003d38:	4ab0      	ldr	r2, [pc, #704]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003d3a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
90003d3e:	6093      	str	r3, [r2, #8]
90003d40:	4bae      	ldr	r3, [pc, #696]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003d42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
90003d44:	687b      	ldr	r3, [r7, #4]
90003d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90003d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
90003d4c:	49ab      	ldr	r1, [pc, #684]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003d4e:	4313      	orrs	r3, r2
90003d50:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
90003d52:	687b      	ldr	r3, [r7, #4]
90003d54:	681b      	ldr	r3, [r3, #0]
90003d56:	f003 0310 	and.w	r3, r3, #16
90003d5a:	2b00      	cmp	r3, #0
90003d5c:	d010      	beq.n	90003d80 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
90003d5e:	4ba7      	ldr	r3, [pc, #668]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90003d64:	4aa5      	ldr	r2, [pc, #660]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003d66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90003d6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
90003d6e:	4ba3      	ldr	r3, [pc, #652]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003d70:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
90003d74:	687b      	ldr	r3, [r7, #4]
90003d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90003d78:	49a0      	ldr	r1, [pc, #640]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003d7a:	4313      	orrs	r3, r2
90003d7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
90003d80:	687b      	ldr	r3, [r7, #4]
90003d82:	681b      	ldr	r3, [r3, #0]
90003d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90003d88:	2b00      	cmp	r3, #0
90003d8a:	d00a      	beq.n	90003da2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
90003d8c:	4b9b      	ldr	r3, [pc, #620]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003d92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
90003d96:	687b      	ldr	r3, [r7, #4]
90003d98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90003d9a:	4998      	ldr	r1, [pc, #608]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003d9c:	4313      	orrs	r3, r2
90003d9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
90003da2:	687b      	ldr	r3, [r7, #4]
90003da4:	681b      	ldr	r3, [r3, #0]
90003da6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
90003daa:	2b00      	cmp	r3, #0
90003dac:	d00a      	beq.n	90003dc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
90003dae:	4b93      	ldr	r3, [pc, #588]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003db4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
90003db8:	687b      	ldr	r3, [r7, #4]
90003dba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90003dbc:	498f      	ldr	r1, [pc, #572]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003dbe:	4313      	orrs	r3, r2
90003dc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
90003dc4:	687b      	ldr	r3, [r7, #4]
90003dc6:	681b      	ldr	r3, [r3, #0]
90003dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
90003dcc:	2b00      	cmp	r3, #0
90003dce:	d00a      	beq.n	90003de6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
90003dd0:	4b8a      	ldr	r3, [pc, #552]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003dd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
90003dda:	687b      	ldr	r3, [r7, #4]
90003ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90003dde:	4987      	ldr	r1, [pc, #540]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003de0:	4313      	orrs	r3, r2
90003de2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
90003de6:	687b      	ldr	r3, [r7, #4]
90003de8:	681b      	ldr	r3, [r3, #0]
90003dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90003dee:	2b00      	cmp	r3, #0
90003df0:	d00a      	beq.n	90003e08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
90003df2:	4b82      	ldr	r3, [pc, #520]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003df8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
90003dfc:	687b      	ldr	r3, [r7, #4]
90003dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90003e00:	497e      	ldr	r1, [pc, #504]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003e02:	4313      	orrs	r3, r2
90003e04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
90003e08:	687b      	ldr	r3, [r7, #4]
90003e0a:	681b      	ldr	r3, [r3, #0]
90003e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
90003e10:	2b00      	cmp	r3, #0
90003e12:	d00a      	beq.n	90003e2a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
90003e14:	4b79      	ldr	r3, [pc, #484]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003e1a:	f023 0203 	bic.w	r2, r3, #3
90003e1e:	687b      	ldr	r3, [r7, #4]
90003e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90003e22:	4976      	ldr	r1, [pc, #472]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003e24:	4313      	orrs	r3, r2
90003e26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
90003e2a:	687b      	ldr	r3, [r7, #4]
90003e2c:	681b      	ldr	r3, [r3, #0]
90003e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
90003e32:	2b00      	cmp	r3, #0
90003e34:	d00a      	beq.n	90003e4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
90003e36:	4b71      	ldr	r3, [pc, #452]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003e3c:	f023 020c 	bic.w	r2, r3, #12
90003e40:	687b      	ldr	r3, [r7, #4]
90003e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90003e44:	496d      	ldr	r1, [pc, #436]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003e46:	4313      	orrs	r3, r2
90003e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
90003e4c:	687b      	ldr	r3, [r7, #4]
90003e4e:	681b      	ldr	r3, [r3, #0]
90003e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
90003e54:	2b00      	cmp	r3, #0
90003e56:	d00a      	beq.n	90003e6e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
90003e58:	4b68      	ldr	r3, [pc, #416]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003e5e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
90003e62:	687b      	ldr	r3, [r7, #4]
90003e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90003e66:	4965      	ldr	r1, [pc, #404]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003e68:	4313      	orrs	r3, r2
90003e6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
90003e6e:	687b      	ldr	r3, [r7, #4]
90003e70:	681b      	ldr	r3, [r3, #0]
90003e72:	f403 7300 	and.w	r3, r3, #512	; 0x200
90003e76:	2b00      	cmp	r3, #0
90003e78:	d00a      	beq.n	90003e90 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
90003e7a:	4b60      	ldr	r3, [pc, #384]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003e80:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
90003e84:	687b      	ldr	r3, [r7, #4]
90003e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90003e88:	495c      	ldr	r1, [pc, #368]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003e8a:	4313      	orrs	r3, r2
90003e8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
90003e90:	687b      	ldr	r3, [r7, #4]
90003e92:	681b      	ldr	r3, [r3, #0]
90003e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
90003e98:	2b00      	cmp	r3, #0
90003e9a:	d00a      	beq.n	90003eb2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
90003e9c:	4b57      	ldr	r3, [pc, #348]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003ea2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
90003ea6:	687b      	ldr	r3, [r7, #4]
90003ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90003eaa:	4954      	ldr	r1, [pc, #336]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003eac:	4313      	orrs	r3, r2
90003eae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
90003eb2:	687b      	ldr	r3, [r7, #4]
90003eb4:	681b      	ldr	r3, [r3, #0]
90003eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
90003eba:	2b00      	cmp	r3, #0
90003ebc:	d00a      	beq.n	90003ed4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
90003ebe:	4b4f      	ldr	r3, [pc, #316]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003ec4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
90003ec8:	687b      	ldr	r3, [r7, #4]
90003eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90003ecc:	494b      	ldr	r1, [pc, #300]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003ece:	4313      	orrs	r3, r2
90003ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
90003ed4:	687b      	ldr	r3, [r7, #4]
90003ed6:	681b      	ldr	r3, [r3, #0]
90003ed8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
90003edc:	2b00      	cmp	r3, #0
90003ede:	d00a      	beq.n	90003ef6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
90003ee0:	4b46      	ldr	r3, [pc, #280]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003ee6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
90003eea:	687b      	ldr	r3, [r7, #4]
90003eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90003eee:	4943      	ldr	r1, [pc, #268]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003ef0:	4313      	orrs	r3, r2
90003ef2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
90003ef6:	687b      	ldr	r3, [r7, #4]
90003ef8:	681b      	ldr	r3, [r3, #0]
90003efa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90003efe:	2b00      	cmp	r3, #0
90003f00:	d00a      	beq.n	90003f18 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
90003f02:	4b3e      	ldr	r3, [pc, #248]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003f08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
90003f0c:	687b      	ldr	r3, [r7, #4]
90003f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90003f10:	493a      	ldr	r1, [pc, #232]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003f12:	4313      	orrs	r3, r2
90003f14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
90003f18:	687b      	ldr	r3, [r7, #4]
90003f1a:	681b      	ldr	r3, [r3, #0]
90003f1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90003f20:	2b00      	cmp	r3, #0
90003f22:	d00a      	beq.n	90003f3a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
90003f24:	4b35      	ldr	r3, [pc, #212]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003f2a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
90003f2e:	687b      	ldr	r3, [r7, #4]
90003f30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90003f32:	4932      	ldr	r1, [pc, #200]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003f34:	4313      	orrs	r3, r2
90003f36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
90003f3a:	687b      	ldr	r3, [r7, #4]
90003f3c:	681b      	ldr	r3, [r3, #0]
90003f3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90003f42:	2b00      	cmp	r3, #0
90003f44:	d011      	beq.n	90003f6a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
90003f46:	4b2d      	ldr	r3, [pc, #180]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003f4c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
90003f50:	687b      	ldr	r3, [r7, #4]
90003f52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90003f54:	4929      	ldr	r1, [pc, #164]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003f56:	4313      	orrs	r3, r2
90003f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
90003f5c:	687b      	ldr	r3, [r7, #4]
90003f5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90003f60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
90003f64:	d101      	bne.n	90003f6a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
90003f66:	2301      	movs	r3, #1
90003f68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
90003f6a:	687b      	ldr	r3, [r7, #4]
90003f6c:	681b      	ldr	r3, [r3, #0]
90003f6e:	f003 0308 	and.w	r3, r3, #8
90003f72:	2b00      	cmp	r3, #0
90003f74:	d001      	beq.n	90003f7a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
90003f76:	2301      	movs	r3, #1
90003f78:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
90003f7a:	687b      	ldr	r3, [r7, #4]
90003f7c:	681b      	ldr	r3, [r3, #0]
90003f7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
90003f82:	2b00      	cmp	r3, #0
90003f84:	d00a      	beq.n	90003f9c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
90003f86:	4b1d      	ldr	r3, [pc, #116]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003f8c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
90003f90:	687b      	ldr	r3, [r7, #4]
90003f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90003f94:	4919      	ldr	r1, [pc, #100]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003f96:	4313      	orrs	r3, r2
90003f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
90003f9c:	687b      	ldr	r3, [r7, #4]
90003f9e:	681b      	ldr	r3, [r3, #0]
90003fa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
90003fa4:	2b00      	cmp	r3, #0
90003fa6:	d00b      	beq.n	90003fc0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
90003fa8:	4b14      	ldr	r3, [pc, #80]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003fae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
90003fb2:	687b      	ldr	r3, [r7, #4]
90003fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90003fb8:	4910      	ldr	r1, [pc, #64]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003fba:	4313      	orrs	r3, r2
90003fbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
90003fc0:	69fb      	ldr	r3, [r7, #28]
90003fc2:	2b01      	cmp	r3, #1
90003fc4:	d006      	beq.n	90003fd4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
90003fc6:	687b      	ldr	r3, [r7, #4]
90003fc8:	681b      	ldr	r3, [r3, #0]
90003fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90003fce:	2b00      	cmp	r3, #0
90003fd0:	f000 80d9 	beq.w	90004186 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
90003fd4:	4b09      	ldr	r3, [pc, #36]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003fd6:	681b      	ldr	r3, [r3, #0]
90003fd8:	4a08      	ldr	r2, [pc, #32]	; (90003ffc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90003fda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
90003fde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90003fe0:	f7fd feee 	bl	90001dc0 <HAL_GetTick>
90003fe4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
90003fe6:	e00b      	b.n	90004000 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
90003fe8:	f7fd feea 	bl	90001dc0 <HAL_GetTick>
90003fec:	4602      	mov	r2, r0
90003fee:	697b      	ldr	r3, [r7, #20]
90003ff0:	1ad3      	subs	r3, r2, r3
90003ff2:	2b64      	cmp	r3, #100	; 0x64
90003ff4:	d904      	bls.n	90004000 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
90003ff6:	2303      	movs	r3, #3
90003ff8:	e197      	b.n	9000432a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
90003ffa:	bf00      	nop
90003ffc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
90004000:	4b6c      	ldr	r3, [pc, #432]	; (900041b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
90004002:	681b      	ldr	r3, [r3, #0]
90004004:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
90004008:	2b00      	cmp	r3, #0
9000400a:	d1ed      	bne.n	90003fe8 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
9000400c:	687b      	ldr	r3, [r7, #4]
9000400e:	681b      	ldr	r3, [r3, #0]
90004010:	f003 0301 	and.w	r3, r3, #1
90004014:	2b00      	cmp	r3, #0
90004016:	d021      	beq.n	9000405c <HAL_RCCEx_PeriphCLKConfig+0x504>
90004018:	687b      	ldr	r3, [r7, #4]
9000401a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000401c:	2b00      	cmp	r3, #0
9000401e:	d11d      	bne.n	9000405c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
90004020:	4b64      	ldr	r3, [pc, #400]	; (900041b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
90004022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90004026:	0c1b      	lsrs	r3, r3, #16
90004028:	f003 0303 	and.w	r3, r3, #3
9000402c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
9000402e:	4b61      	ldr	r3, [pc, #388]	; (900041b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
90004030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90004034:	0e1b      	lsrs	r3, r3, #24
90004036:	f003 030f 	and.w	r3, r3, #15
9000403a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
9000403c:	687b      	ldr	r3, [r7, #4]
9000403e:	685b      	ldr	r3, [r3, #4]
90004040:	019a      	lsls	r2, r3, #6
90004042:	693b      	ldr	r3, [r7, #16]
90004044:	041b      	lsls	r3, r3, #16
90004046:	431a      	orrs	r2, r3
90004048:	68fb      	ldr	r3, [r7, #12]
9000404a:	061b      	lsls	r3, r3, #24
9000404c:	431a      	orrs	r2, r3
9000404e:	687b      	ldr	r3, [r7, #4]
90004050:	689b      	ldr	r3, [r3, #8]
90004052:	071b      	lsls	r3, r3, #28
90004054:	4957      	ldr	r1, [pc, #348]	; (900041b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
90004056:	4313      	orrs	r3, r2
90004058:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
9000405c:	687b      	ldr	r3, [r7, #4]
9000405e:	681b      	ldr	r3, [r3, #0]
90004060:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
90004064:	2b00      	cmp	r3, #0
90004066:	d004      	beq.n	90004072 <HAL_RCCEx_PeriphCLKConfig+0x51a>
90004068:	687b      	ldr	r3, [r7, #4]
9000406a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000406c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90004070:	d00a      	beq.n	90004088 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
90004072:	687b      	ldr	r3, [r7, #4]
90004074:	681b      	ldr	r3, [r3, #0]
90004076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
9000407a:	2b00      	cmp	r3, #0
9000407c:	d02e      	beq.n	900040dc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
9000407e:	687b      	ldr	r3, [r7, #4]
90004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90004082:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90004086:	d129      	bne.n	900040dc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
90004088:	4b4a      	ldr	r3, [pc, #296]	; (900041b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
9000408a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000408e:	0c1b      	lsrs	r3, r3, #16
90004090:	f003 0303 	and.w	r3, r3, #3
90004094:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
90004096:	4b47      	ldr	r3, [pc, #284]	; (900041b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
90004098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000409c:	0f1b      	lsrs	r3, r3, #28
9000409e:	f003 0307 	and.w	r3, r3, #7
900040a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
900040a4:	687b      	ldr	r3, [r7, #4]
900040a6:	685b      	ldr	r3, [r3, #4]
900040a8:	019a      	lsls	r2, r3, #6
900040aa:	693b      	ldr	r3, [r7, #16]
900040ac:	041b      	lsls	r3, r3, #16
900040ae:	431a      	orrs	r2, r3
900040b0:	687b      	ldr	r3, [r7, #4]
900040b2:	68db      	ldr	r3, [r3, #12]
900040b4:	061b      	lsls	r3, r3, #24
900040b6:	431a      	orrs	r2, r3
900040b8:	68fb      	ldr	r3, [r7, #12]
900040ba:	071b      	lsls	r3, r3, #28
900040bc:	493d      	ldr	r1, [pc, #244]	; (900041b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
900040be:	4313      	orrs	r3, r2
900040c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
900040c4:	4b3b      	ldr	r3, [pc, #236]	; (900041b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
900040c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
900040ca:	f023 021f 	bic.w	r2, r3, #31
900040ce:	687b      	ldr	r3, [r7, #4]
900040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900040d2:	3b01      	subs	r3, #1
900040d4:	4937      	ldr	r1, [pc, #220]	; (900041b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
900040d6:	4313      	orrs	r3, r2
900040d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
900040dc:	687b      	ldr	r3, [r7, #4]
900040de:	681b      	ldr	r3, [r3, #0]
900040e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
900040e4:	2b00      	cmp	r3, #0
900040e6:	d01d      	beq.n	90004124 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
900040e8:	4b32      	ldr	r3, [pc, #200]	; (900041b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
900040ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
900040ee:	0e1b      	lsrs	r3, r3, #24
900040f0:	f003 030f 	and.w	r3, r3, #15
900040f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
900040f6:	4b2f      	ldr	r3, [pc, #188]	; (900041b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
900040f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
900040fc:	0f1b      	lsrs	r3, r3, #28
900040fe:	f003 0307 	and.w	r3, r3, #7
90004102:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
90004104:	687b      	ldr	r3, [r7, #4]
90004106:	685b      	ldr	r3, [r3, #4]
90004108:	019a      	lsls	r2, r3, #6
9000410a:	687b      	ldr	r3, [r7, #4]
9000410c:	691b      	ldr	r3, [r3, #16]
9000410e:	041b      	lsls	r3, r3, #16
90004110:	431a      	orrs	r2, r3
90004112:	693b      	ldr	r3, [r7, #16]
90004114:	061b      	lsls	r3, r3, #24
90004116:	431a      	orrs	r2, r3
90004118:	68fb      	ldr	r3, [r7, #12]
9000411a:	071b      	lsls	r3, r3, #28
9000411c:	4925      	ldr	r1, [pc, #148]	; (900041b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
9000411e:	4313      	orrs	r3, r2
90004120:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
90004124:	687b      	ldr	r3, [r7, #4]
90004126:	681b      	ldr	r3, [r3, #0]
90004128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
9000412c:	2b00      	cmp	r3, #0
9000412e:	d011      	beq.n	90004154 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
90004130:	687b      	ldr	r3, [r7, #4]
90004132:	685b      	ldr	r3, [r3, #4]
90004134:	019a      	lsls	r2, r3, #6
90004136:	687b      	ldr	r3, [r7, #4]
90004138:	691b      	ldr	r3, [r3, #16]
9000413a:	041b      	lsls	r3, r3, #16
9000413c:	431a      	orrs	r2, r3
9000413e:	687b      	ldr	r3, [r7, #4]
90004140:	68db      	ldr	r3, [r3, #12]
90004142:	061b      	lsls	r3, r3, #24
90004144:	431a      	orrs	r2, r3
90004146:	687b      	ldr	r3, [r7, #4]
90004148:	689b      	ldr	r3, [r3, #8]
9000414a:	071b      	lsls	r3, r3, #28
9000414c:	4919      	ldr	r1, [pc, #100]	; (900041b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
9000414e:	4313      	orrs	r3, r2
90004150:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
90004154:	4b17      	ldr	r3, [pc, #92]	; (900041b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
90004156:	681b      	ldr	r3, [r3, #0]
90004158:	4a16      	ldr	r2, [pc, #88]	; (900041b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
9000415a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
9000415e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90004160:	f7fd fe2e 	bl	90001dc0 <HAL_GetTick>
90004164:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
90004166:	e008      	b.n	9000417a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
90004168:	f7fd fe2a 	bl	90001dc0 <HAL_GetTick>
9000416c:	4602      	mov	r2, r0
9000416e:	697b      	ldr	r3, [r7, #20]
90004170:	1ad3      	subs	r3, r2, r3
90004172:	2b64      	cmp	r3, #100	; 0x64
90004174:	d901      	bls.n	9000417a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
90004176:	2303      	movs	r3, #3
90004178:	e0d7      	b.n	9000432a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
9000417a:	4b0e      	ldr	r3, [pc, #56]	; (900041b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
9000417c:	681b      	ldr	r3, [r3, #0]
9000417e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
90004182:	2b00      	cmp	r3, #0
90004184:	d0f0      	beq.n	90004168 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
90004186:	69bb      	ldr	r3, [r7, #24]
90004188:	2b01      	cmp	r3, #1
9000418a:	f040 80cd 	bne.w	90004328 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
9000418e:	4b09      	ldr	r3, [pc, #36]	; (900041b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
90004190:	681b      	ldr	r3, [r3, #0]
90004192:	4a08      	ldr	r2, [pc, #32]	; (900041b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
90004194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
90004198:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000419a:	f7fd fe11 	bl	90001dc0 <HAL_GetTick>
9000419e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
900041a0:	e00a      	b.n	900041b8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
900041a2:	f7fd fe0d 	bl	90001dc0 <HAL_GetTick>
900041a6:	4602      	mov	r2, r0
900041a8:	697b      	ldr	r3, [r7, #20]
900041aa:	1ad3      	subs	r3, r2, r3
900041ac:	2b64      	cmp	r3, #100	; 0x64
900041ae:	d903      	bls.n	900041b8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
900041b0:	2303      	movs	r3, #3
900041b2:	e0ba      	b.n	9000432a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
900041b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
900041b8:	4b5e      	ldr	r3, [pc, #376]	; (90004334 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
900041ba:	681b      	ldr	r3, [r3, #0]
900041bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
900041c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900041c4:	d0ed      	beq.n	900041a2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
900041c6:	687b      	ldr	r3, [r7, #4]
900041c8:	681b      	ldr	r3, [r3, #0]
900041ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
900041ce:	2b00      	cmp	r3, #0
900041d0:	d003      	beq.n	900041da <HAL_RCCEx_PeriphCLKConfig+0x682>
900041d2:	687b      	ldr	r3, [r7, #4]
900041d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900041d6:	2b00      	cmp	r3, #0
900041d8:	d009      	beq.n	900041ee <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
900041da:	687b      	ldr	r3, [r7, #4]
900041dc:	681b      	ldr	r3, [r3, #0]
900041de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
900041e2:	2b00      	cmp	r3, #0
900041e4:	d02e      	beq.n	90004244 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
900041e6:	687b      	ldr	r3, [r7, #4]
900041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900041ea:	2b00      	cmp	r3, #0
900041ec:	d12a      	bne.n	90004244 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
900041ee:	4b51      	ldr	r3, [pc, #324]	; (90004334 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
900041f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
900041f4:	0c1b      	lsrs	r3, r3, #16
900041f6:	f003 0303 	and.w	r3, r3, #3
900041fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
900041fc:	4b4d      	ldr	r3, [pc, #308]	; (90004334 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
900041fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90004202:	0f1b      	lsrs	r3, r3, #28
90004204:	f003 0307 	and.w	r3, r3, #7
90004208:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
9000420a:	687b      	ldr	r3, [r7, #4]
9000420c:	695b      	ldr	r3, [r3, #20]
9000420e:	019a      	lsls	r2, r3, #6
90004210:	693b      	ldr	r3, [r7, #16]
90004212:	041b      	lsls	r3, r3, #16
90004214:	431a      	orrs	r2, r3
90004216:	687b      	ldr	r3, [r7, #4]
90004218:	699b      	ldr	r3, [r3, #24]
9000421a:	061b      	lsls	r3, r3, #24
9000421c:	431a      	orrs	r2, r3
9000421e:	68fb      	ldr	r3, [r7, #12]
90004220:	071b      	lsls	r3, r3, #28
90004222:	4944      	ldr	r1, [pc, #272]	; (90004334 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
90004224:	4313      	orrs	r3, r2
90004226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
9000422a:	4b42      	ldr	r3, [pc, #264]	; (90004334 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
9000422c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90004230:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
90004234:	687b      	ldr	r3, [r7, #4]
90004236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90004238:	3b01      	subs	r3, #1
9000423a:	021b      	lsls	r3, r3, #8
9000423c:	493d      	ldr	r1, [pc, #244]	; (90004334 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
9000423e:	4313      	orrs	r3, r2
90004240:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
90004244:	687b      	ldr	r3, [r7, #4]
90004246:	681b      	ldr	r3, [r3, #0]
90004248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
9000424c:	2b00      	cmp	r3, #0
9000424e:	d022      	beq.n	90004296 <HAL_RCCEx_PeriphCLKConfig+0x73e>
90004250:	687b      	ldr	r3, [r7, #4]
90004252:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90004254:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
90004258:	d11d      	bne.n	90004296 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
9000425a:	4b36      	ldr	r3, [pc, #216]	; (90004334 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
9000425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90004260:	0e1b      	lsrs	r3, r3, #24
90004262:	f003 030f 	and.w	r3, r3, #15
90004266:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
90004268:	4b32      	ldr	r3, [pc, #200]	; (90004334 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
9000426a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
9000426e:	0f1b      	lsrs	r3, r3, #28
90004270:	f003 0307 	and.w	r3, r3, #7
90004274:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
90004276:	687b      	ldr	r3, [r7, #4]
90004278:	695b      	ldr	r3, [r3, #20]
9000427a:	019a      	lsls	r2, r3, #6
9000427c:	687b      	ldr	r3, [r7, #4]
9000427e:	6a1b      	ldr	r3, [r3, #32]
90004280:	041b      	lsls	r3, r3, #16
90004282:	431a      	orrs	r2, r3
90004284:	693b      	ldr	r3, [r7, #16]
90004286:	061b      	lsls	r3, r3, #24
90004288:	431a      	orrs	r2, r3
9000428a:	68fb      	ldr	r3, [r7, #12]
9000428c:	071b      	lsls	r3, r3, #28
9000428e:	4929      	ldr	r1, [pc, #164]	; (90004334 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
90004290:	4313      	orrs	r3, r2
90004292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
90004296:	687b      	ldr	r3, [r7, #4]
90004298:	681b      	ldr	r3, [r3, #0]
9000429a:	f003 0308 	and.w	r3, r3, #8
9000429e:	2b00      	cmp	r3, #0
900042a0:	d028      	beq.n	900042f4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
900042a2:	4b24      	ldr	r3, [pc, #144]	; (90004334 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
900042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
900042a8:	0e1b      	lsrs	r3, r3, #24
900042aa:	f003 030f 	and.w	r3, r3, #15
900042ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
900042b0:	4b20      	ldr	r3, [pc, #128]	; (90004334 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
900042b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
900042b6:	0c1b      	lsrs	r3, r3, #16
900042b8:	f003 0303 	and.w	r3, r3, #3
900042bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
900042be:	687b      	ldr	r3, [r7, #4]
900042c0:	695b      	ldr	r3, [r3, #20]
900042c2:	019a      	lsls	r2, r3, #6
900042c4:	68fb      	ldr	r3, [r7, #12]
900042c6:	041b      	lsls	r3, r3, #16
900042c8:	431a      	orrs	r2, r3
900042ca:	693b      	ldr	r3, [r7, #16]
900042cc:	061b      	lsls	r3, r3, #24
900042ce:	431a      	orrs	r2, r3
900042d0:	687b      	ldr	r3, [r7, #4]
900042d2:	69db      	ldr	r3, [r3, #28]
900042d4:	071b      	lsls	r3, r3, #28
900042d6:	4917      	ldr	r1, [pc, #92]	; (90004334 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
900042d8:	4313      	orrs	r3, r2
900042da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
900042de:	4b15      	ldr	r3, [pc, #84]	; (90004334 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
900042e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
900042e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
900042e8:	687b      	ldr	r3, [r7, #4]
900042ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900042ec:	4911      	ldr	r1, [pc, #68]	; (90004334 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
900042ee:	4313      	orrs	r3, r2
900042f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
900042f4:	4b0f      	ldr	r3, [pc, #60]	; (90004334 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
900042f6:	681b      	ldr	r3, [r3, #0]
900042f8:	4a0e      	ldr	r2, [pc, #56]	; (90004334 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
900042fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
900042fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90004300:	f7fd fd5e 	bl	90001dc0 <HAL_GetTick>
90004304:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
90004306:	e008      	b.n	9000431a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
90004308:	f7fd fd5a 	bl	90001dc0 <HAL_GetTick>
9000430c:	4602      	mov	r2, r0
9000430e:	697b      	ldr	r3, [r7, #20]
90004310:	1ad3      	subs	r3, r2, r3
90004312:	2b64      	cmp	r3, #100	; 0x64
90004314:	d901      	bls.n	9000431a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
90004316:	2303      	movs	r3, #3
90004318:	e007      	b.n	9000432a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
9000431a:	4b06      	ldr	r3, [pc, #24]	; (90004334 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
9000431c:	681b      	ldr	r3, [r3, #0]
9000431e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90004322:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90004326:	d1ef      	bne.n	90004308 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
90004328:	2300      	movs	r3, #0
}
9000432a:	4618      	mov	r0, r3
9000432c:	3720      	adds	r7, #32
9000432e:	46bd      	mov	sp, r7
90004330:	bd80      	pop	{r7, pc}
90004332:	bf00      	nop
90004334:	40023800 	.word	0x40023800

90004338 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
90004338:	b580      	push	{r7, lr}
9000433a:	b082      	sub	sp, #8
9000433c:	af00      	add	r7, sp, #0
9000433e:	6078      	str	r0, [r7, #4]
90004340:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
90004342:	687b      	ldr	r3, [r7, #4]
90004344:	2b00      	cmp	r3, #0
90004346:	d101      	bne.n	9000434c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
90004348:	2301      	movs	r3, #1
9000434a:	e025      	b.n	90004398 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
9000434c:	687b      	ldr	r3, [r7, #4]
9000434e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
90004352:	b2db      	uxtb	r3, r3
90004354:	2b00      	cmp	r3, #0
90004356:	d106      	bne.n	90004366 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
90004358:	687b      	ldr	r3, [r7, #4]
9000435a:	2200      	movs	r2, #0
9000435c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
90004360:	6878      	ldr	r0, [r7, #4]
90004362:	f000 f81d 	bl	900043a0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90004366:	687b      	ldr	r3, [r7, #4]
90004368:	2202      	movs	r2, #2
9000436a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000436e:	687b      	ldr	r3, [r7, #4]
90004370:	681a      	ldr	r2, [r3, #0]
90004372:	687b      	ldr	r3, [r7, #4]
90004374:	3304      	adds	r3, #4
90004376:	4619      	mov	r1, r3
90004378:	4610      	mov	r0, r2
9000437a:	f000 f867 	bl	9000444c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
9000437e:	687b      	ldr	r3, [r7, #4]
90004380:	6818      	ldr	r0, [r3, #0]
90004382:	687b      	ldr	r3, [r7, #4]
90004384:	685b      	ldr	r3, [r3, #4]
90004386:	461a      	mov	r2, r3
90004388:	6839      	ldr	r1, [r7, #0]
9000438a:	f000 f8d1 	bl	90004530 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
9000438e:	687b      	ldr	r3, [r7, #4]
90004390:	2201      	movs	r2, #1
90004392:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
90004396:	2300      	movs	r3, #0
}
90004398:	4618      	mov	r0, r3
9000439a:	3708      	adds	r7, #8
9000439c:	46bd      	mov	sp, r7
9000439e:	bd80      	pop	{r7, pc}

900043a0 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
900043a0:	b480      	push	{r7}
900043a2:	b083      	sub	sp, #12
900043a4:	af00      	add	r7, sp, #0
900043a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
900043a8:	bf00      	nop
900043aa:	370c      	adds	r7, #12
900043ac:	46bd      	mov	sp, r7
900043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
900043b2:	4770      	bx	lr

900043b4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
900043b4:	b580      	push	{r7, lr}
900043b6:	b084      	sub	sp, #16
900043b8:	af00      	add	r7, sp, #0
900043ba:	60f8      	str	r0, [r7, #12]
900043bc:	60b9      	str	r1, [r7, #8]
900043be:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
900043c0:	68fb      	ldr	r3, [r7, #12]
900043c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
900043c6:	b2db      	uxtb	r3, r3
900043c8:	2b02      	cmp	r3, #2
900043ca:	d101      	bne.n	900043d0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
900043cc:	2302      	movs	r3, #2
900043ce:	e018      	b.n	90004402 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
900043d0:	68fb      	ldr	r3, [r7, #12]
900043d2:	2202      	movs	r2, #2
900043d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
900043d8:	68fb      	ldr	r3, [r7, #12]
900043da:	681b      	ldr	r3, [r3, #0]
900043dc:	687a      	ldr	r2, [r7, #4]
900043de:	68b9      	ldr	r1, [r7, #8]
900043e0:	4618      	mov	r0, r3
900043e2:	f000 f925 	bl	90004630 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
900043e6:	68bb      	ldr	r3, [r7, #8]
900043e8:	681b      	ldr	r3, [r3, #0]
900043ea:	2b02      	cmp	r3, #2
900043ec:	d104      	bne.n	900043f8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
900043ee:	68fb      	ldr	r3, [r7, #12]
900043f0:	2205      	movs	r2, #5
900043f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
900043f6:	e003      	b.n	90004400 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
900043f8:	68fb      	ldr	r3, [r7, #12]
900043fa:	2201      	movs	r2, #1
900043fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
90004400:	2300      	movs	r3, #0
}
90004402:	4618      	mov	r0, r3
90004404:	3710      	adds	r7, #16
90004406:	46bd      	mov	sp, r7
90004408:	bd80      	pop	{r7, pc}

9000440a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
9000440a:	b580      	push	{r7, lr}
9000440c:	b082      	sub	sp, #8
9000440e:	af00      	add	r7, sp, #0
90004410:	6078      	str	r0, [r7, #4]
90004412:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
90004414:	687b      	ldr	r3, [r7, #4]
90004416:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
9000441a:	b2db      	uxtb	r3, r3
9000441c:	2b02      	cmp	r3, #2
9000441e:	d101      	bne.n	90004424 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
90004420:	2302      	movs	r3, #2
90004422:	e00e      	b.n	90004442 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90004424:	687b      	ldr	r3, [r7, #4]
90004426:	2202      	movs	r2, #2
90004428:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
9000442c:	687b      	ldr	r3, [r7, #4]
9000442e:	681b      	ldr	r3, [r3, #0]
90004430:	6839      	ldr	r1, [r7, #0]
90004432:	4618      	mov	r0, r3
90004434:	f000 f920 	bl	90004678 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
90004438:	687b      	ldr	r3, [r7, #4]
9000443a:	2201      	movs	r2, #1
9000443c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
90004440:	2300      	movs	r3, #0
}
90004442:	4618      	mov	r0, r3
90004444:	3708      	adds	r7, #8
90004446:	46bd      	mov	sp, r7
90004448:	bd80      	pop	{r7, pc}
	...

9000444c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
9000444c:	b480      	push	{r7}
9000444e:	b085      	sub	sp, #20
90004450:	af00      	add	r7, sp, #0
90004452:	6078      	str	r0, [r7, #4]
90004454:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
90004456:	2300      	movs	r3, #0
90004458:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
9000445a:	2300      	movs	r3, #0
9000445c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
9000445e:	683b      	ldr	r3, [r7, #0]
90004460:	681b      	ldr	r3, [r3, #0]
90004462:	2b01      	cmp	r3, #1
90004464:	d027      	beq.n	900044b6 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
90004466:	687b      	ldr	r3, [r7, #4]
90004468:	681b      	ldr	r3, [r3, #0]
9000446a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
9000446c:	68fa      	ldr	r2, [r7, #12]
9000446e:	4b2f      	ldr	r3, [pc, #188]	; (9000452c <FMC_SDRAM_Init+0xe0>)
90004470:	4013      	ands	r3, r2
90004472:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
90004474:	683b      	ldr	r3, [r7, #0]
90004476:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
90004478:	683b      	ldr	r3, [r7, #0]
9000447a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
9000447c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
9000447e:	683b      	ldr	r3, [r7, #0]
90004480:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
90004482:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
90004484:	683b      	ldr	r3, [r7, #0]
90004486:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
90004488:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
9000448a:	683b      	ldr	r3, [r7, #0]
9000448c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
9000448e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
90004490:	683b      	ldr	r3, [r7, #0]
90004492:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
90004494:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
90004496:	683b      	ldr	r3, [r7, #0]
90004498:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
9000449a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
9000449c:	683b      	ldr	r3, [r7, #0]
9000449e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
900044a0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
900044a2:	683b      	ldr	r3, [r7, #0]
900044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
900044a6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
900044a8:	68fa      	ldr	r2, [r7, #12]
900044aa:	4313      	orrs	r3, r2
900044ac:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
900044ae:	687b      	ldr	r3, [r7, #4]
900044b0:	68fa      	ldr	r2, [r7, #12]
900044b2:	601a      	str	r2, [r3, #0]
900044b4:	e032      	b.n	9000451c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
900044b6:	687b      	ldr	r3, [r7, #4]
900044b8:	681b      	ldr	r3, [r3, #0]
900044ba:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
900044bc:	68fb      	ldr	r3, [r7, #12]
900044be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
900044c2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
900044c4:	683b      	ldr	r3, [r7, #0]
900044c6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
900044c8:	683b      	ldr	r3, [r7, #0]
900044ca:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
900044cc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
900044ce:	683b      	ldr	r3, [r7, #0]
900044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
900044d2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
900044d4:	68fa      	ldr	r2, [r7, #12]
900044d6:	4313      	orrs	r3, r2
900044d8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
900044da:	687b      	ldr	r3, [r7, #4]
900044dc:	685b      	ldr	r3, [r3, #4]
900044de:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
900044e0:	68ba      	ldr	r2, [r7, #8]
900044e2:	4b12      	ldr	r3, [pc, #72]	; (9000452c <FMC_SDRAM_Init+0xe0>)
900044e4:	4013      	ands	r3, r2
900044e6:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
900044e8:	683b      	ldr	r3, [r7, #0]
900044ea:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
900044ec:	683b      	ldr	r3, [r7, #0]
900044ee:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
900044f0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
900044f2:	683b      	ldr	r3, [r7, #0]
900044f4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
900044f6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
900044f8:	683b      	ldr	r3, [r7, #0]
900044fa:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
900044fc:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
900044fe:	683b      	ldr	r3, [r7, #0]
90004500:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
90004502:	431a      	orrs	r2, r3
                       Init->WriteProtection);
90004504:	683b      	ldr	r3, [r7, #0]
90004506:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
90004508:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
9000450a:	68ba      	ldr	r2, [r7, #8]
9000450c:	4313      	orrs	r3, r2
9000450e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
90004510:	687b      	ldr	r3, [r7, #4]
90004512:	68fa      	ldr	r2, [r7, #12]
90004514:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
90004516:	687b      	ldr	r3, [r7, #4]
90004518:	68ba      	ldr	r2, [r7, #8]
9000451a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
9000451c:	2300      	movs	r3, #0
}
9000451e:	4618      	mov	r0, r3
90004520:	3714      	adds	r7, #20
90004522:	46bd      	mov	sp, r7
90004524:	f85d 7b04 	ldr.w	r7, [sp], #4
90004528:	4770      	bx	lr
9000452a:	bf00      	nop
9000452c:	ffff8000 	.word	0xffff8000

90004530 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
90004530:	b480      	push	{r7}
90004532:	b087      	sub	sp, #28
90004534:	af00      	add	r7, sp, #0
90004536:	60f8      	str	r0, [r7, #12]
90004538:	60b9      	str	r1, [r7, #8]
9000453a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
9000453c:	2300      	movs	r3, #0
9000453e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
90004540:	2300      	movs	r3, #0
90004542:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
90004544:	687b      	ldr	r3, [r7, #4]
90004546:	2b01      	cmp	r3, #1
90004548:	d02e      	beq.n	900045a8 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
9000454a:	68fb      	ldr	r3, [r7, #12]
9000454c:	689b      	ldr	r3, [r3, #8]
9000454e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
90004550:	697b      	ldr	r3, [r7, #20]
90004552:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
90004556:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90004558:	68bb      	ldr	r3, [r7, #8]
9000455a:	681b      	ldr	r3, [r3, #0]
9000455c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
9000455e:	68bb      	ldr	r3, [r7, #8]
90004560:	685b      	ldr	r3, [r3, #4]
90004562:	3b01      	subs	r3, #1
90004564:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90004566:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
90004568:	68bb      	ldr	r3, [r7, #8]
9000456a:	689b      	ldr	r3, [r3, #8]
9000456c:	3b01      	subs	r3, #1
9000456e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
90004570:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
90004572:	68bb      	ldr	r3, [r7, #8]
90004574:	68db      	ldr	r3, [r3, #12]
90004576:	3b01      	subs	r3, #1
90004578:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
9000457a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
9000457c:	68bb      	ldr	r3, [r7, #8]
9000457e:	691b      	ldr	r3, [r3, #16]
90004580:	3b01      	subs	r3, #1
90004582:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
90004584:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
90004586:	68bb      	ldr	r3, [r7, #8]
90004588:	695b      	ldr	r3, [r3, #20]
9000458a:	3b01      	subs	r3, #1
9000458c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
9000458e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
90004590:	68bb      	ldr	r3, [r7, #8]
90004592:	699b      	ldr	r3, [r3, #24]
90004594:	3b01      	subs	r3, #1
90004596:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90004598:	4313      	orrs	r3, r2
9000459a:	697a      	ldr	r2, [r7, #20]
9000459c:	4313      	orrs	r3, r2
9000459e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
900045a0:	68fb      	ldr	r3, [r7, #12]
900045a2:	697a      	ldr	r2, [r7, #20]
900045a4:	609a      	str	r2, [r3, #8]
900045a6:	e039      	b.n	9000461c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
900045a8:	68fb      	ldr	r3, [r7, #12]
900045aa:	689b      	ldr	r3, [r3, #8]
900045ac:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
900045ae:	697a      	ldr	r2, [r7, #20]
900045b0:	4b1e      	ldr	r3, [pc, #120]	; (9000462c <FMC_SDRAM_Timing_Init+0xfc>)
900045b2:	4013      	ands	r3, r2
900045b4:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
900045b6:	68bb      	ldr	r3, [r7, #8]
900045b8:	68db      	ldr	r3, [r3, #12]
900045ba:	3b01      	subs	r3, #1
900045bc:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
900045be:	68bb      	ldr	r3, [r7, #8]
900045c0:	695b      	ldr	r3, [r3, #20]
900045c2:	3b01      	subs	r3, #1
900045c4:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
900045c6:	4313      	orrs	r3, r2
900045c8:	697a      	ldr	r2, [r7, #20]
900045ca:	4313      	orrs	r3, r2
900045cc:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
900045ce:	68fb      	ldr	r3, [r7, #12]
900045d0:	68db      	ldr	r3, [r3, #12]
900045d2:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
900045d4:	693b      	ldr	r3, [r7, #16]
900045d6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
900045da:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
900045dc:	68bb      	ldr	r3, [r7, #8]
900045de:	681b      	ldr	r3, [r3, #0]
900045e0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
900045e2:	68bb      	ldr	r3, [r7, #8]
900045e4:	685b      	ldr	r3, [r3, #4]
900045e6:	3b01      	subs	r3, #1
900045e8:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
900045ea:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
900045ec:	68bb      	ldr	r3, [r7, #8]
900045ee:	689b      	ldr	r3, [r3, #8]
900045f0:	3b01      	subs	r3, #1
900045f2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
900045f4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
900045f6:	68bb      	ldr	r3, [r7, #8]
900045f8:	691b      	ldr	r3, [r3, #16]
900045fa:	3b01      	subs	r3, #1
900045fc:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
900045fe:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
90004600:	68bb      	ldr	r3, [r7, #8]
90004602:	699b      	ldr	r3, [r3, #24]
90004604:	3b01      	subs	r3, #1
90004606:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90004608:	4313      	orrs	r3, r2
9000460a:	693a      	ldr	r2, [r7, #16]
9000460c:	4313      	orrs	r3, r2
9000460e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
90004610:	68fb      	ldr	r3, [r7, #12]
90004612:	697a      	ldr	r2, [r7, #20]
90004614:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
90004616:	68fb      	ldr	r3, [r7, #12]
90004618:	693a      	ldr	r2, [r7, #16]
9000461a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
9000461c:	2300      	movs	r3, #0
}
9000461e:	4618      	mov	r0, r3
90004620:	371c      	adds	r7, #28
90004622:	46bd      	mov	sp, r7
90004624:	f85d 7b04 	ldr.w	r7, [sp], #4
90004628:	4770      	bx	lr
9000462a:	bf00      	nop
9000462c:	ff0f0fff 	.word	0xff0f0fff

90004630 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
90004630:	b480      	push	{r7}
90004632:	b085      	sub	sp, #20
90004634:	af00      	add	r7, sp, #0
90004636:	60f8      	str	r0, [r7, #12]
90004638:	60b9      	str	r1, [r7, #8]
9000463a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
9000463c:	68fb      	ldr	r3, [r7, #12]
9000463e:	691a      	ldr	r2, [r3, #16]
90004640:	4b0c      	ldr	r3, [pc, #48]	; (90004674 <FMC_SDRAM_SendCommand+0x44>)
90004642:	4013      	ands	r3, r2
90004644:	68ba      	ldr	r2, [r7, #8]
90004646:	6811      	ldr	r1, [r2, #0]
90004648:	68ba      	ldr	r2, [r7, #8]
9000464a:	6852      	ldr	r2, [r2, #4]
9000464c:	4311      	orrs	r1, r2
9000464e:	68ba      	ldr	r2, [r7, #8]
90004650:	6892      	ldr	r2, [r2, #8]
90004652:	3a01      	subs	r2, #1
90004654:	0152      	lsls	r2, r2, #5
90004656:	4311      	orrs	r1, r2
90004658:	68ba      	ldr	r2, [r7, #8]
9000465a:	68d2      	ldr	r2, [r2, #12]
9000465c:	0252      	lsls	r2, r2, #9
9000465e:	430a      	orrs	r2, r1
90004660:	431a      	orrs	r2, r3
90004662:	68fb      	ldr	r3, [r7, #12]
90004664:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
90004666:	2300      	movs	r3, #0
}
90004668:	4618      	mov	r0, r3
9000466a:	3714      	adds	r7, #20
9000466c:	46bd      	mov	sp, r7
9000466e:	f85d 7b04 	ldr.w	r7, [sp], #4
90004672:	4770      	bx	lr
90004674:	ffc00000 	.word	0xffc00000

90004678 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
90004678:	b480      	push	{r7}
9000467a:	b083      	sub	sp, #12
9000467c:	af00      	add	r7, sp, #0
9000467e:	6078      	str	r0, [r7, #4]
90004680:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
90004682:	687b      	ldr	r3, [r7, #4]
90004684:	695a      	ldr	r2, [r3, #20]
90004686:	683b      	ldr	r3, [r7, #0]
90004688:	005b      	lsls	r3, r3, #1
9000468a:	431a      	orrs	r2, r3
9000468c:	687b      	ldr	r3, [r7, #4]
9000468e:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
90004690:	2300      	movs	r3, #0
}
90004692:	4618      	mov	r0, r3
90004694:	370c      	adds	r7, #12
90004696:	46bd      	mov	sp, r7
90004698:	f85d 7b04 	ldr.w	r7, [sp], #4
9000469c:	4770      	bx	lr
	...

900046a0 <_ZN15LCD_DISCO_F7508C1Ev>:
*/

#include "LCD_DISCO_F7508.h"

// Constructor
LCD_DISCO_F7508::LCD_DISCO_F7508()
900046a0:	b590      	push	{r4, r7, lr}
900046a2:	b083      	sub	sp, #12
900046a4:	af00      	add	r7, sp, #0
900046a6:	6078      	str	r0, [r7, #4]
{
  BSP_LCD_Init();
900046a8:	f7fc f90c 	bl	900008c4 <BSP_LCD_Init>
  
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
900046ac:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
900046b0:	2000      	movs	r0, #0
900046b2:	f7fc f99f 	bl	900009f4 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+(BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4));
900046b6:	f7fc f975 	bl	900009a4 <BSP_LCD_GetXSize>
900046ba:	4604      	mov	r4, r0
900046bc:	f7fc f986 	bl	900009cc <BSP_LCD_GetYSize>
900046c0:	4603      	mov	r3, r0
900046c2:	fb03 f304 	mul.w	r3, r3, r4
900046c6:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
900046ca:	009b      	lsls	r3, r3, #2
900046cc:	4619      	mov	r1, r3
900046ce:	2001      	movs	r0, #1
900046d0:	f7fc f990 	bl	900009f4 <BSP_LCD_LayerDefaultInit>
  
  BSP_LCD_DisplayOn();
900046d4:	f7fc ff4c 	bl	90001570 <BSP_LCD_DisplayOn>
  
  BSP_LCD_SelectLayer(0);
900046d8:	2000      	movs	r0, #0
900046da:	f7fc f9eb 	bl	90000ab4 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
900046de:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
900046e2:	f7fc fa59 	bl	90000b98 <BSP_LCD_Clear>

  BSP_LCD_SelectLayer(1);
900046e6:	2001      	movs	r0, #1
900046e8:	f7fc f9e4 	bl	90000ab4 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
900046ec:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
900046f0:	f7fc fa52 	bl	90000b98 <BSP_LCD_Clear>
  
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
900046f4:	4807      	ldr	r0, [pc, #28]	; (90004714 <_ZN15LCD_DISCO_F7508C1Ev+0x74>)
900046f6:	f7fc fa1f 	bl	90000b38 <BSP_LCD_SetFont>
  
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
900046fa:	f04f 30ff 	mov.w	r0, #4294967295
900046fe:	f7fc fa01 	bl	90000b04 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
90004702:	4805      	ldr	r0, [pc, #20]	; (90004718 <_ZN15LCD_DISCO_F7508C1Ev+0x78>)
90004704:	f7fc f9e6 	bl	90000ad4 <BSP_LCD_SetTextColor>
}
90004708:	687b      	ldr	r3, [r7, #4]
9000470a:	4618      	mov	r0, r3
9000470c:	370c      	adds	r7, #12
9000470e:	46bd      	mov	sp, r7
90004710:	bd90      	pop	{r4, r7, pc}
90004712:	bf00      	nop
90004714:	20000004 	.word	0x20000004
90004718:	ff000080 	.word	0xff000080

9000471c <_ZN15LCD_DISCO_F750812SetTextColorEm>:
{
  BSP_LCD_SetLayerVisible(LayerIndex, State);
}

void LCD_DISCO_F7508::SetTextColor(uint32_t Color)
{
9000471c:	b580      	push	{r7, lr}
9000471e:	b082      	sub	sp, #8
90004720:	af00      	add	r7, sp, #0
90004722:	6078      	str	r0, [r7, #4]
90004724:	6039      	str	r1, [r7, #0]
  BSP_LCD_SetTextColor(Color);
90004726:	6838      	ldr	r0, [r7, #0]
90004728:	f7fc f9d4 	bl	90000ad4 <BSP_LCD_SetTextColor>
}
9000472c:	bf00      	nop
9000472e:	3708      	adds	r7, #8
90004730:	46bd      	mov	sp, r7
90004732:	bd80      	pop	{r7, pc}

90004734 <_ZN15LCD_DISCO_F750812SetBackColorEm>:
{
  return BSP_LCD_GetTextColor();
}

void LCD_DISCO_F7508::SetBackColor(uint32_t Color)
{
90004734:	b580      	push	{r7, lr}
90004736:	b082      	sub	sp, #8
90004738:	af00      	add	r7, sp, #0
9000473a:	6078      	str	r0, [r7, #4]
9000473c:	6039      	str	r1, [r7, #0]
  BSP_LCD_SetBackColor(Color);
9000473e:	6838      	ldr	r0, [r7, #0]
90004740:	f7fc f9e0 	bl	90000b04 <BSP_LCD_SetBackColor>
}
90004744:	bf00      	nop
90004746:	3708      	adds	r7, #8
90004748:	46bd      	mov	sp, r7
9000474a:	bd80      	pop	{r7, pc}

9000474c <_ZN15LCD_DISCO_F75085ClearEm>:
{
  BSP_LCD_DrawPixel(Xpos, Ypos, pixel);
}

void LCD_DISCO_F7508::Clear(uint32_t Color)
{
9000474c:	b580      	push	{r7, lr}
9000474e:	b082      	sub	sp, #8
90004750:	af00      	add	r7, sp, #0
90004752:	6078      	str	r0, [r7, #4]
90004754:	6039      	str	r1, [r7, #0]
  BSP_LCD_Clear(Color);
90004756:	6838      	ldr	r0, [r7, #0]
90004758:	f7fc fa1e 	bl	90000b98 <BSP_LCD_Clear>
}
9000475c:	bf00      	nop
9000475e:	3708      	adds	r7, #8
90004760:	46bd      	mov	sp, r7
90004762:	bd80      	pop	{r7, pc}

90004764 <_ZN15LCD_DISCO_F750815DisplayStringAtEttPh20Text_AlignModeTypdef>:
{
  BSP_LCD_DisplayStringAtLine(Line, ptr);
}

void LCD_DISCO_F7508::DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
90004764:	b580      	push	{r7, lr}
90004766:	b084      	sub	sp, #16
90004768:	af00      	add	r7, sp, #0
9000476a:	60f8      	str	r0, [r7, #12]
9000476c:	607b      	str	r3, [r7, #4]
9000476e:	460b      	mov	r3, r1
90004770:	817b      	strh	r3, [r7, #10]
90004772:	4613      	mov	r3, r2
90004774:	813b      	strh	r3, [r7, #8]
  BSP_LCD_DisplayStringAt(Xpos, Ypos, Text, Mode);
90004776:	7e3b      	ldrb	r3, [r7, #24]
90004778:	8939      	ldrh	r1, [r7, #8]
9000477a:	8978      	ldrh	r0, [r7, #10]
9000477c:	687a      	ldr	r2, [r7, #4]
9000477e:	f7fc fa77 	bl	90000c70 <BSP_LCD_DisplayStringAt>
}
90004782:	bf00      	nop
90004784:	3710      	adds	r7, #16
90004786:	46bd      	mov	sp, r7
90004788:	bd80      	pop	{r7, pc}

9000478a <_ZN15LCD_DISCO_F75088DrawRectEtttt>:
{
  BSP_LCD_DrawLine(x1, y1, x2, y2);
}

void LCD_DISCO_F7508::DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
9000478a:	b580      	push	{r7, lr}
9000478c:	b084      	sub	sp, #16
9000478e:	af00      	add	r7, sp, #0
90004790:	60f8      	str	r0, [r7, #12]
90004792:	4608      	mov	r0, r1
90004794:	4611      	mov	r1, r2
90004796:	461a      	mov	r2, r3
90004798:	4603      	mov	r3, r0
9000479a:	817b      	strh	r3, [r7, #10]
9000479c:	460b      	mov	r3, r1
9000479e:	813b      	strh	r3, [r7, #8]
900047a0:	4613      	mov	r3, r2
900047a2:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DrawRect(Xpos, Ypos, Width, Height);
900047a4:	8b3b      	ldrh	r3, [r7, #24]
900047a6:	88fa      	ldrh	r2, [r7, #6]
900047a8:	8939      	ldrh	r1, [r7, #8]
900047aa:	8978      	ldrh	r0, [r7, #10]
900047ac:	f7fc fbe8 	bl	90000f80 <BSP_LCD_DrawRect>
}
900047b0:	bf00      	nop
900047b2:	3710      	adds	r7, #16
900047b4:	46bd      	mov	sp, r7
900047b6:	bd80      	pop	{r7, pc}

900047b8 <_ZN15LCD_DISCO_F750810DrawCircleEttt>:

void LCD_DISCO_F7508::DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
900047b8:	b580      	push	{r7, lr}
900047ba:	b084      	sub	sp, #16
900047bc:	af00      	add	r7, sp, #0
900047be:	60f8      	str	r0, [r7, #12]
900047c0:	4608      	mov	r0, r1
900047c2:	4611      	mov	r1, r2
900047c4:	461a      	mov	r2, r3
900047c6:	4603      	mov	r3, r0
900047c8:	817b      	strh	r3, [r7, #10]
900047ca:	460b      	mov	r3, r1
900047cc:	813b      	strh	r3, [r7, #8]
900047ce:	4613      	mov	r3, r2
900047d0:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
900047d2:	88fa      	ldrh	r2, [r7, #6]
900047d4:	8939      	ldrh	r1, [r7, #8]
900047d6:	897b      	ldrh	r3, [r7, #10]
900047d8:	4618      	mov	r0, r3
900047da:	f7fc fc03 	bl	90000fe4 <BSP_LCD_DrawCircle>
}
900047de:	bf00      	nop
900047e0:	3710      	adds	r7, #16
900047e2:	46bd      	mov	sp, r7
900047e4:	bd80      	pop	{r7, pc}

900047e6 <_ZN15LCD_DISCO_F750811DrawEllipseEiiii>:
{
  BSP_LCD_DrawPolygon(Points, PointCount);
}

void LCD_DISCO_F7508::DrawEllipse(int Xpos, int Ypos, int XRadius, int YRadius)
{
900047e6:	b580      	push	{r7, lr}
900047e8:	b084      	sub	sp, #16
900047ea:	af00      	add	r7, sp, #0
900047ec:	60f8      	str	r0, [r7, #12]
900047ee:	60b9      	str	r1, [r7, #8]
900047f0:	607a      	str	r2, [r7, #4]
900047f2:	603b      	str	r3, [r7, #0]
  BSP_LCD_DrawEllipse(Xpos, Ypos, XRadius, YRadius);
900047f4:	69bb      	ldr	r3, [r7, #24]
900047f6:	683a      	ldr	r2, [r7, #0]
900047f8:	6879      	ldr	r1, [r7, #4]
900047fa:	68b8      	ldr	r0, [r7, #8]
900047fc:	f7fc fcdc 	bl	900011b8 <BSP_LCD_DrawEllipse>
}
90004800:	bf00      	nop
90004802:	3710      	adds	r7, #16
90004804:	46bd      	mov	sp, r7
90004806:	bd80      	pop	{r7, pc}

90004808 <_ZN15LCD_DISCO_F750810FillCircleEttt>:
{
  BSP_LCD_FillRect(Xpos, Ypos, Width, Height);
}

void LCD_DISCO_F7508::FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
90004808:	b580      	push	{r7, lr}
9000480a:	b084      	sub	sp, #16
9000480c:	af00      	add	r7, sp, #0
9000480e:	60f8      	str	r0, [r7, #12]
90004810:	4608      	mov	r0, r1
90004812:	4611      	mov	r1, r2
90004814:	461a      	mov	r2, r3
90004816:	4603      	mov	r3, r0
90004818:	817b      	strh	r3, [r7, #10]
9000481a:	460b      	mov	r3, r1
9000481c:	813b      	strh	r3, [r7, #8]
9000481e:	4613      	mov	r3, r2
90004820:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_FillCircle(Xpos, Ypos, Radius);
90004822:	88fa      	ldrh	r2, [r7, #6]
90004824:	8939      	ldrh	r1, [r7, #8]
90004826:	897b      	ldrh	r3, [r7, #10]
90004828:	4618      	mov	r0, r3
9000482a:	f7fc fe01 	bl	90001430 <BSP_LCD_FillCircle>
}
9000482e:	bf00      	nop
90004830:	3710      	adds	r7, #16
90004832:	46bd      	mov	sp, r7
90004834:	bd80      	pop	{r7, pc}
	...

90004838 <__libc_init_array>:
90004838:	b570      	push	{r4, r5, r6, lr}
9000483a:	4d0d      	ldr	r5, [pc, #52]	; (90004870 <__libc_init_array+0x38>)
9000483c:	4c0d      	ldr	r4, [pc, #52]	; (90004874 <__libc_init_array+0x3c>)
9000483e:	1b64      	subs	r4, r4, r5
90004840:	10a4      	asrs	r4, r4, #2
90004842:	2600      	movs	r6, #0
90004844:	42a6      	cmp	r6, r4
90004846:	d109      	bne.n	9000485c <__libc_init_array+0x24>
90004848:	4d0b      	ldr	r5, [pc, #44]	; (90004878 <__libc_init_array+0x40>)
9000484a:	4c0c      	ldr	r4, [pc, #48]	; (9000487c <__libc_init_array+0x44>)
9000484c:	f000 f820 	bl	90004890 <_init>
90004850:	1b64      	subs	r4, r4, r5
90004852:	10a4      	asrs	r4, r4, #2
90004854:	2600      	movs	r6, #0
90004856:	42a6      	cmp	r6, r4
90004858:	d105      	bne.n	90004866 <__libc_init_array+0x2e>
9000485a:	bd70      	pop	{r4, r5, r6, pc}
9000485c:	f855 3b04 	ldr.w	r3, [r5], #4
90004860:	4798      	blx	r3
90004862:	3601      	adds	r6, #1
90004864:	e7ee      	b.n	90004844 <__libc_init_array+0xc>
90004866:	f855 3b04 	ldr.w	r3, [r5], #4
9000486a:	4798      	blx	r3
9000486c:	3601      	adds	r6, #1
9000486e:	e7f2      	b.n	90004856 <__libc_init_array+0x1e>
90004870:	900063b8 	.word	0x900063b8
90004874:	900063b8 	.word	0x900063b8
90004878:	900063b8 	.word	0x900063b8
9000487c:	900063bc 	.word	0x900063bc

90004880 <memset>:
90004880:	4402      	add	r2, r0
90004882:	4603      	mov	r3, r0
90004884:	4293      	cmp	r3, r2
90004886:	d100      	bne.n	9000488a <memset+0xa>
90004888:	4770      	bx	lr
9000488a:	f803 1b01 	strb.w	r1, [r3], #1
9000488e:	e7f9      	b.n	90004884 <memset+0x4>

90004890 <_init>:
90004890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90004892:	bf00      	nop
90004894:	bcf8      	pop	{r3, r4, r5, r6, r7}
90004896:	bc08      	pop	{r3}
90004898:	469e      	mov	lr, r3
9000489a:	4770      	bx	lr

9000489c <_fini>:
9000489c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000489e:	bf00      	nop
900048a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
900048a2:	bc08      	pop	{r3}
900048a4:	469e      	mov	lr, r3
900048a6:	4770      	bx	lr
