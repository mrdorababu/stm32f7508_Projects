
stm32f7508_LCD_Demo_Cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  90000000  90000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a74  900001c8  900001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b08  90004c3c  90004c3c  00014c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  90006744  90006744  00016744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  9000674c  9000674c  0001674c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  90006754  90006754  00016754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000018  20000000  9000675c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000026c  20000018  90006774  00020018  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  20000284  90006774  00020284  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000fcf6  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002634  00000000  00000000  0002fd3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d38  00000000  00000000  00032378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000c10  00000000  00000000  000330b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002c79c  00000000  00000000  00033cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00010586  00000000  00000000  0006045c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0010af33  00000000  00000000  000709e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0017b915  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000035cc  00000000  00000000  0017b968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900001c8 <__do_global_dtors_aux>:
900001c8:	b510      	push	{r4, lr}
900001ca:	4c05      	ldr	r4, [pc, #20]	; (900001e0 <__do_global_dtors_aux+0x18>)
900001cc:	7823      	ldrb	r3, [r4, #0]
900001ce:	b933      	cbnz	r3, 900001de <__do_global_dtors_aux+0x16>
900001d0:	4b04      	ldr	r3, [pc, #16]	; (900001e4 <__do_global_dtors_aux+0x1c>)
900001d2:	b113      	cbz	r3, 900001da <__do_global_dtors_aux+0x12>
900001d4:	4804      	ldr	r0, [pc, #16]	; (900001e8 <__do_global_dtors_aux+0x20>)
900001d6:	f3af 8000 	nop.w
900001da:	2301      	movs	r3, #1
900001dc:	7023      	strb	r3, [r4, #0]
900001de:	bd10      	pop	{r4, pc}
900001e0:	20000018 	.word	0x20000018
900001e4:	00000000 	.word	0x00000000
900001e8:	90004c24 	.word	0x90004c24

900001ec <frame_dummy>:
900001ec:	b508      	push	{r3, lr}
900001ee:	4b03      	ldr	r3, [pc, #12]	; (900001fc <frame_dummy+0x10>)
900001f0:	b11b      	cbz	r3, 900001fa <frame_dummy+0xe>
900001f2:	4903      	ldr	r1, [pc, #12]	; (90000200 <frame_dummy+0x14>)
900001f4:	4803      	ldr	r0, [pc, #12]	; (90000204 <frame_dummy+0x18>)
900001f6:	f3af 8000 	nop.w
900001fa:	bd08      	pop	{r3, pc}
900001fc:	00000000 	.word	0x00000000
90000200:	2000001c 	.word	0x2000001c
90000204:	90004c24 	.word	0x90004c24

90000208 <__aeabi_uldivmod>:
90000208:	b953      	cbnz	r3, 90000220 <__aeabi_uldivmod+0x18>
9000020a:	b94a      	cbnz	r2, 90000220 <__aeabi_uldivmod+0x18>
9000020c:	2900      	cmp	r1, #0
9000020e:	bf08      	it	eq
90000210:	2800      	cmpeq	r0, #0
90000212:	bf1c      	itt	ne
90000214:	f04f 31ff 	movne.w	r1, #4294967295
90000218:	f04f 30ff 	movne.w	r0, #4294967295
9000021c:	f000 b96e 	b.w	900004fc <__aeabi_idiv0>
90000220:	f1ad 0c08 	sub.w	ip, sp, #8
90000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
90000228:	f000 f806 	bl	90000238 <__udivmoddi4>
9000022c:	f8dd e004 	ldr.w	lr, [sp, #4]
90000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
90000234:	b004      	add	sp, #16
90000236:	4770      	bx	lr

90000238 <__udivmoddi4>:
90000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000023c:	9d08      	ldr	r5, [sp, #32]
9000023e:	4604      	mov	r4, r0
90000240:	468c      	mov	ip, r1
90000242:	2b00      	cmp	r3, #0
90000244:	f040 8083 	bne.w	9000034e <__udivmoddi4+0x116>
90000248:	428a      	cmp	r2, r1
9000024a:	4617      	mov	r7, r2
9000024c:	d947      	bls.n	900002de <__udivmoddi4+0xa6>
9000024e:	fab2 f282 	clz	r2, r2
90000252:	b142      	cbz	r2, 90000266 <__udivmoddi4+0x2e>
90000254:	f1c2 0020 	rsb	r0, r2, #32
90000258:	fa24 f000 	lsr.w	r0, r4, r0
9000025c:	4091      	lsls	r1, r2
9000025e:	4097      	lsls	r7, r2
90000260:	ea40 0c01 	orr.w	ip, r0, r1
90000264:	4094      	lsls	r4, r2
90000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
9000026a:	0c23      	lsrs	r3, r4, #16
9000026c:	fbbc f6f8 	udiv	r6, ip, r8
90000270:	fa1f fe87 	uxth.w	lr, r7
90000274:	fb08 c116 	mls	r1, r8, r6, ip
90000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000027c:	fb06 f10e 	mul.w	r1, r6, lr
90000280:	4299      	cmp	r1, r3
90000282:	d909      	bls.n	90000298 <__udivmoddi4+0x60>
90000284:	18fb      	adds	r3, r7, r3
90000286:	f106 30ff 	add.w	r0, r6, #4294967295
9000028a:	f080 8119 	bcs.w	900004c0 <__udivmoddi4+0x288>
9000028e:	4299      	cmp	r1, r3
90000290:	f240 8116 	bls.w	900004c0 <__udivmoddi4+0x288>
90000294:	3e02      	subs	r6, #2
90000296:	443b      	add	r3, r7
90000298:	1a5b      	subs	r3, r3, r1
9000029a:	b2a4      	uxth	r4, r4
9000029c:	fbb3 f0f8 	udiv	r0, r3, r8
900002a0:	fb08 3310 	mls	r3, r8, r0, r3
900002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
900002a8:	fb00 fe0e 	mul.w	lr, r0, lr
900002ac:	45a6      	cmp	lr, r4
900002ae:	d909      	bls.n	900002c4 <__udivmoddi4+0x8c>
900002b0:	193c      	adds	r4, r7, r4
900002b2:	f100 33ff 	add.w	r3, r0, #4294967295
900002b6:	f080 8105 	bcs.w	900004c4 <__udivmoddi4+0x28c>
900002ba:	45a6      	cmp	lr, r4
900002bc:	f240 8102 	bls.w	900004c4 <__udivmoddi4+0x28c>
900002c0:	3802      	subs	r0, #2
900002c2:	443c      	add	r4, r7
900002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
900002c8:	eba4 040e 	sub.w	r4, r4, lr
900002cc:	2600      	movs	r6, #0
900002ce:	b11d      	cbz	r5, 900002d8 <__udivmoddi4+0xa0>
900002d0:	40d4      	lsrs	r4, r2
900002d2:	2300      	movs	r3, #0
900002d4:	e9c5 4300 	strd	r4, r3, [r5]
900002d8:	4631      	mov	r1, r6
900002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900002de:	b902      	cbnz	r2, 900002e2 <__udivmoddi4+0xaa>
900002e0:	deff      	udf	#255	; 0xff
900002e2:	fab2 f282 	clz	r2, r2
900002e6:	2a00      	cmp	r2, #0
900002e8:	d150      	bne.n	9000038c <__udivmoddi4+0x154>
900002ea:	1bcb      	subs	r3, r1, r7
900002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900002f0:	fa1f f887 	uxth.w	r8, r7
900002f4:	2601      	movs	r6, #1
900002f6:	fbb3 fcfe 	udiv	ip, r3, lr
900002fa:	0c21      	lsrs	r1, r4, #16
900002fc:	fb0e 331c 	mls	r3, lr, ip, r3
90000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
90000304:	fb08 f30c 	mul.w	r3, r8, ip
90000308:	428b      	cmp	r3, r1
9000030a:	d907      	bls.n	9000031c <__udivmoddi4+0xe4>
9000030c:	1879      	adds	r1, r7, r1
9000030e:	f10c 30ff 	add.w	r0, ip, #4294967295
90000312:	d202      	bcs.n	9000031a <__udivmoddi4+0xe2>
90000314:	428b      	cmp	r3, r1
90000316:	f200 80e9 	bhi.w	900004ec <__udivmoddi4+0x2b4>
9000031a:	4684      	mov	ip, r0
9000031c:	1ac9      	subs	r1, r1, r3
9000031e:	b2a3      	uxth	r3, r4
90000320:	fbb1 f0fe 	udiv	r0, r1, lr
90000324:	fb0e 1110 	mls	r1, lr, r0, r1
90000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
9000032c:	fb08 f800 	mul.w	r8, r8, r0
90000330:	45a0      	cmp	r8, r4
90000332:	d907      	bls.n	90000344 <__udivmoddi4+0x10c>
90000334:	193c      	adds	r4, r7, r4
90000336:	f100 33ff 	add.w	r3, r0, #4294967295
9000033a:	d202      	bcs.n	90000342 <__udivmoddi4+0x10a>
9000033c:	45a0      	cmp	r8, r4
9000033e:	f200 80d9 	bhi.w	900004f4 <__udivmoddi4+0x2bc>
90000342:	4618      	mov	r0, r3
90000344:	eba4 0408 	sub.w	r4, r4, r8
90000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
9000034c:	e7bf      	b.n	900002ce <__udivmoddi4+0x96>
9000034e:	428b      	cmp	r3, r1
90000350:	d909      	bls.n	90000366 <__udivmoddi4+0x12e>
90000352:	2d00      	cmp	r5, #0
90000354:	f000 80b1 	beq.w	900004ba <__udivmoddi4+0x282>
90000358:	2600      	movs	r6, #0
9000035a:	e9c5 0100 	strd	r0, r1, [r5]
9000035e:	4630      	mov	r0, r6
90000360:	4631      	mov	r1, r6
90000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000366:	fab3 f683 	clz	r6, r3
9000036a:	2e00      	cmp	r6, #0
9000036c:	d14a      	bne.n	90000404 <__udivmoddi4+0x1cc>
9000036e:	428b      	cmp	r3, r1
90000370:	d302      	bcc.n	90000378 <__udivmoddi4+0x140>
90000372:	4282      	cmp	r2, r0
90000374:	f200 80b8 	bhi.w	900004e8 <__udivmoddi4+0x2b0>
90000378:	1a84      	subs	r4, r0, r2
9000037a:	eb61 0103 	sbc.w	r1, r1, r3
9000037e:	2001      	movs	r0, #1
90000380:	468c      	mov	ip, r1
90000382:	2d00      	cmp	r5, #0
90000384:	d0a8      	beq.n	900002d8 <__udivmoddi4+0xa0>
90000386:	e9c5 4c00 	strd	r4, ip, [r5]
9000038a:	e7a5      	b.n	900002d8 <__udivmoddi4+0xa0>
9000038c:	f1c2 0320 	rsb	r3, r2, #32
90000390:	fa20 f603 	lsr.w	r6, r0, r3
90000394:	4097      	lsls	r7, r2
90000396:	fa01 f002 	lsl.w	r0, r1, r2
9000039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
9000039e:	40d9      	lsrs	r1, r3
900003a0:	4330      	orrs	r0, r6
900003a2:	0c03      	lsrs	r3, r0, #16
900003a4:	fbb1 f6fe 	udiv	r6, r1, lr
900003a8:	fa1f f887 	uxth.w	r8, r7
900003ac:	fb0e 1116 	mls	r1, lr, r6, r1
900003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
900003b4:	fb06 f108 	mul.w	r1, r6, r8
900003b8:	4299      	cmp	r1, r3
900003ba:	fa04 f402 	lsl.w	r4, r4, r2
900003be:	d909      	bls.n	900003d4 <__udivmoddi4+0x19c>
900003c0:	18fb      	adds	r3, r7, r3
900003c2:	f106 3cff 	add.w	ip, r6, #4294967295
900003c6:	f080 808d 	bcs.w	900004e4 <__udivmoddi4+0x2ac>
900003ca:	4299      	cmp	r1, r3
900003cc:	f240 808a 	bls.w	900004e4 <__udivmoddi4+0x2ac>
900003d0:	3e02      	subs	r6, #2
900003d2:	443b      	add	r3, r7
900003d4:	1a5b      	subs	r3, r3, r1
900003d6:	b281      	uxth	r1, r0
900003d8:	fbb3 f0fe 	udiv	r0, r3, lr
900003dc:	fb0e 3310 	mls	r3, lr, r0, r3
900003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
900003e4:	fb00 f308 	mul.w	r3, r0, r8
900003e8:	428b      	cmp	r3, r1
900003ea:	d907      	bls.n	900003fc <__udivmoddi4+0x1c4>
900003ec:	1879      	adds	r1, r7, r1
900003ee:	f100 3cff 	add.w	ip, r0, #4294967295
900003f2:	d273      	bcs.n	900004dc <__udivmoddi4+0x2a4>
900003f4:	428b      	cmp	r3, r1
900003f6:	d971      	bls.n	900004dc <__udivmoddi4+0x2a4>
900003f8:	3802      	subs	r0, #2
900003fa:	4439      	add	r1, r7
900003fc:	1acb      	subs	r3, r1, r3
900003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
90000402:	e778      	b.n	900002f6 <__udivmoddi4+0xbe>
90000404:	f1c6 0c20 	rsb	ip, r6, #32
90000408:	fa03 f406 	lsl.w	r4, r3, r6
9000040c:	fa22 f30c 	lsr.w	r3, r2, ip
90000410:	431c      	orrs	r4, r3
90000412:	fa20 f70c 	lsr.w	r7, r0, ip
90000416:	fa01 f306 	lsl.w	r3, r1, r6
9000041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
9000041e:	fa21 f10c 	lsr.w	r1, r1, ip
90000422:	431f      	orrs	r7, r3
90000424:	0c3b      	lsrs	r3, r7, #16
90000426:	fbb1 f9fe 	udiv	r9, r1, lr
9000042a:	fa1f f884 	uxth.w	r8, r4
9000042e:	fb0e 1119 	mls	r1, lr, r9, r1
90000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
90000436:	fb09 fa08 	mul.w	sl, r9, r8
9000043a:	458a      	cmp	sl, r1
9000043c:	fa02 f206 	lsl.w	r2, r2, r6
90000440:	fa00 f306 	lsl.w	r3, r0, r6
90000444:	d908      	bls.n	90000458 <__udivmoddi4+0x220>
90000446:	1861      	adds	r1, r4, r1
90000448:	f109 30ff 	add.w	r0, r9, #4294967295
9000044c:	d248      	bcs.n	900004e0 <__udivmoddi4+0x2a8>
9000044e:	458a      	cmp	sl, r1
90000450:	d946      	bls.n	900004e0 <__udivmoddi4+0x2a8>
90000452:	f1a9 0902 	sub.w	r9, r9, #2
90000456:	4421      	add	r1, r4
90000458:	eba1 010a 	sub.w	r1, r1, sl
9000045c:	b2bf      	uxth	r7, r7
9000045e:	fbb1 f0fe 	udiv	r0, r1, lr
90000462:	fb0e 1110 	mls	r1, lr, r0, r1
90000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
9000046a:	fb00 f808 	mul.w	r8, r0, r8
9000046e:	45b8      	cmp	r8, r7
90000470:	d907      	bls.n	90000482 <__udivmoddi4+0x24a>
90000472:	19e7      	adds	r7, r4, r7
90000474:	f100 31ff 	add.w	r1, r0, #4294967295
90000478:	d22e      	bcs.n	900004d8 <__udivmoddi4+0x2a0>
9000047a:	45b8      	cmp	r8, r7
9000047c:	d92c      	bls.n	900004d8 <__udivmoddi4+0x2a0>
9000047e:	3802      	subs	r0, #2
90000480:	4427      	add	r7, r4
90000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
90000486:	eba7 0708 	sub.w	r7, r7, r8
9000048a:	fba0 8902 	umull	r8, r9, r0, r2
9000048e:	454f      	cmp	r7, r9
90000490:	46c6      	mov	lr, r8
90000492:	4649      	mov	r1, r9
90000494:	d31a      	bcc.n	900004cc <__udivmoddi4+0x294>
90000496:	d017      	beq.n	900004c8 <__udivmoddi4+0x290>
90000498:	b15d      	cbz	r5, 900004b2 <__udivmoddi4+0x27a>
9000049a:	ebb3 020e 	subs.w	r2, r3, lr
9000049e:	eb67 0701 	sbc.w	r7, r7, r1
900004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
900004a6:	40f2      	lsrs	r2, r6
900004a8:	ea4c 0202 	orr.w	r2, ip, r2
900004ac:	40f7      	lsrs	r7, r6
900004ae:	e9c5 2700 	strd	r2, r7, [r5]
900004b2:	2600      	movs	r6, #0
900004b4:	4631      	mov	r1, r6
900004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900004ba:	462e      	mov	r6, r5
900004bc:	4628      	mov	r0, r5
900004be:	e70b      	b.n	900002d8 <__udivmoddi4+0xa0>
900004c0:	4606      	mov	r6, r0
900004c2:	e6e9      	b.n	90000298 <__udivmoddi4+0x60>
900004c4:	4618      	mov	r0, r3
900004c6:	e6fd      	b.n	900002c4 <__udivmoddi4+0x8c>
900004c8:	4543      	cmp	r3, r8
900004ca:	d2e5      	bcs.n	90000498 <__udivmoddi4+0x260>
900004cc:	ebb8 0e02 	subs.w	lr, r8, r2
900004d0:	eb69 0104 	sbc.w	r1, r9, r4
900004d4:	3801      	subs	r0, #1
900004d6:	e7df      	b.n	90000498 <__udivmoddi4+0x260>
900004d8:	4608      	mov	r0, r1
900004da:	e7d2      	b.n	90000482 <__udivmoddi4+0x24a>
900004dc:	4660      	mov	r0, ip
900004de:	e78d      	b.n	900003fc <__udivmoddi4+0x1c4>
900004e0:	4681      	mov	r9, r0
900004e2:	e7b9      	b.n	90000458 <__udivmoddi4+0x220>
900004e4:	4666      	mov	r6, ip
900004e6:	e775      	b.n	900003d4 <__udivmoddi4+0x19c>
900004e8:	4630      	mov	r0, r6
900004ea:	e74a      	b.n	90000382 <__udivmoddi4+0x14a>
900004ec:	f1ac 0c02 	sub.w	ip, ip, #2
900004f0:	4439      	add	r1, r7
900004f2:	e713      	b.n	9000031c <__udivmoddi4+0xe4>
900004f4:	3802      	subs	r0, #2
900004f6:	443c      	add	r4, r7
900004f8:	e724      	b.n	90000344 <__udivmoddi4+0x10c>
900004fa:	bf00      	nop

900004fc <__aeabi_idiv0>:
900004fc:	4770      	bx	lr
900004fe:	bf00      	nop

90000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main()
{
90000500:	b580      	push	{r7, lr}
90000502:	b082      	sub	sp, #8
90000504:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	HAL_Init();
90000506:	f001 fc93 	bl	90001e30 <HAL_Init>
	SystemClock_Config();
9000050a:	f000 f8a5 	bl	90000658 <_Z18SystemClock_Configv>

  // audio IN_OUT buffer is stored in the SDRAM, SDRAM needs to be initialized and FMC enabled

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  lcd.DisplayStringAt(0, LINE(1), (uint8_t *)"MBED EXAMPLE", CENTER_MODE);
9000050e:	f000 fb75 	bl	90000bfc <BSP_LCD_GetFont>
90000512:	4603      	mov	r3, r0
90000514:	88da      	ldrh	r2, [r3, #6]
90000516:	2301      	movs	r3, #1
90000518:	9300      	str	r3, [sp, #0]
9000051a:	4b46      	ldr	r3, [pc, #280]	; (90000634 <main+0x134>)
9000051c:	2100      	movs	r1, #0
9000051e:	4846      	ldr	r0, [pc, #280]	; (90000638 <main+0x138>)
90000520:	f004 faeb 	bl	90004afa <_ZN15LCD_DISCO_F750815DisplayStringAtEttPh20Text_AlignModeTypdef>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
   //HAL_Delay(50);
   HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
90000524:	2102      	movs	r1, #2
90000526:	4845      	ldr	r0, [pc, #276]	; (9000063c <main+0x13c>)
90000528:	f002 fd43 	bl	90002fb2 <HAL_GPIO_TogglePin>

   /* Wait end of half block recording */
   lcd.Clear(LCD_COLOR_BLUE);
9000052c:	4944      	ldr	r1, [pc, #272]	; (90000640 <main+0x140>)
9000052e:	4842      	ldr	r0, [pc, #264]	; (90000638 <main+0x138>)
90000530:	f004 fad7 	bl	90004ae2 <_ZN15LCD_DISCO_F75085ClearEm>
           lcd.SetBackColor(LCD_COLOR_BLUE);
90000534:	4942      	ldr	r1, [pc, #264]	; (90000640 <main+0x140>)
90000536:	4840      	ldr	r0, [pc, #256]	; (90000638 <main+0x138>)
90000538:	f004 fac7 	bl	90004aca <_ZN15LCD_DISCO_F750812SetBackColorEm>
           lcd.SetTextColor(LCD_COLOR_WHITE);
9000053c:	f04f 31ff 	mov.w	r1, #4294967295
90000540:	483d      	ldr	r0, [pc, #244]	; (90000638 <main+0x138>)
90000542:	f004 fab6 	bl	90004ab2 <_ZN15LCD_DISCO_F750812SetTextColorEm>
           HAL_Delay(300);
90000546:	f44f 7096 	mov.w	r0, #300	; 0x12c
9000054a:	f001 fcd7 	bl	90001efc <HAL_Delay>
           lcd.DisplayStringAt(0, LINE(5), (uint8_t *)"DISCOVERY STM32F7508", CENTER_MODE);
9000054e:	f000 fb55 	bl	90000bfc <BSP_LCD_GetFont>
90000552:	4603      	mov	r3, r0
90000554:	88db      	ldrh	r3, [r3, #6]
90000556:	461a      	mov	r2, r3
90000558:	0092      	lsls	r2, r2, #2
9000055a:	4413      	add	r3, r2
9000055c:	b29a      	uxth	r2, r3
9000055e:	2301      	movs	r3, #1
90000560:	9300      	str	r3, [sp, #0]
90000562:	4b38      	ldr	r3, [pc, #224]	; (90000644 <main+0x144>)
90000564:	2100      	movs	r1, #0
90000566:	4834      	ldr	r0, [pc, #208]	; (90000638 <main+0x138>)
90000568:	f004 fac7 	bl	90004afa <_ZN15LCD_DISCO_F750815DisplayStringAtEttPh20Text_AlignModeTypdef>
           HAL_Delay(1000);
9000056c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
90000570:	f001 fcc4 	bl	90001efc <HAL_Delay>
           lcd.Clear(LCD_COLOR_GREEN);
90000574:	f04f 21ff 	mov.w	r1, #4278255360	; 0xff00ff00
90000578:	482f      	ldr	r0, [pc, #188]	; (90000638 <main+0x138>)
9000057a:	f004 fab2 	bl	90004ae2 <_ZN15LCD_DISCO_F75085ClearEm>
           lcd.SetTextColor(LCD_COLOR_BLUE);
9000057e:	4930      	ldr	r1, [pc, #192]	; (90000640 <main+0x140>)
90000580:	482d      	ldr	r0, [pc, #180]	; (90000638 <main+0x138>)
90000582:	f004 fa96 	bl	90004ab2 <_ZN15LCD_DISCO_F750812SetTextColorEm>
           lcd.DrawRect(10, 20, 50, 50);
90000586:	2332      	movs	r3, #50	; 0x32
90000588:	9300      	str	r3, [sp, #0]
9000058a:	2332      	movs	r3, #50	; 0x32
9000058c:	2214      	movs	r2, #20
9000058e:	210a      	movs	r1, #10
90000590:	4829      	ldr	r0, [pc, #164]	; (90000638 <main+0x138>)
90000592:	f004 fac5 	bl	90004b20 <_ZN15LCD_DISCO_F75088DrawRectEtttt>
           HAL_Delay(1000);
90000596:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
9000059a:	f001 fcaf 	bl	90001efc <HAL_Delay>
           lcd.SetTextColor(LCD_COLOR_BROWN);
9000059e:	492a      	ldr	r1, [pc, #168]	; (90000648 <main+0x148>)
900005a0:	4825      	ldr	r0, [pc, #148]	; (90000638 <main+0x138>)
900005a2:	f004 fa86 	bl	90004ab2 <_ZN15LCD_DISCO_F750812SetTextColorEm>
           lcd.DrawCircle(80, 80, 50);
900005a6:	2332      	movs	r3, #50	; 0x32
900005a8:	2250      	movs	r2, #80	; 0x50
900005aa:	2150      	movs	r1, #80	; 0x50
900005ac:	4822      	ldr	r0, [pc, #136]	; (90000638 <main+0x138>)
900005ae:	f004 face 	bl	90004b4e <_ZN15LCD_DISCO_F750810DrawCircleEttt>
           HAL_Delay(1000);
900005b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
900005b6:	f001 fca1 	bl	90001efc <HAL_Delay>
           lcd.SetTextColor(LCD_COLOR_YELLOW);
900005ba:	f06f 01ff 	mvn.w	r1, #255	; 0xff
900005be:	481e      	ldr	r0, [pc, #120]	; (90000638 <main+0x138>)
900005c0:	f004 fa77 	bl	90004ab2 <_ZN15LCD_DISCO_F750812SetTextColorEm>
           lcd.DrawEllipse(150, 150, 50, 100);
900005c4:	2364      	movs	r3, #100	; 0x64
900005c6:	9300      	str	r3, [sp, #0]
900005c8:	2332      	movs	r3, #50	; 0x32
900005ca:	2296      	movs	r2, #150	; 0x96
900005cc:	2196      	movs	r1, #150	; 0x96
900005ce:	481a      	ldr	r0, [pc, #104]	; (90000638 <main+0x138>)
900005d0:	f004 fad4 	bl	90004b7c <_ZN15LCD_DISCO_F750811DrawEllipseEiiii>
           HAL_Delay(1000);
900005d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
900005d8:	f001 fc90 	bl	90001efc <HAL_Delay>
           lcd.SetTextColor(LCD_COLOR_RED);
900005dc:	491b      	ldr	r1, [pc, #108]	; (9000064c <main+0x14c>)
900005de:	4816      	ldr	r0, [pc, #88]	; (90000638 <main+0x138>)
900005e0:	f004 fa67 	bl	90004ab2 <_ZN15LCD_DISCO_F750812SetTextColorEm>
           lcd.FillCircle(200, 200, 40);
900005e4:	2328      	movs	r3, #40	; 0x28
900005e6:	22c8      	movs	r2, #200	; 0xc8
900005e8:	21c8      	movs	r1, #200	; 0xc8
900005ea:	4813      	ldr	r0, [pc, #76]	; (90000638 <main+0x138>)
900005ec:	f004 fad7 	bl	90004b9e <_ZN15LCD_DISCO_F750810FillCircleEttt>
           HAL_Delay(1000);
900005f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
900005f4:	f001 fc82 	bl	90001efc <HAL_Delay>
           lcd.SetBackColor(LCD_COLOR_ORANGE);
900005f8:	4915      	ldr	r1, [pc, #84]	; (90000650 <main+0x150>)
900005fa:	480f      	ldr	r0, [pc, #60]	; (90000638 <main+0x138>)
900005fc:	f004 fa65 	bl	90004aca <_ZN15LCD_DISCO_F750812SetBackColorEm>
           lcd.SetTextColor(LCD_COLOR_CYAN);
90000600:	f46f 017f 	mvn.w	r1, #16711680	; 0xff0000
90000604:	480c      	ldr	r0, [pc, #48]	; (90000638 <main+0x138>)
90000606:	f004 fa54 	bl	90004ab2 <_ZN15LCD_DISCO_F750812SetTextColorEm>
           lcd.DisplayStringAt(0, LINE(5), (uint8_t *)"HAVE FUN !!!", CENTER_MODE);
9000060a:	f000 faf7 	bl	90000bfc <BSP_LCD_GetFont>
9000060e:	4603      	mov	r3, r0
90000610:	88db      	ldrh	r3, [r3, #6]
90000612:	461a      	mov	r2, r3
90000614:	0092      	lsls	r2, r2, #2
90000616:	4413      	add	r3, r2
90000618:	b29a      	uxth	r2, r3
9000061a:	2301      	movs	r3, #1
9000061c:	9300      	str	r3, [sp, #0]
9000061e:	4b0d      	ldr	r3, [pc, #52]	; (90000654 <main+0x154>)
90000620:	2100      	movs	r1, #0
90000622:	4805      	ldr	r0, [pc, #20]	; (90000638 <main+0x138>)
90000624:	f004 fa69 	bl	90004afa <_ZN15LCD_DISCO_F750815DisplayStringAtEttPh20Text_AlignModeTypdef>
           HAL_Delay(1000);
90000628:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
9000062c:	f001 fc66 	bl	90001efc <HAL_Delay>
   HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
90000630:	e778      	b.n	90000524 <main+0x24>
90000632:	bf00      	nop
90000634:	90004c3c 	.word	0x90004c3c
90000638:	20000034 	.word	0x20000034
9000063c:	40022000 	.word	0x40022000
90000640:	ff0000ff 	.word	0xff0000ff
90000644:	90004c4c 	.word	0x90004c4c
90000648:	ffa52a2a 	.word	0xffa52a2a
9000064c:	ffff0000 	.word	0xffff0000
90000650:	ffffa500 	.word	0xffffa500
90000654:	90004c64 	.word	0x90004c64

90000658 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
90000658:	b580      	push	{r7, lr}
9000065a:	b094      	sub	sp, #80	; 0x50
9000065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
9000065e:	f107 0320 	add.w	r3, r7, #32
90000662:	2230      	movs	r2, #48	; 0x30
90000664:	2100      	movs	r1, #0
90000666:	4618      	mov	r0, r3
90000668:	f004 fad4 	bl	90004c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
9000066c:	f107 030c 	add.w	r3, r7, #12
90000670:	2200      	movs	r2, #0
90000672:	601a      	str	r2, [r3, #0]
90000674:	605a      	str	r2, [r3, #4]
90000676:	609a      	str	r2, [r3, #8]
90000678:	60da      	str	r2, [r3, #12]
9000067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
9000067c:	4b32      	ldr	r3, [pc, #200]	; (90000748 <_Z18SystemClock_Configv+0xf0>)
9000067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90000680:	4a31      	ldr	r2, [pc, #196]	; (90000748 <_Z18SystemClock_Configv+0xf0>)
90000682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90000686:	6413      	str	r3, [r2, #64]	; 0x40
90000688:	4b2f      	ldr	r3, [pc, #188]	; (90000748 <_Z18SystemClock_Configv+0xf0>)
9000068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000068c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90000690:	60bb      	str	r3, [r7, #8]
90000692:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90000694:	4b2d      	ldr	r3, [pc, #180]	; (9000074c <_Z18SystemClock_Configv+0xf4>)
90000696:	681b      	ldr	r3, [r3, #0]
90000698:	4a2c      	ldr	r2, [pc, #176]	; (9000074c <_Z18SystemClock_Configv+0xf4>)
9000069a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
9000069e:	6013      	str	r3, [r2, #0]
900006a0:	4b2a      	ldr	r3, [pc, #168]	; (9000074c <_Z18SystemClock_Configv+0xf4>)
900006a2:	681b      	ldr	r3, [r3, #0]
900006a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
900006a8:	607b      	str	r3, [r7, #4]
900006aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
900006ac:	2301      	movs	r3, #1
900006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
900006b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
900006b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
900006b6:	2302      	movs	r3, #2
900006b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
900006ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
900006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
900006c0:	2319      	movs	r3, #25
900006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
900006c4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
900006c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
900006ca:	2302      	movs	r3, #2
900006cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
900006ce:	2302      	movs	r3, #2
900006d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
900006d2:	f107 0320 	add.w	r3, r7, #32
900006d6:	4618      	mov	r0, r3
900006d8:	f002 ffb8 	bl	9000364c <HAL_RCC_OscConfig>
900006dc:	4603      	mov	r3, r0
900006de:	2b00      	cmp	r3, #0
900006e0:	bf14      	ite	ne
900006e2:	2301      	movne	r3, #1
900006e4:	2300      	moveq	r3, #0
900006e6:	b2db      	uxtb	r3, r3
900006e8:	2b00      	cmp	r3, #0
900006ea:	d001      	beq.n	900006f0 <_Z18SystemClock_Configv+0x98>
  {
    Error_Handler();
900006ec:	f000 f830 	bl	90000750 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
900006f0:	f002 ff5c 	bl	900035ac <HAL_PWREx_EnableOverDrive>
900006f4:	4603      	mov	r3, r0
900006f6:	2b00      	cmp	r3, #0
900006f8:	bf14      	ite	ne
900006fa:	2301      	movne	r3, #1
900006fc:	2300      	moveq	r3, #0
900006fe:	b2db      	uxtb	r3, r3
90000700:	2b00      	cmp	r3, #0
90000702:	d001      	beq.n	90000708 <_Z18SystemClock_Configv+0xb0>
  {
    Error_Handler();
90000704:	f000 f824 	bl	90000750 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
90000708:	230f      	movs	r3, #15
9000070a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
9000070c:	2302      	movs	r3, #2
9000070e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
90000710:	2300      	movs	r3, #0
90000712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
90000714:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
90000718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
9000071a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
9000071e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
90000720:	f107 030c 	add.w	r3, r7, #12
90000724:	2107      	movs	r1, #7
90000726:	4618      	mov	r0, r3
90000728:	f003 fa34 	bl	90003b94 <HAL_RCC_ClockConfig>
9000072c:	4603      	mov	r3, r0
9000072e:	2b00      	cmp	r3, #0
90000730:	bf14      	ite	ne
90000732:	2301      	movne	r3, #1
90000734:	2300      	moveq	r3, #0
90000736:	b2db      	uxtb	r3, r3
90000738:	2b00      	cmp	r3, #0
9000073a:	d001      	beq.n	90000740 <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
9000073c:	f000 f808 	bl	90000750 <Error_Handler>
  }
}
90000740:	bf00      	nop
90000742:	3750      	adds	r7, #80	; 0x50
90000744:	46bd      	mov	sp, r7
90000746:	bd80      	pop	{r7, pc}
90000748:	40023800 	.word	0x40023800
9000074c:	40007000 	.word	0x40007000

90000750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
90000750:	b480      	push	{r7}
90000752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
90000754:	b672      	cpsid	i
}
90000756:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
90000758:	e7fe      	b.n	90000758 <Error_Handler+0x8>
	...

9000075c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
9000075c:	b580      	push	{r7, lr}
9000075e:	b082      	sub	sp, #8
90000760:	af00      	add	r7, sp, #0
90000762:	6078      	str	r0, [r7, #4]
90000764:	6039      	str	r1, [r7, #0]
90000766:	687b      	ldr	r3, [r7, #4]
90000768:	2b01      	cmp	r3, #1
9000076a:	d107      	bne.n	9000077c <_Z41__static_initialization_and_destruction_0ii+0x20>
9000076c:	683b      	ldr	r3, [r7, #0]
9000076e:	f64f 72ff 	movw	r2, #65535	; 0xffff
90000772:	4293      	cmp	r3, r2
90000774:	d102      	bne.n	9000077c <_Z41__static_initialization_and_destruction_0ii+0x20>
LCD_DISCO_F7508 lcd;
90000776:	4809      	ldr	r0, [pc, #36]	; (9000079c <_Z41__static_initialization_and_destruction_0ii+0x40>)
90000778:	f004 f952 	bl	90004a20 <_ZN15LCD_DISCO_F7508C1Ev>
9000077c:	687b      	ldr	r3, [r7, #4]
9000077e:	2b00      	cmp	r3, #0
90000780:	d107      	bne.n	90000792 <_Z41__static_initialization_and_destruction_0ii+0x36>
90000782:	683b      	ldr	r3, [r7, #0]
90000784:	f64f 72ff 	movw	r2, #65535	; 0xffff
90000788:	4293      	cmp	r3, r2
9000078a:	d102      	bne.n	90000792 <_Z41__static_initialization_and_destruction_0ii+0x36>
9000078c:	4803      	ldr	r0, [pc, #12]	; (9000079c <_Z41__static_initialization_and_destruction_0ii+0x40>)
9000078e:	f004 f985 	bl	90004a9c <_ZN15LCD_DISCO_F7508D1Ev>
}
90000792:	bf00      	nop
90000794:	3708      	adds	r7, #8
90000796:	46bd      	mov	sp, r7
90000798:	bd80      	pop	{r7, pc}
9000079a:	bf00      	nop
9000079c:	20000034 	.word	0x20000034

900007a0 <_GLOBAL__sub_I_lcd>:
900007a0:	b580      	push	{r7, lr}
900007a2:	af00      	add	r7, sp, #0
900007a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
900007a8:	2001      	movs	r0, #1
900007aa:	f7ff ffd7 	bl	9000075c <_Z41__static_initialization_and_destruction_0ii>
900007ae:	bd80      	pop	{r7, pc}

900007b0 <_GLOBAL__sub_D_lcd>:
900007b0:	b580      	push	{r7, lr}
900007b2:	af00      	add	r7, sp, #0
900007b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
900007b8:	2000      	movs	r0, #0
900007ba:	f7ff ffcf 	bl	9000075c <_Z41__static_initialization_and_destruction_0ii>
900007be:	bd80      	pop	{r7, pc}

900007c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
900007c0:	b480      	push	{r7}
900007c2:	b083      	sub	sp, #12
900007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
900007c6:	4b0f      	ldr	r3, [pc, #60]	; (90000804 <HAL_MspInit+0x44>)
900007c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900007ca:	4a0e      	ldr	r2, [pc, #56]	; (90000804 <HAL_MspInit+0x44>)
900007cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
900007d0:	6413      	str	r3, [r2, #64]	; 0x40
900007d2:	4b0c      	ldr	r3, [pc, #48]	; (90000804 <HAL_MspInit+0x44>)
900007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900007d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
900007da:	607b      	str	r3, [r7, #4]
900007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
900007de:	4b09      	ldr	r3, [pc, #36]	; (90000804 <HAL_MspInit+0x44>)
900007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900007e2:	4a08      	ldr	r2, [pc, #32]	; (90000804 <HAL_MspInit+0x44>)
900007e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
900007e8:	6453      	str	r3, [r2, #68]	; 0x44
900007ea:	4b06      	ldr	r3, [pc, #24]	; (90000804 <HAL_MspInit+0x44>)
900007ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900007ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
900007f2:	603b      	str	r3, [r7, #0]
900007f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
900007f6:	bf00      	nop
900007f8:	370c      	adds	r7, #12
900007fa:	46bd      	mov	sp, r7
900007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
90000800:	4770      	bx	lr
90000802:	bf00      	nop
90000804:	40023800 	.word	0x40023800

90000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
90000808:	b480      	push	{r7}
9000080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
9000080c:	e7fe      	b.n	9000080c <NMI_Handler+0x4>

9000080e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
9000080e:	b480      	push	{r7}
90000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
90000812:	e7fe      	b.n	90000812 <HardFault_Handler+0x4>

90000814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
90000814:	b480      	push	{r7}
90000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
90000818:	e7fe      	b.n	90000818 <MemManage_Handler+0x4>

9000081a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
9000081a:	b480      	push	{r7}
9000081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
9000081e:	e7fe      	b.n	9000081e <BusFault_Handler+0x4>

90000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
90000820:	b480      	push	{r7}
90000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
90000824:	e7fe      	b.n	90000824 <UsageFault_Handler+0x4>

90000826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
90000826:	b480      	push	{r7}
90000828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
9000082a:	bf00      	nop
9000082c:	46bd      	mov	sp, r7
9000082e:	f85d 7b04 	ldr.w	r7, [sp], #4
90000832:	4770      	bx	lr

90000834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
90000834:	b480      	push	{r7}
90000836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
90000838:	bf00      	nop
9000083a:	46bd      	mov	sp, r7
9000083c:	f85d 7b04 	ldr.w	r7, [sp], #4
90000840:	4770      	bx	lr

90000842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
90000842:	b480      	push	{r7}
90000844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
90000846:	bf00      	nop
90000848:	46bd      	mov	sp, r7
9000084a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000084e:	4770      	bx	lr

90000850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
90000850:	b580      	push	{r7, lr}
90000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
90000854:	f001 fb32 	bl	90001ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
90000858:	bf00      	nop
9000085a:	bd80      	pop	{r7, pc}

9000085c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
9000085c:	b480      	push	{r7}
9000085e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
90000860:	4b15      	ldr	r3, [pc, #84]	; (900008b8 <SystemInit+0x5c>)
90000862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90000866:	4a14      	ldr	r2, [pc, #80]	; (900008b8 <SystemInit+0x5c>)
90000868:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
9000086c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
90000870:	4b12      	ldr	r3, [pc, #72]	; (900008bc <SystemInit+0x60>)
90000872:	681b      	ldr	r3, [r3, #0]
90000874:	4a11      	ldr	r2, [pc, #68]	; (900008bc <SystemInit+0x60>)
90000876:	f043 0301 	orr.w	r3, r3, #1
9000087a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
9000087c:	4b0f      	ldr	r3, [pc, #60]	; (900008bc <SystemInit+0x60>)
9000087e:	2200      	movs	r2, #0
90000880:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
90000882:	4b0e      	ldr	r3, [pc, #56]	; (900008bc <SystemInit+0x60>)
90000884:	681a      	ldr	r2, [r3, #0]
90000886:	490d      	ldr	r1, [pc, #52]	; (900008bc <SystemInit+0x60>)
90000888:	4b0d      	ldr	r3, [pc, #52]	; (900008c0 <SystemInit+0x64>)
9000088a:	4013      	ands	r3, r2
9000088c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
9000088e:	4b0b      	ldr	r3, [pc, #44]	; (900008bc <SystemInit+0x60>)
90000890:	4a0c      	ldr	r2, [pc, #48]	; (900008c4 <SystemInit+0x68>)
90000892:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
90000894:	4b09      	ldr	r3, [pc, #36]	; (900008bc <SystemInit+0x60>)
90000896:	681b      	ldr	r3, [r3, #0]
90000898:	4a08      	ldr	r2, [pc, #32]	; (900008bc <SystemInit+0x60>)
9000089a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
9000089e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
900008a0:	4b06      	ldr	r3, [pc, #24]	; (900008bc <SystemInit+0x60>)
900008a2:	2200      	movs	r2, #0
900008a4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = APPLICATION_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation to APPLICATION_ADDRESS in preprocessor defines */
900008a6:	4b04      	ldr	r3, [pc, #16]	; (900008b8 <SystemInit+0x5c>)
900008a8:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
900008ac:	609a      	str	r2, [r3, #8]
#endif
}
900008ae:	bf00      	nop
900008b0:	46bd      	mov	sp, r7
900008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
900008b6:	4770      	bx	lr
900008b8:	e000ed00 	.word	0xe000ed00
900008bc:	40023800 	.word	0x40023800
900008c0:	fef6ffff 	.word	0xfef6ffff
900008c4:	24003010 	.word	0x24003010

900008c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
900008c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 90000900 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
900008cc:	480d      	ldr	r0, [pc, #52]	; (90000904 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
900008ce:	490e      	ldr	r1, [pc, #56]	; (90000908 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
900008d0:	4a0e      	ldr	r2, [pc, #56]	; (9000090c <LoopFillZerobss+0x1e>)
  movs r3, #0
900008d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
900008d4:	e002      	b.n	900008dc <LoopCopyDataInit>

900008d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
900008d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
900008d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
900008da:	3304      	adds	r3, #4

900008dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
900008dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
900008de:	428c      	cmp	r4, r1
  bcc CopyDataInit
900008e0:	d3f9      	bcc.n	900008d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
900008e2:	4a0b      	ldr	r2, [pc, #44]	; (90000910 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
900008e4:	4c0b      	ldr	r4, [pc, #44]	; (90000914 <LoopFillZerobss+0x26>)
  movs r3, #0
900008e6:	2300      	movs	r3, #0
  b LoopFillZerobss
900008e8:	e001      	b.n	900008ee <LoopFillZerobss>

900008ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
900008ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
900008ec:	3204      	adds	r2, #4

900008ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
900008ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
900008f0:	d3fb      	bcc.n	900008ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
900008f2:	f7ff ffb3 	bl	9000085c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
900008f6:	f004 f969 	bl	90004bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
900008fa:	f7ff fe01 	bl	90000500 <main>
  bx  lr    
900008fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
90000900:	20050000 	.word	0x20050000
  ldr r0, =_sdata
90000904:	20000000 	.word	0x20000000
  ldr r1, =_edata
90000908:	20000018 	.word	0x20000018
  ldr r2, =_sidata
9000090c:	9000675c 	.word	0x9000675c
  ldr r2, =_sbss
90000910:	20000018 	.word	0x20000018
  ldr r4, =_ebss
90000914:	20000284 	.word	0x20000284

90000918 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
90000918:	e7fe      	b.n	90000918 <ADC_IRQHandler>
	...

9000091c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
9000091c:	b580      	push	{r7, lr}
9000091e:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
90000920:	4b31      	ldr	r3, [pc, #196]	; (900009e8 <BSP_LCD_Init+0xcc>)
90000922:	2228      	movs	r2, #40	; 0x28
90000924:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
90000926:	4b30      	ldr	r3, [pc, #192]	; (900009e8 <BSP_LCD_Init+0xcc>)
90000928:	2209      	movs	r2, #9
9000092a:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
9000092c:	4b2e      	ldr	r3, [pc, #184]	; (900009e8 <BSP_LCD_Init+0xcc>)
9000092e:	2235      	movs	r2, #53	; 0x35
90000930:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
90000932:	4b2d      	ldr	r3, [pc, #180]	; (900009e8 <BSP_LCD_Init+0xcc>)
90000934:	220b      	movs	r2, #11
90000936:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
90000938:	4b2b      	ldr	r3, [pc, #172]	; (900009e8 <BSP_LCD_Init+0xcc>)
9000093a:	f240 121b 	movw	r2, #283	; 0x11b
9000093e:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
90000940:	4b29      	ldr	r3, [pc, #164]	; (900009e8 <BSP_LCD_Init+0xcc>)
90000942:	f240 2215 	movw	r2, #533	; 0x215
90000946:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
90000948:	4b27      	ldr	r3, [pc, #156]	; (900009e8 <BSP_LCD_Init+0xcc>)
9000094a:	f240 121d 	movw	r2, #285	; 0x11d
9000094e:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
90000950:	4b25      	ldr	r3, [pc, #148]	; (900009e8 <BSP_LCD_Init+0xcc>)
90000952:	f240 2235 	movw	r2, #565	; 0x235
90000956:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
90000958:	2100      	movs	r1, #0
9000095a:	4823      	ldr	r0, [pc, #140]	; (900009e8 <BSP_LCD_Init+0xcc>)
9000095c:	f000 ff92 	bl	90001884 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
90000960:	4b21      	ldr	r3, [pc, #132]	; (900009e8 <BSP_LCD_Init+0xcc>)
90000962:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
90000966:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
90000968:	4b1f      	ldr	r3, [pc, #124]	; (900009e8 <BSP_LCD_Init+0xcc>)
9000096a:	f44f 7288 	mov.w	r2, #272	; 0x110
9000096e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
90000970:	4b1d      	ldr	r3, [pc, #116]	; (900009e8 <BSP_LCD_Init+0xcc>)
90000972:	2200      	movs	r2, #0
90000974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
90000978:	4b1b      	ldr	r3, [pc, #108]	; (900009e8 <BSP_LCD_Init+0xcc>)
9000097a:	2200      	movs	r2, #0
9000097c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
90000980:	4b19      	ldr	r3, [pc, #100]	; (900009e8 <BSP_LCD_Init+0xcc>)
90000982:	2200      	movs	r2, #0
90000984:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
90000988:	4b17      	ldr	r3, [pc, #92]	; (900009e8 <BSP_LCD_Init+0xcc>)
9000098a:	2200      	movs	r2, #0
9000098c:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
9000098e:	4b16      	ldr	r3, [pc, #88]	; (900009e8 <BSP_LCD_Init+0xcc>)
90000990:	2200      	movs	r2, #0
90000992:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
90000994:	4b14      	ldr	r3, [pc, #80]	; (900009e8 <BSP_LCD_Init+0xcc>)
90000996:	2200      	movs	r2, #0
90000998:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
9000099a:	4b13      	ldr	r3, [pc, #76]	; (900009e8 <BSP_LCD_Init+0xcc>)
9000099c:	2200      	movs	r2, #0
9000099e:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
900009a0:	4b11      	ldr	r3, [pc, #68]	; (900009e8 <BSP_LCD_Init+0xcc>)
900009a2:	4a12      	ldr	r2, [pc, #72]	; (900009ec <BSP_LCD_Init+0xd0>)
900009a4:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
900009a6:	4810      	ldr	r0, [pc, #64]	; (900009e8 <BSP_LCD_Init+0xcc>)
900009a8:	f002 fc58 	bl	9000325c <HAL_LTDC_GetState>
900009ac:	4603      	mov	r3, r0
900009ae:	2b00      	cmp	r3, #0
900009b0:	d103      	bne.n	900009ba <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
900009b2:	2100      	movs	r1, #0
900009b4:	480c      	ldr	r0, [pc, #48]	; (900009e8 <BSP_LCD_Init+0xcc>)
900009b6:	f000 fe41 	bl	9000163c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
900009ba:	480b      	ldr	r0, [pc, #44]	; (900009e8 <BSP_LCD_Init+0xcc>)
900009bc:	f002 fb14 	bl	90002fe8 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
900009c0:	2201      	movs	r2, #1
900009c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
900009c6:	480a      	ldr	r0, [pc, #40]	; (900009f0 <BSP_LCD_Init+0xd4>)
900009c8:	f002 fada 	bl	90002f80 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
900009cc:	2201      	movs	r2, #1
900009ce:	2108      	movs	r1, #8
900009d0:	4808      	ldr	r0, [pc, #32]	; (900009f4 <BSP_LCD_Init+0xd8>)
900009d2:	f002 fad5 	bl	90002f80 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
900009d6:	f001 f875 	bl	90001ac4 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
900009da:	4807      	ldr	r0, [pc, #28]	; (900009f8 <BSP_LCD_Init+0xdc>)
900009dc:	f000 f8f4 	bl	90000bc8 <BSP_LCD_SetFont>
  
  return LCD_OK;
900009e0:	2300      	movs	r3, #0
}
900009e2:	4618      	mov	r0, r3
900009e4:	bd80      	pop	{r7, pc}
900009e6:	bf00      	nop
900009e8:	200001a4 	.word	0x200001a4
900009ec:	40016800 	.word	0x40016800
900009f0:	40022000 	.word	0x40022000
900009f4:	40022800 	.word	0x40022800
900009f8:	20000004 	.word	0x20000004

900009fc <BSP_LCD_DeInit>:
/**
  * @brief  DeInitializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_DeInit(void)
{ 
900009fc:	b580      	push	{r7, lr}
900009fe:	af00      	add	r7, sp, #0
  /* Initialize the hLtdcHandler Instance parameter */
  hLtdcHandler.Instance = LTDC;
90000a00:	4b0a      	ldr	r3, [pc, #40]	; (90000a2c <BSP_LCD_DeInit+0x30>)
90000a02:	4a0b      	ldr	r2, [pc, #44]	; (90000a30 <BSP_LCD_DeInit+0x34>)
90000a04:	601a      	str	r2, [r3, #0]

 /* Disable LTDC block */
  __HAL_LTDC_DISABLE(&hLtdcHandler);
90000a06:	4b09      	ldr	r3, [pc, #36]	; (90000a2c <BSP_LCD_DeInit+0x30>)
90000a08:	681b      	ldr	r3, [r3, #0]
90000a0a:	699a      	ldr	r2, [r3, #24]
90000a0c:	4b07      	ldr	r3, [pc, #28]	; (90000a2c <BSP_LCD_DeInit+0x30>)
90000a0e:	681b      	ldr	r3, [r3, #0]
90000a10:	f022 0201 	bic.w	r2, r2, #1
90000a14:	619a      	str	r2, [r3, #24]

  /* DeInit the LTDC */
  HAL_LTDC_DeInit(&hLtdcHandler);
90000a16:	4805      	ldr	r0, [pc, #20]	; (90000a2c <BSP_LCD_DeInit+0x30>)
90000a18:	f002 fbb6 	bl	90003188 <HAL_LTDC_DeInit>

  /* DeInit the LTDC MSP : this __weak function can be rewritten by the application */
  BSP_LCD_MspDeInit(&hLtdcHandler, NULL);
90000a1c:	2100      	movs	r1, #0
90000a1e:	4803      	ldr	r0, [pc, #12]	; (90000a2c <BSP_LCD_DeInit+0x30>)
90000a20:	f000 fee6 	bl	900017f0 <BSP_LCD_MspDeInit>

  return LCD_OK;
90000a24:	2300      	movs	r3, #0
}
90000a26:	4618      	mov	r0, r3
90000a28:	bd80      	pop	{r7, pc}
90000a2a:	bf00      	nop
90000a2c:	200001a4 	.word	0x200001a4
90000a30:	40016800 	.word	0x40016800

90000a34 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
90000a34:	b480      	push	{r7}
90000a36:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90000a38:	4b06      	ldr	r3, [pc, #24]	; (90000a54 <BSP_LCD_GetXSize+0x20>)
90000a3a:	681b      	ldr	r3, [r3, #0]
90000a3c:	4a06      	ldr	r2, [pc, #24]	; (90000a58 <BSP_LCD_GetXSize+0x24>)
90000a3e:	2134      	movs	r1, #52	; 0x34
90000a40:	fb01 f303 	mul.w	r3, r1, r3
90000a44:	4413      	add	r3, r2
90000a46:	3360      	adds	r3, #96	; 0x60
90000a48:	681b      	ldr	r3, [r3, #0]
}
90000a4a:	4618      	mov	r0, r3
90000a4c:	46bd      	mov	sp, r7
90000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
90000a52:	4770      	bx	lr
90000a54:	20000078 	.word	0x20000078
90000a58:	200001a4 	.word	0x200001a4

90000a5c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
90000a5c:	b480      	push	{r7}
90000a5e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
90000a60:	4b06      	ldr	r3, [pc, #24]	; (90000a7c <BSP_LCD_GetYSize+0x20>)
90000a62:	681b      	ldr	r3, [r3, #0]
90000a64:	4a06      	ldr	r2, [pc, #24]	; (90000a80 <BSP_LCD_GetYSize+0x24>)
90000a66:	2134      	movs	r1, #52	; 0x34
90000a68:	fb01 f303 	mul.w	r3, r1, r3
90000a6c:	4413      	add	r3, r2
90000a6e:	3364      	adds	r3, #100	; 0x64
90000a70:	681b      	ldr	r3, [r3, #0]
}
90000a72:	4618      	mov	r0, r3
90000a74:	46bd      	mov	sp, r7
90000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
90000a7a:	4770      	bx	lr
90000a7c:	20000078 	.word	0x20000078
90000a80:	200001a4 	.word	0x200001a4

90000a84 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
90000a84:	b580      	push	{r7, lr}
90000a86:	b090      	sub	sp, #64	; 0x40
90000a88:	af00      	add	r7, sp, #0
90000a8a:	4603      	mov	r3, r0
90000a8c:	6039      	str	r1, [r7, #0]
90000a8e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
90000a90:	2300      	movs	r3, #0
90000a92:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
90000a94:	f7ff ffce 	bl	90000a34 <BSP_LCD_GetXSize>
90000a98:	4603      	mov	r3, r0
90000a9a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
90000a9c:	2300      	movs	r3, #0
90000a9e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
90000aa0:	f7ff ffdc 	bl	90000a5c <BSP_LCD_GetYSize>
90000aa4:	4603      	mov	r3, r0
90000aa6:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
90000aa8:	2300      	movs	r3, #0
90000aaa:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
90000aac:	683b      	ldr	r3, [r7, #0]
90000aae:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
90000ab0:	23ff      	movs	r3, #255	; 0xff
90000ab2:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
90000ab4:	2300      	movs	r3, #0
90000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
90000ab8:	2300      	movs	r3, #0
90000aba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
90000abe:	2300      	movs	r3, #0
90000ac0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
90000ac4:	2300      	movs	r3, #0
90000ac6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
90000aca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
90000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
90000ad0:	2307      	movs	r3, #7
90000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
90000ad4:	f7ff ffae 	bl	90000a34 <BSP_LCD_GetXSize>
90000ad8:	4603      	mov	r3, r0
90000ada:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
90000adc:	f7ff ffbe 	bl	90000a5c <BSP_LCD_GetYSize>
90000ae0:	4603      	mov	r3, r0
90000ae2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
90000ae4:	88fa      	ldrh	r2, [r7, #6]
90000ae6:	f107 030c 	add.w	r3, r7, #12
90000aea:	4619      	mov	r1, r3
90000aec:	4812      	ldr	r0, [pc, #72]	; (90000b38 <BSP_LCD_LayerDefaultInit+0xb4>)
90000aee:	f002 fb77 	bl	900031e0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
90000af2:	88fa      	ldrh	r2, [r7, #6]
90000af4:	4911      	ldr	r1, [pc, #68]	; (90000b3c <BSP_LCD_LayerDefaultInit+0xb8>)
90000af6:	4613      	mov	r3, r2
90000af8:	005b      	lsls	r3, r3, #1
90000afa:	4413      	add	r3, r2
90000afc:	009b      	lsls	r3, r3, #2
90000afe:	440b      	add	r3, r1
90000b00:	3304      	adds	r3, #4
90000b02:	f04f 32ff 	mov.w	r2, #4294967295
90000b06:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
90000b08:	88fa      	ldrh	r2, [r7, #6]
90000b0a:	490c      	ldr	r1, [pc, #48]	; (90000b3c <BSP_LCD_LayerDefaultInit+0xb8>)
90000b0c:	4613      	mov	r3, r2
90000b0e:	005b      	lsls	r3, r3, #1
90000b10:	4413      	add	r3, r2
90000b12:	009b      	lsls	r3, r3, #2
90000b14:	440b      	add	r3, r1
90000b16:	3308      	adds	r3, #8
90000b18:	4a09      	ldr	r2, [pc, #36]	; (90000b40 <BSP_LCD_LayerDefaultInit+0xbc>)
90000b1a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
90000b1c:	88fa      	ldrh	r2, [r7, #6]
90000b1e:	4907      	ldr	r1, [pc, #28]	; (90000b3c <BSP_LCD_LayerDefaultInit+0xb8>)
90000b20:	4613      	mov	r3, r2
90000b22:	005b      	lsls	r3, r3, #1
90000b24:	4413      	add	r3, r2
90000b26:	009b      	lsls	r3, r3, #2
90000b28:	440b      	add	r3, r1
90000b2a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
90000b2e:	601a      	str	r2, [r3, #0]
}
90000b30:	bf00      	nop
90000b32:	3740      	adds	r7, #64	; 0x40
90000b34:	46bd      	mov	sp, r7
90000b36:	bd80      	pop	{r7, pc}
90000b38:	200001a4 	.word	0x200001a4
90000b3c:	2000007c 	.word	0x2000007c
90000b40:	20000004 	.word	0x20000004

90000b44 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
90000b44:	b480      	push	{r7}
90000b46:	b083      	sub	sp, #12
90000b48:	af00      	add	r7, sp, #0
90000b4a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
90000b4c:	4a04      	ldr	r2, [pc, #16]	; (90000b60 <BSP_LCD_SelectLayer+0x1c>)
90000b4e:	687b      	ldr	r3, [r7, #4]
90000b50:	6013      	str	r3, [r2, #0]
} 
90000b52:	bf00      	nop
90000b54:	370c      	adds	r7, #12
90000b56:	46bd      	mov	sp, r7
90000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
90000b5c:	4770      	bx	lr
90000b5e:	bf00      	nop
90000b60:	20000078 	.word	0x20000078

90000b64 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
90000b64:	b480      	push	{r7}
90000b66:	b083      	sub	sp, #12
90000b68:	af00      	add	r7, sp, #0
90000b6a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
90000b6c:	4b07      	ldr	r3, [pc, #28]	; (90000b8c <BSP_LCD_SetTextColor+0x28>)
90000b6e:	681a      	ldr	r2, [r3, #0]
90000b70:	4907      	ldr	r1, [pc, #28]	; (90000b90 <BSP_LCD_SetTextColor+0x2c>)
90000b72:	4613      	mov	r3, r2
90000b74:	005b      	lsls	r3, r3, #1
90000b76:	4413      	add	r3, r2
90000b78:	009b      	lsls	r3, r3, #2
90000b7a:	440b      	add	r3, r1
90000b7c:	687a      	ldr	r2, [r7, #4]
90000b7e:	601a      	str	r2, [r3, #0]
}
90000b80:	bf00      	nop
90000b82:	370c      	adds	r7, #12
90000b84:	46bd      	mov	sp, r7
90000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
90000b8a:	4770      	bx	lr
90000b8c:	20000078 	.word	0x20000078
90000b90:	2000007c 	.word	0x2000007c

90000b94 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
90000b94:	b480      	push	{r7}
90000b96:	b083      	sub	sp, #12
90000b98:	af00      	add	r7, sp, #0
90000b9a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
90000b9c:	4b08      	ldr	r3, [pc, #32]	; (90000bc0 <BSP_LCD_SetBackColor+0x2c>)
90000b9e:	681a      	ldr	r2, [r3, #0]
90000ba0:	4908      	ldr	r1, [pc, #32]	; (90000bc4 <BSP_LCD_SetBackColor+0x30>)
90000ba2:	4613      	mov	r3, r2
90000ba4:	005b      	lsls	r3, r3, #1
90000ba6:	4413      	add	r3, r2
90000ba8:	009b      	lsls	r3, r3, #2
90000baa:	440b      	add	r3, r1
90000bac:	3304      	adds	r3, #4
90000bae:	687a      	ldr	r2, [r7, #4]
90000bb0:	601a      	str	r2, [r3, #0]
}
90000bb2:	bf00      	nop
90000bb4:	370c      	adds	r7, #12
90000bb6:	46bd      	mov	sp, r7
90000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
90000bbc:	4770      	bx	lr
90000bbe:	bf00      	nop
90000bc0:	20000078 	.word	0x20000078
90000bc4:	2000007c 	.word	0x2000007c

90000bc8 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
90000bc8:	b480      	push	{r7}
90000bca:	b083      	sub	sp, #12
90000bcc:	af00      	add	r7, sp, #0
90000bce:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
90000bd0:	4b08      	ldr	r3, [pc, #32]	; (90000bf4 <BSP_LCD_SetFont+0x2c>)
90000bd2:	681a      	ldr	r2, [r3, #0]
90000bd4:	4908      	ldr	r1, [pc, #32]	; (90000bf8 <BSP_LCD_SetFont+0x30>)
90000bd6:	4613      	mov	r3, r2
90000bd8:	005b      	lsls	r3, r3, #1
90000bda:	4413      	add	r3, r2
90000bdc:	009b      	lsls	r3, r3, #2
90000bde:	440b      	add	r3, r1
90000be0:	3308      	adds	r3, #8
90000be2:	687a      	ldr	r2, [r7, #4]
90000be4:	601a      	str	r2, [r3, #0]
}
90000be6:	bf00      	nop
90000be8:	370c      	adds	r7, #12
90000bea:	46bd      	mov	sp, r7
90000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
90000bf0:	4770      	bx	lr
90000bf2:	bf00      	nop
90000bf4:	20000078 	.word	0x20000078
90000bf8:	2000007c 	.word	0x2000007c

90000bfc <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
90000bfc:	b480      	push	{r7}
90000bfe:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
90000c00:	4b07      	ldr	r3, [pc, #28]	; (90000c20 <BSP_LCD_GetFont+0x24>)
90000c02:	681a      	ldr	r2, [r3, #0]
90000c04:	4907      	ldr	r1, [pc, #28]	; (90000c24 <BSP_LCD_GetFont+0x28>)
90000c06:	4613      	mov	r3, r2
90000c08:	005b      	lsls	r3, r3, #1
90000c0a:	4413      	add	r3, r2
90000c0c:	009b      	lsls	r3, r3, #2
90000c0e:	440b      	add	r3, r1
90000c10:	3308      	adds	r3, #8
90000c12:	681b      	ldr	r3, [r3, #0]
}
90000c14:	4618      	mov	r0, r3
90000c16:	46bd      	mov	sp, r7
90000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
90000c1c:	4770      	bx	lr
90000c1e:	bf00      	nop
90000c20:	20000078 	.word	0x20000078
90000c24:	2000007c 	.word	0x2000007c

90000c28 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
90000c28:	b5f0      	push	{r4, r5, r6, r7, lr}
90000c2a:	b085      	sub	sp, #20
90000c2c:	af02      	add	r7, sp, #8
90000c2e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
90000c30:	4b0f      	ldr	r3, [pc, #60]	; (90000c70 <BSP_LCD_Clear+0x48>)
90000c32:	681c      	ldr	r4, [r3, #0]
90000c34:	4b0e      	ldr	r3, [pc, #56]	; (90000c70 <BSP_LCD_Clear+0x48>)
90000c36:	681b      	ldr	r3, [r3, #0]
90000c38:	4a0e      	ldr	r2, [pc, #56]	; (90000c74 <BSP_LCD_Clear+0x4c>)
90000c3a:	2134      	movs	r1, #52	; 0x34
90000c3c:	fb01 f303 	mul.w	r3, r1, r3
90000c40:	4413      	add	r3, r2
90000c42:	335c      	adds	r3, #92	; 0x5c
90000c44:	681b      	ldr	r3, [r3, #0]
90000c46:	461e      	mov	r6, r3
90000c48:	f7ff fef4 	bl	90000a34 <BSP_LCD_GetXSize>
90000c4c:	4605      	mov	r5, r0
90000c4e:	f7ff ff05 	bl	90000a5c <BSP_LCD_GetYSize>
90000c52:	4602      	mov	r2, r0
90000c54:	687b      	ldr	r3, [r7, #4]
90000c56:	9301      	str	r3, [sp, #4]
90000c58:	2300      	movs	r3, #0
90000c5a:	9300      	str	r3, [sp, #0]
90000c5c:	4613      	mov	r3, r2
90000c5e:	462a      	mov	r2, r5
90000c60:	4631      	mov	r1, r6
90000c62:	4620      	mov	r0, r4
90000c64:	f000 fee2 	bl	90001a2c <LL_FillBuffer>
}
90000c68:	bf00      	nop
90000c6a:	370c      	adds	r7, #12
90000c6c:	46bd      	mov	sp, r7
90000c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
90000c70:	20000078 	.word	0x20000078
90000c74:	200001a4 	.word	0x200001a4

90000c78 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
90000c78:	b590      	push	{r4, r7, lr}
90000c7a:	b083      	sub	sp, #12
90000c7c:	af00      	add	r7, sp, #0
90000c7e:	4603      	mov	r3, r0
90000c80:	80fb      	strh	r3, [r7, #6]
90000c82:	460b      	mov	r3, r1
90000c84:	80bb      	strh	r3, [r7, #4]
90000c86:	4613      	mov	r3, r2
90000c88:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
90000c8a:	4b1b      	ldr	r3, [pc, #108]	; (90000cf8 <BSP_LCD_DisplayChar+0x80>)
90000c8c:	681a      	ldr	r2, [r3, #0]
90000c8e:	491b      	ldr	r1, [pc, #108]	; (90000cfc <BSP_LCD_DisplayChar+0x84>)
90000c90:	4613      	mov	r3, r2
90000c92:	005b      	lsls	r3, r3, #1
90000c94:	4413      	add	r3, r2
90000c96:	009b      	lsls	r3, r3, #2
90000c98:	440b      	add	r3, r1
90000c9a:	3308      	adds	r3, #8
90000c9c:	681b      	ldr	r3, [r3, #0]
90000c9e:	6819      	ldr	r1, [r3, #0]
90000ca0:	78fb      	ldrb	r3, [r7, #3]
90000ca2:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
90000ca6:	4b14      	ldr	r3, [pc, #80]	; (90000cf8 <BSP_LCD_DisplayChar+0x80>)
90000ca8:	681a      	ldr	r2, [r3, #0]
90000caa:	4c14      	ldr	r4, [pc, #80]	; (90000cfc <BSP_LCD_DisplayChar+0x84>)
90000cac:	4613      	mov	r3, r2
90000cae:	005b      	lsls	r3, r3, #1
90000cb0:	4413      	add	r3, r2
90000cb2:	009b      	lsls	r3, r3, #2
90000cb4:	4423      	add	r3, r4
90000cb6:	3308      	adds	r3, #8
90000cb8:	681b      	ldr	r3, [r3, #0]
90000cba:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
90000cbc:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
90000cc0:	4b0d      	ldr	r3, [pc, #52]	; (90000cf8 <BSP_LCD_DisplayChar+0x80>)
90000cc2:	681a      	ldr	r2, [r3, #0]
90000cc4:	4c0d      	ldr	r4, [pc, #52]	; (90000cfc <BSP_LCD_DisplayChar+0x84>)
90000cc6:	4613      	mov	r3, r2
90000cc8:	005b      	lsls	r3, r3, #1
90000cca:	4413      	add	r3, r2
90000ccc:	009b      	lsls	r3, r3, #2
90000cce:	4423      	add	r3, r4
90000cd0:	3308      	adds	r3, #8
90000cd2:	681b      	ldr	r3, [r3, #0]
90000cd4:	889b      	ldrh	r3, [r3, #4]
90000cd6:	3307      	adds	r3, #7
90000cd8:	2b00      	cmp	r3, #0
90000cda:	da00      	bge.n	90000cde <BSP_LCD_DisplayChar+0x66>
90000cdc:	3307      	adds	r3, #7
90000cde:	10db      	asrs	r3, r3, #3
90000ce0:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
90000ce4:	18ca      	adds	r2, r1, r3
90000ce6:	88b9      	ldrh	r1, [r7, #4]
90000ce8:	88fb      	ldrh	r3, [r7, #6]
90000cea:	4618      	mov	r0, r3
90000cec:	f000 fde6 	bl	900018bc <DrawChar>
}
90000cf0:	bf00      	nop
90000cf2:	370c      	adds	r7, #12
90000cf4:	46bd      	mov	sp, r7
90000cf6:	bd90      	pop	{r4, r7, pc}
90000cf8:	20000078 	.word	0x20000078
90000cfc:	2000007c 	.word	0x2000007c

90000d00 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
90000d00:	b5b0      	push	{r4, r5, r7, lr}
90000d02:	b088      	sub	sp, #32
90000d04:	af00      	add	r7, sp, #0
90000d06:	60ba      	str	r2, [r7, #8]
90000d08:	461a      	mov	r2, r3
90000d0a:	4603      	mov	r3, r0
90000d0c:	81fb      	strh	r3, [r7, #14]
90000d0e:	460b      	mov	r3, r1
90000d10:	81bb      	strh	r3, [r7, #12]
90000d12:	4613      	mov	r3, r2
90000d14:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
90000d16:	2301      	movs	r3, #1
90000d18:	83fb      	strh	r3, [r7, #30]
90000d1a:	2300      	movs	r3, #0
90000d1c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
90000d1e:	2300      	movs	r3, #0
90000d20:	61bb      	str	r3, [r7, #24]
90000d22:	2300      	movs	r3, #0
90000d24:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
90000d26:	68bb      	ldr	r3, [r7, #8]
90000d28:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
90000d2a:	e002      	b.n	90000d32 <BSP_LCD_DisplayStringAt+0x32>
90000d2c:	69bb      	ldr	r3, [r7, #24]
90000d2e:	3301      	adds	r3, #1
90000d30:	61bb      	str	r3, [r7, #24]
90000d32:	697b      	ldr	r3, [r7, #20]
90000d34:	1c5a      	adds	r2, r3, #1
90000d36:	617a      	str	r2, [r7, #20]
90000d38:	781b      	ldrb	r3, [r3, #0]
90000d3a:	2b00      	cmp	r3, #0
90000d3c:	d1f6      	bne.n	90000d2c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
90000d3e:	f7ff fe79 	bl	90000a34 <BSP_LCD_GetXSize>
90000d42:	4601      	mov	r1, r0
90000d44:	4b50      	ldr	r3, [pc, #320]	; (90000e88 <BSP_LCD_DisplayStringAt+0x188>)
90000d46:	681a      	ldr	r2, [r3, #0]
90000d48:	4850      	ldr	r0, [pc, #320]	; (90000e8c <BSP_LCD_DisplayStringAt+0x18c>)
90000d4a:	4613      	mov	r3, r2
90000d4c:	005b      	lsls	r3, r3, #1
90000d4e:	4413      	add	r3, r2
90000d50:	009b      	lsls	r3, r3, #2
90000d52:	4403      	add	r3, r0
90000d54:	3308      	adds	r3, #8
90000d56:	681b      	ldr	r3, [r3, #0]
90000d58:	889b      	ldrh	r3, [r3, #4]
90000d5a:	fbb1 f3f3 	udiv	r3, r1, r3
90000d5e:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
90000d60:	79fb      	ldrb	r3, [r7, #7]
90000d62:	2b03      	cmp	r3, #3
90000d64:	d01c      	beq.n	90000da0 <BSP_LCD_DisplayStringAt+0xa0>
90000d66:	2b03      	cmp	r3, #3
90000d68:	dc33      	bgt.n	90000dd2 <BSP_LCD_DisplayStringAt+0xd2>
90000d6a:	2b01      	cmp	r3, #1
90000d6c:	d002      	beq.n	90000d74 <BSP_LCD_DisplayStringAt+0x74>
90000d6e:	2b02      	cmp	r3, #2
90000d70:	d019      	beq.n	90000da6 <BSP_LCD_DisplayStringAt+0xa6>
90000d72:	e02e      	b.n	90000dd2 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
90000d74:	693a      	ldr	r2, [r7, #16]
90000d76:	69bb      	ldr	r3, [r7, #24]
90000d78:	1ad1      	subs	r1, r2, r3
90000d7a:	4b43      	ldr	r3, [pc, #268]	; (90000e88 <BSP_LCD_DisplayStringAt+0x188>)
90000d7c:	681a      	ldr	r2, [r3, #0]
90000d7e:	4843      	ldr	r0, [pc, #268]	; (90000e8c <BSP_LCD_DisplayStringAt+0x18c>)
90000d80:	4613      	mov	r3, r2
90000d82:	005b      	lsls	r3, r3, #1
90000d84:	4413      	add	r3, r2
90000d86:	009b      	lsls	r3, r3, #2
90000d88:	4403      	add	r3, r0
90000d8a:	3308      	adds	r3, #8
90000d8c:	681b      	ldr	r3, [r3, #0]
90000d8e:	889b      	ldrh	r3, [r3, #4]
90000d90:	fb03 f301 	mul.w	r3, r3, r1
90000d94:	085b      	lsrs	r3, r3, #1
90000d96:	b29a      	uxth	r2, r3
90000d98:	89fb      	ldrh	r3, [r7, #14]
90000d9a:	4413      	add	r3, r2
90000d9c:	83fb      	strh	r3, [r7, #30]
      break;
90000d9e:	e01b      	b.n	90000dd8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
90000da0:	89fb      	ldrh	r3, [r7, #14]
90000da2:	83fb      	strh	r3, [r7, #30]
      break;
90000da4:	e018      	b.n	90000dd8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
90000da6:	693a      	ldr	r2, [r7, #16]
90000da8:	69bb      	ldr	r3, [r7, #24]
90000daa:	1ad3      	subs	r3, r2, r3
90000dac:	b299      	uxth	r1, r3
90000dae:	4b36      	ldr	r3, [pc, #216]	; (90000e88 <BSP_LCD_DisplayStringAt+0x188>)
90000db0:	681a      	ldr	r2, [r3, #0]
90000db2:	4836      	ldr	r0, [pc, #216]	; (90000e8c <BSP_LCD_DisplayStringAt+0x18c>)
90000db4:	4613      	mov	r3, r2
90000db6:	005b      	lsls	r3, r3, #1
90000db8:	4413      	add	r3, r2
90000dba:	009b      	lsls	r3, r3, #2
90000dbc:	4403      	add	r3, r0
90000dbe:	3308      	adds	r3, #8
90000dc0:	681b      	ldr	r3, [r3, #0]
90000dc2:	889b      	ldrh	r3, [r3, #4]
90000dc4:	fb11 f303 	smulbb	r3, r1, r3
90000dc8:	b29a      	uxth	r2, r3
90000dca:	89fb      	ldrh	r3, [r7, #14]
90000dcc:	1ad3      	subs	r3, r2, r3
90000dce:	83fb      	strh	r3, [r7, #30]
      break;
90000dd0:	e002      	b.n	90000dd8 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
90000dd2:	89fb      	ldrh	r3, [r7, #14]
90000dd4:	83fb      	strh	r3, [r7, #30]
      break;
90000dd6:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
90000dd8:	8bfb      	ldrh	r3, [r7, #30]
90000dda:	2b00      	cmp	r3, #0
90000ddc:	d003      	beq.n	90000de6 <BSP_LCD_DisplayStringAt+0xe6>
90000dde:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
90000de2:	2b00      	cmp	r3, #0
90000de4:	da1d      	bge.n	90000e22 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
90000de6:	2301      	movs	r3, #1
90000de8:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
90000dea:	e01a      	b.n	90000e22 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
90000dec:	68bb      	ldr	r3, [r7, #8]
90000dee:	781a      	ldrb	r2, [r3, #0]
90000df0:	89b9      	ldrh	r1, [r7, #12]
90000df2:	8bfb      	ldrh	r3, [r7, #30]
90000df4:	4618      	mov	r0, r3
90000df6:	f7ff ff3f 	bl	90000c78 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
90000dfa:	4b23      	ldr	r3, [pc, #140]	; (90000e88 <BSP_LCD_DisplayStringAt+0x188>)
90000dfc:	681a      	ldr	r2, [r3, #0]
90000dfe:	4923      	ldr	r1, [pc, #140]	; (90000e8c <BSP_LCD_DisplayStringAt+0x18c>)
90000e00:	4613      	mov	r3, r2
90000e02:	005b      	lsls	r3, r3, #1
90000e04:	4413      	add	r3, r2
90000e06:	009b      	lsls	r3, r3, #2
90000e08:	440b      	add	r3, r1
90000e0a:	3308      	adds	r3, #8
90000e0c:	681b      	ldr	r3, [r3, #0]
90000e0e:	889a      	ldrh	r2, [r3, #4]
90000e10:	8bfb      	ldrh	r3, [r7, #30]
90000e12:	4413      	add	r3, r2
90000e14:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
90000e16:	68bb      	ldr	r3, [r7, #8]
90000e18:	3301      	adds	r3, #1
90000e1a:	60bb      	str	r3, [r7, #8]
    i++;
90000e1c:	8bbb      	ldrh	r3, [r7, #28]
90000e1e:	3301      	adds	r3, #1
90000e20:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
90000e22:	68bb      	ldr	r3, [r7, #8]
90000e24:	781b      	ldrb	r3, [r3, #0]
90000e26:	2b00      	cmp	r3, #0
90000e28:	bf14      	ite	ne
90000e2a:	2301      	movne	r3, #1
90000e2c:	2300      	moveq	r3, #0
90000e2e:	b2dc      	uxtb	r4, r3
90000e30:	f7ff fe00 	bl	90000a34 <BSP_LCD_GetXSize>
90000e34:	8bb9      	ldrh	r1, [r7, #28]
90000e36:	4b14      	ldr	r3, [pc, #80]	; (90000e88 <BSP_LCD_DisplayStringAt+0x188>)
90000e38:	681a      	ldr	r2, [r3, #0]
90000e3a:	4d14      	ldr	r5, [pc, #80]	; (90000e8c <BSP_LCD_DisplayStringAt+0x18c>)
90000e3c:	4613      	mov	r3, r2
90000e3e:	005b      	lsls	r3, r3, #1
90000e40:	4413      	add	r3, r2
90000e42:	009b      	lsls	r3, r3, #2
90000e44:	442b      	add	r3, r5
90000e46:	3308      	adds	r3, #8
90000e48:	681b      	ldr	r3, [r3, #0]
90000e4a:	889b      	ldrh	r3, [r3, #4]
90000e4c:	fb03 f301 	mul.w	r3, r3, r1
90000e50:	1ac3      	subs	r3, r0, r3
90000e52:	b299      	uxth	r1, r3
90000e54:	4b0c      	ldr	r3, [pc, #48]	; (90000e88 <BSP_LCD_DisplayStringAt+0x188>)
90000e56:	681a      	ldr	r2, [r3, #0]
90000e58:	480c      	ldr	r0, [pc, #48]	; (90000e8c <BSP_LCD_DisplayStringAt+0x18c>)
90000e5a:	4613      	mov	r3, r2
90000e5c:	005b      	lsls	r3, r3, #1
90000e5e:	4413      	add	r3, r2
90000e60:	009b      	lsls	r3, r3, #2
90000e62:	4403      	add	r3, r0
90000e64:	3308      	adds	r3, #8
90000e66:	681b      	ldr	r3, [r3, #0]
90000e68:	889b      	ldrh	r3, [r3, #4]
90000e6a:	4299      	cmp	r1, r3
90000e6c:	bf2c      	ite	cs
90000e6e:	2301      	movcs	r3, #1
90000e70:	2300      	movcc	r3, #0
90000e72:	b2db      	uxtb	r3, r3
90000e74:	4023      	ands	r3, r4
90000e76:	b2db      	uxtb	r3, r3
90000e78:	2b00      	cmp	r3, #0
90000e7a:	d1b7      	bne.n	90000dec <BSP_LCD_DisplayStringAt+0xec>
  }  
}
90000e7c:	bf00      	nop
90000e7e:	bf00      	nop
90000e80:	3720      	adds	r7, #32
90000e82:	46bd      	mov	sp, r7
90000e84:	bdb0      	pop	{r4, r5, r7, pc}
90000e86:	bf00      	nop
90000e88:	20000078 	.word	0x20000078
90000e8c:	2000007c 	.word	0x2000007c

90000e90 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
90000e90:	b5b0      	push	{r4, r5, r7, lr}
90000e92:	b086      	sub	sp, #24
90000e94:	af02      	add	r7, sp, #8
90000e96:	4603      	mov	r3, r0
90000e98:	80fb      	strh	r3, [r7, #6]
90000e9a:	460b      	mov	r3, r1
90000e9c:	80bb      	strh	r3, [r7, #4]
90000e9e:	4613      	mov	r3, r2
90000ea0:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
90000ea2:	2300      	movs	r3, #0
90000ea4:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90000ea6:	4b26      	ldr	r3, [pc, #152]	; (90000f40 <BSP_LCD_DrawHLine+0xb0>)
90000ea8:	681b      	ldr	r3, [r3, #0]
90000eaa:	4a26      	ldr	r2, [pc, #152]	; (90000f44 <BSP_LCD_DrawHLine+0xb4>)
90000eac:	2134      	movs	r1, #52	; 0x34
90000eae:	fb01 f303 	mul.w	r3, r1, r3
90000eb2:	4413      	add	r3, r2
90000eb4:	3348      	adds	r3, #72	; 0x48
90000eb6:	681b      	ldr	r3, [r3, #0]
90000eb8:	2b02      	cmp	r3, #2
90000eba:	d114      	bne.n	90000ee6 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
90000ebc:	4b20      	ldr	r3, [pc, #128]	; (90000f40 <BSP_LCD_DrawHLine+0xb0>)
90000ebe:	681b      	ldr	r3, [r3, #0]
90000ec0:	4a20      	ldr	r2, [pc, #128]	; (90000f44 <BSP_LCD_DrawHLine+0xb4>)
90000ec2:	2134      	movs	r1, #52	; 0x34
90000ec4:	fb01 f303 	mul.w	r3, r1, r3
90000ec8:	4413      	add	r3, r2
90000eca:	335c      	adds	r3, #92	; 0x5c
90000ecc:	681c      	ldr	r4, [r3, #0]
90000ece:	f7ff fdb1 	bl	90000a34 <BSP_LCD_GetXSize>
90000ed2:	4602      	mov	r2, r0
90000ed4:	88bb      	ldrh	r3, [r7, #4]
90000ed6:	fb03 f202 	mul.w	r2, r3, r2
90000eda:	88fb      	ldrh	r3, [r7, #6]
90000edc:	4413      	add	r3, r2
90000ede:	005b      	lsls	r3, r3, #1
90000ee0:	4423      	add	r3, r4
90000ee2:	60fb      	str	r3, [r7, #12]
90000ee4:	e013      	b.n	90000f0e <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
90000ee6:	4b16      	ldr	r3, [pc, #88]	; (90000f40 <BSP_LCD_DrawHLine+0xb0>)
90000ee8:	681b      	ldr	r3, [r3, #0]
90000eea:	4a16      	ldr	r2, [pc, #88]	; (90000f44 <BSP_LCD_DrawHLine+0xb4>)
90000eec:	2134      	movs	r1, #52	; 0x34
90000eee:	fb01 f303 	mul.w	r3, r1, r3
90000ef2:	4413      	add	r3, r2
90000ef4:	335c      	adds	r3, #92	; 0x5c
90000ef6:	681c      	ldr	r4, [r3, #0]
90000ef8:	f7ff fd9c 	bl	90000a34 <BSP_LCD_GetXSize>
90000efc:	4602      	mov	r2, r0
90000efe:	88bb      	ldrh	r3, [r7, #4]
90000f00:	fb03 f202 	mul.w	r2, r3, r2
90000f04:	88fb      	ldrh	r3, [r7, #6]
90000f06:	4413      	add	r3, r2
90000f08:	009b      	lsls	r3, r3, #2
90000f0a:	4423      	add	r3, r4
90000f0c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
90000f0e:	4b0c      	ldr	r3, [pc, #48]	; (90000f40 <BSP_LCD_DrawHLine+0xb0>)
90000f10:	6818      	ldr	r0, [r3, #0]
90000f12:	68f9      	ldr	r1, [r7, #12]
90000f14:	887c      	ldrh	r4, [r7, #2]
90000f16:	4b0a      	ldr	r3, [pc, #40]	; (90000f40 <BSP_LCD_DrawHLine+0xb0>)
90000f18:	681a      	ldr	r2, [r3, #0]
90000f1a:	4d0b      	ldr	r5, [pc, #44]	; (90000f48 <BSP_LCD_DrawHLine+0xb8>)
90000f1c:	4613      	mov	r3, r2
90000f1e:	005b      	lsls	r3, r3, #1
90000f20:	4413      	add	r3, r2
90000f22:	009b      	lsls	r3, r3, #2
90000f24:	442b      	add	r3, r5
90000f26:	681b      	ldr	r3, [r3, #0]
90000f28:	9301      	str	r3, [sp, #4]
90000f2a:	2300      	movs	r3, #0
90000f2c:	9300      	str	r3, [sp, #0]
90000f2e:	2301      	movs	r3, #1
90000f30:	4622      	mov	r2, r4
90000f32:	f000 fd7b 	bl	90001a2c <LL_FillBuffer>
}
90000f36:	bf00      	nop
90000f38:	3710      	adds	r7, #16
90000f3a:	46bd      	mov	sp, r7
90000f3c:	bdb0      	pop	{r4, r5, r7, pc}
90000f3e:	bf00      	nop
90000f40:	20000078 	.word	0x20000078
90000f44:	200001a4 	.word	0x200001a4
90000f48:	2000007c 	.word	0x2000007c

90000f4c <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
90000f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
90000f4e:	b087      	sub	sp, #28
90000f50:	af02      	add	r7, sp, #8
90000f52:	4603      	mov	r3, r0
90000f54:	80fb      	strh	r3, [r7, #6]
90000f56:	460b      	mov	r3, r1
90000f58:	80bb      	strh	r3, [r7, #4]
90000f5a:	4613      	mov	r3, r2
90000f5c:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
90000f5e:	2300      	movs	r3, #0
90000f60:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90000f62:	4b28      	ldr	r3, [pc, #160]	; (90001004 <BSP_LCD_DrawVLine+0xb8>)
90000f64:	681b      	ldr	r3, [r3, #0]
90000f66:	4a28      	ldr	r2, [pc, #160]	; (90001008 <BSP_LCD_DrawVLine+0xbc>)
90000f68:	2134      	movs	r1, #52	; 0x34
90000f6a:	fb01 f303 	mul.w	r3, r1, r3
90000f6e:	4413      	add	r3, r2
90000f70:	3348      	adds	r3, #72	; 0x48
90000f72:	681b      	ldr	r3, [r3, #0]
90000f74:	2b02      	cmp	r3, #2
90000f76:	d114      	bne.n	90000fa2 <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
90000f78:	4b22      	ldr	r3, [pc, #136]	; (90001004 <BSP_LCD_DrawVLine+0xb8>)
90000f7a:	681b      	ldr	r3, [r3, #0]
90000f7c:	4a22      	ldr	r2, [pc, #136]	; (90001008 <BSP_LCD_DrawVLine+0xbc>)
90000f7e:	2134      	movs	r1, #52	; 0x34
90000f80:	fb01 f303 	mul.w	r3, r1, r3
90000f84:	4413      	add	r3, r2
90000f86:	335c      	adds	r3, #92	; 0x5c
90000f88:	681c      	ldr	r4, [r3, #0]
90000f8a:	f7ff fd53 	bl	90000a34 <BSP_LCD_GetXSize>
90000f8e:	4602      	mov	r2, r0
90000f90:	88bb      	ldrh	r3, [r7, #4]
90000f92:	fb03 f202 	mul.w	r2, r3, r2
90000f96:	88fb      	ldrh	r3, [r7, #6]
90000f98:	4413      	add	r3, r2
90000f9a:	005b      	lsls	r3, r3, #1
90000f9c:	4423      	add	r3, r4
90000f9e:	60fb      	str	r3, [r7, #12]
90000fa0:	e013      	b.n	90000fca <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
90000fa2:	4b18      	ldr	r3, [pc, #96]	; (90001004 <BSP_LCD_DrawVLine+0xb8>)
90000fa4:	681b      	ldr	r3, [r3, #0]
90000fa6:	4a18      	ldr	r2, [pc, #96]	; (90001008 <BSP_LCD_DrawVLine+0xbc>)
90000fa8:	2134      	movs	r1, #52	; 0x34
90000faa:	fb01 f303 	mul.w	r3, r1, r3
90000fae:	4413      	add	r3, r2
90000fb0:	335c      	adds	r3, #92	; 0x5c
90000fb2:	681c      	ldr	r4, [r3, #0]
90000fb4:	f7ff fd3e 	bl	90000a34 <BSP_LCD_GetXSize>
90000fb8:	4602      	mov	r2, r0
90000fba:	88bb      	ldrh	r3, [r7, #4]
90000fbc:	fb03 f202 	mul.w	r2, r3, r2
90000fc0:	88fb      	ldrh	r3, [r7, #6]
90000fc2:	4413      	add	r3, r2
90000fc4:	009b      	lsls	r3, r3, #2
90000fc6:	4423      	add	r3, r4
90000fc8:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
90000fca:	4b0e      	ldr	r3, [pc, #56]	; (90001004 <BSP_LCD_DrawVLine+0xb8>)
90000fcc:	681c      	ldr	r4, [r3, #0]
90000fce:	68fd      	ldr	r5, [r7, #12]
90000fd0:	887e      	ldrh	r6, [r7, #2]
90000fd2:	f7ff fd2f 	bl	90000a34 <BSP_LCD_GetXSize>
90000fd6:	4603      	mov	r3, r0
90000fd8:	1e59      	subs	r1, r3, #1
90000fda:	4b0a      	ldr	r3, [pc, #40]	; (90001004 <BSP_LCD_DrawVLine+0xb8>)
90000fdc:	681a      	ldr	r2, [r3, #0]
90000fde:	480b      	ldr	r0, [pc, #44]	; (9000100c <BSP_LCD_DrawVLine+0xc0>)
90000fe0:	4613      	mov	r3, r2
90000fe2:	005b      	lsls	r3, r3, #1
90000fe4:	4413      	add	r3, r2
90000fe6:	009b      	lsls	r3, r3, #2
90000fe8:	4403      	add	r3, r0
90000fea:	681b      	ldr	r3, [r3, #0]
90000fec:	9301      	str	r3, [sp, #4]
90000fee:	9100      	str	r1, [sp, #0]
90000ff0:	4633      	mov	r3, r6
90000ff2:	2201      	movs	r2, #1
90000ff4:	4629      	mov	r1, r5
90000ff6:	4620      	mov	r0, r4
90000ff8:	f000 fd18 	bl	90001a2c <LL_FillBuffer>
}
90000ffc:	bf00      	nop
90000ffe:	3714      	adds	r7, #20
90001000:	46bd      	mov	sp, r7
90001002:	bdf0      	pop	{r4, r5, r6, r7, pc}
90001004:	20000078 	.word	0x20000078
90001008:	200001a4 	.word	0x200001a4
9000100c:	2000007c 	.word	0x2000007c

90001010 <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
90001010:	b590      	push	{r4, r7, lr}
90001012:	b083      	sub	sp, #12
90001014:	af00      	add	r7, sp, #0
90001016:	4604      	mov	r4, r0
90001018:	4608      	mov	r0, r1
9000101a:	4611      	mov	r1, r2
9000101c:	461a      	mov	r2, r3
9000101e:	4623      	mov	r3, r4
90001020:	80fb      	strh	r3, [r7, #6]
90001022:	4603      	mov	r3, r0
90001024:	80bb      	strh	r3, [r7, #4]
90001026:	460b      	mov	r3, r1
90001028:	807b      	strh	r3, [r7, #2]
9000102a:	4613      	mov	r3, r2
9000102c:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
9000102e:	887a      	ldrh	r2, [r7, #2]
90001030:	88b9      	ldrh	r1, [r7, #4]
90001032:	88fb      	ldrh	r3, [r7, #6]
90001034:	4618      	mov	r0, r3
90001036:	f7ff ff2b 	bl	90000e90 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
9000103a:	88ba      	ldrh	r2, [r7, #4]
9000103c:	883b      	ldrh	r3, [r7, #0]
9000103e:	4413      	add	r3, r2
90001040:	b299      	uxth	r1, r3
90001042:	887a      	ldrh	r2, [r7, #2]
90001044:	88fb      	ldrh	r3, [r7, #6]
90001046:	4618      	mov	r0, r3
90001048:	f7ff ff22 	bl	90000e90 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
9000104c:	883a      	ldrh	r2, [r7, #0]
9000104e:	88b9      	ldrh	r1, [r7, #4]
90001050:	88fb      	ldrh	r3, [r7, #6]
90001052:	4618      	mov	r0, r3
90001054:	f7ff ff7a 	bl	90000f4c <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
90001058:	88fa      	ldrh	r2, [r7, #6]
9000105a:	887b      	ldrh	r3, [r7, #2]
9000105c:	4413      	add	r3, r2
9000105e:	b29b      	uxth	r3, r3
90001060:	883a      	ldrh	r2, [r7, #0]
90001062:	88b9      	ldrh	r1, [r7, #4]
90001064:	4618      	mov	r0, r3
90001066:	f7ff ff71 	bl	90000f4c <BSP_LCD_DrawVLine>
}
9000106a:	bf00      	nop
9000106c:	370c      	adds	r7, #12
9000106e:	46bd      	mov	sp, r7
90001070:	bd90      	pop	{r4, r7, pc}
	...

90001074 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
90001074:	b590      	push	{r4, r7, lr}
90001076:	b087      	sub	sp, #28
90001078:	af00      	add	r7, sp, #0
9000107a:	4603      	mov	r3, r0
9000107c:	80fb      	strh	r3, [r7, #6]
9000107e:	460b      	mov	r3, r1
90001080:	80bb      	strh	r3, [r7, #4]
90001082:	4613      	mov	r3, r2
90001084:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
90001086:	887b      	ldrh	r3, [r7, #2]
90001088:	005b      	lsls	r3, r3, #1
9000108a:	f1c3 0303 	rsb	r3, r3, #3
9000108e:	617b      	str	r3, [r7, #20]
  current_x = 0;
90001090:	2300      	movs	r3, #0
90001092:	613b      	str	r3, [r7, #16]
  current_y = Radius;
90001094:	887b      	ldrh	r3, [r7, #2]
90001096:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
90001098:	e0c7      	b.n	9000122a <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
9000109a:	693b      	ldr	r3, [r7, #16]
9000109c:	b29a      	uxth	r2, r3
9000109e:	88fb      	ldrh	r3, [r7, #6]
900010a0:	4413      	add	r3, r2
900010a2:	b298      	uxth	r0, r3
900010a4:	68fb      	ldr	r3, [r7, #12]
900010a6:	b29b      	uxth	r3, r3
900010a8:	88ba      	ldrh	r2, [r7, #4]
900010aa:	1ad3      	subs	r3, r2, r3
900010ac:	b299      	uxth	r1, r3
900010ae:	4b64      	ldr	r3, [pc, #400]	; (90001240 <BSP_LCD_DrawCircle+0x1cc>)
900010b0:	681a      	ldr	r2, [r3, #0]
900010b2:	4c64      	ldr	r4, [pc, #400]	; (90001244 <BSP_LCD_DrawCircle+0x1d0>)
900010b4:	4613      	mov	r3, r2
900010b6:	005b      	lsls	r3, r3, #1
900010b8:	4413      	add	r3, r2
900010ba:	009b      	lsls	r3, r3, #2
900010bc:	4423      	add	r3, r4
900010be:	681b      	ldr	r3, [r3, #0]
900010c0:	461a      	mov	r2, r3
900010c2:	f000 f9b5 	bl	90001430 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
900010c6:	693b      	ldr	r3, [r7, #16]
900010c8:	b29b      	uxth	r3, r3
900010ca:	88fa      	ldrh	r2, [r7, #6]
900010cc:	1ad3      	subs	r3, r2, r3
900010ce:	b298      	uxth	r0, r3
900010d0:	68fb      	ldr	r3, [r7, #12]
900010d2:	b29b      	uxth	r3, r3
900010d4:	88ba      	ldrh	r2, [r7, #4]
900010d6:	1ad3      	subs	r3, r2, r3
900010d8:	b299      	uxth	r1, r3
900010da:	4b59      	ldr	r3, [pc, #356]	; (90001240 <BSP_LCD_DrawCircle+0x1cc>)
900010dc:	681a      	ldr	r2, [r3, #0]
900010de:	4c59      	ldr	r4, [pc, #356]	; (90001244 <BSP_LCD_DrawCircle+0x1d0>)
900010e0:	4613      	mov	r3, r2
900010e2:	005b      	lsls	r3, r3, #1
900010e4:	4413      	add	r3, r2
900010e6:	009b      	lsls	r3, r3, #2
900010e8:	4423      	add	r3, r4
900010ea:	681b      	ldr	r3, [r3, #0]
900010ec:	461a      	mov	r2, r3
900010ee:	f000 f99f 	bl	90001430 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
900010f2:	68fb      	ldr	r3, [r7, #12]
900010f4:	b29a      	uxth	r2, r3
900010f6:	88fb      	ldrh	r3, [r7, #6]
900010f8:	4413      	add	r3, r2
900010fa:	b298      	uxth	r0, r3
900010fc:	693b      	ldr	r3, [r7, #16]
900010fe:	b29b      	uxth	r3, r3
90001100:	88ba      	ldrh	r2, [r7, #4]
90001102:	1ad3      	subs	r3, r2, r3
90001104:	b299      	uxth	r1, r3
90001106:	4b4e      	ldr	r3, [pc, #312]	; (90001240 <BSP_LCD_DrawCircle+0x1cc>)
90001108:	681a      	ldr	r2, [r3, #0]
9000110a:	4c4e      	ldr	r4, [pc, #312]	; (90001244 <BSP_LCD_DrawCircle+0x1d0>)
9000110c:	4613      	mov	r3, r2
9000110e:	005b      	lsls	r3, r3, #1
90001110:	4413      	add	r3, r2
90001112:	009b      	lsls	r3, r3, #2
90001114:	4423      	add	r3, r4
90001116:	681b      	ldr	r3, [r3, #0]
90001118:	461a      	mov	r2, r3
9000111a:	f000 f989 	bl	90001430 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
9000111e:	68fb      	ldr	r3, [r7, #12]
90001120:	b29b      	uxth	r3, r3
90001122:	88fa      	ldrh	r2, [r7, #6]
90001124:	1ad3      	subs	r3, r2, r3
90001126:	b298      	uxth	r0, r3
90001128:	693b      	ldr	r3, [r7, #16]
9000112a:	b29b      	uxth	r3, r3
9000112c:	88ba      	ldrh	r2, [r7, #4]
9000112e:	1ad3      	subs	r3, r2, r3
90001130:	b299      	uxth	r1, r3
90001132:	4b43      	ldr	r3, [pc, #268]	; (90001240 <BSP_LCD_DrawCircle+0x1cc>)
90001134:	681a      	ldr	r2, [r3, #0]
90001136:	4c43      	ldr	r4, [pc, #268]	; (90001244 <BSP_LCD_DrawCircle+0x1d0>)
90001138:	4613      	mov	r3, r2
9000113a:	005b      	lsls	r3, r3, #1
9000113c:	4413      	add	r3, r2
9000113e:	009b      	lsls	r3, r3, #2
90001140:	4423      	add	r3, r4
90001142:	681b      	ldr	r3, [r3, #0]
90001144:	461a      	mov	r2, r3
90001146:	f000 f973 	bl	90001430 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
9000114a:	693b      	ldr	r3, [r7, #16]
9000114c:	b29a      	uxth	r2, r3
9000114e:	88fb      	ldrh	r3, [r7, #6]
90001150:	4413      	add	r3, r2
90001152:	b298      	uxth	r0, r3
90001154:	68fb      	ldr	r3, [r7, #12]
90001156:	b29a      	uxth	r2, r3
90001158:	88bb      	ldrh	r3, [r7, #4]
9000115a:	4413      	add	r3, r2
9000115c:	b299      	uxth	r1, r3
9000115e:	4b38      	ldr	r3, [pc, #224]	; (90001240 <BSP_LCD_DrawCircle+0x1cc>)
90001160:	681a      	ldr	r2, [r3, #0]
90001162:	4c38      	ldr	r4, [pc, #224]	; (90001244 <BSP_LCD_DrawCircle+0x1d0>)
90001164:	4613      	mov	r3, r2
90001166:	005b      	lsls	r3, r3, #1
90001168:	4413      	add	r3, r2
9000116a:	009b      	lsls	r3, r3, #2
9000116c:	4423      	add	r3, r4
9000116e:	681b      	ldr	r3, [r3, #0]
90001170:	461a      	mov	r2, r3
90001172:	f000 f95d 	bl	90001430 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
90001176:	693b      	ldr	r3, [r7, #16]
90001178:	b29b      	uxth	r3, r3
9000117a:	88fa      	ldrh	r2, [r7, #6]
9000117c:	1ad3      	subs	r3, r2, r3
9000117e:	b298      	uxth	r0, r3
90001180:	68fb      	ldr	r3, [r7, #12]
90001182:	b29a      	uxth	r2, r3
90001184:	88bb      	ldrh	r3, [r7, #4]
90001186:	4413      	add	r3, r2
90001188:	b299      	uxth	r1, r3
9000118a:	4b2d      	ldr	r3, [pc, #180]	; (90001240 <BSP_LCD_DrawCircle+0x1cc>)
9000118c:	681a      	ldr	r2, [r3, #0]
9000118e:	4c2d      	ldr	r4, [pc, #180]	; (90001244 <BSP_LCD_DrawCircle+0x1d0>)
90001190:	4613      	mov	r3, r2
90001192:	005b      	lsls	r3, r3, #1
90001194:	4413      	add	r3, r2
90001196:	009b      	lsls	r3, r3, #2
90001198:	4423      	add	r3, r4
9000119a:	681b      	ldr	r3, [r3, #0]
9000119c:	461a      	mov	r2, r3
9000119e:	f000 f947 	bl	90001430 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
900011a2:	68fb      	ldr	r3, [r7, #12]
900011a4:	b29a      	uxth	r2, r3
900011a6:	88fb      	ldrh	r3, [r7, #6]
900011a8:	4413      	add	r3, r2
900011aa:	b298      	uxth	r0, r3
900011ac:	693b      	ldr	r3, [r7, #16]
900011ae:	b29a      	uxth	r2, r3
900011b0:	88bb      	ldrh	r3, [r7, #4]
900011b2:	4413      	add	r3, r2
900011b4:	b299      	uxth	r1, r3
900011b6:	4b22      	ldr	r3, [pc, #136]	; (90001240 <BSP_LCD_DrawCircle+0x1cc>)
900011b8:	681a      	ldr	r2, [r3, #0]
900011ba:	4c22      	ldr	r4, [pc, #136]	; (90001244 <BSP_LCD_DrawCircle+0x1d0>)
900011bc:	4613      	mov	r3, r2
900011be:	005b      	lsls	r3, r3, #1
900011c0:	4413      	add	r3, r2
900011c2:	009b      	lsls	r3, r3, #2
900011c4:	4423      	add	r3, r4
900011c6:	681b      	ldr	r3, [r3, #0]
900011c8:	461a      	mov	r2, r3
900011ca:	f000 f931 	bl	90001430 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
900011ce:	68fb      	ldr	r3, [r7, #12]
900011d0:	b29b      	uxth	r3, r3
900011d2:	88fa      	ldrh	r2, [r7, #6]
900011d4:	1ad3      	subs	r3, r2, r3
900011d6:	b298      	uxth	r0, r3
900011d8:	693b      	ldr	r3, [r7, #16]
900011da:	b29a      	uxth	r2, r3
900011dc:	88bb      	ldrh	r3, [r7, #4]
900011de:	4413      	add	r3, r2
900011e0:	b299      	uxth	r1, r3
900011e2:	4b17      	ldr	r3, [pc, #92]	; (90001240 <BSP_LCD_DrawCircle+0x1cc>)
900011e4:	681a      	ldr	r2, [r3, #0]
900011e6:	4c17      	ldr	r4, [pc, #92]	; (90001244 <BSP_LCD_DrawCircle+0x1d0>)
900011e8:	4613      	mov	r3, r2
900011ea:	005b      	lsls	r3, r3, #1
900011ec:	4413      	add	r3, r2
900011ee:	009b      	lsls	r3, r3, #2
900011f0:	4423      	add	r3, r4
900011f2:	681b      	ldr	r3, [r3, #0]
900011f4:	461a      	mov	r2, r3
900011f6:	f000 f91b 	bl	90001430 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
900011fa:	697b      	ldr	r3, [r7, #20]
900011fc:	2b00      	cmp	r3, #0
900011fe:	da06      	bge.n	9000120e <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
90001200:	693b      	ldr	r3, [r7, #16]
90001202:	009a      	lsls	r2, r3, #2
90001204:	697b      	ldr	r3, [r7, #20]
90001206:	4413      	add	r3, r2
90001208:	3306      	adds	r3, #6
9000120a:	617b      	str	r3, [r7, #20]
9000120c:	e00a      	b.n	90001224 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
9000120e:	693a      	ldr	r2, [r7, #16]
90001210:	68fb      	ldr	r3, [r7, #12]
90001212:	1ad3      	subs	r3, r2, r3
90001214:	009a      	lsls	r2, r3, #2
90001216:	697b      	ldr	r3, [r7, #20]
90001218:	4413      	add	r3, r2
9000121a:	330a      	adds	r3, #10
9000121c:	617b      	str	r3, [r7, #20]
      current_y--;
9000121e:	68fb      	ldr	r3, [r7, #12]
90001220:	3b01      	subs	r3, #1
90001222:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
90001224:	693b      	ldr	r3, [r7, #16]
90001226:	3301      	adds	r3, #1
90001228:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
9000122a:	693a      	ldr	r2, [r7, #16]
9000122c:	68fb      	ldr	r3, [r7, #12]
9000122e:	429a      	cmp	r2, r3
90001230:	f67f af33 	bls.w	9000109a <BSP_LCD_DrawCircle+0x26>
  } 
}
90001234:	bf00      	nop
90001236:	bf00      	nop
90001238:	371c      	adds	r7, #28
9000123a:	46bd      	mov	sp, r7
9000123c:	bd90      	pop	{r4, r7, pc}
9000123e:	bf00      	nop
90001240:	20000078 	.word	0x20000078
90001244:	2000007c 	.word	0x2000007c

90001248 <BSP_LCD_DrawEllipse>:
  * @param  XRadius: Ellipse X radius
  * @param  YRadius: Ellipse Y radius
  * @retval None
  */
void BSP_LCD_DrawEllipse(int Xpos, int Ypos, int XRadius, int YRadius)
{
90001248:	b590      	push	{r4, r7, lr}
9000124a:	b08d      	sub	sp, #52	; 0x34
9000124c:	af00      	add	r7, sp, #0
9000124e:	60f8      	str	r0, [r7, #12]
90001250:	60b9      	str	r1, [r7, #8]
90001252:	607a      	str	r2, [r7, #4]
90001254:	603b      	str	r3, [r7, #0]
  int x = 0, y = -YRadius, err = 2-2*XRadius, e2;
90001256:	2300      	movs	r3, #0
90001258:	62fb      	str	r3, [r7, #44]	; 0x2c
9000125a:	683b      	ldr	r3, [r7, #0]
9000125c:	425b      	negs	r3, r3
9000125e:	62bb      	str	r3, [r7, #40]	; 0x28
90001260:	687b      	ldr	r3, [r7, #4]
90001262:	f1c3 0301 	rsb	r3, r3, #1
90001266:	005b      	lsls	r3, r3, #1
90001268:	627b      	str	r3, [r7, #36]	; 0x24
  float k = 0, rad1 = 0, rad2 = 0;
9000126a:	f04f 0300 	mov.w	r3, #0
9000126e:	61fb      	str	r3, [r7, #28]
90001270:	f04f 0300 	mov.w	r3, #0
90001274:	61bb      	str	r3, [r7, #24]
90001276:	f04f 0300 	mov.w	r3, #0
9000127a:	617b      	str	r3, [r7, #20]
  
  rad1 = XRadius;
9000127c:	687b      	ldr	r3, [r7, #4]
9000127e:	ee07 3a90 	vmov	s15, r3
90001282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90001286:	edc7 7a06 	vstr	s15, [r7, #24]
  rad2 = YRadius;
9000128a:	683b      	ldr	r3, [r7, #0]
9000128c:	ee07 3a90 	vmov	s15, r3
90001290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90001294:	edc7 7a05 	vstr	s15, [r7, #20]
  
  k = (float)(rad2/rad1);  
90001298:	edd7 6a05 	vldr	s13, [r7, #20]
9000129c:	ed97 7a06 	vldr	s14, [r7, #24]
900012a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
900012a4:	edc7 7a07 	vstr	s15, [r7, #28]
  
  do { 
    BSP_LCD_DrawPixel((Xpos-(uint16_t)(x/k)), (Ypos+y), DrawProp[ActiveLayer].TextColor);
900012a8:	68fb      	ldr	r3, [r7, #12]
900012aa:	b29a      	uxth	r2, r3
900012ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900012ae:	ee07 3a90 	vmov	s15, r3
900012b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
900012b6:	ed97 7a07 	vldr	s14, [r7, #28]
900012ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
900012be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900012c2:	ee17 3a90 	vmov	r3, s15
900012c6:	b29b      	uxth	r3, r3
900012c8:	1ad3      	subs	r3, r2, r3
900012ca:	b298      	uxth	r0, r3
900012cc:	68bb      	ldr	r3, [r7, #8]
900012ce:	b29a      	uxth	r2, r3
900012d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
900012d2:	b29b      	uxth	r3, r3
900012d4:	4413      	add	r3, r2
900012d6:	b299      	uxth	r1, r3
900012d8:	4b53      	ldr	r3, [pc, #332]	; (90001428 <BSP_LCD_DrawEllipse+0x1e0>)
900012da:	681a      	ldr	r2, [r3, #0]
900012dc:	4c53      	ldr	r4, [pc, #332]	; (9000142c <BSP_LCD_DrawEllipse+0x1e4>)
900012de:	4613      	mov	r3, r2
900012e0:	005b      	lsls	r3, r3, #1
900012e2:	4413      	add	r3, r2
900012e4:	009b      	lsls	r3, r3, #2
900012e6:	4423      	add	r3, r4
900012e8:	681b      	ldr	r3, [r3, #0]
900012ea:	461a      	mov	r2, r3
900012ec:	f000 f8a0 	bl	90001430 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos+(uint16_t)(x/k)), (Ypos+y), DrawProp[ActiveLayer].TextColor);
900012f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900012f2:	ee07 3a90 	vmov	s15, r3
900012f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
900012fa:	ed97 7a07 	vldr	s14, [r7, #28]
900012fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
90001302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90001306:	ee17 3a90 	vmov	r3, s15
9000130a:	b29a      	uxth	r2, r3
9000130c:	68fb      	ldr	r3, [r7, #12]
9000130e:	b29b      	uxth	r3, r3
90001310:	4413      	add	r3, r2
90001312:	b298      	uxth	r0, r3
90001314:	68bb      	ldr	r3, [r7, #8]
90001316:	b29a      	uxth	r2, r3
90001318:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000131a:	b29b      	uxth	r3, r3
9000131c:	4413      	add	r3, r2
9000131e:	b299      	uxth	r1, r3
90001320:	4b41      	ldr	r3, [pc, #260]	; (90001428 <BSP_LCD_DrawEllipse+0x1e0>)
90001322:	681a      	ldr	r2, [r3, #0]
90001324:	4c41      	ldr	r4, [pc, #260]	; (9000142c <BSP_LCD_DrawEllipse+0x1e4>)
90001326:	4613      	mov	r3, r2
90001328:	005b      	lsls	r3, r3, #1
9000132a:	4413      	add	r3, r2
9000132c:	009b      	lsls	r3, r3, #2
9000132e:	4423      	add	r3, r4
90001330:	681b      	ldr	r3, [r3, #0]
90001332:	461a      	mov	r2, r3
90001334:	f000 f87c 	bl	90001430 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos+(uint16_t)(x/k)), (Ypos-y), DrawProp[ActiveLayer].TextColor);
90001338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000133a:	ee07 3a90 	vmov	s15, r3
9000133e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
90001342:	ed97 7a07 	vldr	s14, [r7, #28]
90001346:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000134a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000134e:	ee17 3a90 	vmov	r3, s15
90001352:	b29a      	uxth	r2, r3
90001354:	68fb      	ldr	r3, [r7, #12]
90001356:	b29b      	uxth	r3, r3
90001358:	4413      	add	r3, r2
9000135a:	b298      	uxth	r0, r3
9000135c:	68bb      	ldr	r3, [r7, #8]
9000135e:	b29a      	uxth	r2, r3
90001360:	6abb      	ldr	r3, [r7, #40]	; 0x28
90001362:	b29b      	uxth	r3, r3
90001364:	1ad3      	subs	r3, r2, r3
90001366:	b299      	uxth	r1, r3
90001368:	4b2f      	ldr	r3, [pc, #188]	; (90001428 <BSP_LCD_DrawEllipse+0x1e0>)
9000136a:	681a      	ldr	r2, [r3, #0]
9000136c:	4c2f      	ldr	r4, [pc, #188]	; (9000142c <BSP_LCD_DrawEllipse+0x1e4>)
9000136e:	4613      	mov	r3, r2
90001370:	005b      	lsls	r3, r3, #1
90001372:	4413      	add	r3, r2
90001374:	009b      	lsls	r3, r3, #2
90001376:	4423      	add	r3, r4
90001378:	681b      	ldr	r3, [r3, #0]
9000137a:	461a      	mov	r2, r3
9000137c:	f000 f858 	bl	90001430 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos-(uint16_t)(x/k)), (Ypos-y), DrawProp[ActiveLayer].TextColor);      
90001380:	68fb      	ldr	r3, [r7, #12]
90001382:	b29a      	uxth	r2, r3
90001384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90001386:	ee07 3a90 	vmov	s15, r3
9000138a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
9000138e:	ed97 7a07 	vldr	s14, [r7, #28]
90001392:	eec6 7a87 	vdiv.f32	s15, s13, s14
90001396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000139a:	ee17 3a90 	vmov	r3, s15
9000139e:	b29b      	uxth	r3, r3
900013a0:	1ad3      	subs	r3, r2, r3
900013a2:	b298      	uxth	r0, r3
900013a4:	68bb      	ldr	r3, [r7, #8]
900013a6:	b29a      	uxth	r2, r3
900013a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
900013aa:	b29b      	uxth	r3, r3
900013ac:	1ad3      	subs	r3, r2, r3
900013ae:	b299      	uxth	r1, r3
900013b0:	4b1d      	ldr	r3, [pc, #116]	; (90001428 <BSP_LCD_DrawEllipse+0x1e0>)
900013b2:	681a      	ldr	r2, [r3, #0]
900013b4:	4c1d      	ldr	r4, [pc, #116]	; (9000142c <BSP_LCD_DrawEllipse+0x1e4>)
900013b6:	4613      	mov	r3, r2
900013b8:	005b      	lsls	r3, r3, #1
900013ba:	4413      	add	r3, r2
900013bc:	009b      	lsls	r3, r3, #2
900013be:	4423      	add	r3, r4
900013c0:	681b      	ldr	r3, [r3, #0]
900013c2:	461a      	mov	r2, r3
900013c4:	f000 f834 	bl	90001430 <BSP_LCD_DrawPixel>
    
    e2 = err;
900013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900013ca:	623b      	str	r3, [r7, #32]
    if (e2 <= x) {
900013cc:	6a3a      	ldr	r2, [r7, #32]
900013ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900013d0:	429a      	cmp	r2, r3
900013d2:	dc13      	bgt.n	900013fc <BSP_LCD_DrawEllipse+0x1b4>
      err += ++x*2+1;
900013d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900013d6:	3301      	adds	r3, #1
900013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
900013da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900013dc:	005b      	lsls	r3, r3, #1
900013de:	3301      	adds	r3, #1
900013e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
900013e2:	4413      	add	r3, r2
900013e4:	627b      	str	r3, [r7, #36]	; 0x24
      if (-y == x && e2 <= y) e2 = 0;
900013e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
900013e8:	425b      	negs	r3, r3
900013ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
900013ec:	429a      	cmp	r2, r3
900013ee:	d105      	bne.n	900013fc <BSP_LCD_DrawEllipse+0x1b4>
900013f0:	6a3a      	ldr	r2, [r7, #32]
900013f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
900013f4:	429a      	cmp	r2, r3
900013f6:	dc01      	bgt.n	900013fc <BSP_LCD_DrawEllipse+0x1b4>
900013f8:	2300      	movs	r3, #0
900013fa:	623b      	str	r3, [r7, #32]
    }
    if (e2 > y) err += ++y*2+1;     
900013fc:	6a3a      	ldr	r2, [r7, #32]
900013fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
90001400:	429a      	cmp	r2, r3
90001402:	dd08      	ble.n	90001416 <BSP_LCD_DrawEllipse+0x1ce>
90001404:	6abb      	ldr	r3, [r7, #40]	; 0x28
90001406:	3301      	adds	r3, #1
90001408:	62bb      	str	r3, [r7, #40]	; 0x28
9000140a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000140c:	005b      	lsls	r3, r3, #1
9000140e:	3301      	adds	r3, #1
90001410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90001412:	4413      	add	r3, r2
90001414:	627b      	str	r3, [r7, #36]	; 0x24
  }
  while (y <= 0);
90001416:	6abb      	ldr	r3, [r7, #40]	; 0x28
90001418:	2b00      	cmp	r3, #0
9000141a:	f77f af45 	ble.w	900012a8 <BSP_LCD_DrawEllipse+0x60>
}
9000141e:	bf00      	nop
90001420:	bf00      	nop
90001422:	3734      	adds	r7, #52	; 0x34
90001424:	46bd      	mov	sp, r7
90001426:	bd90      	pop	{r4, r7, pc}
90001428:	20000078 	.word	0x20000078
9000142c:	2000007c 	.word	0x2000007c

90001430 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
90001430:	b5b0      	push	{r4, r5, r7, lr}
90001432:	b082      	sub	sp, #8
90001434:	af00      	add	r7, sp, #0
90001436:	4603      	mov	r3, r0
90001438:	603a      	str	r2, [r7, #0]
9000143a:	80fb      	strh	r3, [r7, #6]
9000143c:	460b      	mov	r3, r1
9000143e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90001440:	4b1d      	ldr	r3, [pc, #116]	; (900014b8 <BSP_LCD_DrawPixel+0x88>)
90001442:	681b      	ldr	r3, [r3, #0]
90001444:	4a1d      	ldr	r2, [pc, #116]	; (900014bc <BSP_LCD_DrawPixel+0x8c>)
90001446:	2134      	movs	r1, #52	; 0x34
90001448:	fb01 f303 	mul.w	r3, r1, r3
9000144c:	4413      	add	r3, r2
9000144e:	3348      	adds	r3, #72	; 0x48
90001450:	681b      	ldr	r3, [r3, #0]
90001452:	2b02      	cmp	r3, #2
90001454:	d116      	bne.n	90001484 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
90001456:	4b18      	ldr	r3, [pc, #96]	; (900014b8 <BSP_LCD_DrawPixel+0x88>)
90001458:	681b      	ldr	r3, [r3, #0]
9000145a:	4a18      	ldr	r2, [pc, #96]	; (900014bc <BSP_LCD_DrawPixel+0x8c>)
9000145c:	2134      	movs	r1, #52	; 0x34
9000145e:	fb01 f303 	mul.w	r3, r1, r3
90001462:	4413      	add	r3, r2
90001464:	335c      	adds	r3, #92	; 0x5c
90001466:	681c      	ldr	r4, [r3, #0]
90001468:	88bd      	ldrh	r5, [r7, #4]
9000146a:	f7ff fae3 	bl	90000a34 <BSP_LCD_GetXSize>
9000146e:	4603      	mov	r3, r0
90001470:	fb03 f205 	mul.w	r2, r3, r5
90001474:	88fb      	ldrh	r3, [r7, #6]
90001476:	4413      	add	r3, r2
90001478:	005b      	lsls	r3, r3, #1
9000147a:	4423      	add	r3, r4
9000147c:	683a      	ldr	r2, [r7, #0]
9000147e:	b292      	uxth	r2, r2
90001480:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
90001482:	e015      	b.n	900014b0 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
90001484:	4b0c      	ldr	r3, [pc, #48]	; (900014b8 <BSP_LCD_DrawPixel+0x88>)
90001486:	681b      	ldr	r3, [r3, #0]
90001488:	4a0c      	ldr	r2, [pc, #48]	; (900014bc <BSP_LCD_DrawPixel+0x8c>)
9000148a:	2134      	movs	r1, #52	; 0x34
9000148c:	fb01 f303 	mul.w	r3, r1, r3
90001490:	4413      	add	r3, r2
90001492:	335c      	adds	r3, #92	; 0x5c
90001494:	681c      	ldr	r4, [r3, #0]
90001496:	88bd      	ldrh	r5, [r7, #4]
90001498:	f7ff facc 	bl	90000a34 <BSP_LCD_GetXSize>
9000149c:	4603      	mov	r3, r0
9000149e:	fb03 f205 	mul.w	r2, r3, r5
900014a2:	88fb      	ldrh	r3, [r7, #6]
900014a4:	4413      	add	r3, r2
900014a6:	009b      	lsls	r3, r3, #2
900014a8:	4423      	add	r3, r4
900014aa:	461a      	mov	r2, r3
900014ac:	683b      	ldr	r3, [r7, #0]
900014ae:	6013      	str	r3, [r2, #0]
}
900014b0:	bf00      	nop
900014b2:	3708      	adds	r7, #8
900014b4:	46bd      	mov	sp, r7
900014b6:	bdb0      	pop	{r4, r5, r7, pc}
900014b8:	20000078 	.word	0x20000078
900014bc:	200001a4 	.word	0x200001a4

900014c0 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
900014c0:	b580      	push	{r7, lr}
900014c2:	b086      	sub	sp, #24
900014c4:	af00      	add	r7, sp, #0
900014c6:	4603      	mov	r3, r0
900014c8:	80fb      	strh	r3, [r7, #6]
900014ca:	460b      	mov	r3, r1
900014cc:	80bb      	strh	r3, [r7, #4]
900014ce:	4613      	mov	r3, r2
900014d0:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
900014d2:	887b      	ldrh	r3, [r7, #2]
900014d4:	005b      	lsls	r3, r3, #1
900014d6:	f1c3 0303 	rsb	r3, r3, #3
900014da:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
900014dc:	2300      	movs	r3, #0
900014de:	613b      	str	r3, [r7, #16]
  current_y = Radius;
900014e0:	887b      	ldrh	r3, [r7, #2]
900014e2:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
900014e4:	4b44      	ldr	r3, [pc, #272]	; (900015f8 <BSP_LCD_FillCircle+0x138>)
900014e6:	681a      	ldr	r2, [r3, #0]
900014e8:	4944      	ldr	r1, [pc, #272]	; (900015fc <BSP_LCD_FillCircle+0x13c>)
900014ea:	4613      	mov	r3, r2
900014ec:	005b      	lsls	r3, r3, #1
900014ee:	4413      	add	r3, r2
900014f0:	009b      	lsls	r3, r3, #2
900014f2:	440b      	add	r3, r1
900014f4:	681b      	ldr	r3, [r3, #0]
900014f6:	4618      	mov	r0, r3
900014f8:	f7ff fb34 	bl	90000b64 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
900014fc:	e061      	b.n	900015c2 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
900014fe:	68fb      	ldr	r3, [r7, #12]
90001500:	2b00      	cmp	r3, #0
90001502:	d021      	beq.n	90001548 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
90001504:	68fb      	ldr	r3, [r7, #12]
90001506:	b29b      	uxth	r3, r3
90001508:	88fa      	ldrh	r2, [r7, #6]
9000150a:	1ad3      	subs	r3, r2, r3
9000150c:	b298      	uxth	r0, r3
9000150e:	693b      	ldr	r3, [r7, #16]
90001510:	b29a      	uxth	r2, r3
90001512:	88bb      	ldrh	r3, [r7, #4]
90001514:	4413      	add	r3, r2
90001516:	b299      	uxth	r1, r3
90001518:	68fb      	ldr	r3, [r7, #12]
9000151a:	b29b      	uxth	r3, r3
9000151c:	005b      	lsls	r3, r3, #1
9000151e:	b29b      	uxth	r3, r3
90001520:	461a      	mov	r2, r3
90001522:	f7ff fcb5 	bl	90000e90 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
90001526:	68fb      	ldr	r3, [r7, #12]
90001528:	b29b      	uxth	r3, r3
9000152a:	88fa      	ldrh	r2, [r7, #6]
9000152c:	1ad3      	subs	r3, r2, r3
9000152e:	b298      	uxth	r0, r3
90001530:	693b      	ldr	r3, [r7, #16]
90001532:	b29b      	uxth	r3, r3
90001534:	88ba      	ldrh	r2, [r7, #4]
90001536:	1ad3      	subs	r3, r2, r3
90001538:	b299      	uxth	r1, r3
9000153a:	68fb      	ldr	r3, [r7, #12]
9000153c:	b29b      	uxth	r3, r3
9000153e:	005b      	lsls	r3, r3, #1
90001540:	b29b      	uxth	r3, r3
90001542:	461a      	mov	r2, r3
90001544:	f7ff fca4 	bl	90000e90 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
90001548:	693b      	ldr	r3, [r7, #16]
9000154a:	2b00      	cmp	r3, #0
9000154c:	d021      	beq.n	90001592 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
9000154e:	693b      	ldr	r3, [r7, #16]
90001550:	b29b      	uxth	r3, r3
90001552:	88fa      	ldrh	r2, [r7, #6]
90001554:	1ad3      	subs	r3, r2, r3
90001556:	b298      	uxth	r0, r3
90001558:	68fb      	ldr	r3, [r7, #12]
9000155a:	b29b      	uxth	r3, r3
9000155c:	88ba      	ldrh	r2, [r7, #4]
9000155e:	1ad3      	subs	r3, r2, r3
90001560:	b299      	uxth	r1, r3
90001562:	693b      	ldr	r3, [r7, #16]
90001564:	b29b      	uxth	r3, r3
90001566:	005b      	lsls	r3, r3, #1
90001568:	b29b      	uxth	r3, r3
9000156a:	461a      	mov	r2, r3
9000156c:	f7ff fc90 	bl	90000e90 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
90001570:	693b      	ldr	r3, [r7, #16]
90001572:	b29b      	uxth	r3, r3
90001574:	88fa      	ldrh	r2, [r7, #6]
90001576:	1ad3      	subs	r3, r2, r3
90001578:	b298      	uxth	r0, r3
9000157a:	68fb      	ldr	r3, [r7, #12]
9000157c:	b29a      	uxth	r2, r3
9000157e:	88bb      	ldrh	r3, [r7, #4]
90001580:	4413      	add	r3, r2
90001582:	b299      	uxth	r1, r3
90001584:	693b      	ldr	r3, [r7, #16]
90001586:	b29b      	uxth	r3, r3
90001588:	005b      	lsls	r3, r3, #1
9000158a:	b29b      	uxth	r3, r3
9000158c:	461a      	mov	r2, r3
9000158e:	f7ff fc7f 	bl	90000e90 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
90001592:	697b      	ldr	r3, [r7, #20]
90001594:	2b00      	cmp	r3, #0
90001596:	da06      	bge.n	900015a6 <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
90001598:	693b      	ldr	r3, [r7, #16]
9000159a:	009a      	lsls	r2, r3, #2
9000159c:	697b      	ldr	r3, [r7, #20]
9000159e:	4413      	add	r3, r2
900015a0:	3306      	adds	r3, #6
900015a2:	617b      	str	r3, [r7, #20]
900015a4:	e00a      	b.n	900015bc <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
900015a6:	693a      	ldr	r2, [r7, #16]
900015a8:	68fb      	ldr	r3, [r7, #12]
900015aa:	1ad3      	subs	r3, r2, r3
900015ac:	009a      	lsls	r2, r3, #2
900015ae:	697b      	ldr	r3, [r7, #20]
900015b0:	4413      	add	r3, r2
900015b2:	330a      	adds	r3, #10
900015b4:	617b      	str	r3, [r7, #20]
      current_y--;
900015b6:	68fb      	ldr	r3, [r7, #12]
900015b8:	3b01      	subs	r3, #1
900015ba:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
900015bc:	693b      	ldr	r3, [r7, #16]
900015be:	3301      	adds	r3, #1
900015c0:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
900015c2:	693a      	ldr	r2, [r7, #16]
900015c4:	68fb      	ldr	r3, [r7, #12]
900015c6:	429a      	cmp	r2, r3
900015c8:	d999      	bls.n	900014fe <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
900015ca:	4b0b      	ldr	r3, [pc, #44]	; (900015f8 <BSP_LCD_FillCircle+0x138>)
900015cc:	681a      	ldr	r2, [r3, #0]
900015ce:	490b      	ldr	r1, [pc, #44]	; (900015fc <BSP_LCD_FillCircle+0x13c>)
900015d0:	4613      	mov	r3, r2
900015d2:	005b      	lsls	r3, r3, #1
900015d4:	4413      	add	r3, r2
900015d6:	009b      	lsls	r3, r3, #2
900015d8:	440b      	add	r3, r1
900015da:	681b      	ldr	r3, [r3, #0]
900015dc:	4618      	mov	r0, r3
900015de:	f7ff fac1 	bl	90000b64 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
900015e2:	887a      	ldrh	r2, [r7, #2]
900015e4:	88b9      	ldrh	r1, [r7, #4]
900015e6:	88fb      	ldrh	r3, [r7, #6]
900015e8:	4618      	mov	r0, r3
900015ea:	f7ff fd43 	bl	90001074 <BSP_LCD_DrawCircle>
}
900015ee:	bf00      	nop
900015f0:	3718      	adds	r7, #24
900015f2:	46bd      	mov	sp, r7
900015f4:	bd80      	pop	{r7, pc}
900015f6:	bf00      	nop
900015f8:	20000078 	.word	0x20000078
900015fc:	2000007c 	.word	0x2000007c

90001600 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
90001600:	b580      	push	{r7, lr}
90001602:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
90001604:	4b0a      	ldr	r3, [pc, #40]	; (90001630 <BSP_LCD_DisplayOn+0x30>)
90001606:	681b      	ldr	r3, [r3, #0]
90001608:	699a      	ldr	r2, [r3, #24]
9000160a:	4b09      	ldr	r3, [pc, #36]	; (90001630 <BSP_LCD_DisplayOn+0x30>)
9000160c:	681b      	ldr	r3, [r3, #0]
9000160e:	f042 0201 	orr.w	r2, r2, #1
90001612:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
90001614:	2201      	movs	r2, #1
90001616:	f44f 5180 	mov.w	r1, #4096	; 0x1000
9000161a:	4806      	ldr	r0, [pc, #24]	; (90001634 <BSP_LCD_DisplayOn+0x34>)
9000161c:	f001 fcb0 	bl	90002f80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
90001620:	2201      	movs	r2, #1
90001622:	2108      	movs	r1, #8
90001624:	4804      	ldr	r0, [pc, #16]	; (90001638 <BSP_LCD_DisplayOn+0x38>)
90001626:	f001 fcab 	bl	90002f80 <HAL_GPIO_WritePin>
}
9000162a:	bf00      	nop
9000162c:	bd80      	pop	{r7, pc}
9000162e:	bf00      	nop
90001630:	200001a4 	.word	0x200001a4
90001634:	40022000 	.word	0x40022000
90001638:	40022800 	.word	0x40022800

9000163c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
9000163c:	b580      	push	{r7, lr}
9000163e:	b090      	sub	sp, #64	; 0x40
90001640:	af00      	add	r7, sp, #0
90001642:	6078      	str	r0, [r7, #4]
90001644:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
90001646:	4b64      	ldr	r3, [pc, #400]	; (900017d8 <BSP_LCD_MspInit+0x19c>)
90001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000164a:	4a63      	ldr	r2, [pc, #396]	; (900017d8 <BSP_LCD_MspInit+0x19c>)
9000164c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
90001650:	6453      	str	r3, [r2, #68]	; 0x44
90001652:	4b61      	ldr	r3, [pc, #388]	; (900017d8 <BSP_LCD_MspInit+0x19c>)
90001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001656:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
9000165a:	62bb      	str	r3, [r7, #40]	; 0x28
9000165c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
9000165e:	4b5e      	ldr	r3, [pc, #376]	; (900017d8 <BSP_LCD_MspInit+0x19c>)
90001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001662:	4a5d      	ldr	r2, [pc, #372]	; (900017d8 <BSP_LCD_MspInit+0x19c>)
90001664:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
90001668:	6313      	str	r3, [r2, #48]	; 0x30
9000166a:	4b5b      	ldr	r3, [pc, #364]	; (900017d8 <BSP_LCD_MspInit+0x19c>)
9000166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000166e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
90001672:	627b      	str	r3, [r7, #36]	; 0x24
90001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
90001676:	4b58      	ldr	r3, [pc, #352]	; (900017d8 <BSP_LCD_MspInit+0x19c>)
90001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000167a:	4a57      	ldr	r2, [pc, #348]	; (900017d8 <BSP_LCD_MspInit+0x19c>)
9000167c:	f043 0310 	orr.w	r3, r3, #16
90001680:	6313      	str	r3, [r2, #48]	; 0x30
90001682:	4b55      	ldr	r3, [pc, #340]	; (900017d8 <BSP_LCD_MspInit+0x19c>)
90001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001686:	f003 0310 	and.w	r3, r3, #16
9000168a:	623b      	str	r3, [r7, #32]
9000168c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
9000168e:	4b52      	ldr	r3, [pc, #328]	; (900017d8 <BSP_LCD_MspInit+0x19c>)
90001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001692:	4a51      	ldr	r2, [pc, #324]	; (900017d8 <BSP_LCD_MspInit+0x19c>)
90001694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90001698:	6313      	str	r3, [r2, #48]	; 0x30
9000169a:	4b4f      	ldr	r3, [pc, #316]	; (900017d8 <BSP_LCD_MspInit+0x19c>)
9000169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000169e:	f003 0340 	and.w	r3, r3, #64	; 0x40
900016a2:	61fb      	str	r3, [r7, #28]
900016a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
900016a6:	4b4c      	ldr	r3, [pc, #304]	; (900017d8 <BSP_LCD_MspInit+0x19c>)
900016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900016aa:	4a4b      	ldr	r2, [pc, #300]	; (900017d8 <BSP_LCD_MspInit+0x19c>)
900016ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900016b0:	6313      	str	r3, [r2, #48]	; 0x30
900016b2:	4b49      	ldr	r3, [pc, #292]	; (900017d8 <BSP_LCD_MspInit+0x19c>)
900016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900016b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
900016ba:	61bb      	str	r3, [r7, #24]
900016bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
900016be:	4b46      	ldr	r3, [pc, #280]	; (900017d8 <BSP_LCD_MspInit+0x19c>)
900016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900016c2:	4a45      	ldr	r2, [pc, #276]	; (900017d8 <BSP_LCD_MspInit+0x19c>)
900016c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
900016c8:	6313      	str	r3, [r2, #48]	; 0x30
900016ca:	4b43      	ldr	r3, [pc, #268]	; (900017d8 <BSP_LCD_MspInit+0x19c>)
900016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900016ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
900016d2:	617b      	str	r3, [r7, #20]
900016d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
900016d6:	4b40      	ldr	r3, [pc, #256]	; (900017d8 <BSP_LCD_MspInit+0x19c>)
900016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900016da:	4a3f      	ldr	r2, [pc, #252]	; (900017d8 <BSP_LCD_MspInit+0x19c>)
900016dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
900016e0:	6313      	str	r3, [r2, #48]	; 0x30
900016e2:	4b3d      	ldr	r3, [pc, #244]	; (900017d8 <BSP_LCD_MspInit+0x19c>)
900016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900016e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
900016ea:	613b      	str	r3, [r7, #16]
900016ec:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
900016ee:	4b3a      	ldr	r3, [pc, #232]	; (900017d8 <BSP_LCD_MspInit+0x19c>)
900016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900016f2:	4a39      	ldr	r2, [pc, #228]	; (900017d8 <BSP_LCD_MspInit+0x19c>)
900016f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900016f8:	6313      	str	r3, [r2, #48]	; 0x30
900016fa:	4b37      	ldr	r3, [pc, #220]	; (900017d8 <BSP_LCD_MspInit+0x19c>)
900016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900016fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
90001702:	60fb      	str	r3, [r7, #12]
90001704:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
90001706:	4b34      	ldr	r3, [pc, #208]	; (900017d8 <BSP_LCD_MspInit+0x19c>)
90001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000170a:	4a33      	ldr	r2, [pc, #204]	; (900017d8 <BSP_LCD_MspInit+0x19c>)
9000170c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
90001710:	6313      	str	r3, [r2, #48]	; 0x30
90001712:	4b31      	ldr	r3, [pc, #196]	; (900017d8 <BSP_LCD_MspInit+0x19c>)
90001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
9000171a:	60bb      	str	r3, [r7, #8]
9000171c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
9000171e:	2310      	movs	r3, #16
90001720:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001722:	2302      	movs	r3, #2
90001724:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001726:	2300      	movs	r3, #0
90001728:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
9000172a:	2302      	movs	r3, #2
9000172c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
9000172e:	230e      	movs	r3, #14
90001730:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90001732:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001736:	4619      	mov	r1, r3
90001738:	4828      	ldr	r0, [pc, #160]	; (900017dc <BSP_LCD_MspInit+0x1a0>)
9000173a:	f001 f969 	bl	90002a10 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
9000173e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90001742:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001744:	2302      	movs	r3, #2
90001746:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
90001748:	2309      	movs	r3, #9
9000174a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
9000174c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001750:	4619      	mov	r1, r3
90001752:	4823      	ldr	r0, [pc, #140]	; (900017e0 <BSP_LCD_MspInit+0x1a4>)
90001754:	f001 f95c 	bl	90002a10 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
90001758:	f44f 4366 	mov.w	r3, #58880	; 0xe600
9000175c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
9000175e:	2302      	movs	r3, #2
90001760:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90001762:	230e      	movs	r3, #14
90001764:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90001766:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000176a:	4619      	mov	r1, r3
9000176c:	481d      	ldr	r0, [pc, #116]	; (900017e4 <BSP_LCD_MspInit+0x1a8>)
9000176e:	f001 f94f 	bl	90002a10 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
90001772:	f64e 73ff 	movw	r3, #61439	; 0xefff
90001776:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001778:	2302      	movs	r3, #2
9000177a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
9000177c:	230e      	movs	r3, #14
9000177e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
90001780:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001784:	4619      	mov	r1, r3
90001786:	4818      	ldr	r0, [pc, #96]	; (900017e8 <BSP_LCD_MspInit+0x1ac>)
90001788:	f001 f942 	bl	90002a10 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
9000178c:	23f7      	movs	r3, #247	; 0xf7
9000178e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001790:	2302      	movs	r3, #2
90001792:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90001794:	230e      	movs	r3, #14
90001796:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
90001798:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000179c:	4619      	mov	r1, r3
9000179e:	4813      	ldr	r0, [pc, #76]	; (900017ec <BSP_LCD_MspInit+0x1b0>)
900017a0:	f001 f936 	bl	90002a10 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
900017a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
900017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
900017aa:	2301      	movs	r3, #1
900017ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
900017ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900017b2:	4619      	mov	r1, r3
900017b4:	480b      	ldr	r0, [pc, #44]	; (900017e4 <BSP_LCD_MspInit+0x1a8>)
900017b6:	f001 f92b 	bl	90002a10 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
900017ba:	2308      	movs	r3, #8
900017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
900017be:	2301      	movs	r3, #1
900017c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
900017c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900017c6:	4619      	mov	r1, r3
900017c8:	4808      	ldr	r0, [pc, #32]	; (900017ec <BSP_LCD_MspInit+0x1b0>)
900017ca:	f001 f921 	bl	90002a10 <HAL_GPIO_Init>
}
900017ce:	bf00      	nop
900017d0:	3740      	adds	r7, #64	; 0x40
900017d2:	46bd      	mov	sp, r7
900017d4:	bd80      	pop	{r7, pc}
900017d6:	bf00      	nop
900017d8:	40023800 	.word	0x40023800
900017dc:	40021000 	.word	0x40021000
900017e0:	40021800 	.word	0x40021800
900017e4:	40022000 	.word	0x40022000
900017e8:	40022400 	.word	0x40022400
900017ec:	40022800 	.word	0x40022800

900017f0 <BSP_LCD_MspDeInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspDeInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
900017f0:	b580      	push	{r7, lr}
900017f2:	b088      	sub	sp, #32
900017f4:	af00      	add	r7, sp, #0
900017f6:	6078      	str	r0, [r7, #4]
900017f8:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Disable LTDC block */
  __HAL_LTDC_DISABLE(hltdc);
900017fa:	687b      	ldr	r3, [r7, #4]
900017fc:	681b      	ldr	r3, [r3, #0]
900017fe:	699a      	ldr	r2, [r3, #24]
90001800:	687b      	ldr	r3, [r7, #4]
90001802:	681b      	ldr	r3, [r3, #0]
90001804:	f022 0201 	bic.w	r2, r2, #1
90001808:	619a      	str	r2, [r3, #24]

  /* LTDC Pins deactivation */

  /* GPIOE deactivation */
  gpio_init_structure.Pin       = GPIO_PIN_4;
9000180a:	2310      	movs	r3, #16
9000180c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(GPIOE, gpio_init_structure.Pin);
9000180e:	68fb      	ldr	r3, [r7, #12]
90001810:	4619      	mov	r1, r3
90001812:	4816      	ldr	r0, [pc, #88]	; (9000186c <BSP_LCD_MspDeInit+0x7c>)
90001814:	f001 faa8 	bl	90002d68 <HAL_GPIO_DeInit>

  /* GPIOG deactivation */
  gpio_init_structure.Pin       = GPIO_PIN_12;
90001818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
9000181c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(GPIOG, gpio_init_structure.Pin);
9000181e:	68fb      	ldr	r3, [r7, #12]
90001820:	4619      	mov	r1, r3
90001822:	4813      	ldr	r0, [pc, #76]	; (90001870 <BSP_LCD_MspDeInit+0x80>)
90001824:	f001 faa0 	bl	90002d68 <HAL_GPIO_DeInit>

  /* GPIOI deactivation */
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_12 | \
90001828:	f44f 4377 	mov.w	r3, #63232	; 0xf700
9000182c:	60fb      	str	r3, [r7, #12]
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_DeInit(GPIOI, gpio_init_structure.Pin);
9000182e:	68fb      	ldr	r3, [r7, #12]
90001830:	4619      	mov	r1, r3
90001832:	4810      	ldr	r0, [pc, #64]	; (90001874 <BSP_LCD_MspDeInit+0x84>)
90001834:	f001 fa98 	bl	90002d68 <HAL_GPIO_DeInit>

  /* GPIOJ deactivation */
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
90001838:	f64e 73ff 	movw	r3, #61439	; 0xefff
9000183c:	60fb      	str	r3, [r7, #12]
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_DeInit(GPIOJ, gpio_init_structure.Pin);
9000183e:	68fb      	ldr	r3, [r7, #12]
90001840:	4619      	mov	r1, r3
90001842:	480d      	ldr	r0, [pc, #52]	; (90001878 <BSP_LCD_MspDeInit+0x88>)
90001844:	f001 fa90 	bl	90002d68 <HAL_GPIO_DeInit>

  /* GPIOK deactivation */
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
90001848:	23f7      	movs	r3, #247	; 0xf7
9000184a:	60fb      	str	r3, [r7, #12]
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  HAL_GPIO_DeInit(GPIOK, gpio_init_structure.Pin);
9000184c:	68fb      	ldr	r3, [r7, #12]
9000184e:	4619      	mov	r1, r3
90001850:	480a      	ldr	r0, [pc, #40]	; (9000187c <BSP_LCD_MspDeInit+0x8c>)
90001852:	f001 fa89 	bl	90002d68 <HAL_GPIO_DeInit>

  /* Disable LTDC clock */
  __HAL_RCC_LTDC_CLK_DISABLE();
90001856:	4b0a      	ldr	r3, [pc, #40]	; (90001880 <BSP_LCD_MspDeInit+0x90>)
90001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000185a:	4a09      	ldr	r2, [pc, #36]	; (90001880 <BSP_LCD_MspDeInit+0x90>)
9000185c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
90001860:	6453      	str	r3, [r2, #68]	; 0x44

  /* GPIO pins clock can be shut down in the application
     by surcharging this __weak function */
}
90001862:	bf00      	nop
90001864:	3720      	adds	r7, #32
90001866:	46bd      	mov	sp, r7
90001868:	bd80      	pop	{r7, pc}
9000186a:	bf00      	nop
9000186c:	40021000 	.word	0x40021000
90001870:	40021800 	.word	0x40021800
90001874:	40022000 	.word	0x40022000
90001878:	40022400 	.word	0x40022400
9000187c:	40022800 	.word	0x40022800
90001880:	40023800 	.word	0x40023800

90001884 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
90001884:	b580      	push	{r7, lr}
90001886:	b082      	sub	sp, #8
90001888:	af00      	add	r7, sp, #0
9000188a:	6078      	str	r0, [r7, #4]
9000188c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
9000188e:	4b0a      	ldr	r3, [pc, #40]	; (900018b8 <BSP_LCD_ClockConfig+0x34>)
90001890:	2208      	movs	r2, #8
90001892:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
90001894:	4b08      	ldr	r3, [pc, #32]	; (900018b8 <BSP_LCD_ClockConfig+0x34>)
90001896:	22c0      	movs	r2, #192	; 0xc0
90001898:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
9000189a:	4b07      	ldr	r3, [pc, #28]	; (900018b8 <BSP_LCD_ClockConfig+0x34>)
9000189c:	2205      	movs	r2, #5
9000189e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
900018a0:	4b05      	ldr	r3, [pc, #20]	; (900018b8 <BSP_LCD_ClockConfig+0x34>)
900018a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
900018a6:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
900018a8:	4803      	ldr	r0, [pc, #12]	; (900018b8 <BSP_LCD_ClockConfig+0x34>)
900018aa:	f002 fb15 	bl	90003ed8 <HAL_RCCEx_PeriphCLKConfig>
}
900018ae:	bf00      	nop
900018b0:	3708      	adds	r7, #8
900018b2:	46bd      	mov	sp, r7
900018b4:	bd80      	pop	{r7, pc}
900018b6:	bf00      	nop
900018b8:	20000094 	.word	0x20000094

900018bc <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
900018bc:	b580      	push	{r7, lr}
900018be:	b088      	sub	sp, #32
900018c0:	af00      	add	r7, sp, #0
900018c2:	4603      	mov	r3, r0
900018c4:	603a      	str	r2, [r7, #0]
900018c6:	80fb      	strh	r3, [r7, #6]
900018c8:	460b      	mov	r3, r1
900018ca:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
900018cc:	2300      	movs	r3, #0
900018ce:	61fb      	str	r3, [r7, #28]
900018d0:	2300      	movs	r3, #0
900018d2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
900018d4:	4b53      	ldr	r3, [pc, #332]	; (90001a24 <DrawChar+0x168>)
900018d6:	681a      	ldr	r2, [r3, #0]
900018d8:	4953      	ldr	r1, [pc, #332]	; (90001a28 <DrawChar+0x16c>)
900018da:	4613      	mov	r3, r2
900018dc:	005b      	lsls	r3, r3, #1
900018de:	4413      	add	r3, r2
900018e0:	009b      	lsls	r3, r3, #2
900018e2:	440b      	add	r3, r1
900018e4:	3308      	adds	r3, #8
900018e6:	681b      	ldr	r3, [r3, #0]
900018e8:	88db      	ldrh	r3, [r3, #6]
900018ea:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
900018ec:	4b4d      	ldr	r3, [pc, #308]	; (90001a24 <DrawChar+0x168>)
900018ee:	681a      	ldr	r2, [r3, #0]
900018f0:	494d      	ldr	r1, [pc, #308]	; (90001a28 <DrawChar+0x16c>)
900018f2:	4613      	mov	r3, r2
900018f4:	005b      	lsls	r3, r3, #1
900018f6:	4413      	add	r3, r2
900018f8:	009b      	lsls	r3, r3, #2
900018fa:	440b      	add	r3, r1
900018fc:	3308      	adds	r3, #8
900018fe:	681b      	ldr	r3, [r3, #0]
90001900:	889b      	ldrh	r3, [r3, #4]
90001902:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
90001904:	8a3b      	ldrh	r3, [r7, #16]
90001906:	3307      	adds	r3, #7
90001908:	2b00      	cmp	r3, #0
9000190a:	da00      	bge.n	9000190e <DrawChar+0x52>
9000190c:	3307      	adds	r3, #7
9000190e:	10db      	asrs	r3, r3, #3
90001910:	b2db      	uxtb	r3, r3
90001912:	00db      	lsls	r3, r3, #3
90001914:	b2da      	uxtb	r2, r3
90001916:	8a3b      	ldrh	r3, [r7, #16]
90001918:	b2db      	uxtb	r3, r3
9000191a:	1ad3      	subs	r3, r2, r3
9000191c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
9000191e:	2300      	movs	r3, #0
90001920:	61fb      	str	r3, [r7, #28]
90001922:	e076      	b.n	90001a12 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
90001924:	8a3b      	ldrh	r3, [r7, #16]
90001926:	3307      	adds	r3, #7
90001928:	2b00      	cmp	r3, #0
9000192a:	da00      	bge.n	9000192e <DrawChar+0x72>
9000192c:	3307      	adds	r3, #7
9000192e:	10db      	asrs	r3, r3, #3
90001930:	461a      	mov	r2, r3
90001932:	69fb      	ldr	r3, [r7, #28]
90001934:	fb03 f302 	mul.w	r3, r3, r2
90001938:	683a      	ldr	r2, [r7, #0]
9000193a:	4413      	add	r3, r2
9000193c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
9000193e:	8a3b      	ldrh	r3, [r7, #16]
90001940:	3307      	adds	r3, #7
90001942:	2b00      	cmp	r3, #0
90001944:	da00      	bge.n	90001948 <DrawChar+0x8c>
90001946:	3307      	adds	r3, #7
90001948:	10db      	asrs	r3, r3, #3
9000194a:	2b01      	cmp	r3, #1
9000194c:	d002      	beq.n	90001954 <DrawChar+0x98>
9000194e:	2b02      	cmp	r3, #2
90001950:	d004      	beq.n	9000195c <DrawChar+0xa0>
90001952:	e00c      	b.n	9000196e <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
90001954:	68bb      	ldr	r3, [r7, #8]
90001956:	781b      	ldrb	r3, [r3, #0]
90001958:	617b      	str	r3, [r7, #20]
      break;
9000195a:	e016      	b.n	9000198a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
9000195c:	68bb      	ldr	r3, [r7, #8]
9000195e:	781b      	ldrb	r3, [r3, #0]
90001960:	021b      	lsls	r3, r3, #8
90001962:	68ba      	ldr	r2, [r7, #8]
90001964:	3201      	adds	r2, #1
90001966:	7812      	ldrb	r2, [r2, #0]
90001968:	4313      	orrs	r3, r2
9000196a:	617b      	str	r3, [r7, #20]
      break;
9000196c:	e00d      	b.n	9000198a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
9000196e:	68bb      	ldr	r3, [r7, #8]
90001970:	781b      	ldrb	r3, [r3, #0]
90001972:	041a      	lsls	r2, r3, #16
90001974:	68bb      	ldr	r3, [r7, #8]
90001976:	3301      	adds	r3, #1
90001978:	781b      	ldrb	r3, [r3, #0]
9000197a:	021b      	lsls	r3, r3, #8
9000197c:	4313      	orrs	r3, r2
9000197e:	68ba      	ldr	r2, [r7, #8]
90001980:	3202      	adds	r2, #2
90001982:	7812      	ldrb	r2, [r2, #0]
90001984:	4313      	orrs	r3, r2
90001986:	617b      	str	r3, [r7, #20]
      break;
90001988:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
9000198a:	2300      	movs	r3, #0
9000198c:	61bb      	str	r3, [r7, #24]
9000198e:	e036      	b.n	900019fe <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
90001990:	8a3a      	ldrh	r2, [r7, #16]
90001992:	69bb      	ldr	r3, [r7, #24]
90001994:	1ad2      	subs	r2, r2, r3
90001996:	7bfb      	ldrb	r3, [r7, #15]
90001998:	4413      	add	r3, r2
9000199a:	3b01      	subs	r3, #1
9000199c:	2201      	movs	r2, #1
9000199e:	fa02 f303 	lsl.w	r3, r2, r3
900019a2:	461a      	mov	r2, r3
900019a4:	697b      	ldr	r3, [r7, #20]
900019a6:	4013      	ands	r3, r2
900019a8:	2b00      	cmp	r3, #0
900019aa:	d012      	beq.n	900019d2 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
900019ac:	69bb      	ldr	r3, [r7, #24]
900019ae:	b29a      	uxth	r2, r3
900019b0:	88fb      	ldrh	r3, [r7, #6]
900019b2:	4413      	add	r3, r2
900019b4:	b298      	uxth	r0, r3
900019b6:	4b1b      	ldr	r3, [pc, #108]	; (90001a24 <DrawChar+0x168>)
900019b8:	681a      	ldr	r2, [r3, #0]
900019ba:	491b      	ldr	r1, [pc, #108]	; (90001a28 <DrawChar+0x16c>)
900019bc:	4613      	mov	r3, r2
900019be:	005b      	lsls	r3, r3, #1
900019c0:	4413      	add	r3, r2
900019c2:	009b      	lsls	r3, r3, #2
900019c4:	440b      	add	r3, r1
900019c6:	681a      	ldr	r2, [r3, #0]
900019c8:	88bb      	ldrh	r3, [r7, #4]
900019ca:	4619      	mov	r1, r3
900019cc:	f7ff fd30 	bl	90001430 <BSP_LCD_DrawPixel>
900019d0:	e012      	b.n	900019f8 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
900019d2:	69bb      	ldr	r3, [r7, #24]
900019d4:	b29a      	uxth	r2, r3
900019d6:	88fb      	ldrh	r3, [r7, #6]
900019d8:	4413      	add	r3, r2
900019da:	b298      	uxth	r0, r3
900019dc:	4b11      	ldr	r3, [pc, #68]	; (90001a24 <DrawChar+0x168>)
900019de:	681a      	ldr	r2, [r3, #0]
900019e0:	4911      	ldr	r1, [pc, #68]	; (90001a28 <DrawChar+0x16c>)
900019e2:	4613      	mov	r3, r2
900019e4:	005b      	lsls	r3, r3, #1
900019e6:	4413      	add	r3, r2
900019e8:	009b      	lsls	r3, r3, #2
900019ea:	440b      	add	r3, r1
900019ec:	3304      	adds	r3, #4
900019ee:	681a      	ldr	r2, [r3, #0]
900019f0:	88bb      	ldrh	r3, [r7, #4]
900019f2:	4619      	mov	r1, r3
900019f4:	f7ff fd1c 	bl	90001430 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
900019f8:	69bb      	ldr	r3, [r7, #24]
900019fa:	3301      	adds	r3, #1
900019fc:	61bb      	str	r3, [r7, #24]
900019fe:	8a3b      	ldrh	r3, [r7, #16]
90001a00:	69ba      	ldr	r2, [r7, #24]
90001a02:	429a      	cmp	r2, r3
90001a04:	d3c4      	bcc.n	90001990 <DrawChar+0xd4>
      } 
    }
    Ypos++;
90001a06:	88bb      	ldrh	r3, [r7, #4]
90001a08:	3301      	adds	r3, #1
90001a0a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
90001a0c:	69fb      	ldr	r3, [r7, #28]
90001a0e:	3301      	adds	r3, #1
90001a10:	61fb      	str	r3, [r7, #28]
90001a12:	8a7b      	ldrh	r3, [r7, #18]
90001a14:	69fa      	ldr	r2, [r7, #28]
90001a16:	429a      	cmp	r2, r3
90001a18:	d384      	bcc.n	90001924 <DrawChar+0x68>
  }
}
90001a1a:	bf00      	nop
90001a1c:	bf00      	nop
90001a1e:	3720      	adds	r7, #32
90001a20:	46bd      	mov	sp, r7
90001a22:	bd80      	pop	{r7, pc}
90001a24:	20000078 	.word	0x20000078
90001a28:	2000007c 	.word	0x2000007c

90001a2c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
90001a2c:	b580      	push	{r7, lr}
90001a2e:	b086      	sub	sp, #24
90001a30:	af02      	add	r7, sp, #8
90001a32:	60f8      	str	r0, [r7, #12]
90001a34:	60b9      	str	r1, [r7, #8]
90001a36:	607a      	str	r2, [r7, #4]
90001a38:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
90001a3a:	4b1e      	ldr	r3, [pc, #120]	; (90001ab4 <LL_FillBuffer+0x88>)
90001a3c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
90001a40:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90001a42:	4b1d      	ldr	r3, [pc, #116]	; (90001ab8 <LL_FillBuffer+0x8c>)
90001a44:	681b      	ldr	r3, [r3, #0]
90001a46:	4a1d      	ldr	r2, [pc, #116]	; (90001abc <LL_FillBuffer+0x90>)
90001a48:	2134      	movs	r1, #52	; 0x34
90001a4a:	fb01 f303 	mul.w	r3, r1, r3
90001a4e:	4413      	add	r3, r2
90001a50:	3348      	adds	r3, #72	; 0x48
90001a52:	681b      	ldr	r3, [r3, #0]
90001a54:	2b02      	cmp	r3, #2
90001a56:	d103      	bne.n	90001a60 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
90001a58:	4b16      	ldr	r3, [pc, #88]	; (90001ab4 <LL_FillBuffer+0x88>)
90001a5a:	2202      	movs	r2, #2
90001a5c:	609a      	str	r2, [r3, #8]
90001a5e:	e002      	b.n	90001a66 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
90001a60:	4b14      	ldr	r3, [pc, #80]	; (90001ab4 <LL_FillBuffer+0x88>)
90001a62:	2200      	movs	r2, #0
90001a64:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
90001a66:	4a13      	ldr	r2, [pc, #76]	; (90001ab4 <LL_FillBuffer+0x88>)
90001a68:	69bb      	ldr	r3, [r7, #24]
90001a6a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
90001a6c:	4b11      	ldr	r3, [pc, #68]	; (90001ab4 <LL_FillBuffer+0x88>)
90001a6e:	4a14      	ldr	r2, [pc, #80]	; (90001ac0 <LL_FillBuffer+0x94>)
90001a70:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
90001a72:	4810      	ldr	r0, [pc, #64]	; (90001ab4 <LL_FillBuffer+0x88>)
90001a74:	f000 fd36 	bl	900024e4 <HAL_DMA2D_Init>
90001a78:	4603      	mov	r3, r0
90001a7a:	2b00      	cmp	r3, #0
90001a7c:	d115      	bne.n	90001aaa <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
90001a7e:	68f9      	ldr	r1, [r7, #12]
90001a80:	480c      	ldr	r0, [pc, #48]	; (90001ab4 <LL_FillBuffer+0x88>)
90001a82:	f000 fe97 	bl	900027b4 <HAL_DMA2D_ConfigLayer>
90001a86:	4603      	mov	r3, r0
90001a88:	2b00      	cmp	r3, #0
90001a8a:	d10e      	bne.n	90001aaa <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
90001a8c:	68ba      	ldr	r2, [r7, #8]
90001a8e:	683b      	ldr	r3, [r7, #0]
90001a90:	9300      	str	r3, [sp, #0]
90001a92:	687b      	ldr	r3, [r7, #4]
90001a94:	69f9      	ldr	r1, [r7, #28]
90001a96:	4807      	ldr	r0, [pc, #28]	; (90001ab4 <LL_FillBuffer+0x88>)
90001a98:	f000 fd78 	bl	9000258c <HAL_DMA2D_Start>
90001a9c:	4603      	mov	r3, r0
90001a9e:	2b00      	cmp	r3, #0
90001aa0:	d103      	bne.n	90001aaa <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
90001aa2:	210a      	movs	r1, #10
90001aa4:	4803      	ldr	r0, [pc, #12]	; (90001ab4 <LL_FillBuffer+0x88>)
90001aa6:	f000 fd9c 	bl	900025e2 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
90001aaa:	bf00      	nop
90001aac:	3710      	adds	r7, #16
90001aae:	46bd      	mov	sp, r7
90001ab0:	bd80      	pop	{r7, pc}
90001ab2:	bf00      	nop
90001ab4:	20000038 	.word	0x20000038
90001ab8:	20000078 	.word	0x20000078
90001abc:	200001a4 	.word	0x200001a4
90001ac0:	4002b000 	.word	0x4002b000

90001ac4 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
90001ac4:	b580      	push	{r7, lr}
90001ac6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
90001ac8:	4b29      	ldr	r3, [pc, #164]	; (90001b70 <BSP_SDRAM_Init+0xac>)
90001aca:	4a2a      	ldr	r2, [pc, #168]	; (90001b74 <BSP_SDRAM_Init+0xb0>)
90001acc:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
90001ace:	4b2a      	ldr	r3, [pc, #168]	; (90001b78 <BSP_SDRAM_Init+0xb4>)
90001ad0:	2202      	movs	r2, #2
90001ad2:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
90001ad4:	4b28      	ldr	r3, [pc, #160]	; (90001b78 <BSP_SDRAM_Init+0xb4>)
90001ad6:	2207      	movs	r2, #7
90001ad8:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
90001ada:	4b27      	ldr	r3, [pc, #156]	; (90001b78 <BSP_SDRAM_Init+0xb4>)
90001adc:	2204      	movs	r2, #4
90001ade:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
90001ae0:	4b25      	ldr	r3, [pc, #148]	; (90001b78 <BSP_SDRAM_Init+0xb4>)
90001ae2:	2207      	movs	r2, #7
90001ae4:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
90001ae6:	4b24      	ldr	r3, [pc, #144]	; (90001b78 <BSP_SDRAM_Init+0xb4>)
90001ae8:	2202      	movs	r2, #2
90001aea:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
90001aec:	4b22      	ldr	r3, [pc, #136]	; (90001b78 <BSP_SDRAM_Init+0xb4>)
90001aee:	2202      	movs	r2, #2
90001af0:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
90001af2:	4b21      	ldr	r3, [pc, #132]	; (90001b78 <BSP_SDRAM_Init+0xb4>)
90001af4:	2202      	movs	r2, #2
90001af6:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
90001af8:	4b1d      	ldr	r3, [pc, #116]	; (90001b70 <BSP_SDRAM_Init+0xac>)
90001afa:	2200      	movs	r2, #0
90001afc:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90001afe:	4b1c      	ldr	r3, [pc, #112]	; (90001b70 <BSP_SDRAM_Init+0xac>)
90001b00:	2200      	movs	r2, #0
90001b02:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
90001b04:	4b1a      	ldr	r3, [pc, #104]	; (90001b70 <BSP_SDRAM_Init+0xac>)
90001b06:	2204      	movs	r2, #4
90001b08:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
90001b0a:	4b19      	ldr	r3, [pc, #100]	; (90001b70 <BSP_SDRAM_Init+0xac>)
90001b0c:	2210      	movs	r2, #16
90001b0e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90001b10:	4b17      	ldr	r3, [pc, #92]	; (90001b70 <BSP_SDRAM_Init+0xac>)
90001b12:	2240      	movs	r2, #64	; 0x40
90001b14:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
90001b16:	4b16      	ldr	r3, [pc, #88]	; (90001b70 <BSP_SDRAM_Init+0xac>)
90001b18:	f44f 7280 	mov.w	r2, #256	; 0x100
90001b1c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90001b1e:	4b14      	ldr	r3, [pc, #80]	; (90001b70 <BSP_SDRAM_Init+0xac>)
90001b20:	2200      	movs	r2, #0
90001b22:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
90001b24:	4b12      	ldr	r3, [pc, #72]	; (90001b70 <BSP_SDRAM_Init+0xac>)
90001b26:	f44f 6200 	mov.w	r2, #2048	; 0x800
90001b2a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90001b2c:	4b10      	ldr	r3, [pc, #64]	; (90001b70 <BSP_SDRAM_Init+0xac>)
90001b2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
90001b32:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90001b34:	4b0e      	ldr	r3, [pc, #56]	; (90001b70 <BSP_SDRAM_Init+0xac>)
90001b36:	2200      	movs	r2, #0
90001b38:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
90001b3a:	2100      	movs	r1, #0
90001b3c:	480c      	ldr	r0, [pc, #48]	; (90001b70 <BSP_SDRAM_Init+0xac>)
90001b3e:	f000 f87f 	bl	90001c40 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
90001b42:	490d      	ldr	r1, [pc, #52]	; (90001b78 <BSP_SDRAM_Init+0xb4>)
90001b44:	480a      	ldr	r0, [pc, #40]	; (90001b70 <BSP_SDRAM_Init+0xac>)
90001b46:	f002 fdb7 	bl	900046b8 <HAL_SDRAM_Init>
90001b4a:	4603      	mov	r3, r0
90001b4c:	2b00      	cmp	r3, #0
90001b4e:	d003      	beq.n	90001b58 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
90001b50:	4b0a      	ldr	r3, [pc, #40]	; (90001b7c <BSP_SDRAM_Init+0xb8>)
90001b52:	2201      	movs	r2, #1
90001b54:	701a      	strb	r2, [r3, #0]
90001b56:	e002      	b.n	90001b5e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
90001b58:	4b08      	ldr	r3, [pc, #32]	; (90001b7c <BSP_SDRAM_Init+0xb8>)
90001b5a:	2200      	movs	r2, #0
90001b5c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
90001b5e:	f240 6003 	movw	r0, #1539	; 0x603
90001b62:	f000 f80d 	bl	90001b80 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
90001b66:	4b05      	ldr	r3, [pc, #20]	; (90001b7c <BSP_SDRAM_Init+0xb8>)
90001b68:	781b      	ldrb	r3, [r3, #0]
}
90001b6a:	4618      	mov	r0, r3
90001b6c:	bd80      	pop	{r7, pc}
90001b6e:	bf00      	nop
90001b70:	2000024c 	.word	0x2000024c
90001b74:	a0000140 	.word	0xa0000140
90001b78:	20000118 	.word	0x20000118
90001b7c:	2000000c 	.word	0x2000000c

90001b80 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
90001b80:	b580      	push	{r7, lr}
90001b82:	b084      	sub	sp, #16
90001b84:	af00      	add	r7, sp, #0
90001b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
90001b88:	2300      	movs	r3, #0
90001b8a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
90001b8c:	4b2a      	ldr	r3, [pc, #168]	; (90001c38 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001b8e:	2201      	movs	r2, #1
90001b90:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90001b92:	4b29      	ldr	r3, [pc, #164]	; (90001c38 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001b94:	2210      	movs	r2, #16
90001b96:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
90001b98:	4b27      	ldr	r3, [pc, #156]	; (90001c38 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001b9a:	2201      	movs	r2, #1
90001b9c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90001b9e:	4b26      	ldr	r3, [pc, #152]	; (90001c38 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001ba0:	2200      	movs	r2, #0
90001ba2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90001ba4:	f64f 72ff 	movw	r2, #65535	; 0xffff
90001ba8:	4923      	ldr	r1, [pc, #140]	; (90001c38 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001baa:	4824      	ldr	r0, [pc, #144]	; (90001c3c <BSP_SDRAM_Initialization_sequence+0xbc>)
90001bac:	f002 fdc2 	bl	90004734 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
90001bb0:	2001      	movs	r0, #1
90001bb2:	f000 f9a3 	bl	90001efc <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
90001bb6:	4b20      	ldr	r3, [pc, #128]	; (90001c38 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001bb8:	2202      	movs	r2, #2
90001bba:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90001bbc:	4b1e      	ldr	r3, [pc, #120]	; (90001c38 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001bbe:	2210      	movs	r2, #16
90001bc0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
90001bc2:	4b1d      	ldr	r3, [pc, #116]	; (90001c38 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001bc4:	2201      	movs	r2, #1
90001bc6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90001bc8:	4b1b      	ldr	r3, [pc, #108]	; (90001c38 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001bca:	2200      	movs	r2, #0
90001bcc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
90001bce:	f64f 72ff 	movw	r2, #65535	; 0xffff
90001bd2:	4919      	ldr	r1, [pc, #100]	; (90001c38 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001bd4:	4819      	ldr	r0, [pc, #100]	; (90001c3c <BSP_SDRAM_Initialization_sequence+0xbc>)
90001bd6:	f002 fdad 	bl	90004734 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
90001bda:	4b17      	ldr	r3, [pc, #92]	; (90001c38 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001bdc:	2203      	movs	r2, #3
90001bde:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90001be0:	4b15      	ldr	r3, [pc, #84]	; (90001c38 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001be2:	2210      	movs	r2, #16
90001be4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
90001be6:	4b14      	ldr	r3, [pc, #80]	; (90001c38 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001be8:	2208      	movs	r2, #8
90001bea:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90001bec:	4b12      	ldr	r3, [pc, #72]	; (90001c38 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001bee:	2200      	movs	r2, #0
90001bf0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90001bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
90001bf6:	4910      	ldr	r1, [pc, #64]	; (90001c38 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001bf8:	4810      	ldr	r0, [pc, #64]	; (90001c3c <BSP_SDRAM_Initialization_sequence+0xbc>)
90001bfa:	f002 fd9b 	bl	90004734 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
90001bfe:	f44f 7308 	mov.w	r3, #544	; 0x220
90001c02:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
90001c04:	4b0c      	ldr	r3, [pc, #48]	; (90001c38 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001c06:	2204      	movs	r2, #4
90001c08:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90001c0a:	4b0b      	ldr	r3, [pc, #44]	; (90001c38 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001c0c:	2210      	movs	r2, #16
90001c0e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
90001c10:	4b09      	ldr	r3, [pc, #36]	; (90001c38 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001c12:	2201      	movs	r2, #1
90001c14:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
90001c16:	68fb      	ldr	r3, [r7, #12]
90001c18:	4a07      	ldr	r2, [pc, #28]	; (90001c38 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001c1a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90001c1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
90001c20:	4905      	ldr	r1, [pc, #20]	; (90001c38 <BSP_SDRAM_Initialization_sequence+0xb8>)
90001c22:	4806      	ldr	r0, [pc, #24]	; (90001c3c <BSP_SDRAM_Initialization_sequence+0xbc>)
90001c24:	f002 fd86 	bl	90004734 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
90001c28:	6879      	ldr	r1, [r7, #4]
90001c2a:	4804      	ldr	r0, [pc, #16]	; (90001c3c <BSP_SDRAM_Initialization_sequence+0xbc>)
90001c2c:	f002 fdad 	bl	9000478a <HAL_SDRAM_ProgramRefreshRate>
}
90001c30:	bf00      	nop
90001c32:	3710      	adds	r7, #16
90001c34:	46bd      	mov	sp, r7
90001c36:	bd80      	pop	{r7, pc}
90001c38:	20000134 	.word	0x20000134
90001c3c:	2000024c 	.word	0x2000024c

90001c40 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
90001c40:	b580      	push	{r7, lr}
90001c42:	b090      	sub	sp, #64	; 0x40
90001c44:	af00      	add	r7, sp, #0
90001c46:	6078      	str	r0, [r7, #4]
90001c48:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
90001c4a:	4b70      	ldr	r3, [pc, #448]	; (90001e0c <BSP_SDRAM_MspInit+0x1cc>)
90001c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90001c4e:	4a6f      	ldr	r2, [pc, #444]	; (90001e0c <BSP_SDRAM_MspInit+0x1cc>)
90001c50:	f043 0301 	orr.w	r3, r3, #1
90001c54:	6393      	str	r3, [r2, #56]	; 0x38
90001c56:	4b6d      	ldr	r3, [pc, #436]	; (90001e0c <BSP_SDRAM_MspInit+0x1cc>)
90001c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90001c5a:	f003 0301 	and.w	r3, r3, #1
90001c5e:	62bb      	str	r3, [r7, #40]	; 0x28
90001c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
90001c62:	4b6a      	ldr	r3, [pc, #424]	; (90001e0c <BSP_SDRAM_MspInit+0x1cc>)
90001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001c66:	4a69      	ldr	r2, [pc, #420]	; (90001e0c <BSP_SDRAM_MspInit+0x1cc>)
90001c68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
90001c6c:	6313      	str	r3, [r2, #48]	; 0x30
90001c6e:	4b67      	ldr	r3, [pc, #412]	; (90001e0c <BSP_SDRAM_MspInit+0x1cc>)
90001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90001c76:	627b      	str	r3, [r7, #36]	; 0x24
90001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
90001c7a:	4b64      	ldr	r3, [pc, #400]	; (90001e0c <BSP_SDRAM_MspInit+0x1cc>)
90001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001c7e:	4a63      	ldr	r2, [pc, #396]	; (90001e0c <BSP_SDRAM_MspInit+0x1cc>)
90001c80:	f043 0304 	orr.w	r3, r3, #4
90001c84:	6313      	str	r3, [r2, #48]	; 0x30
90001c86:	4b61      	ldr	r3, [pc, #388]	; (90001e0c <BSP_SDRAM_MspInit+0x1cc>)
90001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001c8a:	f003 0304 	and.w	r3, r3, #4
90001c8e:	623b      	str	r3, [r7, #32]
90001c90:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
90001c92:	4b5e      	ldr	r3, [pc, #376]	; (90001e0c <BSP_SDRAM_MspInit+0x1cc>)
90001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001c96:	4a5d      	ldr	r2, [pc, #372]	; (90001e0c <BSP_SDRAM_MspInit+0x1cc>)
90001c98:	f043 0308 	orr.w	r3, r3, #8
90001c9c:	6313      	str	r3, [r2, #48]	; 0x30
90001c9e:	4b5b      	ldr	r3, [pc, #364]	; (90001e0c <BSP_SDRAM_MspInit+0x1cc>)
90001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001ca2:	f003 0308 	and.w	r3, r3, #8
90001ca6:	61fb      	str	r3, [r7, #28]
90001ca8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90001caa:	4b58      	ldr	r3, [pc, #352]	; (90001e0c <BSP_SDRAM_MspInit+0x1cc>)
90001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001cae:	4a57      	ldr	r2, [pc, #348]	; (90001e0c <BSP_SDRAM_MspInit+0x1cc>)
90001cb0:	f043 0310 	orr.w	r3, r3, #16
90001cb4:	6313      	str	r3, [r2, #48]	; 0x30
90001cb6:	4b55      	ldr	r3, [pc, #340]	; (90001e0c <BSP_SDRAM_MspInit+0x1cc>)
90001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001cba:	f003 0310 	and.w	r3, r3, #16
90001cbe:	61bb      	str	r3, [r7, #24]
90001cc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90001cc2:	4b52      	ldr	r3, [pc, #328]	; (90001e0c <BSP_SDRAM_MspInit+0x1cc>)
90001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001cc6:	4a51      	ldr	r2, [pc, #324]	; (90001e0c <BSP_SDRAM_MspInit+0x1cc>)
90001cc8:	f043 0320 	orr.w	r3, r3, #32
90001ccc:	6313      	str	r3, [r2, #48]	; 0x30
90001cce:	4b4f      	ldr	r3, [pc, #316]	; (90001e0c <BSP_SDRAM_MspInit+0x1cc>)
90001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001cd2:	f003 0320 	and.w	r3, r3, #32
90001cd6:	617b      	str	r3, [r7, #20]
90001cd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90001cda:	4b4c      	ldr	r3, [pc, #304]	; (90001e0c <BSP_SDRAM_MspInit+0x1cc>)
90001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001cde:	4a4b      	ldr	r2, [pc, #300]	; (90001e0c <BSP_SDRAM_MspInit+0x1cc>)
90001ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90001ce4:	6313      	str	r3, [r2, #48]	; 0x30
90001ce6:	4b49      	ldr	r3, [pc, #292]	; (90001e0c <BSP_SDRAM_MspInit+0x1cc>)
90001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
90001cee:	613b      	str	r3, [r7, #16]
90001cf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90001cf2:	4b46      	ldr	r3, [pc, #280]	; (90001e0c <BSP_SDRAM_MspInit+0x1cc>)
90001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001cf6:	4a45      	ldr	r2, [pc, #276]	; (90001e0c <BSP_SDRAM_MspInit+0x1cc>)
90001cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90001cfc:	6313      	str	r3, [r2, #48]	; 0x30
90001cfe:	4b43      	ldr	r3, [pc, #268]	; (90001e0c <BSP_SDRAM_MspInit+0x1cc>)
90001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
90001d06:	60fb      	str	r3, [r7, #12]
90001d08:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001d0a:	2302      	movs	r3, #2
90001d0c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
90001d0e:	2301      	movs	r3, #1
90001d10:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
90001d12:	2302      	movs	r3, #2
90001d14:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90001d16:	230c      	movs	r3, #12
90001d18:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
90001d1a:	2308      	movs	r3, #8
90001d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
90001d1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001d22:	4619      	mov	r1, r3
90001d24:	483a      	ldr	r0, [pc, #232]	; (90001e10 <BSP_SDRAM_MspInit+0x1d0>)
90001d26:	f000 fe73 	bl	90002a10 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
90001d2a:	f24c 7303 	movw	r3, #50947	; 0xc703
90001d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90001d30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001d34:	4619      	mov	r1, r3
90001d36:	4837      	ldr	r0, [pc, #220]	; (90001e14 <BSP_SDRAM_MspInit+0x1d4>)
90001d38:	f000 fe6a 	bl	90002a10 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90001d3c:	f64f 7383 	movw	r3, #65411	; 0xff83
90001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90001d42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001d46:	4619      	mov	r1, r3
90001d48:	4833      	ldr	r0, [pc, #204]	; (90001e18 <BSP_SDRAM_MspInit+0x1d8>)
90001d4a:	f000 fe61 	bl	90002a10 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90001d4e:	f64f 033f 	movw	r3, #63551	; 0xf83f
90001d52:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90001d54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001d58:	4619      	mov	r1, r3
90001d5a:	4830      	ldr	r0, [pc, #192]	; (90001e1c <BSP_SDRAM_MspInit+0x1dc>)
90001d5c:	f000 fe58 	bl	90002a10 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
90001d60:	f248 1333 	movw	r3, #33075	; 0x8133
90001d64:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90001d66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001d6a:	4619      	mov	r1, r3
90001d6c:	482c      	ldr	r0, [pc, #176]	; (90001e20 <BSP_SDRAM_MspInit+0x1e0>)
90001d6e:	f000 fe4f 	bl	90002a10 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
90001d72:	2328      	movs	r3, #40	; 0x28
90001d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
90001d76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001d7a:	4619      	mov	r1, r3
90001d7c:	4829      	ldr	r0, [pc, #164]	; (90001e24 <BSP_SDRAM_MspInit+0x1e4>)
90001d7e:	f000 fe47 	bl	90002a10 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
90001d82:	4b29      	ldr	r3, [pc, #164]	; (90001e28 <BSP_SDRAM_MspInit+0x1e8>)
90001d84:	2200      	movs	r2, #0
90001d86:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
90001d88:	4b27      	ldr	r3, [pc, #156]	; (90001e28 <BSP_SDRAM_MspInit+0x1e8>)
90001d8a:	2280      	movs	r2, #128	; 0x80
90001d8c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
90001d8e:	4b26      	ldr	r3, [pc, #152]	; (90001e28 <BSP_SDRAM_MspInit+0x1e8>)
90001d90:	f44f 7200 	mov.w	r2, #512	; 0x200
90001d94:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
90001d96:	4b24      	ldr	r3, [pc, #144]	; (90001e28 <BSP_SDRAM_MspInit+0x1e8>)
90001d98:	f44f 6280 	mov.w	r2, #1024	; 0x400
90001d9c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
90001d9e:	4b22      	ldr	r3, [pc, #136]	; (90001e28 <BSP_SDRAM_MspInit+0x1e8>)
90001da0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
90001da4:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
90001da6:	4b20      	ldr	r3, [pc, #128]	; (90001e28 <BSP_SDRAM_MspInit+0x1e8>)
90001da8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
90001dac:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
90001dae:	4b1e      	ldr	r3, [pc, #120]	; (90001e28 <BSP_SDRAM_MspInit+0x1e8>)
90001db0:	2200      	movs	r2, #0
90001db2:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
90001db4:	4b1c      	ldr	r3, [pc, #112]	; (90001e28 <BSP_SDRAM_MspInit+0x1e8>)
90001db6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
90001dba:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
90001dbc:	4b1a      	ldr	r3, [pc, #104]	; (90001e28 <BSP_SDRAM_MspInit+0x1e8>)
90001dbe:	2200      	movs	r2, #0
90001dc0:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
90001dc2:	4b19      	ldr	r3, [pc, #100]	; (90001e28 <BSP_SDRAM_MspInit+0x1e8>)
90001dc4:	2203      	movs	r2, #3
90001dc6:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
90001dc8:	4b17      	ldr	r3, [pc, #92]	; (90001e28 <BSP_SDRAM_MspInit+0x1e8>)
90001dca:	2200      	movs	r2, #0
90001dcc:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
90001dce:	4b16      	ldr	r3, [pc, #88]	; (90001e28 <BSP_SDRAM_MspInit+0x1e8>)
90001dd0:	2200      	movs	r2, #0
90001dd2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
90001dd4:	4b14      	ldr	r3, [pc, #80]	; (90001e28 <BSP_SDRAM_MspInit+0x1e8>)
90001dd6:	4a15      	ldr	r2, [pc, #84]	; (90001e2c <BSP_SDRAM_MspInit+0x1ec>)
90001dd8:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
90001dda:	687b      	ldr	r3, [r7, #4]
90001ddc:	4a12      	ldr	r2, [pc, #72]	; (90001e28 <BSP_SDRAM_MspInit+0x1e8>)
90001dde:	631a      	str	r2, [r3, #48]	; 0x30
90001de0:	4a11      	ldr	r2, [pc, #68]	; (90001e28 <BSP_SDRAM_MspInit+0x1e8>)
90001de2:	687b      	ldr	r3, [r7, #4]
90001de4:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
90001de6:	4810      	ldr	r0, [pc, #64]	; (90001e28 <BSP_SDRAM_MspInit+0x1e8>)
90001de8:	f000 fa6c 	bl	900022c4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
90001dec:	480e      	ldr	r0, [pc, #56]	; (90001e28 <BSP_SDRAM_MspInit+0x1e8>)
90001dee:	f000 f9bb 	bl	90002168 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
90001df2:	2200      	movs	r2, #0
90001df4:	210f      	movs	r1, #15
90001df6:	2038      	movs	r0, #56	; 0x38
90001df8:	f000 f97f 	bl	900020fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
90001dfc:	2038      	movs	r0, #56	; 0x38
90001dfe:	f000 f998 	bl	90002132 <HAL_NVIC_EnableIRQ>
}
90001e02:	bf00      	nop
90001e04:	3740      	adds	r7, #64	; 0x40
90001e06:	46bd      	mov	sp, r7
90001e08:	bd80      	pop	{r7, pc}
90001e0a:	bf00      	nop
90001e0c:	40023800 	.word	0x40023800
90001e10:	40020800 	.word	0x40020800
90001e14:	40020c00 	.word	0x40020c00
90001e18:	40021000 	.word	0x40021000
90001e1c:	40021400 	.word	0x40021400
90001e20:	40021800 	.word	0x40021800
90001e24:	40021c00 	.word	0x40021c00
90001e28:	20000144 	.word	0x20000144
90001e2c:	40026410 	.word	0x40026410

90001e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90001e30:	b580      	push	{r7, lr}
90001e32:	af00      	add	r7, sp, #0
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
90001e34:	4b08      	ldr	r3, [pc, #32]	; (90001e58 <HAL_Init+0x28>)
90001e36:	681b      	ldr	r3, [r3, #0]
90001e38:	4a07      	ldr	r2, [pc, #28]	; (90001e58 <HAL_Init+0x28>)
90001e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90001e3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90001e40:	2003      	movs	r0, #3
90001e42:	f000 f94f 	bl	900020e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
90001e46:	200f      	movs	r0, #15
90001e48:	f000 f808 	bl	90001e5c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
90001e4c:	f7fe fcb8 	bl	900007c0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
90001e50:	2300      	movs	r3, #0
}
90001e52:	4618      	mov	r0, r3
90001e54:	bd80      	pop	{r7, pc}
90001e56:	bf00      	nop
90001e58:	40023c00 	.word	0x40023c00

90001e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
90001e5c:	b580      	push	{r7, lr}
90001e5e:	b082      	sub	sp, #8
90001e60:	af00      	add	r7, sp, #0
90001e62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
90001e64:	4b12      	ldr	r3, [pc, #72]	; (90001eb0 <HAL_InitTick+0x54>)
90001e66:	681a      	ldr	r2, [r3, #0]
90001e68:	4b12      	ldr	r3, [pc, #72]	; (90001eb4 <HAL_InitTick+0x58>)
90001e6a:	781b      	ldrb	r3, [r3, #0]
90001e6c:	4619      	mov	r1, r3
90001e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
90001e72:	fbb3 f3f1 	udiv	r3, r3, r1
90001e76:	fbb2 f3f3 	udiv	r3, r2, r3
90001e7a:	4618      	mov	r0, r3
90001e7c:	f000 f967 	bl	9000214e <HAL_SYSTICK_Config>
90001e80:	4603      	mov	r3, r0
90001e82:	2b00      	cmp	r3, #0
90001e84:	d001      	beq.n	90001e8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
90001e86:	2301      	movs	r3, #1
90001e88:	e00e      	b.n	90001ea8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90001e8a:	687b      	ldr	r3, [r7, #4]
90001e8c:	2b0f      	cmp	r3, #15
90001e8e:	d80a      	bhi.n	90001ea6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
90001e90:	2200      	movs	r2, #0
90001e92:	6879      	ldr	r1, [r7, #4]
90001e94:	f04f 30ff 	mov.w	r0, #4294967295
90001e98:	f000 f92f 	bl	900020fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
90001e9c:	4a06      	ldr	r2, [pc, #24]	; (90001eb8 <HAL_InitTick+0x5c>)
90001e9e:	687b      	ldr	r3, [r7, #4]
90001ea0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
90001ea2:	2300      	movs	r3, #0
90001ea4:	e000      	b.n	90001ea8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
90001ea6:	2301      	movs	r3, #1
}
90001ea8:	4618      	mov	r0, r3
90001eaa:	3708      	adds	r7, #8
90001eac:	46bd      	mov	sp, r7
90001eae:	bd80      	pop	{r7, pc}
90001eb0:	20000000 	.word	0x20000000
90001eb4:	20000014 	.word	0x20000014
90001eb8:	20000010 	.word	0x20000010

90001ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
90001ebc:	b480      	push	{r7}
90001ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
90001ec0:	4b06      	ldr	r3, [pc, #24]	; (90001edc <HAL_IncTick+0x20>)
90001ec2:	781b      	ldrb	r3, [r3, #0]
90001ec4:	461a      	mov	r2, r3
90001ec6:	4b06      	ldr	r3, [pc, #24]	; (90001ee0 <HAL_IncTick+0x24>)
90001ec8:	681b      	ldr	r3, [r3, #0]
90001eca:	4413      	add	r3, r2
90001ecc:	4a04      	ldr	r2, [pc, #16]	; (90001ee0 <HAL_IncTick+0x24>)
90001ece:	6013      	str	r3, [r2, #0]
}
90001ed0:	bf00      	nop
90001ed2:	46bd      	mov	sp, r7
90001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
90001ed8:	4770      	bx	lr
90001eda:	bf00      	nop
90001edc:	20000014 	.word	0x20000014
90001ee0:	20000280 	.word	0x20000280

90001ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
90001ee4:	b480      	push	{r7}
90001ee6:	af00      	add	r7, sp, #0
  return uwTick;
90001ee8:	4b03      	ldr	r3, [pc, #12]	; (90001ef8 <HAL_GetTick+0x14>)
90001eea:	681b      	ldr	r3, [r3, #0]
}
90001eec:	4618      	mov	r0, r3
90001eee:	46bd      	mov	sp, r7
90001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
90001ef4:	4770      	bx	lr
90001ef6:	bf00      	nop
90001ef8:	20000280 	.word	0x20000280

90001efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
90001efc:	b580      	push	{r7, lr}
90001efe:	b084      	sub	sp, #16
90001f00:	af00      	add	r7, sp, #0
90001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
90001f04:	f7ff ffee 	bl	90001ee4 <HAL_GetTick>
90001f08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
90001f0a:	687b      	ldr	r3, [r7, #4]
90001f0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
90001f0e:	68fb      	ldr	r3, [r7, #12]
90001f10:	f1b3 3fff 	cmp.w	r3, #4294967295
90001f14:	d005      	beq.n	90001f22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
90001f16:	4b0a      	ldr	r3, [pc, #40]	; (90001f40 <HAL_Delay+0x44>)
90001f18:	781b      	ldrb	r3, [r3, #0]
90001f1a:	461a      	mov	r2, r3
90001f1c:	68fb      	ldr	r3, [r7, #12]
90001f1e:	4413      	add	r3, r2
90001f20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
90001f22:	bf00      	nop
90001f24:	f7ff ffde 	bl	90001ee4 <HAL_GetTick>
90001f28:	4602      	mov	r2, r0
90001f2a:	68bb      	ldr	r3, [r7, #8]
90001f2c:	1ad3      	subs	r3, r2, r3
90001f2e:	68fa      	ldr	r2, [r7, #12]
90001f30:	429a      	cmp	r2, r3
90001f32:	d8f7      	bhi.n	90001f24 <HAL_Delay+0x28>
  {
  }
}
90001f34:	bf00      	nop
90001f36:	bf00      	nop
90001f38:	3710      	adds	r7, #16
90001f3a:	46bd      	mov	sp, r7
90001f3c:	bd80      	pop	{r7, pc}
90001f3e:	bf00      	nop
90001f40:	20000014 	.word	0x20000014

90001f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
90001f44:	b480      	push	{r7}
90001f46:	b085      	sub	sp, #20
90001f48:	af00      	add	r7, sp, #0
90001f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
90001f4c:	687b      	ldr	r3, [r7, #4]
90001f4e:	f003 0307 	and.w	r3, r3, #7
90001f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90001f54:	4b0b      	ldr	r3, [pc, #44]	; (90001f84 <__NVIC_SetPriorityGrouping+0x40>)
90001f56:	68db      	ldr	r3, [r3, #12]
90001f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90001f5a:	68ba      	ldr	r2, [r7, #8]
90001f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
90001f60:	4013      	ands	r3, r2
90001f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90001f64:	68fb      	ldr	r3, [r7, #12]
90001f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
90001f68:	68bb      	ldr	r3, [r7, #8]
90001f6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
90001f6c:	4b06      	ldr	r3, [pc, #24]	; (90001f88 <__NVIC_SetPriorityGrouping+0x44>)
90001f6e:	4313      	orrs	r3, r2
90001f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
90001f72:	4a04      	ldr	r2, [pc, #16]	; (90001f84 <__NVIC_SetPriorityGrouping+0x40>)
90001f74:	68bb      	ldr	r3, [r7, #8]
90001f76:	60d3      	str	r3, [r2, #12]
}
90001f78:	bf00      	nop
90001f7a:	3714      	adds	r7, #20
90001f7c:	46bd      	mov	sp, r7
90001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
90001f82:	4770      	bx	lr
90001f84:	e000ed00 	.word	0xe000ed00
90001f88:	05fa0000 	.word	0x05fa0000

90001f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
90001f8c:	b480      	push	{r7}
90001f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90001f90:	4b04      	ldr	r3, [pc, #16]	; (90001fa4 <__NVIC_GetPriorityGrouping+0x18>)
90001f92:	68db      	ldr	r3, [r3, #12]
90001f94:	0a1b      	lsrs	r3, r3, #8
90001f96:	f003 0307 	and.w	r3, r3, #7
}
90001f9a:	4618      	mov	r0, r3
90001f9c:	46bd      	mov	sp, r7
90001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
90001fa2:	4770      	bx	lr
90001fa4:	e000ed00 	.word	0xe000ed00

90001fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
90001fa8:	b480      	push	{r7}
90001faa:	b083      	sub	sp, #12
90001fac:	af00      	add	r7, sp, #0
90001fae:	4603      	mov	r3, r0
90001fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
90001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
90001fb6:	2b00      	cmp	r3, #0
90001fb8:	db0b      	blt.n	90001fd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001fba:	79fb      	ldrb	r3, [r7, #7]
90001fbc:	f003 021f 	and.w	r2, r3, #31
90001fc0:	4907      	ldr	r1, [pc, #28]	; (90001fe0 <__NVIC_EnableIRQ+0x38>)
90001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
90001fc6:	095b      	lsrs	r3, r3, #5
90001fc8:	2001      	movs	r0, #1
90001fca:	fa00 f202 	lsl.w	r2, r0, r2
90001fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
90001fd2:	bf00      	nop
90001fd4:	370c      	adds	r7, #12
90001fd6:	46bd      	mov	sp, r7
90001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
90001fdc:	4770      	bx	lr
90001fde:	bf00      	nop
90001fe0:	e000e100 	.word	0xe000e100

90001fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
90001fe4:	b480      	push	{r7}
90001fe6:	b083      	sub	sp, #12
90001fe8:	af00      	add	r7, sp, #0
90001fea:	4603      	mov	r3, r0
90001fec:	6039      	str	r1, [r7, #0]
90001fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
90001ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
90001ff4:	2b00      	cmp	r3, #0
90001ff6:	db0a      	blt.n	9000200e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90001ff8:	683b      	ldr	r3, [r7, #0]
90001ffa:	b2da      	uxtb	r2, r3
90001ffc:	490c      	ldr	r1, [pc, #48]	; (90002030 <__NVIC_SetPriority+0x4c>)
90001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
90002002:	0112      	lsls	r2, r2, #4
90002004:	b2d2      	uxtb	r2, r2
90002006:	440b      	add	r3, r1
90002008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
9000200c:	e00a      	b.n	90002024 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000200e:	683b      	ldr	r3, [r7, #0]
90002010:	b2da      	uxtb	r2, r3
90002012:	4908      	ldr	r1, [pc, #32]	; (90002034 <__NVIC_SetPriority+0x50>)
90002014:	79fb      	ldrb	r3, [r7, #7]
90002016:	f003 030f 	and.w	r3, r3, #15
9000201a:	3b04      	subs	r3, #4
9000201c:	0112      	lsls	r2, r2, #4
9000201e:	b2d2      	uxtb	r2, r2
90002020:	440b      	add	r3, r1
90002022:	761a      	strb	r2, [r3, #24]
}
90002024:	bf00      	nop
90002026:	370c      	adds	r7, #12
90002028:	46bd      	mov	sp, r7
9000202a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000202e:	4770      	bx	lr
90002030:	e000e100 	.word	0xe000e100
90002034:	e000ed00 	.word	0xe000ed00

90002038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
90002038:	b480      	push	{r7}
9000203a:	b089      	sub	sp, #36	; 0x24
9000203c:	af00      	add	r7, sp, #0
9000203e:	60f8      	str	r0, [r7, #12]
90002040:	60b9      	str	r1, [r7, #8]
90002042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
90002044:	68fb      	ldr	r3, [r7, #12]
90002046:	f003 0307 	and.w	r3, r3, #7
9000204a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
9000204c:	69fb      	ldr	r3, [r7, #28]
9000204e:	f1c3 0307 	rsb	r3, r3, #7
90002052:	2b04      	cmp	r3, #4
90002054:	bf28      	it	cs
90002056:	2304      	movcs	r3, #4
90002058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
9000205a:	69fb      	ldr	r3, [r7, #28]
9000205c:	3304      	adds	r3, #4
9000205e:	2b06      	cmp	r3, #6
90002060:	d902      	bls.n	90002068 <NVIC_EncodePriority+0x30>
90002062:	69fb      	ldr	r3, [r7, #28]
90002064:	3b03      	subs	r3, #3
90002066:	e000      	b.n	9000206a <NVIC_EncodePriority+0x32>
90002068:	2300      	movs	r3, #0
9000206a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
9000206c:	f04f 32ff 	mov.w	r2, #4294967295
90002070:	69bb      	ldr	r3, [r7, #24]
90002072:	fa02 f303 	lsl.w	r3, r2, r3
90002076:	43da      	mvns	r2, r3
90002078:	68bb      	ldr	r3, [r7, #8]
9000207a:	401a      	ands	r2, r3
9000207c:	697b      	ldr	r3, [r7, #20]
9000207e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90002080:	f04f 31ff 	mov.w	r1, #4294967295
90002084:	697b      	ldr	r3, [r7, #20]
90002086:	fa01 f303 	lsl.w	r3, r1, r3
9000208a:	43d9      	mvns	r1, r3
9000208c:	687b      	ldr	r3, [r7, #4]
9000208e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90002090:	4313      	orrs	r3, r2
         );
}
90002092:	4618      	mov	r0, r3
90002094:	3724      	adds	r7, #36	; 0x24
90002096:	46bd      	mov	sp, r7
90002098:	f85d 7b04 	ldr.w	r7, [sp], #4
9000209c:	4770      	bx	lr
	...

900020a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
900020a0:	b580      	push	{r7, lr}
900020a2:	b082      	sub	sp, #8
900020a4:	af00      	add	r7, sp, #0
900020a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
900020a8:	687b      	ldr	r3, [r7, #4]
900020aa:	3b01      	subs	r3, #1
900020ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
900020b0:	d301      	bcc.n	900020b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
900020b2:	2301      	movs	r3, #1
900020b4:	e00f      	b.n	900020d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
900020b6:	4a0a      	ldr	r2, [pc, #40]	; (900020e0 <SysTick_Config+0x40>)
900020b8:	687b      	ldr	r3, [r7, #4]
900020ba:	3b01      	subs	r3, #1
900020bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
900020be:	210f      	movs	r1, #15
900020c0:	f04f 30ff 	mov.w	r0, #4294967295
900020c4:	f7ff ff8e 	bl	90001fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
900020c8:	4b05      	ldr	r3, [pc, #20]	; (900020e0 <SysTick_Config+0x40>)
900020ca:	2200      	movs	r2, #0
900020cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
900020ce:	4b04      	ldr	r3, [pc, #16]	; (900020e0 <SysTick_Config+0x40>)
900020d0:	2207      	movs	r2, #7
900020d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
900020d4:	2300      	movs	r3, #0
}
900020d6:	4618      	mov	r0, r3
900020d8:	3708      	adds	r7, #8
900020da:	46bd      	mov	sp, r7
900020dc:	bd80      	pop	{r7, pc}
900020de:	bf00      	nop
900020e0:	e000e010 	.word	0xe000e010

900020e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
900020e4:	b580      	push	{r7, lr}
900020e6:	b082      	sub	sp, #8
900020e8:	af00      	add	r7, sp, #0
900020ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
900020ec:	6878      	ldr	r0, [r7, #4]
900020ee:	f7ff ff29 	bl	90001f44 <__NVIC_SetPriorityGrouping>
}
900020f2:	bf00      	nop
900020f4:	3708      	adds	r7, #8
900020f6:	46bd      	mov	sp, r7
900020f8:	bd80      	pop	{r7, pc}

900020fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
900020fa:	b580      	push	{r7, lr}
900020fc:	b086      	sub	sp, #24
900020fe:	af00      	add	r7, sp, #0
90002100:	4603      	mov	r3, r0
90002102:	60b9      	str	r1, [r7, #8]
90002104:	607a      	str	r2, [r7, #4]
90002106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
90002108:	2300      	movs	r3, #0
9000210a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
9000210c:	f7ff ff3e 	bl	90001f8c <__NVIC_GetPriorityGrouping>
90002110:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
90002112:	687a      	ldr	r2, [r7, #4]
90002114:	68b9      	ldr	r1, [r7, #8]
90002116:	6978      	ldr	r0, [r7, #20]
90002118:	f7ff ff8e 	bl	90002038 <NVIC_EncodePriority>
9000211c:	4602      	mov	r2, r0
9000211e:	f997 300f 	ldrsb.w	r3, [r7, #15]
90002122:	4611      	mov	r1, r2
90002124:	4618      	mov	r0, r3
90002126:	f7ff ff5d 	bl	90001fe4 <__NVIC_SetPriority>
}
9000212a:	bf00      	nop
9000212c:	3718      	adds	r7, #24
9000212e:	46bd      	mov	sp, r7
90002130:	bd80      	pop	{r7, pc}

90002132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
90002132:	b580      	push	{r7, lr}
90002134:	b082      	sub	sp, #8
90002136:	af00      	add	r7, sp, #0
90002138:	4603      	mov	r3, r0
9000213a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
9000213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
90002140:	4618      	mov	r0, r3
90002142:	f7ff ff31 	bl	90001fa8 <__NVIC_EnableIRQ>
}
90002146:	bf00      	nop
90002148:	3708      	adds	r7, #8
9000214a:	46bd      	mov	sp, r7
9000214c:	bd80      	pop	{r7, pc}

9000214e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
9000214e:	b580      	push	{r7, lr}
90002150:	b082      	sub	sp, #8
90002152:	af00      	add	r7, sp, #0
90002154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
90002156:	6878      	ldr	r0, [r7, #4]
90002158:	f7ff ffa2 	bl	900020a0 <SysTick_Config>
9000215c:	4603      	mov	r3, r0
}
9000215e:	4618      	mov	r0, r3
90002160:	3708      	adds	r7, #8
90002162:	46bd      	mov	sp, r7
90002164:	bd80      	pop	{r7, pc}
	...

90002168 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
90002168:	b580      	push	{r7, lr}
9000216a:	b086      	sub	sp, #24
9000216c:	af00      	add	r7, sp, #0
9000216e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
90002170:	2300      	movs	r3, #0
90002172:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
90002174:	f7ff feb6 	bl	90001ee4 <HAL_GetTick>
90002178:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
9000217a:	687b      	ldr	r3, [r7, #4]
9000217c:	2b00      	cmp	r3, #0
9000217e:	d101      	bne.n	90002184 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
90002180:	2301      	movs	r3, #1
90002182:	e099      	b.n	900022b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
90002184:	687b      	ldr	r3, [r7, #4]
90002186:	2200      	movs	r2, #0
90002188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
9000218c:	687b      	ldr	r3, [r7, #4]
9000218e:	2202      	movs	r2, #2
90002190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
90002194:	687b      	ldr	r3, [r7, #4]
90002196:	681b      	ldr	r3, [r3, #0]
90002198:	681a      	ldr	r2, [r3, #0]
9000219a:	687b      	ldr	r3, [r7, #4]
9000219c:	681b      	ldr	r3, [r3, #0]
9000219e:	f022 0201 	bic.w	r2, r2, #1
900021a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
900021a4:	e00f      	b.n	900021c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
900021a6:	f7ff fe9d 	bl	90001ee4 <HAL_GetTick>
900021aa:	4602      	mov	r2, r0
900021ac:	693b      	ldr	r3, [r7, #16]
900021ae:	1ad3      	subs	r3, r2, r3
900021b0:	2b05      	cmp	r3, #5
900021b2:	d908      	bls.n	900021c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
900021b4:	687b      	ldr	r3, [r7, #4]
900021b6:	2220      	movs	r2, #32
900021b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
900021ba:	687b      	ldr	r3, [r7, #4]
900021bc:	2203      	movs	r2, #3
900021be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
900021c2:	2303      	movs	r3, #3
900021c4:	e078      	b.n	900022b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
900021c6:	687b      	ldr	r3, [r7, #4]
900021c8:	681b      	ldr	r3, [r3, #0]
900021ca:	681b      	ldr	r3, [r3, #0]
900021cc:	f003 0301 	and.w	r3, r3, #1
900021d0:	2b00      	cmp	r3, #0
900021d2:	d1e8      	bne.n	900021a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
900021d4:	687b      	ldr	r3, [r7, #4]
900021d6:	681b      	ldr	r3, [r3, #0]
900021d8:	681b      	ldr	r3, [r3, #0]
900021da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
900021dc:	697a      	ldr	r2, [r7, #20]
900021de:	4b38      	ldr	r3, [pc, #224]	; (900022c0 <HAL_DMA_Init+0x158>)
900021e0:	4013      	ands	r3, r2
900021e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
900021e4:	687b      	ldr	r3, [r7, #4]
900021e6:	685a      	ldr	r2, [r3, #4]
900021e8:	687b      	ldr	r3, [r7, #4]
900021ea:	689b      	ldr	r3, [r3, #8]
900021ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
900021ee:	687b      	ldr	r3, [r7, #4]
900021f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
900021f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
900021f4:	687b      	ldr	r3, [r7, #4]
900021f6:	691b      	ldr	r3, [r3, #16]
900021f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
900021fa:	687b      	ldr	r3, [r7, #4]
900021fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
900021fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
90002200:	687b      	ldr	r3, [r7, #4]
90002202:	699b      	ldr	r3, [r3, #24]
90002204:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
90002206:	687b      	ldr	r3, [r7, #4]
90002208:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
9000220a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
9000220c:	687b      	ldr	r3, [r7, #4]
9000220e:	6a1b      	ldr	r3, [r3, #32]
90002210:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
90002212:	697a      	ldr	r2, [r7, #20]
90002214:	4313      	orrs	r3, r2
90002216:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
90002218:	687b      	ldr	r3, [r7, #4]
9000221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000221c:	2b04      	cmp	r3, #4
9000221e:	d107      	bne.n	90002230 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
90002220:	687b      	ldr	r3, [r7, #4]
90002222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90002224:	687b      	ldr	r3, [r7, #4]
90002226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90002228:	4313      	orrs	r3, r2
9000222a:	697a      	ldr	r2, [r7, #20]
9000222c:	4313      	orrs	r3, r2
9000222e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
90002230:	687b      	ldr	r3, [r7, #4]
90002232:	681b      	ldr	r3, [r3, #0]
90002234:	697a      	ldr	r2, [r7, #20]
90002236:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
90002238:	687b      	ldr	r3, [r7, #4]
9000223a:	681b      	ldr	r3, [r3, #0]
9000223c:	695b      	ldr	r3, [r3, #20]
9000223e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
90002240:	697b      	ldr	r3, [r7, #20]
90002242:	f023 0307 	bic.w	r3, r3, #7
90002246:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
90002248:	687b      	ldr	r3, [r7, #4]
9000224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000224c:	697a      	ldr	r2, [r7, #20]
9000224e:	4313      	orrs	r3, r2
90002250:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
90002252:	687b      	ldr	r3, [r7, #4]
90002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002256:	2b04      	cmp	r3, #4
90002258:	d117      	bne.n	9000228a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
9000225a:	687b      	ldr	r3, [r7, #4]
9000225c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000225e:	697a      	ldr	r2, [r7, #20]
90002260:	4313      	orrs	r3, r2
90002262:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
90002264:	687b      	ldr	r3, [r7, #4]
90002266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002268:	2b00      	cmp	r3, #0
9000226a:	d00e      	beq.n	9000228a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
9000226c:	6878      	ldr	r0, [r7, #4]
9000226e:	f000 f8bd 	bl	900023ec <DMA_CheckFifoParam>
90002272:	4603      	mov	r3, r0
90002274:	2b00      	cmp	r3, #0
90002276:	d008      	beq.n	9000228a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
90002278:	687b      	ldr	r3, [r7, #4]
9000227a:	2240      	movs	r2, #64	; 0x40
9000227c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
9000227e:	687b      	ldr	r3, [r7, #4]
90002280:	2201      	movs	r2, #1
90002282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
90002286:	2301      	movs	r3, #1
90002288:	e016      	b.n	900022b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
9000228a:	687b      	ldr	r3, [r7, #4]
9000228c:	681b      	ldr	r3, [r3, #0]
9000228e:	697a      	ldr	r2, [r7, #20]
90002290:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
90002292:	6878      	ldr	r0, [r7, #4]
90002294:	f000 f874 	bl	90002380 <DMA_CalcBaseAndBitshift>
90002298:	4603      	mov	r3, r0
9000229a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
9000229c:	687b      	ldr	r3, [r7, #4]
9000229e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
900022a0:	223f      	movs	r2, #63	; 0x3f
900022a2:	409a      	lsls	r2, r3
900022a4:	68fb      	ldr	r3, [r7, #12]
900022a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
900022a8:	687b      	ldr	r3, [r7, #4]
900022aa:	2200      	movs	r2, #0
900022ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
900022ae:	687b      	ldr	r3, [r7, #4]
900022b0:	2201      	movs	r2, #1
900022b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
900022b6:	2300      	movs	r3, #0
}
900022b8:	4618      	mov	r0, r3
900022ba:	3718      	adds	r7, #24
900022bc:	46bd      	mov	sp, r7
900022be:	bd80      	pop	{r7, pc}
900022c0:	f010803f 	.word	0xf010803f

900022c4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
900022c4:	b580      	push	{r7, lr}
900022c6:	b084      	sub	sp, #16
900022c8:	af00      	add	r7, sp, #0
900022ca:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
900022cc:	687b      	ldr	r3, [r7, #4]
900022ce:	2b00      	cmp	r3, #0
900022d0:	d101      	bne.n	900022d6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
900022d2:	2301      	movs	r3, #1
900022d4:	e050      	b.n	90002378 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
900022d6:	687b      	ldr	r3, [r7, #4]
900022d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
900022dc:	b2db      	uxtb	r3, r3
900022de:	2b02      	cmp	r3, #2
900022e0:	d101      	bne.n	900022e6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
900022e2:	2302      	movs	r3, #2
900022e4:	e048      	b.n	90002378 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
900022e6:	687b      	ldr	r3, [r7, #4]
900022e8:	681b      	ldr	r3, [r3, #0]
900022ea:	681a      	ldr	r2, [r3, #0]
900022ec:	687b      	ldr	r3, [r7, #4]
900022ee:	681b      	ldr	r3, [r3, #0]
900022f0:	f022 0201 	bic.w	r2, r2, #1
900022f4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
900022f6:	687b      	ldr	r3, [r7, #4]
900022f8:	681b      	ldr	r3, [r3, #0]
900022fa:	2200      	movs	r2, #0
900022fc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
900022fe:	687b      	ldr	r3, [r7, #4]
90002300:	681b      	ldr	r3, [r3, #0]
90002302:	2200      	movs	r2, #0
90002304:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
90002306:	687b      	ldr	r3, [r7, #4]
90002308:	681b      	ldr	r3, [r3, #0]
9000230a:	2200      	movs	r2, #0
9000230c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
9000230e:	687b      	ldr	r3, [r7, #4]
90002310:	681b      	ldr	r3, [r3, #0]
90002312:	2200      	movs	r2, #0
90002314:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
90002316:	687b      	ldr	r3, [r7, #4]
90002318:	681b      	ldr	r3, [r3, #0]
9000231a:	2200      	movs	r2, #0
9000231c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
9000231e:	687b      	ldr	r3, [r7, #4]
90002320:	681b      	ldr	r3, [r3, #0]
90002322:	2221      	movs	r2, #33	; 0x21
90002324:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
90002326:	6878      	ldr	r0, [r7, #4]
90002328:	f000 f82a 	bl	90002380 <DMA_CalcBaseAndBitshift>
9000232c:	4603      	mov	r3, r0
9000232e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
90002330:	687b      	ldr	r3, [r7, #4]
90002332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90002334:	223f      	movs	r2, #63	; 0x3f
90002336:	409a      	lsls	r2, r3
90002338:	68fb      	ldr	r3, [r7, #12]
9000233a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
9000233c:	687b      	ldr	r3, [r7, #4]
9000233e:	2200      	movs	r2, #0
90002340:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
90002342:	687b      	ldr	r3, [r7, #4]
90002344:	2200      	movs	r2, #0
90002346:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
90002348:	687b      	ldr	r3, [r7, #4]
9000234a:	2200      	movs	r2, #0
9000234c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
9000234e:	687b      	ldr	r3, [r7, #4]
90002350:	2200      	movs	r2, #0
90002352:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
90002354:	687b      	ldr	r3, [r7, #4]
90002356:	2200      	movs	r2, #0
90002358:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
9000235a:	687b      	ldr	r3, [r7, #4]
9000235c:	2200      	movs	r2, #0
9000235e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
90002360:	687b      	ldr	r3, [r7, #4]
90002362:	2200      	movs	r2, #0
90002364:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
90002366:	687b      	ldr	r3, [r7, #4]
90002368:	2200      	movs	r2, #0
9000236a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
9000236e:	687b      	ldr	r3, [r7, #4]
90002370:	2200      	movs	r2, #0
90002372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
90002376:	2300      	movs	r3, #0
}
90002378:	4618      	mov	r0, r3
9000237a:	3710      	adds	r7, #16
9000237c:	46bd      	mov	sp, r7
9000237e:	bd80      	pop	{r7, pc}

90002380 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
90002380:	b480      	push	{r7}
90002382:	b085      	sub	sp, #20
90002384:	af00      	add	r7, sp, #0
90002386:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
90002388:	687b      	ldr	r3, [r7, #4]
9000238a:	681b      	ldr	r3, [r3, #0]
9000238c:	b2db      	uxtb	r3, r3
9000238e:	3b10      	subs	r3, #16
90002390:	4a13      	ldr	r2, [pc, #76]	; (900023e0 <DMA_CalcBaseAndBitshift+0x60>)
90002392:	fba2 2303 	umull	r2, r3, r2, r3
90002396:	091b      	lsrs	r3, r3, #4
90002398:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
9000239a:	4a12      	ldr	r2, [pc, #72]	; (900023e4 <DMA_CalcBaseAndBitshift+0x64>)
9000239c:	68fb      	ldr	r3, [r7, #12]
9000239e:	4413      	add	r3, r2
900023a0:	781b      	ldrb	r3, [r3, #0]
900023a2:	461a      	mov	r2, r3
900023a4:	687b      	ldr	r3, [r7, #4]
900023a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
900023a8:	68fb      	ldr	r3, [r7, #12]
900023aa:	2b03      	cmp	r3, #3
900023ac:	d908      	bls.n	900023c0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
900023ae:	687b      	ldr	r3, [r7, #4]
900023b0:	681b      	ldr	r3, [r3, #0]
900023b2:	461a      	mov	r2, r3
900023b4:	4b0c      	ldr	r3, [pc, #48]	; (900023e8 <DMA_CalcBaseAndBitshift+0x68>)
900023b6:	4013      	ands	r3, r2
900023b8:	1d1a      	adds	r2, r3, #4
900023ba:	687b      	ldr	r3, [r7, #4]
900023bc:	659a      	str	r2, [r3, #88]	; 0x58
900023be:	e006      	b.n	900023ce <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
900023c0:	687b      	ldr	r3, [r7, #4]
900023c2:	681b      	ldr	r3, [r3, #0]
900023c4:	461a      	mov	r2, r3
900023c6:	4b08      	ldr	r3, [pc, #32]	; (900023e8 <DMA_CalcBaseAndBitshift+0x68>)
900023c8:	4013      	ands	r3, r2
900023ca:	687a      	ldr	r2, [r7, #4]
900023cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
900023ce:	687b      	ldr	r3, [r7, #4]
900023d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
900023d2:	4618      	mov	r0, r3
900023d4:	3714      	adds	r7, #20
900023d6:	46bd      	mov	sp, r7
900023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
900023dc:	4770      	bx	lr
900023de:	bf00      	nop
900023e0:	aaaaaaab 	.word	0xaaaaaaab
900023e4:	9000673c 	.word	0x9000673c
900023e8:	fffffc00 	.word	0xfffffc00

900023ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
900023ec:	b480      	push	{r7}
900023ee:	b085      	sub	sp, #20
900023f0:	af00      	add	r7, sp, #0
900023f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
900023f4:	2300      	movs	r3, #0
900023f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
900023f8:	687b      	ldr	r3, [r7, #4]
900023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900023fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
900023fe:	687b      	ldr	r3, [r7, #4]
90002400:	699b      	ldr	r3, [r3, #24]
90002402:	2b00      	cmp	r3, #0
90002404:	d11f      	bne.n	90002446 <DMA_CheckFifoParam+0x5a>
90002406:	68bb      	ldr	r3, [r7, #8]
90002408:	2b03      	cmp	r3, #3
9000240a:	d856      	bhi.n	900024ba <DMA_CheckFifoParam+0xce>
9000240c:	a201      	add	r2, pc, #4	; (adr r2, 90002414 <DMA_CheckFifoParam+0x28>)
9000240e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90002412:	bf00      	nop
90002414:	90002425 	.word	0x90002425
90002418:	90002437 	.word	0x90002437
9000241c:	90002425 	.word	0x90002425
90002420:	900024bb 	.word	0x900024bb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
90002424:	687b      	ldr	r3, [r7, #4]
90002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002428:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
9000242c:	2b00      	cmp	r3, #0
9000242e:	d046      	beq.n	900024be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
90002430:	2301      	movs	r3, #1
90002432:	73fb      	strb	r3, [r7, #15]
      }
      break;
90002434:	e043      	b.n	900024be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
90002436:	687b      	ldr	r3, [r7, #4]
90002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000243a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
9000243e:	d140      	bne.n	900024c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
90002440:	2301      	movs	r3, #1
90002442:	73fb      	strb	r3, [r7, #15]
      }
      break;
90002444:	e03d      	b.n	900024c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
90002446:	687b      	ldr	r3, [r7, #4]
90002448:	699b      	ldr	r3, [r3, #24]
9000244a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
9000244e:	d121      	bne.n	90002494 <DMA_CheckFifoParam+0xa8>
90002450:	68bb      	ldr	r3, [r7, #8]
90002452:	2b03      	cmp	r3, #3
90002454:	d837      	bhi.n	900024c6 <DMA_CheckFifoParam+0xda>
90002456:	a201      	add	r2, pc, #4	; (adr r2, 9000245c <DMA_CheckFifoParam+0x70>)
90002458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000245c:	9000246d 	.word	0x9000246d
90002460:	90002473 	.word	0x90002473
90002464:	9000246d 	.word	0x9000246d
90002468:	90002485 	.word	0x90002485
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
9000246c:	2301      	movs	r3, #1
9000246e:	73fb      	strb	r3, [r7, #15]
      break;
90002470:	e030      	b.n	900024d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
90002472:	687b      	ldr	r3, [r7, #4]
90002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002476:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
9000247a:	2b00      	cmp	r3, #0
9000247c:	d025      	beq.n	900024ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
9000247e:	2301      	movs	r3, #1
90002480:	73fb      	strb	r3, [r7, #15]
      }
      break;
90002482:	e022      	b.n	900024ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
90002484:	687b      	ldr	r3, [r7, #4]
90002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002488:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
9000248c:	d11f      	bne.n	900024ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
9000248e:	2301      	movs	r3, #1
90002490:	73fb      	strb	r3, [r7, #15]
      }
      break;   
90002492:	e01c      	b.n	900024ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
90002494:	68bb      	ldr	r3, [r7, #8]
90002496:	2b02      	cmp	r3, #2
90002498:	d903      	bls.n	900024a2 <DMA_CheckFifoParam+0xb6>
9000249a:	68bb      	ldr	r3, [r7, #8]
9000249c:	2b03      	cmp	r3, #3
9000249e:	d003      	beq.n	900024a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
900024a0:	e018      	b.n	900024d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
900024a2:	2301      	movs	r3, #1
900024a4:	73fb      	strb	r3, [r7, #15]
      break;
900024a6:	e015      	b.n	900024d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
900024a8:	687b      	ldr	r3, [r7, #4]
900024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900024ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
900024b0:	2b00      	cmp	r3, #0
900024b2:	d00e      	beq.n	900024d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
900024b4:	2301      	movs	r3, #1
900024b6:	73fb      	strb	r3, [r7, #15]
      break;
900024b8:	e00b      	b.n	900024d2 <DMA_CheckFifoParam+0xe6>
      break;
900024ba:	bf00      	nop
900024bc:	e00a      	b.n	900024d4 <DMA_CheckFifoParam+0xe8>
      break;
900024be:	bf00      	nop
900024c0:	e008      	b.n	900024d4 <DMA_CheckFifoParam+0xe8>
      break;
900024c2:	bf00      	nop
900024c4:	e006      	b.n	900024d4 <DMA_CheckFifoParam+0xe8>
      break;
900024c6:	bf00      	nop
900024c8:	e004      	b.n	900024d4 <DMA_CheckFifoParam+0xe8>
      break;
900024ca:	bf00      	nop
900024cc:	e002      	b.n	900024d4 <DMA_CheckFifoParam+0xe8>
      break;   
900024ce:	bf00      	nop
900024d0:	e000      	b.n	900024d4 <DMA_CheckFifoParam+0xe8>
      break;
900024d2:	bf00      	nop
    }
  } 
  
  return status; 
900024d4:	7bfb      	ldrb	r3, [r7, #15]
}
900024d6:	4618      	mov	r0, r3
900024d8:	3714      	adds	r7, #20
900024da:	46bd      	mov	sp, r7
900024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
900024e0:	4770      	bx	lr
900024e2:	bf00      	nop

900024e4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
900024e4:	b580      	push	{r7, lr}
900024e6:	b082      	sub	sp, #8
900024e8:	af00      	add	r7, sp, #0
900024ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
900024ec:	687b      	ldr	r3, [r7, #4]
900024ee:	2b00      	cmp	r3, #0
900024f0:	d101      	bne.n	900024f6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
900024f2:	2301      	movs	r3, #1
900024f4:	e039      	b.n	9000256a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
900024f6:	687b      	ldr	r3, [r7, #4]
900024f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
900024fc:	b2db      	uxtb	r3, r3
900024fe:	2b00      	cmp	r3, #0
90002500:	d106      	bne.n	90002510 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
90002502:	687b      	ldr	r3, [r7, #4]
90002504:	2200      	movs	r2, #0
90002506:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
9000250a:	6878      	ldr	r0, [r7, #4]
9000250c:	f000 f834 	bl	90002578 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90002510:	687b      	ldr	r3, [r7, #4]
90002512:	2202      	movs	r2, #2
90002514:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
90002518:	687b      	ldr	r3, [r7, #4]
9000251a:	681b      	ldr	r3, [r3, #0]
9000251c:	681b      	ldr	r3, [r3, #0]
9000251e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
90002522:	687b      	ldr	r3, [r7, #4]
90002524:	685a      	ldr	r2, [r3, #4]
90002526:	687b      	ldr	r3, [r7, #4]
90002528:	681b      	ldr	r3, [r3, #0]
9000252a:	430a      	orrs	r2, r1
9000252c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
9000252e:	687b      	ldr	r3, [r7, #4]
90002530:	681b      	ldr	r3, [r3, #0]
90002532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90002534:	f023 0107 	bic.w	r1, r3, #7
90002538:	687b      	ldr	r3, [r7, #4]
9000253a:	689a      	ldr	r2, [r3, #8]
9000253c:	687b      	ldr	r3, [r7, #4]
9000253e:	681b      	ldr	r3, [r3, #0]
90002540:	430a      	orrs	r2, r1
90002542:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90002544:	687b      	ldr	r3, [r7, #4]
90002546:	681b      	ldr	r3, [r3, #0]
90002548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
9000254a:	4b0a      	ldr	r3, [pc, #40]	; (90002574 <HAL_DMA2D_Init+0x90>)
9000254c:	4013      	ands	r3, r2
9000254e:	687a      	ldr	r2, [r7, #4]
90002550:	68d1      	ldr	r1, [r2, #12]
90002552:	687a      	ldr	r2, [r7, #4]
90002554:	6812      	ldr	r2, [r2, #0]
90002556:	430b      	orrs	r3, r1
90002558:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
9000255a:	687b      	ldr	r3, [r7, #4]
9000255c:	2200      	movs	r2, #0
9000255e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90002560:	687b      	ldr	r3, [r7, #4]
90002562:	2201      	movs	r2, #1
90002564:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
90002568:	2300      	movs	r3, #0
}
9000256a:	4618      	mov	r0, r3
9000256c:	3708      	adds	r7, #8
9000256e:	46bd      	mov	sp, r7
90002570:	bd80      	pop	{r7, pc}
90002572:	bf00      	nop
90002574:	ffffc000 	.word	0xffffc000

90002578 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
90002578:	b480      	push	{r7}
9000257a:	b083      	sub	sp, #12
9000257c:	af00      	add	r7, sp, #0
9000257e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
90002580:	bf00      	nop
90002582:	370c      	adds	r7, #12
90002584:	46bd      	mov	sp, r7
90002586:	f85d 7b04 	ldr.w	r7, [sp], #4
9000258a:	4770      	bx	lr

9000258c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
9000258c:	b580      	push	{r7, lr}
9000258e:	b086      	sub	sp, #24
90002590:	af02      	add	r7, sp, #8
90002592:	60f8      	str	r0, [r7, #12]
90002594:	60b9      	str	r1, [r7, #8]
90002596:	607a      	str	r2, [r7, #4]
90002598:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
9000259a:	68fb      	ldr	r3, [r7, #12]
9000259c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
900025a0:	2b01      	cmp	r3, #1
900025a2:	d101      	bne.n	900025a8 <HAL_DMA2D_Start+0x1c>
900025a4:	2302      	movs	r3, #2
900025a6:	e018      	b.n	900025da <HAL_DMA2D_Start+0x4e>
900025a8:	68fb      	ldr	r3, [r7, #12]
900025aa:	2201      	movs	r2, #1
900025ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900025b0:	68fb      	ldr	r3, [r7, #12]
900025b2:	2202      	movs	r2, #2
900025b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
900025b8:	69bb      	ldr	r3, [r7, #24]
900025ba:	9300      	str	r3, [sp, #0]
900025bc:	683b      	ldr	r3, [r7, #0]
900025be:	687a      	ldr	r2, [r7, #4]
900025c0:	68b9      	ldr	r1, [r7, #8]
900025c2:	68f8      	ldr	r0, [r7, #12]
900025c4:	f000 f988 	bl	900028d8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
900025c8:	68fb      	ldr	r3, [r7, #12]
900025ca:	681b      	ldr	r3, [r3, #0]
900025cc:	681a      	ldr	r2, [r3, #0]
900025ce:	68fb      	ldr	r3, [r7, #12]
900025d0:	681b      	ldr	r3, [r3, #0]
900025d2:	f042 0201 	orr.w	r2, r2, #1
900025d6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
900025d8:	2300      	movs	r3, #0
}
900025da:	4618      	mov	r0, r3
900025dc:	3710      	adds	r7, #16
900025de:	46bd      	mov	sp, r7
900025e0:	bd80      	pop	{r7, pc}

900025e2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
900025e2:	b580      	push	{r7, lr}
900025e4:	b086      	sub	sp, #24
900025e6:	af00      	add	r7, sp, #0
900025e8:	6078      	str	r0, [r7, #4]
900025ea:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
900025ec:	2300      	movs	r3, #0
900025ee:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
900025f0:	687b      	ldr	r3, [r7, #4]
900025f2:	681b      	ldr	r3, [r3, #0]
900025f4:	681b      	ldr	r3, [r3, #0]
900025f6:	f003 0301 	and.w	r3, r3, #1
900025fa:	2b00      	cmp	r3, #0
900025fc:	d056      	beq.n	900026ac <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
900025fe:	f7ff fc71 	bl	90001ee4 <HAL_GetTick>
90002602:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
90002604:	e04b      	b.n	9000269e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
90002606:	687b      	ldr	r3, [r7, #4]
90002608:	681b      	ldr	r3, [r3, #0]
9000260a:	685b      	ldr	r3, [r3, #4]
9000260c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
9000260e:	68fb      	ldr	r3, [r7, #12]
90002610:	f003 0321 	and.w	r3, r3, #33	; 0x21
90002614:	2b00      	cmp	r3, #0
90002616:	d023      	beq.n	90002660 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
90002618:	68fb      	ldr	r3, [r7, #12]
9000261a:	f003 0320 	and.w	r3, r3, #32
9000261e:	2b00      	cmp	r3, #0
90002620:	d005      	beq.n	9000262e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90002622:	687b      	ldr	r3, [r7, #4]
90002624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90002626:	f043 0202 	orr.w	r2, r3, #2
9000262a:	687b      	ldr	r3, [r7, #4]
9000262c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
9000262e:	68fb      	ldr	r3, [r7, #12]
90002630:	f003 0301 	and.w	r3, r3, #1
90002634:	2b00      	cmp	r3, #0
90002636:	d005      	beq.n	90002644 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90002638:	687b      	ldr	r3, [r7, #4]
9000263a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000263c:	f043 0201 	orr.w	r2, r3, #1
90002640:	687b      	ldr	r3, [r7, #4]
90002642:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90002644:	687b      	ldr	r3, [r7, #4]
90002646:	681b      	ldr	r3, [r3, #0]
90002648:	2221      	movs	r2, #33	; 0x21
9000264a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
9000264c:	687b      	ldr	r3, [r7, #4]
9000264e:	2204      	movs	r2, #4
90002650:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
90002654:	687b      	ldr	r3, [r7, #4]
90002656:	2200      	movs	r2, #0
90002658:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
9000265c:	2301      	movs	r3, #1
9000265e:	e0a5      	b.n	900027ac <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90002660:	683b      	ldr	r3, [r7, #0]
90002662:	f1b3 3fff 	cmp.w	r3, #4294967295
90002666:	d01a      	beq.n	9000269e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90002668:	f7ff fc3c 	bl	90001ee4 <HAL_GetTick>
9000266c:	4602      	mov	r2, r0
9000266e:	697b      	ldr	r3, [r7, #20]
90002670:	1ad3      	subs	r3, r2, r3
90002672:	683a      	ldr	r2, [r7, #0]
90002674:	429a      	cmp	r2, r3
90002676:	d302      	bcc.n	9000267e <HAL_DMA2D_PollForTransfer+0x9c>
90002678:	683b      	ldr	r3, [r7, #0]
9000267a:	2b00      	cmp	r3, #0
9000267c:	d10f      	bne.n	9000269e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
9000267e:	687b      	ldr	r3, [r7, #4]
90002680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90002682:	f043 0220 	orr.w	r2, r3, #32
90002686:	687b      	ldr	r3, [r7, #4]
90002688:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
9000268a:	687b      	ldr	r3, [r7, #4]
9000268c:	2203      	movs	r2, #3
9000268e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
90002692:	687b      	ldr	r3, [r7, #4]
90002694:	2200      	movs	r2, #0
90002696:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
9000269a:	2303      	movs	r3, #3
9000269c:	e086      	b.n	900027ac <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
9000269e:	687b      	ldr	r3, [r7, #4]
900026a0:	681b      	ldr	r3, [r3, #0]
900026a2:	685b      	ldr	r3, [r3, #4]
900026a4:	f003 0302 	and.w	r3, r3, #2
900026a8:	2b00      	cmp	r3, #0
900026aa:	d0ac      	beq.n	90002606 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
900026ac:	687b      	ldr	r3, [r7, #4]
900026ae:	681b      	ldr	r3, [r3, #0]
900026b0:	69db      	ldr	r3, [r3, #28]
900026b2:	f003 0320 	and.w	r3, r3, #32
900026b6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
900026b8:	687b      	ldr	r3, [r7, #4]
900026ba:	681b      	ldr	r3, [r3, #0]
900026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900026be:	f003 0320 	and.w	r3, r3, #32
900026c2:	693a      	ldr	r2, [r7, #16]
900026c4:	4313      	orrs	r3, r2
900026c6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
900026c8:	693b      	ldr	r3, [r7, #16]
900026ca:	2b00      	cmp	r3, #0
900026cc:	d061      	beq.n	90002792 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
900026ce:	f7ff fc09 	bl	90001ee4 <HAL_GetTick>
900026d2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
900026d4:	e056      	b.n	90002784 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
900026d6:	687b      	ldr	r3, [r7, #4]
900026d8:	681b      	ldr	r3, [r3, #0]
900026da:	685b      	ldr	r3, [r3, #4]
900026dc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
900026de:	68fb      	ldr	r3, [r7, #12]
900026e0:	f003 0329 	and.w	r3, r3, #41	; 0x29
900026e4:	2b00      	cmp	r3, #0
900026e6:	d02e      	beq.n	90002746 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
900026e8:	68fb      	ldr	r3, [r7, #12]
900026ea:	f003 0308 	and.w	r3, r3, #8
900026ee:	2b00      	cmp	r3, #0
900026f0:	d005      	beq.n	900026fe <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
900026f2:	687b      	ldr	r3, [r7, #4]
900026f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900026f6:	f043 0204 	orr.w	r2, r3, #4
900026fa:	687b      	ldr	r3, [r7, #4]
900026fc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
900026fe:	68fb      	ldr	r3, [r7, #12]
90002700:	f003 0320 	and.w	r3, r3, #32
90002704:	2b00      	cmp	r3, #0
90002706:	d005      	beq.n	90002714 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90002708:	687b      	ldr	r3, [r7, #4]
9000270a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000270c:	f043 0202 	orr.w	r2, r3, #2
90002710:	687b      	ldr	r3, [r7, #4]
90002712:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
90002714:	68fb      	ldr	r3, [r7, #12]
90002716:	f003 0301 	and.w	r3, r3, #1
9000271a:	2b00      	cmp	r3, #0
9000271c:	d005      	beq.n	9000272a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
9000271e:	687b      	ldr	r3, [r7, #4]
90002720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90002722:	f043 0201 	orr.w	r2, r3, #1
90002726:	687b      	ldr	r3, [r7, #4]
90002728:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
9000272a:	687b      	ldr	r3, [r7, #4]
9000272c:	681b      	ldr	r3, [r3, #0]
9000272e:	2229      	movs	r2, #41	; 0x29
90002730:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
90002732:	687b      	ldr	r3, [r7, #4]
90002734:	2204      	movs	r2, #4
90002736:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
9000273a:	687b      	ldr	r3, [r7, #4]
9000273c:	2200      	movs	r2, #0
9000273e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
90002742:	2301      	movs	r3, #1
90002744:	e032      	b.n	900027ac <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90002746:	683b      	ldr	r3, [r7, #0]
90002748:	f1b3 3fff 	cmp.w	r3, #4294967295
9000274c:	d01a      	beq.n	90002784 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000274e:	f7ff fbc9 	bl	90001ee4 <HAL_GetTick>
90002752:	4602      	mov	r2, r0
90002754:	697b      	ldr	r3, [r7, #20]
90002756:	1ad3      	subs	r3, r2, r3
90002758:	683a      	ldr	r2, [r7, #0]
9000275a:	429a      	cmp	r2, r3
9000275c:	d302      	bcc.n	90002764 <HAL_DMA2D_PollForTransfer+0x182>
9000275e:	683b      	ldr	r3, [r7, #0]
90002760:	2b00      	cmp	r3, #0
90002762:	d10f      	bne.n	90002784 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90002764:	687b      	ldr	r3, [r7, #4]
90002766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90002768:	f043 0220 	orr.w	r2, r3, #32
9000276c:	687b      	ldr	r3, [r7, #4]
9000276e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
90002770:	687b      	ldr	r3, [r7, #4]
90002772:	2203      	movs	r2, #3
90002774:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
90002778:	687b      	ldr	r3, [r7, #4]
9000277a:	2200      	movs	r2, #0
9000277c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
90002780:	2303      	movs	r3, #3
90002782:	e013      	b.n	900027ac <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
90002784:	687b      	ldr	r3, [r7, #4]
90002786:	681b      	ldr	r3, [r3, #0]
90002788:	685b      	ldr	r3, [r3, #4]
9000278a:	f003 0310 	and.w	r3, r3, #16
9000278e:	2b00      	cmp	r3, #0
90002790:	d0a1      	beq.n	900026d6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
90002792:	687b      	ldr	r3, [r7, #4]
90002794:	681b      	ldr	r3, [r3, #0]
90002796:	2212      	movs	r2, #18
90002798:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
9000279a:	687b      	ldr	r3, [r7, #4]
9000279c:	2201      	movs	r2, #1
9000279e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
900027a2:	687b      	ldr	r3, [r7, #4]
900027a4:	2200      	movs	r2, #0
900027a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
900027aa:	2300      	movs	r3, #0
}
900027ac:	4618      	mov	r0, r3
900027ae:	3718      	adds	r7, #24
900027b0:	46bd      	mov	sp, r7
900027b2:	bd80      	pop	{r7, pc}

900027b4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
900027b4:	b480      	push	{r7}
900027b6:	b087      	sub	sp, #28
900027b8:	af00      	add	r7, sp, #0
900027ba:	6078      	str	r0, [r7, #4]
900027bc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
900027be:	687b      	ldr	r3, [r7, #4]
900027c0:	685b      	ldr	r3, [r3, #4]
900027c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
900027c6:	687b      	ldr	r3, [r7, #4]
900027c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
900027cc:	2b01      	cmp	r3, #1
900027ce:	d101      	bne.n	900027d4 <HAL_DMA2D_ConfigLayer+0x20>
900027d0:	2302      	movs	r3, #2
900027d2:	e079      	b.n	900028c8 <HAL_DMA2D_ConfigLayer+0x114>
900027d4:	687b      	ldr	r3, [r7, #4]
900027d6:	2201      	movs	r2, #1
900027d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900027dc:	687b      	ldr	r3, [r7, #4]
900027de:	2202      	movs	r2, #2
900027e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
900027e4:	683b      	ldr	r3, [r7, #0]
900027e6:	011b      	lsls	r3, r3, #4
900027e8:	3318      	adds	r3, #24
900027ea:	687a      	ldr	r2, [r7, #4]
900027ec:	4413      	add	r3, r2
900027ee:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
900027f0:	693b      	ldr	r3, [r7, #16]
900027f2:	685a      	ldr	r2, [r3, #4]
900027f4:	693b      	ldr	r3, [r7, #16]
900027f6:	689b      	ldr	r3, [r3, #8]
900027f8:	041b      	lsls	r3, r3, #16
900027fa:	4313      	orrs	r3, r2
900027fc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
900027fe:	4b35      	ldr	r3, [pc, #212]	; (900028d4 <HAL_DMA2D_ConfigLayer+0x120>)
90002800:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90002802:	693b      	ldr	r3, [r7, #16]
90002804:	685b      	ldr	r3, [r3, #4]
90002806:	2b0a      	cmp	r3, #10
90002808:	d003      	beq.n	90002812 <HAL_DMA2D_ConfigLayer+0x5e>
9000280a:	693b      	ldr	r3, [r7, #16]
9000280c:	685b      	ldr	r3, [r3, #4]
9000280e:	2b09      	cmp	r3, #9
90002810:	d107      	bne.n	90002822 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90002812:	693b      	ldr	r3, [r7, #16]
90002814:	68db      	ldr	r3, [r3, #12]
90002816:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
9000281a:	697a      	ldr	r2, [r7, #20]
9000281c:	4313      	orrs	r3, r2
9000281e:	617b      	str	r3, [r7, #20]
90002820:	e005      	b.n	9000282e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
90002822:	693b      	ldr	r3, [r7, #16]
90002824:	68db      	ldr	r3, [r3, #12]
90002826:	061b      	lsls	r3, r3, #24
90002828:	697a      	ldr	r2, [r7, #20]
9000282a:	4313      	orrs	r3, r2
9000282c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
9000282e:	683b      	ldr	r3, [r7, #0]
90002830:	2b00      	cmp	r3, #0
90002832:	d120      	bne.n	90002876 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90002834:	687b      	ldr	r3, [r7, #4]
90002836:	681b      	ldr	r3, [r3, #0]
90002838:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000283a:	68fb      	ldr	r3, [r7, #12]
9000283c:	43db      	mvns	r3, r3
9000283e:	ea02 0103 	and.w	r1, r2, r3
90002842:	687b      	ldr	r3, [r7, #4]
90002844:	681b      	ldr	r3, [r3, #0]
90002846:	697a      	ldr	r2, [r7, #20]
90002848:	430a      	orrs	r2, r1
9000284a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
9000284c:	687b      	ldr	r3, [r7, #4]
9000284e:	681b      	ldr	r3, [r3, #0]
90002850:	693a      	ldr	r2, [r7, #16]
90002852:	6812      	ldr	r2, [r2, #0]
90002854:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90002856:	693b      	ldr	r3, [r7, #16]
90002858:	685b      	ldr	r3, [r3, #4]
9000285a:	2b0a      	cmp	r3, #10
9000285c:	d003      	beq.n	90002866 <HAL_DMA2D_ConfigLayer+0xb2>
9000285e:	693b      	ldr	r3, [r7, #16]
90002860:	685b      	ldr	r3, [r3, #4]
90002862:	2b09      	cmp	r3, #9
90002864:	d127      	bne.n	900028b6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90002866:	693b      	ldr	r3, [r7, #16]
90002868:	68da      	ldr	r2, [r3, #12]
9000286a:	687b      	ldr	r3, [r7, #4]
9000286c:	681b      	ldr	r3, [r3, #0]
9000286e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
90002872:	629a      	str	r2, [r3, #40]	; 0x28
90002874:	e01f      	b.n	900028b6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90002876:	687b      	ldr	r3, [r7, #4]
90002878:	681b      	ldr	r3, [r3, #0]
9000287a:	69da      	ldr	r2, [r3, #28]
9000287c:	68fb      	ldr	r3, [r7, #12]
9000287e:	43db      	mvns	r3, r3
90002880:	ea02 0103 	and.w	r1, r2, r3
90002884:	687b      	ldr	r3, [r7, #4]
90002886:	681b      	ldr	r3, [r3, #0]
90002888:	697a      	ldr	r2, [r7, #20]
9000288a:	430a      	orrs	r2, r1
9000288c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
9000288e:	687b      	ldr	r3, [r7, #4]
90002890:	681b      	ldr	r3, [r3, #0]
90002892:	693a      	ldr	r2, [r7, #16]
90002894:	6812      	ldr	r2, [r2, #0]
90002896:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90002898:	693b      	ldr	r3, [r7, #16]
9000289a:	685b      	ldr	r3, [r3, #4]
9000289c:	2b0a      	cmp	r3, #10
9000289e:	d003      	beq.n	900028a8 <HAL_DMA2D_ConfigLayer+0xf4>
900028a0:	693b      	ldr	r3, [r7, #16]
900028a2:	685b      	ldr	r3, [r3, #4]
900028a4:	2b09      	cmp	r3, #9
900028a6:	d106      	bne.n	900028b6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
900028a8:	693b      	ldr	r3, [r7, #16]
900028aa:	68da      	ldr	r2, [r3, #12]
900028ac:	687b      	ldr	r3, [r7, #4]
900028ae:	681b      	ldr	r3, [r3, #0]
900028b0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
900028b4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
900028b6:	687b      	ldr	r3, [r7, #4]
900028b8:	2201      	movs	r2, #1
900028ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
900028be:	687b      	ldr	r3, [r7, #4]
900028c0:	2200      	movs	r2, #0
900028c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
900028c6:	2300      	movs	r3, #0
}
900028c8:	4618      	mov	r0, r3
900028ca:	371c      	adds	r7, #28
900028cc:	46bd      	mov	sp, r7
900028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
900028d2:	4770      	bx	lr
900028d4:	ff03000f 	.word	0xff03000f

900028d8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
900028d8:	b480      	push	{r7}
900028da:	b08b      	sub	sp, #44	; 0x2c
900028dc:	af00      	add	r7, sp, #0
900028de:	60f8      	str	r0, [r7, #12]
900028e0:	60b9      	str	r1, [r7, #8]
900028e2:	607a      	str	r2, [r7, #4]
900028e4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
900028e6:	68fb      	ldr	r3, [r7, #12]
900028e8:	681b      	ldr	r3, [r3, #0]
900028ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900028ec:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
900028f0:	683b      	ldr	r3, [r7, #0]
900028f2:	041a      	lsls	r2, r3, #16
900028f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900028f6:	431a      	orrs	r2, r3
900028f8:	68fb      	ldr	r3, [r7, #12]
900028fa:	681b      	ldr	r3, [r3, #0]
900028fc:	430a      	orrs	r2, r1
900028fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
90002900:	68fb      	ldr	r3, [r7, #12]
90002902:	681b      	ldr	r3, [r3, #0]
90002904:	687a      	ldr	r2, [r7, #4]
90002906:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
90002908:	68fb      	ldr	r3, [r7, #12]
9000290a:	685b      	ldr	r3, [r3, #4]
9000290c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
90002910:	d174      	bne.n	900029fc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
90002912:	68bb      	ldr	r3, [r7, #8]
90002914:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
90002918:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
9000291a:	68bb      	ldr	r3, [r7, #8]
9000291c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
90002920:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
90002922:	68bb      	ldr	r3, [r7, #8]
90002924:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90002928:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
9000292a:	68bb      	ldr	r3, [r7, #8]
9000292c:	b2db      	uxtb	r3, r3
9000292e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
90002930:	68fb      	ldr	r3, [r7, #12]
90002932:	689b      	ldr	r3, [r3, #8]
90002934:	2b00      	cmp	r3, #0
90002936:	d108      	bne.n	9000294a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
90002938:	69ba      	ldr	r2, [r7, #24]
9000293a:	69fb      	ldr	r3, [r7, #28]
9000293c:	431a      	orrs	r2, r3
9000293e:	6a3b      	ldr	r3, [r7, #32]
90002940:	4313      	orrs	r3, r2
90002942:	697a      	ldr	r2, [r7, #20]
90002944:	4313      	orrs	r3, r2
90002946:	627b      	str	r3, [r7, #36]	; 0x24
90002948:	e053      	b.n	900029f2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
9000294a:	68fb      	ldr	r3, [r7, #12]
9000294c:	689b      	ldr	r3, [r3, #8]
9000294e:	2b01      	cmp	r3, #1
90002950:	d106      	bne.n	90002960 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
90002952:	69ba      	ldr	r2, [r7, #24]
90002954:	69fb      	ldr	r3, [r7, #28]
90002956:	4313      	orrs	r3, r2
90002958:	697a      	ldr	r2, [r7, #20]
9000295a:	4313      	orrs	r3, r2
9000295c:	627b      	str	r3, [r7, #36]	; 0x24
9000295e:	e048      	b.n	900029f2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
90002960:	68fb      	ldr	r3, [r7, #12]
90002962:	689b      	ldr	r3, [r3, #8]
90002964:	2b02      	cmp	r3, #2
90002966:	d111      	bne.n	9000298c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
90002968:	69fb      	ldr	r3, [r7, #28]
9000296a:	0cdb      	lsrs	r3, r3, #19
9000296c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
9000296e:	69bb      	ldr	r3, [r7, #24]
90002970:	0a9b      	lsrs	r3, r3, #10
90002972:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90002974:	697b      	ldr	r3, [r7, #20]
90002976:	08db      	lsrs	r3, r3, #3
90002978:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
9000297a:	69bb      	ldr	r3, [r7, #24]
9000297c:	015a      	lsls	r2, r3, #5
9000297e:	69fb      	ldr	r3, [r7, #28]
90002980:	02db      	lsls	r3, r3, #11
90002982:	4313      	orrs	r3, r2
90002984:	697a      	ldr	r2, [r7, #20]
90002986:	4313      	orrs	r3, r2
90002988:	627b      	str	r3, [r7, #36]	; 0x24
9000298a:	e032      	b.n	900029f2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
9000298c:	68fb      	ldr	r3, [r7, #12]
9000298e:	689b      	ldr	r3, [r3, #8]
90002990:	2b03      	cmp	r3, #3
90002992:	d117      	bne.n	900029c4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
90002994:	6a3b      	ldr	r3, [r7, #32]
90002996:	0fdb      	lsrs	r3, r3, #31
90002998:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
9000299a:	69fb      	ldr	r3, [r7, #28]
9000299c:	0cdb      	lsrs	r3, r3, #19
9000299e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
900029a0:	69bb      	ldr	r3, [r7, #24]
900029a2:	0adb      	lsrs	r3, r3, #11
900029a4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
900029a6:	697b      	ldr	r3, [r7, #20]
900029a8:	08db      	lsrs	r3, r3, #3
900029aa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
900029ac:	69bb      	ldr	r3, [r7, #24]
900029ae:	015a      	lsls	r2, r3, #5
900029b0:	69fb      	ldr	r3, [r7, #28]
900029b2:	029b      	lsls	r3, r3, #10
900029b4:	431a      	orrs	r2, r3
900029b6:	6a3b      	ldr	r3, [r7, #32]
900029b8:	03db      	lsls	r3, r3, #15
900029ba:	4313      	orrs	r3, r2
900029bc:	697a      	ldr	r2, [r7, #20]
900029be:	4313      	orrs	r3, r2
900029c0:	627b      	str	r3, [r7, #36]	; 0x24
900029c2:	e016      	b.n	900029f2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
900029c4:	6a3b      	ldr	r3, [r7, #32]
900029c6:	0f1b      	lsrs	r3, r3, #28
900029c8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
900029ca:	69fb      	ldr	r3, [r7, #28]
900029cc:	0d1b      	lsrs	r3, r3, #20
900029ce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
900029d0:	69bb      	ldr	r3, [r7, #24]
900029d2:	0b1b      	lsrs	r3, r3, #12
900029d4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
900029d6:	697b      	ldr	r3, [r7, #20]
900029d8:	091b      	lsrs	r3, r3, #4
900029da:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
900029dc:	69bb      	ldr	r3, [r7, #24]
900029de:	011a      	lsls	r2, r3, #4
900029e0:	69fb      	ldr	r3, [r7, #28]
900029e2:	021b      	lsls	r3, r3, #8
900029e4:	431a      	orrs	r2, r3
900029e6:	6a3b      	ldr	r3, [r7, #32]
900029e8:	031b      	lsls	r3, r3, #12
900029ea:	4313      	orrs	r3, r2
900029ec:	697a      	ldr	r2, [r7, #20]
900029ee:	4313      	orrs	r3, r2
900029f0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
900029f2:	68fb      	ldr	r3, [r7, #12]
900029f4:	681b      	ldr	r3, [r3, #0]
900029f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
900029f8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
900029fa:	e003      	b.n	90002a04 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
900029fc:	68fb      	ldr	r3, [r7, #12]
900029fe:	681b      	ldr	r3, [r3, #0]
90002a00:	68ba      	ldr	r2, [r7, #8]
90002a02:	60da      	str	r2, [r3, #12]
}
90002a04:	bf00      	nop
90002a06:	372c      	adds	r7, #44	; 0x2c
90002a08:	46bd      	mov	sp, r7
90002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
90002a0e:	4770      	bx	lr

90002a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
90002a10:	b480      	push	{r7}
90002a12:	b089      	sub	sp, #36	; 0x24
90002a14:	af00      	add	r7, sp, #0
90002a16:	6078      	str	r0, [r7, #4]
90002a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
90002a1a:	2300      	movs	r3, #0
90002a1c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
90002a1e:	2300      	movs	r3, #0
90002a20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
90002a22:	2300      	movs	r3, #0
90002a24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
90002a26:	2300      	movs	r3, #0
90002a28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
90002a2a:	2300      	movs	r3, #0
90002a2c:	61fb      	str	r3, [r7, #28]
90002a2e:	e175      	b.n	90002d1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
90002a30:	2201      	movs	r2, #1
90002a32:	69fb      	ldr	r3, [r7, #28]
90002a34:	fa02 f303 	lsl.w	r3, r2, r3
90002a38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
90002a3a:	683b      	ldr	r3, [r7, #0]
90002a3c:	681b      	ldr	r3, [r3, #0]
90002a3e:	697a      	ldr	r2, [r7, #20]
90002a40:	4013      	ands	r3, r2
90002a42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
90002a44:	693a      	ldr	r2, [r7, #16]
90002a46:	697b      	ldr	r3, [r7, #20]
90002a48:	429a      	cmp	r2, r3
90002a4a:	f040 8164 	bne.w	90002d16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
90002a4e:	683b      	ldr	r3, [r7, #0]
90002a50:	685b      	ldr	r3, [r3, #4]
90002a52:	2b01      	cmp	r3, #1
90002a54:	d00b      	beq.n	90002a6e <HAL_GPIO_Init+0x5e>
90002a56:	683b      	ldr	r3, [r7, #0]
90002a58:	685b      	ldr	r3, [r3, #4]
90002a5a:	2b02      	cmp	r3, #2
90002a5c:	d007      	beq.n	90002a6e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
90002a5e:	683b      	ldr	r3, [r7, #0]
90002a60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
90002a62:	2b11      	cmp	r3, #17
90002a64:	d003      	beq.n	90002a6e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
90002a66:	683b      	ldr	r3, [r7, #0]
90002a68:	685b      	ldr	r3, [r3, #4]
90002a6a:	2b12      	cmp	r3, #18
90002a6c:	d130      	bne.n	90002ad0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
90002a6e:	687b      	ldr	r3, [r7, #4]
90002a70:	689b      	ldr	r3, [r3, #8]
90002a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
90002a74:	69fb      	ldr	r3, [r7, #28]
90002a76:	005b      	lsls	r3, r3, #1
90002a78:	2203      	movs	r2, #3
90002a7a:	fa02 f303 	lsl.w	r3, r2, r3
90002a7e:	43db      	mvns	r3, r3
90002a80:	69ba      	ldr	r2, [r7, #24]
90002a82:	4013      	ands	r3, r2
90002a84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
90002a86:	683b      	ldr	r3, [r7, #0]
90002a88:	68da      	ldr	r2, [r3, #12]
90002a8a:	69fb      	ldr	r3, [r7, #28]
90002a8c:	005b      	lsls	r3, r3, #1
90002a8e:	fa02 f303 	lsl.w	r3, r2, r3
90002a92:	69ba      	ldr	r2, [r7, #24]
90002a94:	4313      	orrs	r3, r2
90002a96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
90002a98:	687b      	ldr	r3, [r7, #4]
90002a9a:	69ba      	ldr	r2, [r7, #24]
90002a9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
90002a9e:	687b      	ldr	r3, [r7, #4]
90002aa0:	685b      	ldr	r3, [r3, #4]
90002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
90002aa4:	2201      	movs	r2, #1
90002aa6:	69fb      	ldr	r3, [r7, #28]
90002aa8:	fa02 f303 	lsl.w	r3, r2, r3
90002aac:	43db      	mvns	r3, r3
90002aae:	69ba      	ldr	r2, [r7, #24]
90002ab0:	4013      	ands	r3, r2
90002ab2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
90002ab4:	683b      	ldr	r3, [r7, #0]
90002ab6:	685b      	ldr	r3, [r3, #4]
90002ab8:	091b      	lsrs	r3, r3, #4
90002aba:	f003 0201 	and.w	r2, r3, #1
90002abe:	69fb      	ldr	r3, [r7, #28]
90002ac0:	fa02 f303 	lsl.w	r3, r2, r3
90002ac4:	69ba      	ldr	r2, [r7, #24]
90002ac6:	4313      	orrs	r3, r2
90002ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
90002aca:	687b      	ldr	r3, [r7, #4]
90002acc:	69ba      	ldr	r2, [r7, #24]
90002ace:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
90002ad0:	687b      	ldr	r3, [r7, #4]
90002ad2:	68db      	ldr	r3, [r3, #12]
90002ad4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
90002ad6:	69fb      	ldr	r3, [r7, #28]
90002ad8:	005b      	lsls	r3, r3, #1
90002ada:	2203      	movs	r2, #3
90002adc:	fa02 f303 	lsl.w	r3, r2, r3
90002ae0:	43db      	mvns	r3, r3
90002ae2:	69ba      	ldr	r2, [r7, #24]
90002ae4:	4013      	ands	r3, r2
90002ae6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
90002ae8:	683b      	ldr	r3, [r7, #0]
90002aea:	689a      	ldr	r2, [r3, #8]
90002aec:	69fb      	ldr	r3, [r7, #28]
90002aee:	005b      	lsls	r3, r3, #1
90002af0:	fa02 f303 	lsl.w	r3, r2, r3
90002af4:	69ba      	ldr	r2, [r7, #24]
90002af6:	4313      	orrs	r3, r2
90002af8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
90002afa:	687b      	ldr	r3, [r7, #4]
90002afc:	69ba      	ldr	r2, [r7, #24]
90002afe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
90002b00:	683b      	ldr	r3, [r7, #0]
90002b02:	685b      	ldr	r3, [r3, #4]
90002b04:	2b02      	cmp	r3, #2
90002b06:	d003      	beq.n	90002b10 <HAL_GPIO_Init+0x100>
90002b08:	683b      	ldr	r3, [r7, #0]
90002b0a:	685b      	ldr	r3, [r3, #4]
90002b0c:	2b12      	cmp	r3, #18
90002b0e:	d123      	bne.n	90002b58 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
90002b10:	69fb      	ldr	r3, [r7, #28]
90002b12:	08da      	lsrs	r2, r3, #3
90002b14:	687b      	ldr	r3, [r7, #4]
90002b16:	3208      	adds	r2, #8
90002b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90002b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
90002b1e:	69fb      	ldr	r3, [r7, #28]
90002b20:	f003 0307 	and.w	r3, r3, #7
90002b24:	009b      	lsls	r3, r3, #2
90002b26:	220f      	movs	r2, #15
90002b28:	fa02 f303 	lsl.w	r3, r2, r3
90002b2c:	43db      	mvns	r3, r3
90002b2e:	69ba      	ldr	r2, [r7, #24]
90002b30:	4013      	ands	r3, r2
90002b32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
90002b34:	683b      	ldr	r3, [r7, #0]
90002b36:	691a      	ldr	r2, [r3, #16]
90002b38:	69fb      	ldr	r3, [r7, #28]
90002b3a:	f003 0307 	and.w	r3, r3, #7
90002b3e:	009b      	lsls	r3, r3, #2
90002b40:	fa02 f303 	lsl.w	r3, r2, r3
90002b44:	69ba      	ldr	r2, [r7, #24]
90002b46:	4313      	orrs	r3, r2
90002b48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
90002b4a:	69fb      	ldr	r3, [r7, #28]
90002b4c:	08da      	lsrs	r2, r3, #3
90002b4e:	687b      	ldr	r3, [r7, #4]
90002b50:	3208      	adds	r2, #8
90002b52:	69b9      	ldr	r1, [r7, #24]
90002b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
90002b58:	687b      	ldr	r3, [r7, #4]
90002b5a:	681b      	ldr	r3, [r3, #0]
90002b5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
90002b5e:	69fb      	ldr	r3, [r7, #28]
90002b60:	005b      	lsls	r3, r3, #1
90002b62:	2203      	movs	r2, #3
90002b64:	fa02 f303 	lsl.w	r3, r2, r3
90002b68:	43db      	mvns	r3, r3
90002b6a:	69ba      	ldr	r2, [r7, #24]
90002b6c:	4013      	ands	r3, r2
90002b6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
90002b70:	683b      	ldr	r3, [r7, #0]
90002b72:	685b      	ldr	r3, [r3, #4]
90002b74:	f003 0203 	and.w	r2, r3, #3
90002b78:	69fb      	ldr	r3, [r7, #28]
90002b7a:	005b      	lsls	r3, r3, #1
90002b7c:	fa02 f303 	lsl.w	r3, r2, r3
90002b80:	69ba      	ldr	r2, [r7, #24]
90002b82:	4313      	orrs	r3, r2
90002b84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
90002b86:	687b      	ldr	r3, [r7, #4]
90002b88:	69ba      	ldr	r2, [r7, #24]
90002b8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
90002b8c:	683b      	ldr	r3, [r7, #0]
90002b8e:	685b      	ldr	r3, [r3, #4]
90002b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90002b94:	2b00      	cmp	r3, #0
90002b96:	f000 80be 	beq.w	90002d16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90002b9a:	4b66      	ldr	r3, [pc, #408]	; (90002d34 <HAL_GPIO_Init+0x324>)
90002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90002b9e:	4a65      	ldr	r2, [pc, #404]	; (90002d34 <HAL_GPIO_Init+0x324>)
90002ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
90002ba4:	6453      	str	r3, [r2, #68]	; 0x44
90002ba6:	4b63      	ldr	r3, [pc, #396]	; (90002d34 <HAL_GPIO_Init+0x324>)
90002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90002baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90002bae:	60fb      	str	r3, [r7, #12]
90002bb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
90002bb2:	4a61      	ldr	r2, [pc, #388]	; (90002d38 <HAL_GPIO_Init+0x328>)
90002bb4:	69fb      	ldr	r3, [r7, #28]
90002bb6:	089b      	lsrs	r3, r3, #2
90002bb8:	3302      	adds	r3, #2
90002bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90002bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
90002bc0:	69fb      	ldr	r3, [r7, #28]
90002bc2:	f003 0303 	and.w	r3, r3, #3
90002bc6:	009b      	lsls	r3, r3, #2
90002bc8:	220f      	movs	r2, #15
90002bca:	fa02 f303 	lsl.w	r3, r2, r3
90002bce:	43db      	mvns	r3, r3
90002bd0:	69ba      	ldr	r2, [r7, #24]
90002bd2:	4013      	ands	r3, r2
90002bd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
90002bd6:	687b      	ldr	r3, [r7, #4]
90002bd8:	4a58      	ldr	r2, [pc, #352]	; (90002d3c <HAL_GPIO_Init+0x32c>)
90002bda:	4293      	cmp	r3, r2
90002bdc:	d037      	beq.n	90002c4e <HAL_GPIO_Init+0x23e>
90002bde:	687b      	ldr	r3, [r7, #4]
90002be0:	4a57      	ldr	r2, [pc, #348]	; (90002d40 <HAL_GPIO_Init+0x330>)
90002be2:	4293      	cmp	r3, r2
90002be4:	d031      	beq.n	90002c4a <HAL_GPIO_Init+0x23a>
90002be6:	687b      	ldr	r3, [r7, #4]
90002be8:	4a56      	ldr	r2, [pc, #344]	; (90002d44 <HAL_GPIO_Init+0x334>)
90002bea:	4293      	cmp	r3, r2
90002bec:	d02b      	beq.n	90002c46 <HAL_GPIO_Init+0x236>
90002bee:	687b      	ldr	r3, [r7, #4]
90002bf0:	4a55      	ldr	r2, [pc, #340]	; (90002d48 <HAL_GPIO_Init+0x338>)
90002bf2:	4293      	cmp	r3, r2
90002bf4:	d025      	beq.n	90002c42 <HAL_GPIO_Init+0x232>
90002bf6:	687b      	ldr	r3, [r7, #4]
90002bf8:	4a54      	ldr	r2, [pc, #336]	; (90002d4c <HAL_GPIO_Init+0x33c>)
90002bfa:	4293      	cmp	r3, r2
90002bfc:	d01f      	beq.n	90002c3e <HAL_GPIO_Init+0x22e>
90002bfe:	687b      	ldr	r3, [r7, #4]
90002c00:	4a53      	ldr	r2, [pc, #332]	; (90002d50 <HAL_GPIO_Init+0x340>)
90002c02:	4293      	cmp	r3, r2
90002c04:	d019      	beq.n	90002c3a <HAL_GPIO_Init+0x22a>
90002c06:	687b      	ldr	r3, [r7, #4]
90002c08:	4a52      	ldr	r2, [pc, #328]	; (90002d54 <HAL_GPIO_Init+0x344>)
90002c0a:	4293      	cmp	r3, r2
90002c0c:	d013      	beq.n	90002c36 <HAL_GPIO_Init+0x226>
90002c0e:	687b      	ldr	r3, [r7, #4]
90002c10:	4a51      	ldr	r2, [pc, #324]	; (90002d58 <HAL_GPIO_Init+0x348>)
90002c12:	4293      	cmp	r3, r2
90002c14:	d00d      	beq.n	90002c32 <HAL_GPIO_Init+0x222>
90002c16:	687b      	ldr	r3, [r7, #4]
90002c18:	4a50      	ldr	r2, [pc, #320]	; (90002d5c <HAL_GPIO_Init+0x34c>)
90002c1a:	4293      	cmp	r3, r2
90002c1c:	d007      	beq.n	90002c2e <HAL_GPIO_Init+0x21e>
90002c1e:	687b      	ldr	r3, [r7, #4]
90002c20:	4a4f      	ldr	r2, [pc, #316]	; (90002d60 <HAL_GPIO_Init+0x350>)
90002c22:	4293      	cmp	r3, r2
90002c24:	d101      	bne.n	90002c2a <HAL_GPIO_Init+0x21a>
90002c26:	2309      	movs	r3, #9
90002c28:	e012      	b.n	90002c50 <HAL_GPIO_Init+0x240>
90002c2a:	230a      	movs	r3, #10
90002c2c:	e010      	b.n	90002c50 <HAL_GPIO_Init+0x240>
90002c2e:	2308      	movs	r3, #8
90002c30:	e00e      	b.n	90002c50 <HAL_GPIO_Init+0x240>
90002c32:	2307      	movs	r3, #7
90002c34:	e00c      	b.n	90002c50 <HAL_GPIO_Init+0x240>
90002c36:	2306      	movs	r3, #6
90002c38:	e00a      	b.n	90002c50 <HAL_GPIO_Init+0x240>
90002c3a:	2305      	movs	r3, #5
90002c3c:	e008      	b.n	90002c50 <HAL_GPIO_Init+0x240>
90002c3e:	2304      	movs	r3, #4
90002c40:	e006      	b.n	90002c50 <HAL_GPIO_Init+0x240>
90002c42:	2303      	movs	r3, #3
90002c44:	e004      	b.n	90002c50 <HAL_GPIO_Init+0x240>
90002c46:	2302      	movs	r3, #2
90002c48:	e002      	b.n	90002c50 <HAL_GPIO_Init+0x240>
90002c4a:	2301      	movs	r3, #1
90002c4c:	e000      	b.n	90002c50 <HAL_GPIO_Init+0x240>
90002c4e:	2300      	movs	r3, #0
90002c50:	69fa      	ldr	r2, [r7, #28]
90002c52:	f002 0203 	and.w	r2, r2, #3
90002c56:	0092      	lsls	r2, r2, #2
90002c58:	4093      	lsls	r3, r2
90002c5a:	69ba      	ldr	r2, [r7, #24]
90002c5c:	4313      	orrs	r3, r2
90002c5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
90002c60:	4935      	ldr	r1, [pc, #212]	; (90002d38 <HAL_GPIO_Init+0x328>)
90002c62:	69fb      	ldr	r3, [r7, #28]
90002c64:	089b      	lsrs	r3, r3, #2
90002c66:	3302      	adds	r3, #2
90002c68:	69ba      	ldr	r2, [r7, #24]
90002c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
90002c6e:	4b3d      	ldr	r3, [pc, #244]	; (90002d64 <HAL_GPIO_Init+0x354>)
90002c70:	681b      	ldr	r3, [r3, #0]
90002c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
90002c74:	693b      	ldr	r3, [r7, #16]
90002c76:	43db      	mvns	r3, r3
90002c78:	69ba      	ldr	r2, [r7, #24]
90002c7a:	4013      	ands	r3, r2
90002c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
90002c7e:	683b      	ldr	r3, [r7, #0]
90002c80:	685b      	ldr	r3, [r3, #4]
90002c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
90002c86:	2b00      	cmp	r3, #0
90002c88:	d003      	beq.n	90002c92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
90002c8a:	69ba      	ldr	r2, [r7, #24]
90002c8c:	693b      	ldr	r3, [r7, #16]
90002c8e:	4313      	orrs	r3, r2
90002c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
90002c92:	4a34      	ldr	r2, [pc, #208]	; (90002d64 <HAL_GPIO_Init+0x354>)
90002c94:	69bb      	ldr	r3, [r7, #24]
90002c96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
90002c98:	4b32      	ldr	r3, [pc, #200]	; (90002d64 <HAL_GPIO_Init+0x354>)
90002c9a:	685b      	ldr	r3, [r3, #4]
90002c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
90002c9e:	693b      	ldr	r3, [r7, #16]
90002ca0:	43db      	mvns	r3, r3
90002ca2:	69ba      	ldr	r2, [r7, #24]
90002ca4:	4013      	ands	r3, r2
90002ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
90002ca8:	683b      	ldr	r3, [r7, #0]
90002caa:	685b      	ldr	r3, [r3, #4]
90002cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90002cb0:	2b00      	cmp	r3, #0
90002cb2:	d003      	beq.n	90002cbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
90002cb4:	69ba      	ldr	r2, [r7, #24]
90002cb6:	693b      	ldr	r3, [r7, #16]
90002cb8:	4313      	orrs	r3, r2
90002cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
90002cbc:	4a29      	ldr	r2, [pc, #164]	; (90002d64 <HAL_GPIO_Init+0x354>)
90002cbe:	69bb      	ldr	r3, [r7, #24]
90002cc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
90002cc2:	4b28      	ldr	r3, [pc, #160]	; (90002d64 <HAL_GPIO_Init+0x354>)
90002cc4:	689b      	ldr	r3, [r3, #8]
90002cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
90002cc8:	693b      	ldr	r3, [r7, #16]
90002cca:	43db      	mvns	r3, r3
90002ccc:	69ba      	ldr	r2, [r7, #24]
90002cce:	4013      	ands	r3, r2
90002cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
90002cd2:	683b      	ldr	r3, [r7, #0]
90002cd4:	685b      	ldr	r3, [r3, #4]
90002cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
90002cda:	2b00      	cmp	r3, #0
90002cdc:	d003      	beq.n	90002ce6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
90002cde:	69ba      	ldr	r2, [r7, #24]
90002ce0:	693b      	ldr	r3, [r7, #16]
90002ce2:	4313      	orrs	r3, r2
90002ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
90002ce6:	4a1f      	ldr	r2, [pc, #124]	; (90002d64 <HAL_GPIO_Init+0x354>)
90002ce8:	69bb      	ldr	r3, [r7, #24]
90002cea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
90002cec:	4b1d      	ldr	r3, [pc, #116]	; (90002d64 <HAL_GPIO_Init+0x354>)
90002cee:	68db      	ldr	r3, [r3, #12]
90002cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
90002cf2:	693b      	ldr	r3, [r7, #16]
90002cf4:	43db      	mvns	r3, r3
90002cf6:	69ba      	ldr	r2, [r7, #24]
90002cf8:	4013      	ands	r3, r2
90002cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
90002cfc:	683b      	ldr	r3, [r7, #0]
90002cfe:	685b      	ldr	r3, [r3, #4]
90002d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90002d04:	2b00      	cmp	r3, #0
90002d06:	d003      	beq.n	90002d10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
90002d08:	69ba      	ldr	r2, [r7, #24]
90002d0a:	693b      	ldr	r3, [r7, #16]
90002d0c:	4313      	orrs	r3, r2
90002d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
90002d10:	4a14      	ldr	r2, [pc, #80]	; (90002d64 <HAL_GPIO_Init+0x354>)
90002d12:	69bb      	ldr	r3, [r7, #24]
90002d14:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
90002d16:	69fb      	ldr	r3, [r7, #28]
90002d18:	3301      	adds	r3, #1
90002d1a:	61fb      	str	r3, [r7, #28]
90002d1c:	69fb      	ldr	r3, [r7, #28]
90002d1e:	2b0f      	cmp	r3, #15
90002d20:	f67f ae86 	bls.w	90002a30 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
90002d24:	bf00      	nop
90002d26:	bf00      	nop
90002d28:	3724      	adds	r7, #36	; 0x24
90002d2a:	46bd      	mov	sp, r7
90002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
90002d30:	4770      	bx	lr
90002d32:	bf00      	nop
90002d34:	40023800 	.word	0x40023800
90002d38:	40013800 	.word	0x40013800
90002d3c:	40020000 	.word	0x40020000
90002d40:	40020400 	.word	0x40020400
90002d44:	40020800 	.word	0x40020800
90002d48:	40020c00 	.word	0x40020c00
90002d4c:	40021000 	.word	0x40021000
90002d50:	40021400 	.word	0x40021400
90002d54:	40021800 	.word	0x40021800
90002d58:	40021c00 	.word	0x40021c00
90002d5c:	40022000 	.word	0x40022000
90002d60:	40022400 	.word	0x40022400
90002d64:	40013c00 	.word	0x40013c00

90002d68 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
90002d68:	b480      	push	{r7}
90002d6a:	b087      	sub	sp, #28
90002d6c:	af00      	add	r7, sp, #0
90002d6e:	6078      	str	r0, [r7, #4]
90002d70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
90002d72:	2300      	movs	r3, #0
90002d74:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
90002d76:	2300      	movs	r3, #0
90002d78:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
90002d7a:	2300      	movs	r3, #0
90002d7c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
90002d7e:	2300      	movs	r3, #0
90002d80:	617b      	str	r3, [r7, #20]
90002d82:	e0d9      	b.n	90002f38 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
90002d84:	2201      	movs	r2, #1
90002d86:	697b      	ldr	r3, [r7, #20]
90002d88:	fa02 f303 	lsl.w	r3, r2, r3
90002d8c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
90002d8e:	683a      	ldr	r2, [r7, #0]
90002d90:	693b      	ldr	r3, [r7, #16]
90002d92:	4013      	ands	r3, r2
90002d94:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
90002d96:	68fa      	ldr	r2, [r7, #12]
90002d98:	693b      	ldr	r3, [r7, #16]
90002d9a:	429a      	cmp	r2, r3
90002d9c:	f040 80c9 	bne.w	90002f32 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
90002da0:	4a6b      	ldr	r2, [pc, #428]	; (90002f50 <HAL_GPIO_DeInit+0x1e8>)
90002da2:	697b      	ldr	r3, [r7, #20]
90002da4:	089b      	lsrs	r3, r3, #2
90002da6:	3302      	adds	r3, #2
90002da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90002dac:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
90002dae:	697b      	ldr	r3, [r7, #20]
90002db0:	f003 0303 	and.w	r3, r3, #3
90002db4:	009b      	lsls	r3, r3, #2
90002db6:	220f      	movs	r2, #15
90002db8:	fa02 f303 	lsl.w	r3, r2, r3
90002dbc:	68ba      	ldr	r2, [r7, #8]
90002dbe:	4013      	ands	r3, r2
90002dc0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
90002dc2:	687b      	ldr	r3, [r7, #4]
90002dc4:	4a63      	ldr	r2, [pc, #396]	; (90002f54 <HAL_GPIO_DeInit+0x1ec>)
90002dc6:	4293      	cmp	r3, r2
90002dc8:	d037      	beq.n	90002e3a <HAL_GPIO_DeInit+0xd2>
90002dca:	687b      	ldr	r3, [r7, #4]
90002dcc:	4a62      	ldr	r2, [pc, #392]	; (90002f58 <HAL_GPIO_DeInit+0x1f0>)
90002dce:	4293      	cmp	r3, r2
90002dd0:	d031      	beq.n	90002e36 <HAL_GPIO_DeInit+0xce>
90002dd2:	687b      	ldr	r3, [r7, #4]
90002dd4:	4a61      	ldr	r2, [pc, #388]	; (90002f5c <HAL_GPIO_DeInit+0x1f4>)
90002dd6:	4293      	cmp	r3, r2
90002dd8:	d02b      	beq.n	90002e32 <HAL_GPIO_DeInit+0xca>
90002dda:	687b      	ldr	r3, [r7, #4]
90002ddc:	4a60      	ldr	r2, [pc, #384]	; (90002f60 <HAL_GPIO_DeInit+0x1f8>)
90002dde:	4293      	cmp	r3, r2
90002de0:	d025      	beq.n	90002e2e <HAL_GPIO_DeInit+0xc6>
90002de2:	687b      	ldr	r3, [r7, #4]
90002de4:	4a5f      	ldr	r2, [pc, #380]	; (90002f64 <HAL_GPIO_DeInit+0x1fc>)
90002de6:	4293      	cmp	r3, r2
90002de8:	d01f      	beq.n	90002e2a <HAL_GPIO_DeInit+0xc2>
90002dea:	687b      	ldr	r3, [r7, #4]
90002dec:	4a5e      	ldr	r2, [pc, #376]	; (90002f68 <HAL_GPIO_DeInit+0x200>)
90002dee:	4293      	cmp	r3, r2
90002df0:	d019      	beq.n	90002e26 <HAL_GPIO_DeInit+0xbe>
90002df2:	687b      	ldr	r3, [r7, #4]
90002df4:	4a5d      	ldr	r2, [pc, #372]	; (90002f6c <HAL_GPIO_DeInit+0x204>)
90002df6:	4293      	cmp	r3, r2
90002df8:	d013      	beq.n	90002e22 <HAL_GPIO_DeInit+0xba>
90002dfa:	687b      	ldr	r3, [r7, #4]
90002dfc:	4a5c      	ldr	r2, [pc, #368]	; (90002f70 <HAL_GPIO_DeInit+0x208>)
90002dfe:	4293      	cmp	r3, r2
90002e00:	d00d      	beq.n	90002e1e <HAL_GPIO_DeInit+0xb6>
90002e02:	687b      	ldr	r3, [r7, #4]
90002e04:	4a5b      	ldr	r2, [pc, #364]	; (90002f74 <HAL_GPIO_DeInit+0x20c>)
90002e06:	4293      	cmp	r3, r2
90002e08:	d007      	beq.n	90002e1a <HAL_GPIO_DeInit+0xb2>
90002e0a:	687b      	ldr	r3, [r7, #4]
90002e0c:	4a5a      	ldr	r2, [pc, #360]	; (90002f78 <HAL_GPIO_DeInit+0x210>)
90002e0e:	4293      	cmp	r3, r2
90002e10:	d101      	bne.n	90002e16 <HAL_GPIO_DeInit+0xae>
90002e12:	2309      	movs	r3, #9
90002e14:	e012      	b.n	90002e3c <HAL_GPIO_DeInit+0xd4>
90002e16:	230a      	movs	r3, #10
90002e18:	e010      	b.n	90002e3c <HAL_GPIO_DeInit+0xd4>
90002e1a:	2308      	movs	r3, #8
90002e1c:	e00e      	b.n	90002e3c <HAL_GPIO_DeInit+0xd4>
90002e1e:	2307      	movs	r3, #7
90002e20:	e00c      	b.n	90002e3c <HAL_GPIO_DeInit+0xd4>
90002e22:	2306      	movs	r3, #6
90002e24:	e00a      	b.n	90002e3c <HAL_GPIO_DeInit+0xd4>
90002e26:	2305      	movs	r3, #5
90002e28:	e008      	b.n	90002e3c <HAL_GPIO_DeInit+0xd4>
90002e2a:	2304      	movs	r3, #4
90002e2c:	e006      	b.n	90002e3c <HAL_GPIO_DeInit+0xd4>
90002e2e:	2303      	movs	r3, #3
90002e30:	e004      	b.n	90002e3c <HAL_GPIO_DeInit+0xd4>
90002e32:	2302      	movs	r3, #2
90002e34:	e002      	b.n	90002e3c <HAL_GPIO_DeInit+0xd4>
90002e36:	2301      	movs	r3, #1
90002e38:	e000      	b.n	90002e3c <HAL_GPIO_DeInit+0xd4>
90002e3a:	2300      	movs	r3, #0
90002e3c:	697a      	ldr	r2, [r7, #20]
90002e3e:	f002 0203 	and.w	r2, r2, #3
90002e42:	0092      	lsls	r2, r2, #2
90002e44:	4093      	lsls	r3, r2
90002e46:	68ba      	ldr	r2, [r7, #8]
90002e48:	429a      	cmp	r2, r3
90002e4a:	d132      	bne.n	90002eb2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
90002e4c:	4b4b      	ldr	r3, [pc, #300]	; (90002f7c <HAL_GPIO_DeInit+0x214>)
90002e4e:	681a      	ldr	r2, [r3, #0]
90002e50:	68fb      	ldr	r3, [r7, #12]
90002e52:	43db      	mvns	r3, r3
90002e54:	4949      	ldr	r1, [pc, #292]	; (90002f7c <HAL_GPIO_DeInit+0x214>)
90002e56:	4013      	ands	r3, r2
90002e58:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
90002e5a:	4b48      	ldr	r3, [pc, #288]	; (90002f7c <HAL_GPIO_DeInit+0x214>)
90002e5c:	685a      	ldr	r2, [r3, #4]
90002e5e:	68fb      	ldr	r3, [r7, #12]
90002e60:	43db      	mvns	r3, r3
90002e62:	4946      	ldr	r1, [pc, #280]	; (90002f7c <HAL_GPIO_DeInit+0x214>)
90002e64:	4013      	ands	r3, r2
90002e66:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
90002e68:	4b44      	ldr	r3, [pc, #272]	; (90002f7c <HAL_GPIO_DeInit+0x214>)
90002e6a:	689a      	ldr	r2, [r3, #8]
90002e6c:	68fb      	ldr	r3, [r7, #12]
90002e6e:	43db      	mvns	r3, r3
90002e70:	4942      	ldr	r1, [pc, #264]	; (90002f7c <HAL_GPIO_DeInit+0x214>)
90002e72:	4013      	ands	r3, r2
90002e74:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
90002e76:	4b41      	ldr	r3, [pc, #260]	; (90002f7c <HAL_GPIO_DeInit+0x214>)
90002e78:	68da      	ldr	r2, [r3, #12]
90002e7a:	68fb      	ldr	r3, [r7, #12]
90002e7c:	43db      	mvns	r3, r3
90002e7e:	493f      	ldr	r1, [pc, #252]	; (90002f7c <HAL_GPIO_DeInit+0x214>)
90002e80:	4013      	ands	r3, r2
90002e82:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
90002e84:	697b      	ldr	r3, [r7, #20]
90002e86:	f003 0303 	and.w	r3, r3, #3
90002e8a:	009b      	lsls	r3, r3, #2
90002e8c:	220f      	movs	r2, #15
90002e8e:	fa02 f303 	lsl.w	r3, r2, r3
90002e92:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
90002e94:	4a2e      	ldr	r2, [pc, #184]	; (90002f50 <HAL_GPIO_DeInit+0x1e8>)
90002e96:	697b      	ldr	r3, [r7, #20]
90002e98:	089b      	lsrs	r3, r3, #2
90002e9a:	3302      	adds	r3, #2
90002e9c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
90002ea0:	68bb      	ldr	r3, [r7, #8]
90002ea2:	43da      	mvns	r2, r3
90002ea4:	482a      	ldr	r0, [pc, #168]	; (90002f50 <HAL_GPIO_DeInit+0x1e8>)
90002ea6:	697b      	ldr	r3, [r7, #20]
90002ea8:	089b      	lsrs	r3, r3, #2
90002eaa:	400a      	ands	r2, r1
90002eac:	3302      	adds	r3, #2
90002eae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
90002eb2:	687b      	ldr	r3, [r7, #4]
90002eb4:	681a      	ldr	r2, [r3, #0]
90002eb6:	697b      	ldr	r3, [r7, #20]
90002eb8:	005b      	lsls	r3, r3, #1
90002eba:	2103      	movs	r1, #3
90002ebc:	fa01 f303 	lsl.w	r3, r1, r3
90002ec0:	43db      	mvns	r3, r3
90002ec2:	401a      	ands	r2, r3
90002ec4:	687b      	ldr	r3, [r7, #4]
90002ec6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
90002ec8:	697b      	ldr	r3, [r7, #20]
90002eca:	08da      	lsrs	r2, r3, #3
90002ecc:	687b      	ldr	r3, [r7, #4]
90002ece:	3208      	adds	r2, #8
90002ed0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
90002ed4:	697b      	ldr	r3, [r7, #20]
90002ed6:	f003 0307 	and.w	r3, r3, #7
90002eda:	009b      	lsls	r3, r3, #2
90002edc:	220f      	movs	r2, #15
90002ede:	fa02 f303 	lsl.w	r3, r2, r3
90002ee2:	43db      	mvns	r3, r3
90002ee4:	697a      	ldr	r2, [r7, #20]
90002ee6:	08d2      	lsrs	r2, r2, #3
90002ee8:	4019      	ands	r1, r3
90002eea:	687b      	ldr	r3, [r7, #4]
90002eec:	3208      	adds	r2, #8
90002eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
90002ef2:	687b      	ldr	r3, [r7, #4]
90002ef4:	68da      	ldr	r2, [r3, #12]
90002ef6:	697b      	ldr	r3, [r7, #20]
90002ef8:	005b      	lsls	r3, r3, #1
90002efa:	2103      	movs	r1, #3
90002efc:	fa01 f303 	lsl.w	r3, r1, r3
90002f00:	43db      	mvns	r3, r3
90002f02:	401a      	ands	r2, r3
90002f04:	687b      	ldr	r3, [r7, #4]
90002f06:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
90002f08:	687b      	ldr	r3, [r7, #4]
90002f0a:	685a      	ldr	r2, [r3, #4]
90002f0c:	2101      	movs	r1, #1
90002f0e:	697b      	ldr	r3, [r7, #20]
90002f10:	fa01 f303 	lsl.w	r3, r1, r3
90002f14:	43db      	mvns	r3, r3
90002f16:	401a      	ands	r2, r3
90002f18:	687b      	ldr	r3, [r7, #4]
90002f1a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
90002f1c:	687b      	ldr	r3, [r7, #4]
90002f1e:	689a      	ldr	r2, [r3, #8]
90002f20:	697b      	ldr	r3, [r7, #20]
90002f22:	005b      	lsls	r3, r3, #1
90002f24:	2103      	movs	r1, #3
90002f26:	fa01 f303 	lsl.w	r3, r1, r3
90002f2a:	43db      	mvns	r3, r3
90002f2c:	401a      	ands	r2, r3
90002f2e:	687b      	ldr	r3, [r7, #4]
90002f30:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
90002f32:	697b      	ldr	r3, [r7, #20]
90002f34:	3301      	adds	r3, #1
90002f36:	617b      	str	r3, [r7, #20]
90002f38:	697b      	ldr	r3, [r7, #20]
90002f3a:	2b0f      	cmp	r3, #15
90002f3c:	f67f af22 	bls.w	90002d84 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
90002f40:	bf00      	nop
90002f42:	bf00      	nop
90002f44:	371c      	adds	r7, #28
90002f46:	46bd      	mov	sp, r7
90002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
90002f4c:	4770      	bx	lr
90002f4e:	bf00      	nop
90002f50:	40013800 	.word	0x40013800
90002f54:	40020000 	.word	0x40020000
90002f58:	40020400 	.word	0x40020400
90002f5c:	40020800 	.word	0x40020800
90002f60:	40020c00 	.word	0x40020c00
90002f64:	40021000 	.word	0x40021000
90002f68:	40021400 	.word	0x40021400
90002f6c:	40021800 	.word	0x40021800
90002f70:	40021c00 	.word	0x40021c00
90002f74:	40022000 	.word	0x40022000
90002f78:	40022400 	.word	0x40022400
90002f7c:	40013c00 	.word	0x40013c00

90002f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
90002f80:	b480      	push	{r7}
90002f82:	b083      	sub	sp, #12
90002f84:	af00      	add	r7, sp, #0
90002f86:	6078      	str	r0, [r7, #4]
90002f88:	460b      	mov	r3, r1
90002f8a:	807b      	strh	r3, [r7, #2]
90002f8c:	4613      	mov	r3, r2
90002f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
90002f90:	787b      	ldrb	r3, [r7, #1]
90002f92:	2b00      	cmp	r3, #0
90002f94:	d003      	beq.n	90002f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
90002f96:	887a      	ldrh	r2, [r7, #2]
90002f98:	687b      	ldr	r3, [r7, #4]
90002f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
90002f9c:	e003      	b.n	90002fa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
90002f9e:	887b      	ldrh	r3, [r7, #2]
90002fa0:	041a      	lsls	r2, r3, #16
90002fa2:	687b      	ldr	r3, [r7, #4]
90002fa4:	619a      	str	r2, [r3, #24]
}
90002fa6:	bf00      	nop
90002fa8:	370c      	adds	r7, #12
90002faa:	46bd      	mov	sp, r7
90002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
90002fb0:	4770      	bx	lr

90002fb2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
90002fb2:	b480      	push	{r7}
90002fb4:	b085      	sub	sp, #20
90002fb6:	af00      	add	r7, sp, #0
90002fb8:	6078      	str	r0, [r7, #4]
90002fba:	460b      	mov	r3, r1
90002fbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
90002fbe:	687b      	ldr	r3, [r7, #4]
90002fc0:	695b      	ldr	r3, [r3, #20]
90002fc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
90002fc4:	887a      	ldrh	r2, [r7, #2]
90002fc6:	68fb      	ldr	r3, [r7, #12]
90002fc8:	4013      	ands	r3, r2
90002fca:	041a      	lsls	r2, r3, #16
90002fcc:	68fb      	ldr	r3, [r7, #12]
90002fce:	43d9      	mvns	r1, r3
90002fd0:	887b      	ldrh	r3, [r7, #2]
90002fd2:	400b      	ands	r3, r1
90002fd4:	431a      	orrs	r2, r3
90002fd6:	687b      	ldr	r3, [r7, #4]
90002fd8:	619a      	str	r2, [r3, #24]
}
90002fda:	bf00      	nop
90002fdc:	3714      	adds	r7, #20
90002fde:	46bd      	mov	sp, r7
90002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
90002fe4:	4770      	bx	lr
	...

90002fe8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
90002fe8:	b580      	push	{r7, lr}
90002fea:	b084      	sub	sp, #16
90002fec:	af00      	add	r7, sp, #0
90002fee:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
90002ff0:	687b      	ldr	r3, [r7, #4]
90002ff2:	2b00      	cmp	r3, #0
90002ff4:	d101      	bne.n	90002ffa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
90002ff6:	2301      	movs	r3, #1
90002ff8:	e0bf      	b.n	9000317a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
90002ffa:	687b      	ldr	r3, [r7, #4]
90002ffc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
90003000:	b2db      	uxtb	r3, r3
90003002:	2b00      	cmp	r3, #0
90003004:	d106      	bne.n	90003014 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
90003006:	687b      	ldr	r3, [r7, #4]
90003008:	2200      	movs	r2, #0
9000300a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
9000300e:	6878      	ldr	r0, [r7, #4]
90003010:	f000 f8d2 	bl	900031b8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90003014:	687b      	ldr	r3, [r7, #4]
90003016:	2202      	movs	r2, #2
90003018:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000301c:	687b      	ldr	r3, [r7, #4]
9000301e:	681b      	ldr	r3, [r3, #0]
90003020:	699a      	ldr	r2, [r3, #24]
90003022:	687b      	ldr	r3, [r7, #4]
90003024:	681b      	ldr	r3, [r3, #0]
90003026:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
9000302a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000302c:	687b      	ldr	r3, [r7, #4]
9000302e:	681b      	ldr	r3, [r3, #0]
90003030:	6999      	ldr	r1, [r3, #24]
90003032:	687b      	ldr	r3, [r7, #4]
90003034:	685a      	ldr	r2, [r3, #4]
90003036:	687b      	ldr	r3, [r7, #4]
90003038:	689b      	ldr	r3, [r3, #8]
9000303a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
9000303c:	687b      	ldr	r3, [r7, #4]
9000303e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90003040:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90003042:	687b      	ldr	r3, [r7, #4]
90003044:	691b      	ldr	r3, [r3, #16]
90003046:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90003048:	687b      	ldr	r3, [r7, #4]
9000304a:	681b      	ldr	r3, [r3, #0]
9000304c:	430a      	orrs	r2, r1
9000304e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
90003050:	687b      	ldr	r3, [r7, #4]
90003052:	681b      	ldr	r3, [r3, #0]
90003054:	6899      	ldr	r1, [r3, #8]
90003056:	687b      	ldr	r3, [r7, #4]
90003058:	681a      	ldr	r2, [r3, #0]
9000305a:	4b4a      	ldr	r3, [pc, #296]	; (90003184 <HAL_LTDC_Init+0x19c>)
9000305c:	400b      	ands	r3, r1
9000305e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
90003060:	687b      	ldr	r3, [r7, #4]
90003062:	695b      	ldr	r3, [r3, #20]
90003064:	041b      	lsls	r3, r3, #16
90003066:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
90003068:	687b      	ldr	r3, [r7, #4]
9000306a:	681b      	ldr	r3, [r3, #0]
9000306c:	6899      	ldr	r1, [r3, #8]
9000306e:	687b      	ldr	r3, [r7, #4]
90003070:	699a      	ldr	r2, [r3, #24]
90003072:	68fb      	ldr	r3, [r7, #12]
90003074:	431a      	orrs	r2, r3
90003076:	687b      	ldr	r3, [r7, #4]
90003078:	681b      	ldr	r3, [r3, #0]
9000307a:	430a      	orrs	r2, r1
9000307c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
9000307e:	687b      	ldr	r3, [r7, #4]
90003080:	681b      	ldr	r3, [r3, #0]
90003082:	68d9      	ldr	r1, [r3, #12]
90003084:	687b      	ldr	r3, [r7, #4]
90003086:	681a      	ldr	r2, [r3, #0]
90003088:	4b3e      	ldr	r3, [pc, #248]	; (90003184 <HAL_LTDC_Init+0x19c>)
9000308a:	400b      	ands	r3, r1
9000308c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
9000308e:	687b      	ldr	r3, [r7, #4]
90003090:	69db      	ldr	r3, [r3, #28]
90003092:	041b      	lsls	r3, r3, #16
90003094:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
90003096:	687b      	ldr	r3, [r7, #4]
90003098:	681b      	ldr	r3, [r3, #0]
9000309a:	68d9      	ldr	r1, [r3, #12]
9000309c:	687b      	ldr	r3, [r7, #4]
9000309e:	6a1a      	ldr	r2, [r3, #32]
900030a0:	68fb      	ldr	r3, [r7, #12]
900030a2:	431a      	orrs	r2, r3
900030a4:	687b      	ldr	r3, [r7, #4]
900030a6:	681b      	ldr	r3, [r3, #0]
900030a8:	430a      	orrs	r2, r1
900030aa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
900030ac:	687b      	ldr	r3, [r7, #4]
900030ae:	681b      	ldr	r3, [r3, #0]
900030b0:	6919      	ldr	r1, [r3, #16]
900030b2:	687b      	ldr	r3, [r7, #4]
900030b4:	681a      	ldr	r2, [r3, #0]
900030b6:	4b33      	ldr	r3, [pc, #204]	; (90003184 <HAL_LTDC_Init+0x19c>)
900030b8:	400b      	ands	r3, r1
900030ba:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
900030bc:	687b      	ldr	r3, [r7, #4]
900030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900030c0:	041b      	lsls	r3, r3, #16
900030c2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
900030c4:	687b      	ldr	r3, [r7, #4]
900030c6:	681b      	ldr	r3, [r3, #0]
900030c8:	6919      	ldr	r1, [r3, #16]
900030ca:	687b      	ldr	r3, [r7, #4]
900030cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
900030ce:	68fb      	ldr	r3, [r7, #12]
900030d0:	431a      	orrs	r2, r3
900030d2:	687b      	ldr	r3, [r7, #4]
900030d4:	681b      	ldr	r3, [r3, #0]
900030d6:	430a      	orrs	r2, r1
900030d8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
900030da:	687b      	ldr	r3, [r7, #4]
900030dc:	681b      	ldr	r3, [r3, #0]
900030de:	6959      	ldr	r1, [r3, #20]
900030e0:	687b      	ldr	r3, [r7, #4]
900030e2:	681a      	ldr	r2, [r3, #0]
900030e4:	4b27      	ldr	r3, [pc, #156]	; (90003184 <HAL_LTDC_Init+0x19c>)
900030e6:	400b      	ands	r3, r1
900030e8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
900030ea:	687b      	ldr	r3, [r7, #4]
900030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900030ee:	041b      	lsls	r3, r3, #16
900030f0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
900030f2:	687b      	ldr	r3, [r7, #4]
900030f4:	681b      	ldr	r3, [r3, #0]
900030f6:	6959      	ldr	r1, [r3, #20]
900030f8:	687b      	ldr	r3, [r7, #4]
900030fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900030fc:	68fb      	ldr	r3, [r7, #12]
900030fe:	431a      	orrs	r2, r3
90003100:	687b      	ldr	r3, [r7, #4]
90003102:	681b      	ldr	r3, [r3, #0]
90003104:	430a      	orrs	r2, r1
90003106:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
90003108:	687b      	ldr	r3, [r7, #4]
9000310a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
9000310e:	021b      	lsls	r3, r3, #8
90003110:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
90003112:	687b      	ldr	r3, [r7, #4]
90003114:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
90003118:	041b      	lsls	r3, r3, #16
9000311a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000311c:	687b      	ldr	r3, [r7, #4]
9000311e:	681b      	ldr	r3, [r3, #0]
90003120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90003122:	687b      	ldr	r3, [r7, #4]
90003124:	681b      	ldr	r3, [r3, #0]
90003126:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
9000312a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
9000312c:	687b      	ldr	r3, [r7, #4]
9000312e:	681b      	ldr	r3, [r3, #0]
90003130:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
90003132:	68ba      	ldr	r2, [r7, #8]
90003134:	68fb      	ldr	r3, [r7, #12]
90003136:	4313      	orrs	r3, r2
90003138:	687a      	ldr	r2, [r7, #4]
9000313a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
9000313e:	431a      	orrs	r2, r3
90003140:	687b      	ldr	r3, [r7, #4]
90003142:	681b      	ldr	r3, [r3, #0]
90003144:	430a      	orrs	r2, r1
90003146:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
90003148:	687b      	ldr	r3, [r7, #4]
9000314a:	681b      	ldr	r3, [r3, #0]
9000314c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000314e:	687b      	ldr	r3, [r7, #4]
90003150:	681b      	ldr	r3, [r3, #0]
90003152:	f042 0206 	orr.w	r2, r2, #6
90003156:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
90003158:	687b      	ldr	r3, [r7, #4]
9000315a:	681b      	ldr	r3, [r3, #0]
9000315c:	699a      	ldr	r2, [r3, #24]
9000315e:	687b      	ldr	r3, [r7, #4]
90003160:	681b      	ldr	r3, [r3, #0]
90003162:	f042 0201 	orr.w	r2, r2, #1
90003166:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
90003168:	687b      	ldr	r3, [r7, #4]
9000316a:	2200      	movs	r2, #0
9000316c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
90003170:	687b      	ldr	r3, [r7, #4]
90003172:	2201      	movs	r2, #1
90003174:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
90003178:	2300      	movs	r3, #0
}
9000317a:	4618      	mov	r0, r3
9000317c:	3710      	adds	r7, #16
9000317e:	46bd      	mov	sp, r7
90003180:	bd80      	pop	{r7, pc}
90003182:	bf00      	nop
90003184:	f000f800 	.word	0xf000f800

90003188 <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
90003188:	b580      	push	{r7, lr}
9000318a:	b082      	sub	sp, #8
9000318c:	af00      	add	r7, sp, #0
9000318e:	6078      	str	r0, [r7, #4]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
90003190:	6878      	ldr	r0, [r7, #4]
90003192:	f000 f81b 	bl	900031cc <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
90003196:	687b      	ldr	r3, [r7, #4]
90003198:	2200      	movs	r2, #0
9000319a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
9000319e:	687b      	ldr	r3, [r7, #4]
900031a0:	2200      	movs	r2, #0
900031a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
900031a6:	687b      	ldr	r3, [r7, #4]
900031a8:	2200      	movs	r2, #0
900031aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
900031ae:	2300      	movs	r3, #0
}
900031b0:	4618      	mov	r0, r3
900031b2:	3708      	adds	r7, #8
900031b4:	46bd      	mov	sp, r7
900031b6:	bd80      	pop	{r7, pc}

900031b8 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
900031b8:	b480      	push	{r7}
900031ba:	b083      	sub	sp, #12
900031bc:	af00      	add	r7, sp, #0
900031be:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
900031c0:	bf00      	nop
900031c2:	370c      	adds	r7, #12
900031c4:	46bd      	mov	sp, r7
900031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
900031ca:	4770      	bx	lr

900031cc <HAL_LTDC_MspDeInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef *hltdc)
{
900031cc:	b480      	push	{r7}
900031ce:	b083      	sub	sp, #12
900031d0:	af00      	add	r7, sp, #0
900031d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspDeInit could be implemented in the user file
   */
}
900031d4:	bf00      	nop
900031d6:	370c      	adds	r7, #12
900031d8:	46bd      	mov	sp, r7
900031da:	f85d 7b04 	ldr.w	r7, [sp], #4
900031de:	4770      	bx	lr

900031e0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
900031e0:	b5b0      	push	{r4, r5, r7, lr}
900031e2:	b084      	sub	sp, #16
900031e4:	af00      	add	r7, sp, #0
900031e6:	60f8      	str	r0, [r7, #12]
900031e8:	60b9      	str	r1, [r7, #8]
900031ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
900031ec:	68fb      	ldr	r3, [r7, #12]
900031ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
900031f2:	2b01      	cmp	r3, #1
900031f4:	d101      	bne.n	900031fa <HAL_LTDC_ConfigLayer+0x1a>
900031f6:	2302      	movs	r3, #2
900031f8:	e02c      	b.n	90003254 <HAL_LTDC_ConfigLayer+0x74>
900031fa:	68fb      	ldr	r3, [r7, #12]
900031fc:	2201      	movs	r2, #1
900031fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90003202:	68fb      	ldr	r3, [r7, #12]
90003204:	2202      	movs	r2, #2
90003206:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000320a:	68fa      	ldr	r2, [r7, #12]
9000320c:	687b      	ldr	r3, [r7, #4]
9000320e:	2134      	movs	r1, #52	; 0x34
90003210:	fb01 f303 	mul.w	r3, r1, r3
90003214:	4413      	add	r3, r2
90003216:	f103 0238 	add.w	r2, r3, #56	; 0x38
9000321a:	68bb      	ldr	r3, [r7, #8]
9000321c:	4614      	mov	r4, r2
9000321e:	461d      	mov	r5, r3
90003220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90003222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90003224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90003226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90003228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
9000322a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
9000322c:	682b      	ldr	r3, [r5, #0]
9000322e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
90003230:	687a      	ldr	r2, [r7, #4]
90003232:	68b9      	ldr	r1, [r7, #8]
90003234:	68f8      	ldr	r0, [r7, #12]
90003236:	f000 f81f 	bl	90003278 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
9000323a:	68fb      	ldr	r3, [r7, #12]
9000323c:	681b      	ldr	r3, [r3, #0]
9000323e:	2201      	movs	r2, #1
90003240:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
90003242:	68fb      	ldr	r3, [r7, #12]
90003244:	2201      	movs	r2, #1
90003246:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
9000324a:	68fb      	ldr	r3, [r7, #12]
9000324c:	2200      	movs	r2, #0
9000324e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
90003252:	2300      	movs	r3, #0
}
90003254:	4618      	mov	r0, r3
90003256:	3710      	adds	r7, #16
90003258:	46bd      	mov	sp, r7
9000325a:	bdb0      	pop	{r4, r5, r7, pc}

9000325c <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
9000325c:	b480      	push	{r7}
9000325e:	b083      	sub	sp, #12
90003260:	af00      	add	r7, sp, #0
90003262:	6078      	str	r0, [r7, #4]
  return hltdc->State;
90003264:	687b      	ldr	r3, [r7, #4]
90003266:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
9000326a:	b2db      	uxtb	r3, r3
}
9000326c:	4618      	mov	r0, r3
9000326e:	370c      	adds	r7, #12
90003270:	46bd      	mov	sp, r7
90003272:	f85d 7b04 	ldr.w	r7, [sp], #4
90003276:	4770      	bx	lr

90003278 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
90003278:	b480      	push	{r7}
9000327a:	b089      	sub	sp, #36	; 0x24
9000327c:	af00      	add	r7, sp, #0
9000327e:	60f8      	str	r0, [r7, #12]
90003280:	60b9      	str	r1, [r7, #8]
90003282:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90003284:	68bb      	ldr	r3, [r7, #8]
90003286:	685a      	ldr	r2, [r3, #4]
90003288:	68fb      	ldr	r3, [r7, #12]
9000328a:	681b      	ldr	r3, [r3, #0]
9000328c:	68db      	ldr	r3, [r3, #12]
9000328e:	0c1b      	lsrs	r3, r3, #16
90003290:	f3c3 030b 	ubfx	r3, r3, #0, #12
90003294:	4413      	add	r3, r2
90003296:	041b      	lsls	r3, r3, #16
90003298:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000329a:	68fb      	ldr	r3, [r7, #12]
9000329c:	681b      	ldr	r3, [r3, #0]
9000329e:	461a      	mov	r2, r3
900032a0:	687b      	ldr	r3, [r7, #4]
900032a2:	01db      	lsls	r3, r3, #7
900032a4:	4413      	add	r3, r2
900032a6:	3384      	adds	r3, #132	; 0x84
900032a8:	685b      	ldr	r3, [r3, #4]
900032aa:	68fa      	ldr	r2, [r7, #12]
900032ac:	6812      	ldr	r2, [r2, #0]
900032ae:	4611      	mov	r1, r2
900032b0:	687a      	ldr	r2, [r7, #4]
900032b2:	01d2      	lsls	r2, r2, #7
900032b4:	440a      	add	r2, r1
900032b6:	3284      	adds	r2, #132	; 0x84
900032b8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
900032bc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
900032be:	68bb      	ldr	r3, [r7, #8]
900032c0:	681a      	ldr	r2, [r3, #0]
900032c2:	68fb      	ldr	r3, [r7, #12]
900032c4:	681b      	ldr	r3, [r3, #0]
900032c6:	68db      	ldr	r3, [r3, #12]
900032c8:	0c1b      	lsrs	r3, r3, #16
900032ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
900032ce:	4413      	add	r3, r2
900032d0:	1c5a      	adds	r2, r3, #1
900032d2:	68fb      	ldr	r3, [r7, #12]
900032d4:	681b      	ldr	r3, [r3, #0]
900032d6:	4619      	mov	r1, r3
900032d8:	687b      	ldr	r3, [r7, #4]
900032da:	01db      	lsls	r3, r3, #7
900032dc:	440b      	add	r3, r1
900032de:	3384      	adds	r3, #132	; 0x84
900032e0:	4619      	mov	r1, r3
900032e2:	69fb      	ldr	r3, [r7, #28]
900032e4:	4313      	orrs	r3, r2
900032e6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
900032e8:	68bb      	ldr	r3, [r7, #8]
900032ea:	68da      	ldr	r2, [r3, #12]
900032ec:	68fb      	ldr	r3, [r7, #12]
900032ee:	681b      	ldr	r3, [r3, #0]
900032f0:	68db      	ldr	r3, [r3, #12]
900032f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
900032f6:	4413      	add	r3, r2
900032f8:	041b      	lsls	r3, r3, #16
900032fa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
900032fc:	68fb      	ldr	r3, [r7, #12]
900032fe:	681b      	ldr	r3, [r3, #0]
90003300:	461a      	mov	r2, r3
90003302:	687b      	ldr	r3, [r7, #4]
90003304:	01db      	lsls	r3, r3, #7
90003306:	4413      	add	r3, r2
90003308:	3384      	adds	r3, #132	; 0x84
9000330a:	689b      	ldr	r3, [r3, #8]
9000330c:	68fa      	ldr	r2, [r7, #12]
9000330e:	6812      	ldr	r2, [r2, #0]
90003310:	4611      	mov	r1, r2
90003312:	687a      	ldr	r2, [r7, #4]
90003314:	01d2      	lsls	r2, r2, #7
90003316:	440a      	add	r2, r1
90003318:	3284      	adds	r2, #132	; 0x84
9000331a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
9000331e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
90003320:	68bb      	ldr	r3, [r7, #8]
90003322:	689a      	ldr	r2, [r3, #8]
90003324:	68fb      	ldr	r3, [r7, #12]
90003326:	681b      	ldr	r3, [r3, #0]
90003328:	68db      	ldr	r3, [r3, #12]
9000332a:	f3c3 030a 	ubfx	r3, r3, #0, #11
9000332e:	4413      	add	r3, r2
90003330:	1c5a      	adds	r2, r3, #1
90003332:	68fb      	ldr	r3, [r7, #12]
90003334:	681b      	ldr	r3, [r3, #0]
90003336:	4619      	mov	r1, r3
90003338:	687b      	ldr	r3, [r7, #4]
9000333a:	01db      	lsls	r3, r3, #7
9000333c:	440b      	add	r3, r1
9000333e:	3384      	adds	r3, #132	; 0x84
90003340:	4619      	mov	r1, r3
90003342:	69fb      	ldr	r3, [r7, #28]
90003344:	4313      	orrs	r3, r2
90003346:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
90003348:	68fb      	ldr	r3, [r7, #12]
9000334a:	681b      	ldr	r3, [r3, #0]
9000334c:	461a      	mov	r2, r3
9000334e:	687b      	ldr	r3, [r7, #4]
90003350:	01db      	lsls	r3, r3, #7
90003352:	4413      	add	r3, r2
90003354:	3384      	adds	r3, #132	; 0x84
90003356:	691b      	ldr	r3, [r3, #16]
90003358:	68fa      	ldr	r2, [r7, #12]
9000335a:	6812      	ldr	r2, [r2, #0]
9000335c:	4611      	mov	r1, r2
9000335e:	687a      	ldr	r2, [r7, #4]
90003360:	01d2      	lsls	r2, r2, #7
90003362:	440a      	add	r2, r1
90003364:	3284      	adds	r2, #132	; 0x84
90003366:	f023 0307 	bic.w	r3, r3, #7
9000336a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
9000336c:	68fb      	ldr	r3, [r7, #12]
9000336e:	681b      	ldr	r3, [r3, #0]
90003370:	461a      	mov	r2, r3
90003372:	687b      	ldr	r3, [r7, #4]
90003374:	01db      	lsls	r3, r3, #7
90003376:	4413      	add	r3, r2
90003378:	3384      	adds	r3, #132	; 0x84
9000337a:	461a      	mov	r2, r3
9000337c:	68bb      	ldr	r3, [r7, #8]
9000337e:	691b      	ldr	r3, [r3, #16]
90003380:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
90003382:	68bb      	ldr	r3, [r7, #8]
90003384:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
90003388:	021b      	lsls	r3, r3, #8
9000338a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
9000338c:	68bb      	ldr	r3, [r7, #8]
9000338e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
90003392:	041b      	lsls	r3, r3, #16
90003394:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
90003396:	68bb      	ldr	r3, [r7, #8]
90003398:	699b      	ldr	r3, [r3, #24]
9000339a:	061b      	lsls	r3, r3, #24
9000339c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
9000339e:	68fb      	ldr	r3, [r7, #12]
900033a0:	681b      	ldr	r3, [r3, #0]
900033a2:	461a      	mov	r2, r3
900033a4:	687b      	ldr	r3, [r7, #4]
900033a6:	01db      	lsls	r3, r3, #7
900033a8:	4413      	add	r3, r2
900033aa:	3384      	adds	r3, #132	; 0x84
900033ac:	699b      	ldr	r3, [r3, #24]
900033ae:	68fb      	ldr	r3, [r7, #12]
900033b0:	681b      	ldr	r3, [r3, #0]
900033b2:	461a      	mov	r2, r3
900033b4:	687b      	ldr	r3, [r7, #4]
900033b6:	01db      	lsls	r3, r3, #7
900033b8:	4413      	add	r3, r2
900033ba:	3384      	adds	r3, #132	; 0x84
900033bc:	461a      	mov	r2, r3
900033be:	2300      	movs	r3, #0
900033c0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
900033c2:	68bb      	ldr	r3, [r7, #8]
900033c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
900033c8:	461a      	mov	r2, r3
900033ca:	69fb      	ldr	r3, [r7, #28]
900033cc:	431a      	orrs	r2, r3
900033ce:	69bb      	ldr	r3, [r7, #24]
900033d0:	431a      	orrs	r2, r3
900033d2:	68fb      	ldr	r3, [r7, #12]
900033d4:	681b      	ldr	r3, [r3, #0]
900033d6:	4619      	mov	r1, r3
900033d8:	687b      	ldr	r3, [r7, #4]
900033da:	01db      	lsls	r3, r3, #7
900033dc:	440b      	add	r3, r1
900033de:	3384      	adds	r3, #132	; 0x84
900033e0:	4619      	mov	r1, r3
900033e2:	697b      	ldr	r3, [r7, #20]
900033e4:	4313      	orrs	r3, r2
900033e6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
900033e8:	68fb      	ldr	r3, [r7, #12]
900033ea:	681b      	ldr	r3, [r3, #0]
900033ec:	461a      	mov	r2, r3
900033ee:	687b      	ldr	r3, [r7, #4]
900033f0:	01db      	lsls	r3, r3, #7
900033f2:	4413      	add	r3, r2
900033f4:	3384      	adds	r3, #132	; 0x84
900033f6:	695b      	ldr	r3, [r3, #20]
900033f8:	68fa      	ldr	r2, [r7, #12]
900033fa:	6812      	ldr	r2, [r2, #0]
900033fc:	4611      	mov	r1, r2
900033fe:	687a      	ldr	r2, [r7, #4]
90003400:	01d2      	lsls	r2, r2, #7
90003402:	440a      	add	r2, r1
90003404:	3284      	adds	r2, #132	; 0x84
90003406:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
9000340a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
9000340c:	68fb      	ldr	r3, [r7, #12]
9000340e:	681b      	ldr	r3, [r3, #0]
90003410:	461a      	mov	r2, r3
90003412:	687b      	ldr	r3, [r7, #4]
90003414:	01db      	lsls	r3, r3, #7
90003416:	4413      	add	r3, r2
90003418:	3384      	adds	r3, #132	; 0x84
9000341a:	461a      	mov	r2, r3
9000341c:	68bb      	ldr	r3, [r7, #8]
9000341e:	695b      	ldr	r3, [r3, #20]
90003420:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
90003422:	68fb      	ldr	r3, [r7, #12]
90003424:	681b      	ldr	r3, [r3, #0]
90003426:	461a      	mov	r2, r3
90003428:	687b      	ldr	r3, [r7, #4]
9000342a:	01db      	lsls	r3, r3, #7
9000342c:	4413      	add	r3, r2
9000342e:	3384      	adds	r3, #132	; 0x84
90003430:	69da      	ldr	r2, [r3, #28]
90003432:	68fb      	ldr	r3, [r7, #12]
90003434:	681b      	ldr	r3, [r3, #0]
90003436:	4619      	mov	r1, r3
90003438:	687b      	ldr	r3, [r7, #4]
9000343a:	01db      	lsls	r3, r3, #7
9000343c:	440b      	add	r3, r1
9000343e:	3384      	adds	r3, #132	; 0x84
90003440:	4619      	mov	r1, r3
90003442:	4b58      	ldr	r3, [pc, #352]	; (900035a4 <LTDC_SetConfig+0x32c>)
90003444:	4013      	ands	r3, r2
90003446:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
90003448:	68bb      	ldr	r3, [r7, #8]
9000344a:	69da      	ldr	r2, [r3, #28]
9000344c:	68bb      	ldr	r3, [r7, #8]
9000344e:	6a1b      	ldr	r3, [r3, #32]
90003450:	68f9      	ldr	r1, [r7, #12]
90003452:	6809      	ldr	r1, [r1, #0]
90003454:	4608      	mov	r0, r1
90003456:	6879      	ldr	r1, [r7, #4]
90003458:	01c9      	lsls	r1, r1, #7
9000345a:	4401      	add	r1, r0
9000345c:	3184      	adds	r1, #132	; 0x84
9000345e:	4313      	orrs	r3, r2
90003460:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
90003462:	68fb      	ldr	r3, [r7, #12]
90003464:	681b      	ldr	r3, [r3, #0]
90003466:	461a      	mov	r2, r3
90003468:	687b      	ldr	r3, [r7, #4]
9000346a:	01db      	lsls	r3, r3, #7
9000346c:	4413      	add	r3, r2
9000346e:	3384      	adds	r3, #132	; 0x84
90003470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90003472:	68fb      	ldr	r3, [r7, #12]
90003474:	681b      	ldr	r3, [r3, #0]
90003476:	461a      	mov	r2, r3
90003478:	687b      	ldr	r3, [r7, #4]
9000347a:	01db      	lsls	r3, r3, #7
9000347c:	4413      	add	r3, r2
9000347e:	3384      	adds	r3, #132	; 0x84
90003480:	461a      	mov	r2, r3
90003482:	2300      	movs	r3, #0
90003484:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
90003486:	68fb      	ldr	r3, [r7, #12]
90003488:	681b      	ldr	r3, [r3, #0]
9000348a:	461a      	mov	r2, r3
9000348c:	687b      	ldr	r3, [r7, #4]
9000348e:	01db      	lsls	r3, r3, #7
90003490:	4413      	add	r3, r2
90003492:	3384      	adds	r3, #132	; 0x84
90003494:	461a      	mov	r2, r3
90003496:	68bb      	ldr	r3, [r7, #8]
90003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000349a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
9000349c:	68bb      	ldr	r3, [r7, #8]
9000349e:	691b      	ldr	r3, [r3, #16]
900034a0:	2b00      	cmp	r3, #0
900034a2:	d102      	bne.n	900034aa <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
900034a4:	2304      	movs	r3, #4
900034a6:	61fb      	str	r3, [r7, #28]
900034a8:	e01b      	b.n	900034e2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
900034aa:	68bb      	ldr	r3, [r7, #8]
900034ac:	691b      	ldr	r3, [r3, #16]
900034ae:	2b01      	cmp	r3, #1
900034b0:	d102      	bne.n	900034b8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
900034b2:	2303      	movs	r3, #3
900034b4:	61fb      	str	r3, [r7, #28]
900034b6:	e014      	b.n	900034e2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
900034b8:	68bb      	ldr	r3, [r7, #8]
900034ba:	691b      	ldr	r3, [r3, #16]
900034bc:	2b04      	cmp	r3, #4
900034be:	d00b      	beq.n	900034d8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
900034c0:	68bb      	ldr	r3, [r7, #8]
900034c2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
900034c4:	2b02      	cmp	r3, #2
900034c6:	d007      	beq.n	900034d8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
900034c8:	68bb      	ldr	r3, [r7, #8]
900034ca:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
900034cc:	2b03      	cmp	r3, #3
900034ce:	d003      	beq.n	900034d8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
900034d0:	68bb      	ldr	r3, [r7, #8]
900034d2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
900034d4:	2b07      	cmp	r3, #7
900034d6:	d102      	bne.n	900034de <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
900034d8:	2302      	movs	r3, #2
900034da:	61fb      	str	r3, [r7, #28]
900034dc:	e001      	b.n	900034e2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
900034de:	2301      	movs	r3, #1
900034e0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
900034e2:	68fb      	ldr	r3, [r7, #12]
900034e4:	681b      	ldr	r3, [r3, #0]
900034e6:	461a      	mov	r2, r3
900034e8:	687b      	ldr	r3, [r7, #4]
900034ea:	01db      	lsls	r3, r3, #7
900034ec:	4413      	add	r3, r2
900034ee:	3384      	adds	r3, #132	; 0x84
900034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900034f2:	68fa      	ldr	r2, [r7, #12]
900034f4:	6812      	ldr	r2, [r2, #0]
900034f6:	4611      	mov	r1, r2
900034f8:	687a      	ldr	r2, [r7, #4]
900034fa:	01d2      	lsls	r2, r2, #7
900034fc:	440a      	add	r2, r1
900034fe:	3284      	adds	r2, #132	; 0x84
90003500:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
90003504:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
90003506:	68bb      	ldr	r3, [r7, #8]
90003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000350a:	69fa      	ldr	r2, [r7, #28]
9000350c:	fb02 f303 	mul.w	r3, r2, r3
90003510:	041a      	lsls	r2, r3, #16
90003512:	68bb      	ldr	r3, [r7, #8]
90003514:	6859      	ldr	r1, [r3, #4]
90003516:	68bb      	ldr	r3, [r7, #8]
90003518:	681b      	ldr	r3, [r3, #0]
9000351a:	1acb      	subs	r3, r1, r3
9000351c:	69f9      	ldr	r1, [r7, #28]
9000351e:	fb01 f303 	mul.w	r3, r1, r3
90003522:	3303      	adds	r3, #3
90003524:	68f9      	ldr	r1, [r7, #12]
90003526:	6809      	ldr	r1, [r1, #0]
90003528:	4608      	mov	r0, r1
9000352a:	6879      	ldr	r1, [r7, #4]
9000352c:	01c9      	lsls	r1, r1, #7
9000352e:	4401      	add	r1, r0
90003530:	3184      	adds	r1, #132	; 0x84
90003532:	4313      	orrs	r3, r2
90003534:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
90003536:	68fb      	ldr	r3, [r7, #12]
90003538:	681b      	ldr	r3, [r3, #0]
9000353a:	461a      	mov	r2, r3
9000353c:	687b      	ldr	r3, [r7, #4]
9000353e:	01db      	lsls	r3, r3, #7
90003540:	4413      	add	r3, r2
90003542:	3384      	adds	r3, #132	; 0x84
90003544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90003546:	68fb      	ldr	r3, [r7, #12]
90003548:	681b      	ldr	r3, [r3, #0]
9000354a:	4619      	mov	r1, r3
9000354c:	687b      	ldr	r3, [r7, #4]
9000354e:	01db      	lsls	r3, r3, #7
90003550:	440b      	add	r3, r1
90003552:	3384      	adds	r3, #132	; 0x84
90003554:	4619      	mov	r1, r3
90003556:	4b14      	ldr	r3, [pc, #80]	; (900035a8 <LTDC_SetConfig+0x330>)
90003558:	4013      	ands	r3, r2
9000355a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
9000355c:	68fb      	ldr	r3, [r7, #12]
9000355e:	681b      	ldr	r3, [r3, #0]
90003560:	461a      	mov	r2, r3
90003562:	687b      	ldr	r3, [r7, #4]
90003564:	01db      	lsls	r3, r3, #7
90003566:	4413      	add	r3, r2
90003568:	3384      	adds	r3, #132	; 0x84
9000356a:	461a      	mov	r2, r3
9000356c:	68bb      	ldr	r3, [r7, #8]
9000356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003570:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
90003572:	68fb      	ldr	r3, [r7, #12]
90003574:	681b      	ldr	r3, [r3, #0]
90003576:	461a      	mov	r2, r3
90003578:	687b      	ldr	r3, [r7, #4]
9000357a:	01db      	lsls	r3, r3, #7
9000357c:	4413      	add	r3, r2
9000357e:	3384      	adds	r3, #132	; 0x84
90003580:	681b      	ldr	r3, [r3, #0]
90003582:	68fa      	ldr	r2, [r7, #12]
90003584:	6812      	ldr	r2, [r2, #0]
90003586:	4611      	mov	r1, r2
90003588:	687a      	ldr	r2, [r7, #4]
9000358a:	01d2      	lsls	r2, r2, #7
9000358c:	440a      	add	r2, r1
9000358e:	3284      	adds	r2, #132	; 0x84
90003590:	f043 0301 	orr.w	r3, r3, #1
90003594:	6013      	str	r3, [r2, #0]
}
90003596:	bf00      	nop
90003598:	3724      	adds	r7, #36	; 0x24
9000359a:	46bd      	mov	sp, r7
9000359c:	f85d 7b04 	ldr.w	r7, [sp], #4
900035a0:	4770      	bx	lr
900035a2:	bf00      	nop
900035a4:	fffff8f8 	.word	0xfffff8f8
900035a8:	fffff800 	.word	0xfffff800

900035ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
900035ac:	b580      	push	{r7, lr}
900035ae:	b082      	sub	sp, #8
900035b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
900035b2:	2300      	movs	r3, #0
900035b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
900035b6:	4b23      	ldr	r3, [pc, #140]	; (90003644 <HAL_PWREx_EnableOverDrive+0x98>)
900035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900035ba:	4a22      	ldr	r2, [pc, #136]	; (90003644 <HAL_PWREx_EnableOverDrive+0x98>)
900035bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
900035c0:	6413      	str	r3, [r2, #64]	; 0x40
900035c2:	4b20      	ldr	r3, [pc, #128]	; (90003644 <HAL_PWREx_EnableOverDrive+0x98>)
900035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900035c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
900035ca:	603b      	str	r3, [r7, #0]
900035cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
900035ce:	4b1e      	ldr	r3, [pc, #120]	; (90003648 <HAL_PWREx_EnableOverDrive+0x9c>)
900035d0:	681b      	ldr	r3, [r3, #0]
900035d2:	4a1d      	ldr	r2, [pc, #116]	; (90003648 <HAL_PWREx_EnableOverDrive+0x9c>)
900035d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900035d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
900035da:	f7fe fc83 	bl	90001ee4 <HAL_GetTick>
900035de:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
900035e0:	e009      	b.n	900035f6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
900035e2:	f7fe fc7f 	bl	90001ee4 <HAL_GetTick>
900035e6:	4602      	mov	r2, r0
900035e8:	687b      	ldr	r3, [r7, #4]
900035ea:	1ad3      	subs	r3, r2, r3
900035ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
900035f0:	d901      	bls.n	900035f6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
900035f2:	2303      	movs	r3, #3
900035f4:	e022      	b.n	9000363c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
900035f6:	4b14      	ldr	r3, [pc, #80]	; (90003648 <HAL_PWREx_EnableOverDrive+0x9c>)
900035f8:	685b      	ldr	r3, [r3, #4]
900035fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
900035fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90003602:	d1ee      	bne.n	900035e2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
90003604:	4b10      	ldr	r3, [pc, #64]	; (90003648 <HAL_PWREx_EnableOverDrive+0x9c>)
90003606:	681b      	ldr	r3, [r3, #0]
90003608:	4a0f      	ldr	r2, [pc, #60]	; (90003648 <HAL_PWREx_EnableOverDrive+0x9c>)
9000360a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000360e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
90003610:	f7fe fc68 	bl	90001ee4 <HAL_GetTick>
90003614:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
90003616:	e009      	b.n	9000362c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
90003618:	f7fe fc64 	bl	90001ee4 <HAL_GetTick>
9000361c:	4602      	mov	r2, r0
9000361e:	687b      	ldr	r3, [r7, #4]
90003620:	1ad3      	subs	r3, r2, r3
90003622:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
90003626:	d901      	bls.n	9000362c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
90003628:	2303      	movs	r3, #3
9000362a:	e007      	b.n	9000363c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
9000362c:	4b06      	ldr	r3, [pc, #24]	; (90003648 <HAL_PWREx_EnableOverDrive+0x9c>)
9000362e:	685b      	ldr	r3, [r3, #4]
90003630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90003634:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90003638:	d1ee      	bne.n	90003618 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
9000363a:	2300      	movs	r3, #0
}
9000363c:	4618      	mov	r0, r3
9000363e:	3708      	adds	r7, #8
90003640:	46bd      	mov	sp, r7
90003642:	bd80      	pop	{r7, pc}
90003644:	40023800 	.word	0x40023800
90003648:	40007000 	.word	0x40007000

9000364c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
9000364c:	b580      	push	{r7, lr}
9000364e:	b086      	sub	sp, #24
90003650:	af00      	add	r7, sp, #0
90003652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
90003654:	2300      	movs	r3, #0
90003656:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
90003658:	687b      	ldr	r3, [r7, #4]
9000365a:	2b00      	cmp	r3, #0
9000365c:	d101      	bne.n	90003662 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
9000365e:	2301      	movs	r3, #1
90003660:	e291      	b.n	90003b86 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
90003662:	687b      	ldr	r3, [r7, #4]
90003664:	681b      	ldr	r3, [r3, #0]
90003666:	f003 0301 	and.w	r3, r3, #1
9000366a:	2b00      	cmp	r3, #0
9000366c:	f000 8087 	beq.w	9000377e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
90003670:	4b96      	ldr	r3, [pc, #600]	; (900038cc <HAL_RCC_OscConfig+0x280>)
90003672:	689b      	ldr	r3, [r3, #8]
90003674:	f003 030c 	and.w	r3, r3, #12
90003678:	2b04      	cmp	r3, #4
9000367a:	d00c      	beq.n	90003696 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
9000367c:	4b93      	ldr	r3, [pc, #588]	; (900038cc <HAL_RCC_OscConfig+0x280>)
9000367e:	689b      	ldr	r3, [r3, #8]
90003680:	f003 030c 	and.w	r3, r3, #12
90003684:	2b08      	cmp	r3, #8
90003686:	d112      	bne.n	900036ae <HAL_RCC_OscConfig+0x62>
90003688:	4b90      	ldr	r3, [pc, #576]	; (900038cc <HAL_RCC_OscConfig+0x280>)
9000368a:	685b      	ldr	r3, [r3, #4]
9000368c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90003690:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90003694:	d10b      	bne.n	900036ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90003696:	4b8d      	ldr	r3, [pc, #564]	; (900038cc <HAL_RCC_OscConfig+0x280>)
90003698:	681b      	ldr	r3, [r3, #0]
9000369a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
9000369e:	2b00      	cmp	r3, #0
900036a0:	d06c      	beq.n	9000377c <HAL_RCC_OscConfig+0x130>
900036a2:	687b      	ldr	r3, [r7, #4]
900036a4:	685b      	ldr	r3, [r3, #4]
900036a6:	2b00      	cmp	r3, #0
900036a8:	d168      	bne.n	9000377c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
900036aa:	2301      	movs	r3, #1
900036ac:	e26b      	b.n	90003b86 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
900036ae:	687b      	ldr	r3, [r7, #4]
900036b0:	685b      	ldr	r3, [r3, #4]
900036b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
900036b6:	d106      	bne.n	900036c6 <HAL_RCC_OscConfig+0x7a>
900036b8:	4b84      	ldr	r3, [pc, #528]	; (900038cc <HAL_RCC_OscConfig+0x280>)
900036ba:	681b      	ldr	r3, [r3, #0]
900036bc:	4a83      	ldr	r2, [pc, #524]	; (900038cc <HAL_RCC_OscConfig+0x280>)
900036be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900036c2:	6013      	str	r3, [r2, #0]
900036c4:	e02e      	b.n	90003724 <HAL_RCC_OscConfig+0xd8>
900036c6:	687b      	ldr	r3, [r7, #4]
900036c8:	685b      	ldr	r3, [r3, #4]
900036ca:	2b00      	cmp	r3, #0
900036cc:	d10c      	bne.n	900036e8 <HAL_RCC_OscConfig+0x9c>
900036ce:	4b7f      	ldr	r3, [pc, #508]	; (900038cc <HAL_RCC_OscConfig+0x280>)
900036d0:	681b      	ldr	r3, [r3, #0]
900036d2:	4a7e      	ldr	r2, [pc, #504]	; (900038cc <HAL_RCC_OscConfig+0x280>)
900036d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
900036d8:	6013      	str	r3, [r2, #0]
900036da:	4b7c      	ldr	r3, [pc, #496]	; (900038cc <HAL_RCC_OscConfig+0x280>)
900036dc:	681b      	ldr	r3, [r3, #0]
900036de:	4a7b      	ldr	r2, [pc, #492]	; (900038cc <HAL_RCC_OscConfig+0x280>)
900036e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
900036e4:	6013      	str	r3, [r2, #0]
900036e6:	e01d      	b.n	90003724 <HAL_RCC_OscConfig+0xd8>
900036e8:	687b      	ldr	r3, [r7, #4]
900036ea:	685b      	ldr	r3, [r3, #4]
900036ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
900036f0:	d10c      	bne.n	9000370c <HAL_RCC_OscConfig+0xc0>
900036f2:	4b76      	ldr	r3, [pc, #472]	; (900038cc <HAL_RCC_OscConfig+0x280>)
900036f4:	681b      	ldr	r3, [r3, #0]
900036f6:	4a75      	ldr	r2, [pc, #468]	; (900038cc <HAL_RCC_OscConfig+0x280>)
900036f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
900036fc:	6013      	str	r3, [r2, #0]
900036fe:	4b73      	ldr	r3, [pc, #460]	; (900038cc <HAL_RCC_OscConfig+0x280>)
90003700:	681b      	ldr	r3, [r3, #0]
90003702:	4a72      	ldr	r2, [pc, #456]	; (900038cc <HAL_RCC_OscConfig+0x280>)
90003704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90003708:	6013      	str	r3, [r2, #0]
9000370a:	e00b      	b.n	90003724 <HAL_RCC_OscConfig+0xd8>
9000370c:	4b6f      	ldr	r3, [pc, #444]	; (900038cc <HAL_RCC_OscConfig+0x280>)
9000370e:	681b      	ldr	r3, [r3, #0]
90003710:	4a6e      	ldr	r2, [pc, #440]	; (900038cc <HAL_RCC_OscConfig+0x280>)
90003712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90003716:	6013      	str	r3, [r2, #0]
90003718:	4b6c      	ldr	r3, [pc, #432]	; (900038cc <HAL_RCC_OscConfig+0x280>)
9000371a:	681b      	ldr	r3, [r3, #0]
9000371c:	4a6b      	ldr	r2, [pc, #428]	; (900038cc <HAL_RCC_OscConfig+0x280>)
9000371e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90003722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
90003724:	687b      	ldr	r3, [r7, #4]
90003726:	685b      	ldr	r3, [r3, #4]
90003728:	2b00      	cmp	r3, #0
9000372a:	d013      	beq.n	90003754 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000372c:	f7fe fbda 	bl	90001ee4 <HAL_GetTick>
90003730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90003732:	e008      	b.n	90003746 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90003734:	f7fe fbd6 	bl	90001ee4 <HAL_GetTick>
90003738:	4602      	mov	r2, r0
9000373a:	693b      	ldr	r3, [r7, #16]
9000373c:	1ad3      	subs	r3, r2, r3
9000373e:	2b64      	cmp	r3, #100	; 0x64
90003740:	d901      	bls.n	90003746 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
90003742:	2303      	movs	r3, #3
90003744:	e21f      	b.n	90003b86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90003746:	4b61      	ldr	r3, [pc, #388]	; (900038cc <HAL_RCC_OscConfig+0x280>)
90003748:	681b      	ldr	r3, [r3, #0]
9000374a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
9000374e:	2b00      	cmp	r3, #0
90003750:	d0f0      	beq.n	90003734 <HAL_RCC_OscConfig+0xe8>
90003752:	e014      	b.n	9000377e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90003754:	f7fe fbc6 	bl	90001ee4 <HAL_GetTick>
90003758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
9000375a:	e008      	b.n	9000376e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000375c:	f7fe fbc2 	bl	90001ee4 <HAL_GetTick>
90003760:	4602      	mov	r2, r0
90003762:	693b      	ldr	r3, [r7, #16]
90003764:	1ad3      	subs	r3, r2, r3
90003766:	2b64      	cmp	r3, #100	; 0x64
90003768:	d901      	bls.n	9000376e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
9000376a:	2303      	movs	r3, #3
9000376c:	e20b      	b.n	90003b86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
9000376e:	4b57      	ldr	r3, [pc, #348]	; (900038cc <HAL_RCC_OscConfig+0x280>)
90003770:	681b      	ldr	r3, [r3, #0]
90003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90003776:	2b00      	cmp	r3, #0
90003778:	d1f0      	bne.n	9000375c <HAL_RCC_OscConfig+0x110>
9000377a:	e000      	b.n	9000377e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
9000377c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
9000377e:	687b      	ldr	r3, [r7, #4]
90003780:	681b      	ldr	r3, [r3, #0]
90003782:	f003 0302 	and.w	r3, r3, #2
90003786:	2b00      	cmp	r3, #0
90003788:	d069      	beq.n	9000385e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
9000378a:	4b50      	ldr	r3, [pc, #320]	; (900038cc <HAL_RCC_OscConfig+0x280>)
9000378c:	689b      	ldr	r3, [r3, #8]
9000378e:	f003 030c 	and.w	r3, r3, #12
90003792:	2b00      	cmp	r3, #0
90003794:	d00b      	beq.n	900037ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
90003796:	4b4d      	ldr	r3, [pc, #308]	; (900038cc <HAL_RCC_OscConfig+0x280>)
90003798:	689b      	ldr	r3, [r3, #8]
9000379a:	f003 030c 	and.w	r3, r3, #12
9000379e:	2b08      	cmp	r3, #8
900037a0:	d11c      	bne.n	900037dc <HAL_RCC_OscConfig+0x190>
900037a2:	4b4a      	ldr	r3, [pc, #296]	; (900038cc <HAL_RCC_OscConfig+0x280>)
900037a4:	685b      	ldr	r3, [r3, #4]
900037a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
900037aa:	2b00      	cmp	r3, #0
900037ac:	d116      	bne.n	900037dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
900037ae:	4b47      	ldr	r3, [pc, #284]	; (900038cc <HAL_RCC_OscConfig+0x280>)
900037b0:	681b      	ldr	r3, [r3, #0]
900037b2:	f003 0302 	and.w	r3, r3, #2
900037b6:	2b00      	cmp	r3, #0
900037b8:	d005      	beq.n	900037c6 <HAL_RCC_OscConfig+0x17a>
900037ba:	687b      	ldr	r3, [r7, #4]
900037bc:	68db      	ldr	r3, [r3, #12]
900037be:	2b01      	cmp	r3, #1
900037c0:	d001      	beq.n	900037c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
900037c2:	2301      	movs	r3, #1
900037c4:	e1df      	b.n	90003b86 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
900037c6:	4b41      	ldr	r3, [pc, #260]	; (900038cc <HAL_RCC_OscConfig+0x280>)
900037c8:	681b      	ldr	r3, [r3, #0]
900037ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
900037ce:	687b      	ldr	r3, [r7, #4]
900037d0:	691b      	ldr	r3, [r3, #16]
900037d2:	00db      	lsls	r3, r3, #3
900037d4:	493d      	ldr	r1, [pc, #244]	; (900038cc <HAL_RCC_OscConfig+0x280>)
900037d6:	4313      	orrs	r3, r2
900037d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
900037da:	e040      	b.n	9000385e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
900037dc:	687b      	ldr	r3, [r7, #4]
900037de:	68db      	ldr	r3, [r3, #12]
900037e0:	2b00      	cmp	r3, #0
900037e2:	d023      	beq.n	9000382c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
900037e4:	4b39      	ldr	r3, [pc, #228]	; (900038cc <HAL_RCC_OscConfig+0x280>)
900037e6:	681b      	ldr	r3, [r3, #0]
900037e8:	4a38      	ldr	r2, [pc, #224]	; (900038cc <HAL_RCC_OscConfig+0x280>)
900037ea:	f043 0301 	orr.w	r3, r3, #1
900037ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900037f0:	f7fe fb78 	bl	90001ee4 <HAL_GetTick>
900037f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
900037f6:	e008      	b.n	9000380a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
900037f8:	f7fe fb74 	bl	90001ee4 <HAL_GetTick>
900037fc:	4602      	mov	r2, r0
900037fe:	693b      	ldr	r3, [r7, #16]
90003800:	1ad3      	subs	r3, r2, r3
90003802:	2b02      	cmp	r3, #2
90003804:	d901      	bls.n	9000380a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
90003806:	2303      	movs	r3, #3
90003808:	e1bd      	b.n	90003b86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
9000380a:	4b30      	ldr	r3, [pc, #192]	; (900038cc <HAL_RCC_OscConfig+0x280>)
9000380c:	681b      	ldr	r3, [r3, #0]
9000380e:	f003 0302 	and.w	r3, r3, #2
90003812:	2b00      	cmp	r3, #0
90003814:	d0f0      	beq.n	900037f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90003816:	4b2d      	ldr	r3, [pc, #180]	; (900038cc <HAL_RCC_OscConfig+0x280>)
90003818:	681b      	ldr	r3, [r3, #0]
9000381a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
9000381e:	687b      	ldr	r3, [r7, #4]
90003820:	691b      	ldr	r3, [r3, #16]
90003822:	00db      	lsls	r3, r3, #3
90003824:	4929      	ldr	r1, [pc, #164]	; (900038cc <HAL_RCC_OscConfig+0x280>)
90003826:	4313      	orrs	r3, r2
90003828:	600b      	str	r3, [r1, #0]
9000382a:	e018      	b.n	9000385e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
9000382c:	4b27      	ldr	r3, [pc, #156]	; (900038cc <HAL_RCC_OscConfig+0x280>)
9000382e:	681b      	ldr	r3, [r3, #0]
90003830:	4a26      	ldr	r2, [pc, #152]	; (900038cc <HAL_RCC_OscConfig+0x280>)
90003832:	f023 0301 	bic.w	r3, r3, #1
90003836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90003838:	f7fe fb54 	bl	90001ee4 <HAL_GetTick>
9000383c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
9000383e:	e008      	b.n	90003852 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90003840:	f7fe fb50 	bl	90001ee4 <HAL_GetTick>
90003844:	4602      	mov	r2, r0
90003846:	693b      	ldr	r3, [r7, #16]
90003848:	1ad3      	subs	r3, r2, r3
9000384a:	2b02      	cmp	r3, #2
9000384c:	d901      	bls.n	90003852 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
9000384e:	2303      	movs	r3, #3
90003850:	e199      	b.n	90003b86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
90003852:	4b1e      	ldr	r3, [pc, #120]	; (900038cc <HAL_RCC_OscConfig+0x280>)
90003854:	681b      	ldr	r3, [r3, #0]
90003856:	f003 0302 	and.w	r3, r3, #2
9000385a:	2b00      	cmp	r3, #0
9000385c:	d1f0      	bne.n	90003840 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000385e:	687b      	ldr	r3, [r7, #4]
90003860:	681b      	ldr	r3, [r3, #0]
90003862:	f003 0308 	and.w	r3, r3, #8
90003866:	2b00      	cmp	r3, #0
90003868:	d038      	beq.n	900038dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
9000386a:	687b      	ldr	r3, [r7, #4]
9000386c:	695b      	ldr	r3, [r3, #20]
9000386e:	2b00      	cmp	r3, #0
90003870:	d019      	beq.n	900038a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
90003872:	4b16      	ldr	r3, [pc, #88]	; (900038cc <HAL_RCC_OscConfig+0x280>)
90003874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90003876:	4a15      	ldr	r2, [pc, #84]	; (900038cc <HAL_RCC_OscConfig+0x280>)
90003878:	f043 0301 	orr.w	r3, r3, #1
9000387c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
9000387e:	f7fe fb31 	bl	90001ee4 <HAL_GetTick>
90003882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
90003884:	e008      	b.n	90003898 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90003886:	f7fe fb2d 	bl	90001ee4 <HAL_GetTick>
9000388a:	4602      	mov	r2, r0
9000388c:	693b      	ldr	r3, [r7, #16]
9000388e:	1ad3      	subs	r3, r2, r3
90003890:	2b02      	cmp	r3, #2
90003892:	d901      	bls.n	90003898 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
90003894:	2303      	movs	r3, #3
90003896:	e176      	b.n	90003b86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
90003898:	4b0c      	ldr	r3, [pc, #48]	; (900038cc <HAL_RCC_OscConfig+0x280>)
9000389a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000389c:	f003 0302 	and.w	r3, r3, #2
900038a0:	2b00      	cmp	r3, #0
900038a2:	d0f0      	beq.n	90003886 <HAL_RCC_OscConfig+0x23a>
900038a4:	e01a      	b.n	900038dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
900038a6:	4b09      	ldr	r3, [pc, #36]	; (900038cc <HAL_RCC_OscConfig+0x280>)
900038a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900038aa:	4a08      	ldr	r2, [pc, #32]	; (900038cc <HAL_RCC_OscConfig+0x280>)
900038ac:	f023 0301 	bic.w	r3, r3, #1
900038b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
900038b2:	f7fe fb17 	bl	90001ee4 <HAL_GetTick>
900038b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
900038b8:	e00a      	b.n	900038d0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
900038ba:	f7fe fb13 	bl	90001ee4 <HAL_GetTick>
900038be:	4602      	mov	r2, r0
900038c0:	693b      	ldr	r3, [r7, #16]
900038c2:	1ad3      	subs	r3, r2, r3
900038c4:	2b02      	cmp	r3, #2
900038c6:	d903      	bls.n	900038d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
900038c8:	2303      	movs	r3, #3
900038ca:	e15c      	b.n	90003b86 <HAL_RCC_OscConfig+0x53a>
900038cc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
900038d0:	4b91      	ldr	r3, [pc, #580]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
900038d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900038d4:	f003 0302 	and.w	r3, r3, #2
900038d8:	2b00      	cmp	r3, #0
900038da:	d1ee      	bne.n	900038ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
900038dc:	687b      	ldr	r3, [r7, #4]
900038de:	681b      	ldr	r3, [r3, #0]
900038e0:	f003 0304 	and.w	r3, r3, #4
900038e4:	2b00      	cmp	r3, #0
900038e6:	f000 80a4 	beq.w	90003a32 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
900038ea:	4b8b      	ldr	r3, [pc, #556]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
900038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900038ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
900038f2:	2b00      	cmp	r3, #0
900038f4:	d10d      	bne.n	90003912 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
900038f6:	4b88      	ldr	r3, [pc, #544]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
900038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900038fa:	4a87      	ldr	r2, [pc, #540]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
900038fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90003900:	6413      	str	r3, [r2, #64]	; 0x40
90003902:	4b85      	ldr	r3, [pc, #532]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
90003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
9000390a:	60bb      	str	r3, [r7, #8]
9000390c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
9000390e:	2301      	movs	r3, #1
90003910:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
90003912:	4b82      	ldr	r3, [pc, #520]	; (90003b1c <HAL_RCC_OscConfig+0x4d0>)
90003914:	681b      	ldr	r3, [r3, #0]
90003916:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000391a:	2b00      	cmp	r3, #0
9000391c:	d118      	bne.n	90003950 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
9000391e:	4b7f      	ldr	r3, [pc, #508]	; (90003b1c <HAL_RCC_OscConfig+0x4d0>)
90003920:	681b      	ldr	r3, [r3, #0]
90003922:	4a7e      	ldr	r2, [pc, #504]	; (90003b1c <HAL_RCC_OscConfig+0x4d0>)
90003924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90003928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
9000392a:	f7fe fadb 	bl	90001ee4 <HAL_GetTick>
9000392e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
90003930:	e008      	b.n	90003944 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90003932:	f7fe fad7 	bl	90001ee4 <HAL_GetTick>
90003936:	4602      	mov	r2, r0
90003938:	693b      	ldr	r3, [r7, #16]
9000393a:	1ad3      	subs	r3, r2, r3
9000393c:	2b64      	cmp	r3, #100	; 0x64
9000393e:	d901      	bls.n	90003944 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
90003940:	2303      	movs	r3, #3
90003942:	e120      	b.n	90003b86 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
90003944:	4b75      	ldr	r3, [pc, #468]	; (90003b1c <HAL_RCC_OscConfig+0x4d0>)
90003946:	681b      	ldr	r3, [r3, #0]
90003948:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000394c:	2b00      	cmp	r3, #0
9000394e:	d0f0      	beq.n	90003932 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90003950:	687b      	ldr	r3, [r7, #4]
90003952:	689b      	ldr	r3, [r3, #8]
90003954:	2b01      	cmp	r3, #1
90003956:	d106      	bne.n	90003966 <HAL_RCC_OscConfig+0x31a>
90003958:	4b6f      	ldr	r3, [pc, #444]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
9000395a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000395c:	4a6e      	ldr	r2, [pc, #440]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
9000395e:	f043 0301 	orr.w	r3, r3, #1
90003962:	6713      	str	r3, [r2, #112]	; 0x70
90003964:	e02d      	b.n	900039c2 <HAL_RCC_OscConfig+0x376>
90003966:	687b      	ldr	r3, [r7, #4]
90003968:	689b      	ldr	r3, [r3, #8]
9000396a:	2b00      	cmp	r3, #0
9000396c:	d10c      	bne.n	90003988 <HAL_RCC_OscConfig+0x33c>
9000396e:	4b6a      	ldr	r3, [pc, #424]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
90003970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90003972:	4a69      	ldr	r2, [pc, #420]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
90003974:	f023 0301 	bic.w	r3, r3, #1
90003978:	6713      	str	r3, [r2, #112]	; 0x70
9000397a:	4b67      	ldr	r3, [pc, #412]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
9000397c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000397e:	4a66      	ldr	r2, [pc, #408]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
90003980:	f023 0304 	bic.w	r3, r3, #4
90003984:	6713      	str	r3, [r2, #112]	; 0x70
90003986:	e01c      	b.n	900039c2 <HAL_RCC_OscConfig+0x376>
90003988:	687b      	ldr	r3, [r7, #4]
9000398a:	689b      	ldr	r3, [r3, #8]
9000398c:	2b05      	cmp	r3, #5
9000398e:	d10c      	bne.n	900039aa <HAL_RCC_OscConfig+0x35e>
90003990:	4b61      	ldr	r3, [pc, #388]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
90003992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90003994:	4a60      	ldr	r2, [pc, #384]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
90003996:	f043 0304 	orr.w	r3, r3, #4
9000399a:	6713      	str	r3, [r2, #112]	; 0x70
9000399c:	4b5e      	ldr	r3, [pc, #376]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
9000399e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900039a0:	4a5d      	ldr	r2, [pc, #372]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
900039a2:	f043 0301 	orr.w	r3, r3, #1
900039a6:	6713      	str	r3, [r2, #112]	; 0x70
900039a8:	e00b      	b.n	900039c2 <HAL_RCC_OscConfig+0x376>
900039aa:	4b5b      	ldr	r3, [pc, #364]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
900039ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900039ae:	4a5a      	ldr	r2, [pc, #360]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
900039b0:	f023 0301 	bic.w	r3, r3, #1
900039b4:	6713      	str	r3, [r2, #112]	; 0x70
900039b6:	4b58      	ldr	r3, [pc, #352]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
900039b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900039ba:	4a57      	ldr	r2, [pc, #348]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
900039bc:	f023 0304 	bic.w	r3, r3, #4
900039c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
900039c2:	687b      	ldr	r3, [r7, #4]
900039c4:	689b      	ldr	r3, [r3, #8]
900039c6:	2b00      	cmp	r3, #0
900039c8:	d015      	beq.n	900039f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
900039ca:	f7fe fa8b 	bl	90001ee4 <HAL_GetTick>
900039ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
900039d0:	e00a      	b.n	900039e8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
900039d2:	f7fe fa87 	bl	90001ee4 <HAL_GetTick>
900039d6:	4602      	mov	r2, r0
900039d8:	693b      	ldr	r3, [r7, #16]
900039da:	1ad3      	subs	r3, r2, r3
900039dc:	f241 3288 	movw	r2, #5000	; 0x1388
900039e0:	4293      	cmp	r3, r2
900039e2:	d901      	bls.n	900039e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
900039e4:	2303      	movs	r3, #3
900039e6:	e0ce      	b.n	90003b86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
900039e8:	4b4b      	ldr	r3, [pc, #300]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
900039ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900039ec:	f003 0302 	and.w	r3, r3, #2
900039f0:	2b00      	cmp	r3, #0
900039f2:	d0ee      	beq.n	900039d2 <HAL_RCC_OscConfig+0x386>
900039f4:	e014      	b.n	90003a20 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
900039f6:	f7fe fa75 	bl	90001ee4 <HAL_GetTick>
900039fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
900039fc:	e00a      	b.n	90003a14 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
900039fe:	f7fe fa71 	bl	90001ee4 <HAL_GetTick>
90003a02:	4602      	mov	r2, r0
90003a04:	693b      	ldr	r3, [r7, #16]
90003a06:	1ad3      	subs	r3, r2, r3
90003a08:	f241 3288 	movw	r2, #5000	; 0x1388
90003a0c:	4293      	cmp	r3, r2
90003a0e:	d901      	bls.n	90003a14 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
90003a10:	2303      	movs	r3, #3
90003a12:	e0b8      	b.n	90003b86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
90003a14:	4b40      	ldr	r3, [pc, #256]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
90003a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90003a18:	f003 0302 	and.w	r3, r3, #2
90003a1c:	2b00      	cmp	r3, #0
90003a1e:	d1ee      	bne.n	900039fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
90003a20:	7dfb      	ldrb	r3, [r7, #23]
90003a22:	2b01      	cmp	r3, #1
90003a24:	d105      	bne.n	90003a32 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
90003a26:	4b3c      	ldr	r3, [pc, #240]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
90003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003a2a:	4a3b      	ldr	r2, [pc, #236]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
90003a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
90003a30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
90003a32:	687b      	ldr	r3, [r7, #4]
90003a34:	699b      	ldr	r3, [r3, #24]
90003a36:	2b00      	cmp	r3, #0
90003a38:	f000 80a4 	beq.w	90003b84 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
90003a3c:	4b36      	ldr	r3, [pc, #216]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
90003a3e:	689b      	ldr	r3, [r3, #8]
90003a40:	f003 030c 	and.w	r3, r3, #12
90003a44:	2b08      	cmp	r3, #8
90003a46:	d06b      	beq.n	90003b20 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90003a48:	687b      	ldr	r3, [r7, #4]
90003a4a:	699b      	ldr	r3, [r3, #24]
90003a4c:	2b02      	cmp	r3, #2
90003a4e:	d149      	bne.n	90003ae4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90003a50:	4b31      	ldr	r3, [pc, #196]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
90003a52:	681b      	ldr	r3, [r3, #0]
90003a54:	4a30      	ldr	r2, [pc, #192]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
90003a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90003a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90003a5c:	f7fe fa42 	bl	90001ee4 <HAL_GetTick>
90003a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90003a62:	e008      	b.n	90003a76 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90003a64:	f7fe fa3e 	bl	90001ee4 <HAL_GetTick>
90003a68:	4602      	mov	r2, r0
90003a6a:	693b      	ldr	r3, [r7, #16]
90003a6c:	1ad3      	subs	r3, r2, r3
90003a6e:	2b02      	cmp	r3, #2
90003a70:	d901      	bls.n	90003a76 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
90003a72:	2303      	movs	r3, #3
90003a74:	e087      	b.n	90003b86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90003a76:	4b28      	ldr	r3, [pc, #160]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
90003a78:	681b      	ldr	r3, [r3, #0]
90003a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90003a7e:	2b00      	cmp	r3, #0
90003a80:	d1f0      	bne.n	90003a64 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
90003a82:	687b      	ldr	r3, [r7, #4]
90003a84:	69da      	ldr	r2, [r3, #28]
90003a86:	687b      	ldr	r3, [r7, #4]
90003a88:	6a1b      	ldr	r3, [r3, #32]
90003a8a:	431a      	orrs	r2, r3
90003a8c:	687b      	ldr	r3, [r7, #4]
90003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90003a90:	019b      	lsls	r3, r3, #6
90003a92:	431a      	orrs	r2, r3
90003a94:	687b      	ldr	r3, [r7, #4]
90003a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90003a98:	085b      	lsrs	r3, r3, #1
90003a9a:	3b01      	subs	r3, #1
90003a9c:	041b      	lsls	r3, r3, #16
90003a9e:	431a      	orrs	r2, r3
90003aa0:	687b      	ldr	r3, [r7, #4]
90003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003aa4:	061b      	lsls	r3, r3, #24
90003aa6:	4313      	orrs	r3, r2
90003aa8:	4a1b      	ldr	r2, [pc, #108]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
90003aaa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
90003aae:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
90003ab0:	4b19      	ldr	r3, [pc, #100]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
90003ab2:	681b      	ldr	r3, [r3, #0]
90003ab4:	4a18      	ldr	r2, [pc, #96]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
90003ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
90003aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90003abc:	f7fe fa12 	bl	90001ee4 <HAL_GetTick>
90003ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90003ac2:	e008      	b.n	90003ad6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90003ac4:	f7fe fa0e 	bl	90001ee4 <HAL_GetTick>
90003ac8:	4602      	mov	r2, r0
90003aca:	693b      	ldr	r3, [r7, #16]
90003acc:	1ad3      	subs	r3, r2, r3
90003ace:	2b02      	cmp	r3, #2
90003ad0:	d901      	bls.n	90003ad6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
90003ad2:	2303      	movs	r3, #3
90003ad4:	e057      	b.n	90003b86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90003ad6:	4b10      	ldr	r3, [pc, #64]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
90003ad8:	681b      	ldr	r3, [r3, #0]
90003ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90003ade:	2b00      	cmp	r3, #0
90003ae0:	d0f0      	beq.n	90003ac4 <HAL_RCC_OscConfig+0x478>
90003ae2:	e04f      	b.n	90003b84 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90003ae4:	4b0c      	ldr	r3, [pc, #48]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
90003ae6:	681b      	ldr	r3, [r3, #0]
90003ae8:	4a0b      	ldr	r2, [pc, #44]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
90003aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90003aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90003af0:	f7fe f9f8 	bl	90001ee4 <HAL_GetTick>
90003af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90003af6:	e008      	b.n	90003b0a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90003af8:	f7fe f9f4 	bl	90001ee4 <HAL_GetTick>
90003afc:	4602      	mov	r2, r0
90003afe:	693b      	ldr	r3, [r7, #16]
90003b00:	1ad3      	subs	r3, r2, r3
90003b02:	2b02      	cmp	r3, #2
90003b04:	d901      	bls.n	90003b0a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
90003b06:	2303      	movs	r3, #3
90003b08:	e03d      	b.n	90003b86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90003b0a:	4b03      	ldr	r3, [pc, #12]	; (90003b18 <HAL_RCC_OscConfig+0x4cc>)
90003b0c:	681b      	ldr	r3, [r3, #0]
90003b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90003b12:	2b00      	cmp	r3, #0
90003b14:	d1f0      	bne.n	90003af8 <HAL_RCC_OscConfig+0x4ac>
90003b16:	e035      	b.n	90003b84 <HAL_RCC_OscConfig+0x538>
90003b18:	40023800 	.word	0x40023800
90003b1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
90003b20:	4b1b      	ldr	r3, [pc, #108]	; (90003b90 <HAL_RCC_OscConfig+0x544>)
90003b22:	685b      	ldr	r3, [r3, #4]
90003b24:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90003b26:	687b      	ldr	r3, [r7, #4]
90003b28:	699b      	ldr	r3, [r3, #24]
90003b2a:	2b01      	cmp	r3, #1
90003b2c:	d028      	beq.n	90003b80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90003b2e:	68fb      	ldr	r3, [r7, #12]
90003b30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
90003b34:	687b      	ldr	r3, [r7, #4]
90003b36:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90003b38:	429a      	cmp	r2, r3
90003b3a:	d121      	bne.n	90003b80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
90003b3c:	68fb      	ldr	r3, [r7, #12]
90003b3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
90003b42:	687b      	ldr	r3, [r7, #4]
90003b44:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90003b46:	429a      	cmp	r2, r3
90003b48:	d11a      	bne.n	90003b80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
90003b4a:	68fa      	ldr	r2, [r7, #12]
90003b4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
90003b50:	4013      	ands	r3, r2
90003b52:	687a      	ldr	r2, [r7, #4]
90003b54:	6a52      	ldr	r2, [r2, #36]	; 0x24
90003b56:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
90003b58:	4293      	cmp	r3, r2
90003b5a:	d111      	bne.n	90003b80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
90003b5c:	68fb      	ldr	r3, [r7, #12]
90003b5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
90003b62:	687b      	ldr	r3, [r7, #4]
90003b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90003b66:	085b      	lsrs	r3, r3, #1
90003b68:	3b01      	subs	r3, #1
90003b6a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
90003b6c:	429a      	cmp	r2, r3
90003b6e:	d107      	bne.n	90003b80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
90003b70:	68fb      	ldr	r3, [r7, #12]
90003b72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
90003b76:	687b      	ldr	r3, [r7, #4]
90003b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003b7a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
90003b7c:	429a      	cmp	r2, r3
90003b7e:	d001      	beq.n	90003b84 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
90003b80:	2301      	movs	r3, #1
90003b82:	e000      	b.n	90003b86 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
90003b84:	2300      	movs	r3, #0
}
90003b86:	4618      	mov	r0, r3
90003b88:	3718      	adds	r7, #24
90003b8a:	46bd      	mov	sp, r7
90003b8c:	bd80      	pop	{r7, pc}
90003b8e:	bf00      	nop
90003b90:	40023800 	.word	0x40023800

90003b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
90003b94:	b580      	push	{r7, lr}
90003b96:	b084      	sub	sp, #16
90003b98:	af00      	add	r7, sp, #0
90003b9a:	6078      	str	r0, [r7, #4]
90003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
90003b9e:	2300      	movs	r3, #0
90003ba0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
90003ba2:	687b      	ldr	r3, [r7, #4]
90003ba4:	2b00      	cmp	r3, #0
90003ba6:	d101      	bne.n	90003bac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
90003ba8:	2301      	movs	r3, #1
90003baa:	e0d0      	b.n	90003d4e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
90003bac:	4b6a      	ldr	r3, [pc, #424]	; (90003d58 <HAL_RCC_ClockConfig+0x1c4>)
90003bae:	681b      	ldr	r3, [r3, #0]
90003bb0:	f003 030f 	and.w	r3, r3, #15
90003bb4:	683a      	ldr	r2, [r7, #0]
90003bb6:	429a      	cmp	r2, r3
90003bb8:	d910      	bls.n	90003bdc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90003bba:	4b67      	ldr	r3, [pc, #412]	; (90003d58 <HAL_RCC_ClockConfig+0x1c4>)
90003bbc:	681b      	ldr	r3, [r3, #0]
90003bbe:	f023 020f 	bic.w	r2, r3, #15
90003bc2:	4965      	ldr	r1, [pc, #404]	; (90003d58 <HAL_RCC_ClockConfig+0x1c4>)
90003bc4:	683b      	ldr	r3, [r7, #0]
90003bc6:	4313      	orrs	r3, r2
90003bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90003bca:	4b63      	ldr	r3, [pc, #396]	; (90003d58 <HAL_RCC_ClockConfig+0x1c4>)
90003bcc:	681b      	ldr	r3, [r3, #0]
90003bce:	f003 030f 	and.w	r3, r3, #15
90003bd2:	683a      	ldr	r2, [r7, #0]
90003bd4:	429a      	cmp	r2, r3
90003bd6:	d001      	beq.n	90003bdc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
90003bd8:	2301      	movs	r3, #1
90003bda:	e0b8      	b.n	90003d4e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90003bdc:	687b      	ldr	r3, [r7, #4]
90003bde:	681b      	ldr	r3, [r3, #0]
90003be0:	f003 0302 	and.w	r3, r3, #2
90003be4:	2b00      	cmp	r3, #0
90003be6:	d020      	beq.n	90003c2a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90003be8:	687b      	ldr	r3, [r7, #4]
90003bea:	681b      	ldr	r3, [r3, #0]
90003bec:	f003 0304 	and.w	r3, r3, #4
90003bf0:	2b00      	cmp	r3, #0
90003bf2:	d005      	beq.n	90003c00 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
90003bf4:	4b59      	ldr	r3, [pc, #356]	; (90003d5c <HAL_RCC_ClockConfig+0x1c8>)
90003bf6:	689b      	ldr	r3, [r3, #8]
90003bf8:	4a58      	ldr	r2, [pc, #352]	; (90003d5c <HAL_RCC_ClockConfig+0x1c8>)
90003bfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
90003bfe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90003c00:	687b      	ldr	r3, [r7, #4]
90003c02:	681b      	ldr	r3, [r3, #0]
90003c04:	f003 0308 	and.w	r3, r3, #8
90003c08:	2b00      	cmp	r3, #0
90003c0a:	d005      	beq.n	90003c18 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
90003c0c:	4b53      	ldr	r3, [pc, #332]	; (90003d5c <HAL_RCC_ClockConfig+0x1c8>)
90003c0e:	689b      	ldr	r3, [r3, #8]
90003c10:	4a52      	ldr	r2, [pc, #328]	; (90003d5c <HAL_RCC_ClockConfig+0x1c8>)
90003c12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
90003c16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90003c18:	4b50      	ldr	r3, [pc, #320]	; (90003d5c <HAL_RCC_ClockConfig+0x1c8>)
90003c1a:	689b      	ldr	r3, [r3, #8]
90003c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
90003c20:	687b      	ldr	r3, [r7, #4]
90003c22:	689b      	ldr	r3, [r3, #8]
90003c24:	494d      	ldr	r1, [pc, #308]	; (90003d5c <HAL_RCC_ClockConfig+0x1c8>)
90003c26:	4313      	orrs	r3, r2
90003c28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
90003c2a:	687b      	ldr	r3, [r7, #4]
90003c2c:	681b      	ldr	r3, [r3, #0]
90003c2e:	f003 0301 	and.w	r3, r3, #1
90003c32:	2b00      	cmp	r3, #0
90003c34:	d040      	beq.n	90003cb8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90003c36:	687b      	ldr	r3, [r7, #4]
90003c38:	685b      	ldr	r3, [r3, #4]
90003c3a:	2b01      	cmp	r3, #1
90003c3c:	d107      	bne.n	90003c4e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90003c3e:	4b47      	ldr	r3, [pc, #284]	; (90003d5c <HAL_RCC_ClockConfig+0x1c8>)
90003c40:	681b      	ldr	r3, [r3, #0]
90003c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90003c46:	2b00      	cmp	r3, #0
90003c48:	d115      	bne.n	90003c76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
90003c4a:	2301      	movs	r3, #1
90003c4c:	e07f      	b.n	90003d4e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
90003c4e:	687b      	ldr	r3, [r7, #4]
90003c50:	685b      	ldr	r3, [r3, #4]
90003c52:	2b02      	cmp	r3, #2
90003c54:	d107      	bne.n	90003c66 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90003c56:	4b41      	ldr	r3, [pc, #260]	; (90003d5c <HAL_RCC_ClockConfig+0x1c8>)
90003c58:	681b      	ldr	r3, [r3, #0]
90003c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90003c5e:	2b00      	cmp	r3, #0
90003c60:	d109      	bne.n	90003c76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
90003c62:	2301      	movs	r3, #1
90003c64:	e073      	b.n	90003d4e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90003c66:	4b3d      	ldr	r3, [pc, #244]	; (90003d5c <HAL_RCC_ClockConfig+0x1c8>)
90003c68:	681b      	ldr	r3, [r3, #0]
90003c6a:	f003 0302 	and.w	r3, r3, #2
90003c6e:	2b00      	cmp	r3, #0
90003c70:	d101      	bne.n	90003c76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
90003c72:	2301      	movs	r3, #1
90003c74:	e06b      	b.n	90003d4e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
90003c76:	4b39      	ldr	r3, [pc, #228]	; (90003d5c <HAL_RCC_ClockConfig+0x1c8>)
90003c78:	689b      	ldr	r3, [r3, #8]
90003c7a:	f023 0203 	bic.w	r2, r3, #3
90003c7e:	687b      	ldr	r3, [r7, #4]
90003c80:	685b      	ldr	r3, [r3, #4]
90003c82:	4936      	ldr	r1, [pc, #216]	; (90003d5c <HAL_RCC_ClockConfig+0x1c8>)
90003c84:	4313      	orrs	r3, r2
90003c86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90003c88:	f7fe f92c 	bl	90001ee4 <HAL_GetTick>
90003c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90003c8e:	e00a      	b.n	90003ca6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
90003c90:	f7fe f928 	bl	90001ee4 <HAL_GetTick>
90003c94:	4602      	mov	r2, r0
90003c96:	68fb      	ldr	r3, [r7, #12]
90003c98:	1ad3      	subs	r3, r2, r3
90003c9a:	f241 3288 	movw	r2, #5000	; 0x1388
90003c9e:	4293      	cmp	r3, r2
90003ca0:	d901      	bls.n	90003ca6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
90003ca2:	2303      	movs	r3, #3
90003ca4:	e053      	b.n	90003d4e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90003ca6:	4b2d      	ldr	r3, [pc, #180]	; (90003d5c <HAL_RCC_ClockConfig+0x1c8>)
90003ca8:	689b      	ldr	r3, [r3, #8]
90003caa:	f003 020c 	and.w	r2, r3, #12
90003cae:	687b      	ldr	r3, [r7, #4]
90003cb0:	685b      	ldr	r3, [r3, #4]
90003cb2:	009b      	lsls	r3, r3, #2
90003cb4:	429a      	cmp	r2, r3
90003cb6:	d1eb      	bne.n	90003c90 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
90003cb8:	4b27      	ldr	r3, [pc, #156]	; (90003d58 <HAL_RCC_ClockConfig+0x1c4>)
90003cba:	681b      	ldr	r3, [r3, #0]
90003cbc:	f003 030f 	and.w	r3, r3, #15
90003cc0:	683a      	ldr	r2, [r7, #0]
90003cc2:	429a      	cmp	r2, r3
90003cc4:	d210      	bcs.n	90003ce8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90003cc6:	4b24      	ldr	r3, [pc, #144]	; (90003d58 <HAL_RCC_ClockConfig+0x1c4>)
90003cc8:	681b      	ldr	r3, [r3, #0]
90003cca:	f023 020f 	bic.w	r2, r3, #15
90003cce:	4922      	ldr	r1, [pc, #136]	; (90003d58 <HAL_RCC_ClockConfig+0x1c4>)
90003cd0:	683b      	ldr	r3, [r7, #0]
90003cd2:	4313      	orrs	r3, r2
90003cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90003cd6:	4b20      	ldr	r3, [pc, #128]	; (90003d58 <HAL_RCC_ClockConfig+0x1c4>)
90003cd8:	681b      	ldr	r3, [r3, #0]
90003cda:	f003 030f 	and.w	r3, r3, #15
90003cde:	683a      	ldr	r2, [r7, #0]
90003ce0:	429a      	cmp	r2, r3
90003ce2:	d001      	beq.n	90003ce8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
90003ce4:	2301      	movs	r3, #1
90003ce6:	e032      	b.n	90003d4e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90003ce8:	687b      	ldr	r3, [r7, #4]
90003cea:	681b      	ldr	r3, [r3, #0]
90003cec:	f003 0304 	and.w	r3, r3, #4
90003cf0:	2b00      	cmp	r3, #0
90003cf2:	d008      	beq.n	90003d06 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
90003cf4:	4b19      	ldr	r3, [pc, #100]	; (90003d5c <HAL_RCC_ClockConfig+0x1c8>)
90003cf6:	689b      	ldr	r3, [r3, #8]
90003cf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
90003cfc:	687b      	ldr	r3, [r7, #4]
90003cfe:	68db      	ldr	r3, [r3, #12]
90003d00:	4916      	ldr	r1, [pc, #88]	; (90003d5c <HAL_RCC_ClockConfig+0x1c8>)
90003d02:	4313      	orrs	r3, r2
90003d04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90003d06:	687b      	ldr	r3, [r7, #4]
90003d08:	681b      	ldr	r3, [r3, #0]
90003d0a:	f003 0308 	and.w	r3, r3, #8
90003d0e:	2b00      	cmp	r3, #0
90003d10:	d009      	beq.n	90003d26 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
90003d12:	4b12      	ldr	r3, [pc, #72]	; (90003d5c <HAL_RCC_ClockConfig+0x1c8>)
90003d14:	689b      	ldr	r3, [r3, #8]
90003d16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
90003d1a:	687b      	ldr	r3, [r7, #4]
90003d1c:	691b      	ldr	r3, [r3, #16]
90003d1e:	00db      	lsls	r3, r3, #3
90003d20:	490e      	ldr	r1, [pc, #56]	; (90003d5c <HAL_RCC_ClockConfig+0x1c8>)
90003d22:	4313      	orrs	r3, r2
90003d24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
90003d26:	f000 f821 	bl	90003d6c <HAL_RCC_GetSysClockFreq>
90003d2a:	4602      	mov	r2, r0
90003d2c:	4b0b      	ldr	r3, [pc, #44]	; (90003d5c <HAL_RCC_ClockConfig+0x1c8>)
90003d2e:	689b      	ldr	r3, [r3, #8]
90003d30:	091b      	lsrs	r3, r3, #4
90003d32:	f003 030f 	and.w	r3, r3, #15
90003d36:	490a      	ldr	r1, [pc, #40]	; (90003d60 <HAL_RCC_ClockConfig+0x1cc>)
90003d38:	5ccb      	ldrb	r3, [r1, r3]
90003d3a:	fa22 f303 	lsr.w	r3, r2, r3
90003d3e:	4a09      	ldr	r2, [pc, #36]	; (90003d64 <HAL_RCC_ClockConfig+0x1d0>)
90003d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
90003d42:	4b09      	ldr	r3, [pc, #36]	; (90003d68 <HAL_RCC_ClockConfig+0x1d4>)
90003d44:	681b      	ldr	r3, [r3, #0]
90003d46:	4618      	mov	r0, r3
90003d48:	f7fe f888 	bl	90001e5c <HAL_InitTick>

  return HAL_OK;
90003d4c:	2300      	movs	r3, #0
}
90003d4e:	4618      	mov	r0, r3
90003d50:	3710      	adds	r7, #16
90003d52:	46bd      	mov	sp, r7
90003d54:	bd80      	pop	{r7, pc}
90003d56:	bf00      	nop
90003d58:	40023c00 	.word	0x40023c00
90003d5c:	40023800 	.word	0x40023800
90003d60:	90004c74 	.word	0x90004c74
90003d64:	20000000 	.word	0x20000000
90003d68:	20000010 	.word	0x20000010

90003d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
90003d6c:	b5b0      	push	{r4, r5, r7, lr}
90003d6e:	b084      	sub	sp, #16
90003d70:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
90003d72:	2100      	movs	r1, #0
90003d74:	6079      	str	r1, [r7, #4]
90003d76:	2100      	movs	r1, #0
90003d78:	60f9      	str	r1, [r7, #12]
90003d7a:	2100      	movs	r1, #0
90003d7c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
90003d7e:	2100      	movs	r1, #0
90003d80:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
90003d82:	4952      	ldr	r1, [pc, #328]	; (90003ecc <HAL_RCC_GetSysClockFreq+0x160>)
90003d84:	6889      	ldr	r1, [r1, #8]
90003d86:	f001 010c 	and.w	r1, r1, #12
90003d8a:	2908      	cmp	r1, #8
90003d8c:	d00d      	beq.n	90003daa <HAL_RCC_GetSysClockFreq+0x3e>
90003d8e:	2908      	cmp	r1, #8
90003d90:	f200 8094 	bhi.w	90003ebc <HAL_RCC_GetSysClockFreq+0x150>
90003d94:	2900      	cmp	r1, #0
90003d96:	d002      	beq.n	90003d9e <HAL_RCC_GetSysClockFreq+0x32>
90003d98:	2904      	cmp	r1, #4
90003d9a:	d003      	beq.n	90003da4 <HAL_RCC_GetSysClockFreq+0x38>
90003d9c:	e08e      	b.n	90003ebc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
90003d9e:	4b4c      	ldr	r3, [pc, #304]	; (90003ed0 <HAL_RCC_GetSysClockFreq+0x164>)
90003da0:	60bb      	str	r3, [r7, #8]
      break;
90003da2:	e08e      	b.n	90003ec2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
90003da4:	4b4b      	ldr	r3, [pc, #300]	; (90003ed4 <HAL_RCC_GetSysClockFreq+0x168>)
90003da6:	60bb      	str	r3, [r7, #8]
      break;
90003da8:	e08b      	b.n	90003ec2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
90003daa:	4948      	ldr	r1, [pc, #288]	; (90003ecc <HAL_RCC_GetSysClockFreq+0x160>)
90003dac:	6849      	ldr	r1, [r1, #4]
90003dae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
90003db2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
90003db4:	4945      	ldr	r1, [pc, #276]	; (90003ecc <HAL_RCC_GetSysClockFreq+0x160>)
90003db6:	6849      	ldr	r1, [r1, #4]
90003db8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
90003dbc:	2900      	cmp	r1, #0
90003dbe:	d024      	beq.n	90003e0a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
90003dc0:	4942      	ldr	r1, [pc, #264]	; (90003ecc <HAL_RCC_GetSysClockFreq+0x160>)
90003dc2:	6849      	ldr	r1, [r1, #4]
90003dc4:	0989      	lsrs	r1, r1, #6
90003dc6:	4608      	mov	r0, r1
90003dc8:	f04f 0100 	mov.w	r1, #0
90003dcc:	f240 14ff 	movw	r4, #511	; 0x1ff
90003dd0:	f04f 0500 	mov.w	r5, #0
90003dd4:	ea00 0204 	and.w	r2, r0, r4
90003dd8:	ea01 0305 	and.w	r3, r1, r5
90003ddc:	493d      	ldr	r1, [pc, #244]	; (90003ed4 <HAL_RCC_GetSysClockFreq+0x168>)
90003dde:	fb01 f003 	mul.w	r0, r1, r3
90003de2:	2100      	movs	r1, #0
90003de4:	fb01 f102 	mul.w	r1, r1, r2
90003de8:	1844      	adds	r4, r0, r1
90003dea:	493a      	ldr	r1, [pc, #232]	; (90003ed4 <HAL_RCC_GetSysClockFreq+0x168>)
90003dec:	fba2 0101 	umull	r0, r1, r2, r1
90003df0:	1863      	adds	r3, r4, r1
90003df2:	4619      	mov	r1, r3
90003df4:	687b      	ldr	r3, [r7, #4]
90003df6:	461a      	mov	r2, r3
90003df8:	f04f 0300 	mov.w	r3, #0
90003dfc:	f7fc fa04 	bl	90000208 <__aeabi_uldivmod>
90003e00:	4602      	mov	r2, r0
90003e02:	460b      	mov	r3, r1
90003e04:	4613      	mov	r3, r2
90003e06:	60fb      	str	r3, [r7, #12]
90003e08:	e04a      	b.n	90003ea0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
90003e0a:	4b30      	ldr	r3, [pc, #192]	; (90003ecc <HAL_RCC_GetSysClockFreq+0x160>)
90003e0c:	685b      	ldr	r3, [r3, #4]
90003e0e:	099b      	lsrs	r3, r3, #6
90003e10:	461a      	mov	r2, r3
90003e12:	f04f 0300 	mov.w	r3, #0
90003e16:	f240 10ff 	movw	r0, #511	; 0x1ff
90003e1a:	f04f 0100 	mov.w	r1, #0
90003e1e:	ea02 0400 	and.w	r4, r2, r0
90003e22:	ea03 0501 	and.w	r5, r3, r1
90003e26:	4620      	mov	r0, r4
90003e28:	4629      	mov	r1, r5
90003e2a:	f04f 0200 	mov.w	r2, #0
90003e2e:	f04f 0300 	mov.w	r3, #0
90003e32:	014b      	lsls	r3, r1, #5
90003e34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
90003e38:	0142      	lsls	r2, r0, #5
90003e3a:	4610      	mov	r0, r2
90003e3c:	4619      	mov	r1, r3
90003e3e:	1b00      	subs	r0, r0, r4
90003e40:	eb61 0105 	sbc.w	r1, r1, r5
90003e44:	f04f 0200 	mov.w	r2, #0
90003e48:	f04f 0300 	mov.w	r3, #0
90003e4c:	018b      	lsls	r3, r1, #6
90003e4e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
90003e52:	0182      	lsls	r2, r0, #6
90003e54:	1a12      	subs	r2, r2, r0
90003e56:	eb63 0301 	sbc.w	r3, r3, r1
90003e5a:	f04f 0000 	mov.w	r0, #0
90003e5e:	f04f 0100 	mov.w	r1, #0
90003e62:	00d9      	lsls	r1, r3, #3
90003e64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
90003e68:	00d0      	lsls	r0, r2, #3
90003e6a:	4602      	mov	r2, r0
90003e6c:	460b      	mov	r3, r1
90003e6e:	1912      	adds	r2, r2, r4
90003e70:	eb45 0303 	adc.w	r3, r5, r3
90003e74:	f04f 0000 	mov.w	r0, #0
90003e78:	f04f 0100 	mov.w	r1, #0
90003e7c:	0299      	lsls	r1, r3, #10
90003e7e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
90003e82:	0290      	lsls	r0, r2, #10
90003e84:	4602      	mov	r2, r0
90003e86:	460b      	mov	r3, r1
90003e88:	4610      	mov	r0, r2
90003e8a:	4619      	mov	r1, r3
90003e8c:	687b      	ldr	r3, [r7, #4]
90003e8e:	461a      	mov	r2, r3
90003e90:	f04f 0300 	mov.w	r3, #0
90003e94:	f7fc f9b8 	bl	90000208 <__aeabi_uldivmod>
90003e98:	4602      	mov	r2, r0
90003e9a:	460b      	mov	r3, r1
90003e9c:	4613      	mov	r3, r2
90003e9e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
90003ea0:	4b0a      	ldr	r3, [pc, #40]	; (90003ecc <HAL_RCC_GetSysClockFreq+0x160>)
90003ea2:	685b      	ldr	r3, [r3, #4]
90003ea4:	0c1b      	lsrs	r3, r3, #16
90003ea6:	f003 0303 	and.w	r3, r3, #3
90003eaa:	3301      	adds	r3, #1
90003eac:	005b      	lsls	r3, r3, #1
90003eae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
90003eb0:	68fa      	ldr	r2, [r7, #12]
90003eb2:	683b      	ldr	r3, [r7, #0]
90003eb4:	fbb2 f3f3 	udiv	r3, r2, r3
90003eb8:	60bb      	str	r3, [r7, #8]
      break;
90003eba:	e002      	b.n	90003ec2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
90003ebc:	4b04      	ldr	r3, [pc, #16]	; (90003ed0 <HAL_RCC_GetSysClockFreq+0x164>)
90003ebe:	60bb      	str	r3, [r7, #8]
      break;
90003ec0:	bf00      	nop
    }
  }
  return sysclockfreq;
90003ec2:	68bb      	ldr	r3, [r7, #8]
}
90003ec4:	4618      	mov	r0, r3
90003ec6:	3710      	adds	r7, #16
90003ec8:	46bd      	mov	sp, r7
90003eca:	bdb0      	pop	{r4, r5, r7, pc}
90003ecc:	40023800 	.word	0x40023800
90003ed0:	00f42400 	.word	0x00f42400
90003ed4:	017d7840 	.word	0x017d7840

90003ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
90003ed8:	b580      	push	{r7, lr}
90003eda:	b088      	sub	sp, #32
90003edc:	af00      	add	r7, sp, #0
90003ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
90003ee0:	2300      	movs	r3, #0
90003ee2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
90003ee4:	2300      	movs	r3, #0
90003ee6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
90003ee8:	2300      	movs	r3, #0
90003eea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
90003eec:	2300      	movs	r3, #0
90003eee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
90003ef0:	2300      	movs	r3, #0
90003ef2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
90003ef4:	687b      	ldr	r3, [r7, #4]
90003ef6:	681b      	ldr	r3, [r3, #0]
90003ef8:	f003 0301 	and.w	r3, r3, #1
90003efc:	2b00      	cmp	r3, #0
90003efe:	d012      	beq.n	90003f26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
90003f00:	4b69      	ldr	r3, [pc, #420]	; (900040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003f02:	689b      	ldr	r3, [r3, #8]
90003f04:	4a68      	ldr	r2, [pc, #416]	; (900040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003f06:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
90003f0a:	6093      	str	r3, [r2, #8]
90003f0c:	4b66      	ldr	r3, [pc, #408]	; (900040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003f0e:	689a      	ldr	r2, [r3, #8]
90003f10:	687b      	ldr	r3, [r7, #4]
90003f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90003f14:	4964      	ldr	r1, [pc, #400]	; (900040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003f16:	4313      	orrs	r3, r2
90003f18:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
90003f1a:	687b      	ldr	r3, [r7, #4]
90003f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90003f1e:	2b00      	cmp	r3, #0
90003f20:	d101      	bne.n	90003f26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
90003f22:	2301      	movs	r3, #1
90003f24:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
90003f26:	687b      	ldr	r3, [r7, #4]
90003f28:	681b      	ldr	r3, [r3, #0]
90003f2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
90003f2e:	2b00      	cmp	r3, #0
90003f30:	d017      	beq.n	90003f62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90003f32:	4b5d      	ldr	r3, [pc, #372]	; (900040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90003f38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
90003f3c:	687b      	ldr	r3, [r7, #4]
90003f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90003f40:	4959      	ldr	r1, [pc, #356]	; (900040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003f42:	4313      	orrs	r3, r2
90003f44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
90003f48:	687b      	ldr	r3, [r7, #4]
90003f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90003f4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90003f50:	d101      	bne.n	90003f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
90003f52:	2301      	movs	r3, #1
90003f54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
90003f56:	687b      	ldr	r3, [r7, #4]
90003f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90003f5a:	2b00      	cmp	r3, #0
90003f5c:	d101      	bne.n	90003f62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
90003f5e:	2301      	movs	r3, #1
90003f60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
90003f62:	687b      	ldr	r3, [r7, #4]
90003f64:	681b      	ldr	r3, [r3, #0]
90003f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
90003f6a:	2b00      	cmp	r3, #0
90003f6c:	d017      	beq.n	90003f9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
90003f6e:	4b4e      	ldr	r3, [pc, #312]	; (900040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90003f74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
90003f78:	687b      	ldr	r3, [r7, #4]
90003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003f7c:	494a      	ldr	r1, [pc, #296]	; (900040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003f7e:	4313      	orrs	r3, r2
90003f80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
90003f84:	687b      	ldr	r3, [r7, #4]
90003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003f88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90003f8c:	d101      	bne.n	90003f92 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
90003f8e:	2301      	movs	r3, #1
90003f90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
90003f92:	687b      	ldr	r3, [r7, #4]
90003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003f96:	2b00      	cmp	r3, #0
90003f98:	d101      	bne.n	90003f9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
90003f9a:	2301      	movs	r3, #1
90003f9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
90003f9e:	687b      	ldr	r3, [r7, #4]
90003fa0:	681b      	ldr	r3, [r3, #0]
90003fa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
90003fa6:	2b00      	cmp	r3, #0
90003fa8:	d001      	beq.n	90003fae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
90003faa:	2301      	movs	r3, #1
90003fac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
90003fae:	687b      	ldr	r3, [r7, #4]
90003fb0:	681b      	ldr	r3, [r3, #0]
90003fb2:	f003 0320 	and.w	r3, r3, #32
90003fb6:	2b00      	cmp	r3, #0
90003fb8:	f000 808b 	beq.w	900040d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
90003fbc:	4b3a      	ldr	r3, [pc, #232]	; (900040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003fc0:	4a39      	ldr	r2, [pc, #228]	; (900040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90003fc6:	6413      	str	r3, [r2, #64]	; 0x40
90003fc8:	4b37      	ldr	r3, [pc, #220]	; (900040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90003fd0:	60bb      	str	r3, [r7, #8]
90003fd2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
90003fd4:	4b35      	ldr	r3, [pc, #212]	; (900040ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
90003fd6:	681b      	ldr	r3, [r3, #0]
90003fd8:	4a34      	ldr	r2, [pc, #208]	; (900040ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
90003fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90003fde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90003fe0:	f7fd ff80 	bl	90001ee4 <HAL_GetTick>
90003fe4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
90003fe6:	e008      	b.n	90003ffa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90003fe8:	f7fd ff7c 	bl	90001ee4 <HAL_GetTick>
90003fec:	4602      	mov	r2, r0
90003fee:	697b      	ldr	r3, [r7, #20]
90003ff0:	1ad3      	subs	r3, r2, r3
90003ff2:	2b64      	cmp	r3, #100	; 0x64
90003ff4:	d901      	bls.n	90003ffa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
90003ff6:	2303      	movs	r3, #3
90003ff8:	e357      	b.n	900046aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
90003ffa:	4b2c      	ldr	r3, [pc, #176]	; (900040ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
90003ffc:	681b      	ldr	r3, [r3, #0]
90003ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
90004002:	2b00      	cmp	r3, #0
90004004:	d0f0      	beq.n	90003fe8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
90004006:	4b28      	ldr	r3, [pc, #160]	; (900040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90004008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000400a:	f403 7340 	and.w	r3, r3, #768	; 0x300
9000400e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
90004010:	693b      	ldr	r3, [r7, #16]
90004012:	2b00      	cmp	r3, #0
90004014:	d035      	beq.n	90004082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
90004016:	687b      	ldr	r3, [r7, #4]
90004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000401a:	f403 7340 	and.w	r3, r3, #768	; 0x300
9000401e:	693a      	ldr	r2, [r7, #16]
90004020:	429a      	cmp	r2, r3
90004022:	d02e      	beq.n	90004082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
90004024:	4b20      	ldr	r3, [pc, #128]	; (900040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90004026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90004028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
9000402c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
9000402e:	4b1e      	ldr	r3, [pc, #120]	; (900040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90004030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90004032:	4a1d      	ldr	r2, [pc, #116]	; (900040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90004034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90004038:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
9000403a:	4b1b      	ldr	r3, [pc, #108]	; (900040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
9000403c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000403e:	4a1a      	ldr	r2, [pc, #104]	; (900040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90004040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90004044:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
90004046:	4a18      	ldr	r2, [pc, #96]	; (900040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90004048:	693b      	ldr	r3, [r7, #16]
9000404a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
9000404c:	4b16      	ldr	r3, [pc, #88]	; (900040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
9000404e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90004050:	f003 0301 	and.w	r3, r3, #1
90004054:	2b01      	cmp	r3, #1
90004056:	d114      	bne.n	90004082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90004058:	f7fd ff44 	bl	90001ee4 <HAL_GetTick>
9000405c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
9000405e:	e00a      	b.n	90004076 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
90004060:	f7fd ff40 	bl	90001ee4 <HAL_GetTick>
90004064:	4602      	mov	r2, r0
90004066:	697b      	ldr	r3, [r7, #20]
90004068:	1ad3      	subs	r3, r2, r3
9000406a:	f241 3288 	movw	r2, #5000	; 0x1388
9000406e:	4293      	cmp	r3, r2
90004070:	d901      	bls.n	90004076 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
90004072:	2303      	movs	r3, #3
90004074:	e319      	b.n	900046aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90004076:	4b0c      	ldr	r3, [pc, #48]	; (900040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90004078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000407a:	f003 0302 	and.w	r3, r3, #2
9000407e:	2b00      	cmp	r3, #0
90004080:	d0ee      	beq.n	90004060 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
90004082:	687b      	ldr	r3, [r7, #4]
90004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004086:	f403 7340 	and.w	r3, r3, #768	; 0x300
9000408a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
9000408e:	d111      	bne.n	900040b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
90004090:	4b05      	ldr	r3, [pc, #20]	; (900040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
90004092:	689b      	ldr	r3, [r3, #8]
90004094:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
90004098:	687b      	ldr	r3, [r7, #4]
9000409a:	6b19      	ldr	r1, [r3, #48]	; 0x30
9000409c:	4b04      	ldr	r3, [pc, #16]	; (900040b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
9000409e:	400b      	ands	r3, r1
900040a0:	4901      	ldr	r1, [pc, #4]	; (900040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
900040a2:	4313      	orrs	r3, r2
900040a4:	608b      	str	r3, [r1, #8]
900040a6:	e00b      	b.n	900040c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
900040a8:	40023800 	.word	0x40023800
900040ac:	40007000 	.word	0x40007000
900040b0:	0ffffcff 	.word	0x0ffffcff
900040b4:	4bb1      	ldr	r3, [pc, #708]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900040b6:	689b      	ldr	r3, [r3, #8]
900040b8:	4ab0      	ldr	r2, [pc, #704]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900040ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
900040be:	6093      	str	r3, [r2, #8]
900040c0:	4bae      	ldr	r3, [pc, #696]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900040c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
900040c4:	687b      	ldr	r3, [r7, #4]
900040c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900040c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
900040cc:	49ab      	ldr	r1, [pc, #684]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900040ce:	4313      	orrs	r3, r2
900040d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
900040d2:	687b      	ldr	r3, [r7, #4]
900040d4:	681b      	ldr	r3, [r3, #0]
900040d6:	f003 0310 	and.w	r3, r3, #16
900040da:	2b00      	cmp	r3, #0
900040dc:	d010      	beq.n	90004100 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
900040de:	4ba7      	ldr	r3, [pc, #668]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900040e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
900040e4:	4aa5      	ldr	r2, [pc, #660]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900040e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
900040ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
900040ee:	4ba3      	ldr	r3, [pc, #652]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900040f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
900040f4:	687b      	ldr	r3, [r7, #4]
900040f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900040f8:	49a0      	ldr	r1, [pc, #640]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900040fa:	4313      	orrs	r3, r2
900040fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
90004100:	687b      	ldr	r3, [r7, #4]
90004102:	681b      	ldr	r3, [r3, #0]
90004104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90004108:	2b00      	cmp	r3, #0
9000410a:	d00a      	beq.n	90004122 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
9000410c:	4b9b      	ldr	r3, [pc, #620]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
9000410e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90004112:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
90004116:	687b      	ldr	r3, [r7, #4]
90004118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
9000411a:	4998      	ldr	r1, [pc, #608]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
9000411c:	4313      	orrs	r3, r2
9000411e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
90004122:	687b      	ldr	r3, [r7, #4]
90004124:	681b      	ldr	r3, [r3, #0]
90004126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
9000412a:	2b00      	cmp	r3, #0
9000412c:	d00a      	beq.n	90004144 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
9000412e:	4b93      	ldr	r3, [pc, #588]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90004130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90004134:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
90004138:	687b      	ldr	r3, [r7, #4]
9000413a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
9000413c:	498f      	ldr	r1, [pc, #572]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
9000413e:	4313      	orrs	r3, r2
90004140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
90004144:	687b      	ldr	r3, [r7, #4]
90004146:	681b      	ldr	r3, [r3, #0]
90004148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
9000414c:	2b00      	cmp	r3, #0
9000414e:	d00a      	beq.n	90004166 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
90004150:	4b8a      	ldr	r3, [pc, #552]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90004152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90004156:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
9000415a:	687b      	ldr	r3, [r7, #4]
9000415c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000415e:	4987      	ldr	r1, [pc, #540]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90004160:	4313      	orrs	r3, r2
90004162:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
90004166:	687b      	ldr	r3, [r7, #4]
90004168:	681b      	ldr	r3, [r3, #0]
9000416a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
9000416e:	2b00      	cmp	r3, #0
90004170:	d00a      	beq.n	90004188 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
90004172:	4b82      	ldr	r3, [pc, #520]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90004174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90004178:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
9000417c:	687b      	ldr	r3, [r7, #4]
9000417e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90004180:	497e      	ldr	r1, [pc, #504]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90004182:	4313      	orrs	r3, r2
90004184:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
90004188:	687b      	ldr	r3, [r7, #4]
9000418a:	681b      	ldr	r3, [r3, #0]
9000418c:	f003 0340 	and.w	r3, r3, #64	; 0x40
90004190:	2b00      	cmp	r3, #0
90004192:	d00a      	beq.n	900041aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
90004194:	4b79      	ldr	r3, [pc, #484]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90004196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000419a:	f023 0203 	bic.w	r2, r3, #3
9000419e:	687b      	ldr	r3, [r7, #4]
900041a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900041a2:	4976      	ldr	r1, [pc, #472]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900041a4:	4313      	orrs	r3, r2
900041a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
900041aa:	687b      	ldr	r3, [r7, #4]
900041ac:	681b      	ldr	r3, [r3, #0]
900041ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
900041b2:	2b00      	cmp	r3, #0
900041b4:	d00a      	beq.n	900041cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
900041b6:	4b71      	ldr	r3, [pc, #452]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900041b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900041bc:	f023 020c 	bic.w	r2, r3, #12
900041c0:	687b      	ldr	r3, [r7, #4]
900041c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
900041c4:	496d      	ldr	r1, [pc, #436]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900041c6:	4313      	orrs	r3, r2
900041c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
900041cc:	687b      	ldr	r3, [r7, #4]
900041ce:	681b      	ldr	r3, [r3, #0]
900041d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
900041d4:	2b00      	cmp	r3, #0
900041d6:	d00a      	beq.n	900041ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
900041d8:	4b68      	ldr	r3, [pc, #416]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900041de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
900041e2:	687b      	ldr	r3, [r7, #4]
900041e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900041e6:	4965      	ldr	r1, [pc, #404]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900041e8:	4313      	orrs	r3, r2
900041ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
900041ee:	687b      	ldr	r3, [r7, #4]
900041f0:	681b      	ldr	r3, [r3, #0]
900041f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
900041f6:	2b00      	cmp	r3, #0
900041f8:	d00a      	beq.n	90004210 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
900041fa:	4b60      	ldr	r3, [pc, #384]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900041fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90004200:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
90004204:	687b      	ldr	r3, [r7, #4]
90004206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90004208:	495c      	ldr	r1, [pc, #368]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
9000420a:	4313      	orrs	r3, r2
9000420c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
90004210:	687b      	ldr	r3, [r7, #4]
90004212:	681b      	ldr	r3, [r3, #0]
90004214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
90004218:	2b00      	cmp	r3, #0
9000421a:	d00a      	beq.n	90004232 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
9000421c:	4b57      	ldr	r3, [pc, #348]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
9000421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90004222:	f423 7240 	bic.w	r2, r3, #768	; 0x300
90004226:	687b      	ldr	r3, [r7, #4]
90004228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000422a:	4954      	ldr	r1, [pc, #336]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
9000422c:	4313      	orrs	r3, r2
9000422e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
90004232:	687b      	ldr	r3, [r7, #4]
90004234:	681b      	ldr	r3, [r3, #0]
90004236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
9000423a:	2b00      	cmp	r3, #0
9000423c:	d00a      	beq.n	90004254 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
9000423e:	4b4f      	ldr	r3, [pc, #316]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90004240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90004244:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
90004248:	687b      	ldr	r3, [r7, #4]
9000424a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9000424c:	494b      	ldr	r1, [pc, #300]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
9000424e:	4313      	orrs	r3, r2
90004250:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
90004254:	687b      	ldr	r3, [r7, #4]
90004256:	681b      	ldr	r3, [r3, #0]
90004258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
9000425c:	2b00      	cmp	r3, #0
9000425e:	d00a      	beq.n	90004276 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
90004260:	4b46      	ldr	r3, [pc, #280]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90004266:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
9000426a:	687b      	ldr	r3, [r7, #4]
9000426c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
9000426e:	4943      	ldr	r1, [pc, #268]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90004270:	4313      	orrs	r3, r2
90004272:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
90004276:	687b      	ldr	r3, [r7, #4]
90004278:	681b      	ldr	r3, [r3, #0]
9000427a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
9000427e:	2b00      	cmp	r3, #0
90004280:	d00a      	beq.n	90004298 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
90004282:	4b3e      	ldr	r3, [pc, #248]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90004284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90004288:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
9000428c:	687b      	ldr	r3, [r7, #4]
9000428e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90004290:	493a      	ldr	r1, [pc, #232]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90004292:	4313      	orrs	r3, r2
90004294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
90004298:	687b      	ldr	r3, [r7, #4]
9000429a:	681b      	ldr	r3, [r3, #0]
9000429c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
900042a0:	2b00      	cmp	r3, #0
900042a2:	d00a      	beq.n	900042ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
900042a4:	4b35      	ldr	r3, [pc, #212]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900042a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900042aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
900042ae:	687b      	ldr	r3, [r7, #4]
900042b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
900042b2:	4932      	ldr	r1, [pc, #200]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900042b4:	4313      	orrs	r3, r2
900042b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
900042ba:	687b      	ldr	r3, [r7, #4]
900042bc:	681b      	ldr	r3, [r3, #0]
900042be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
900042c2:	2b00      	cmp	r3, #0
900042c4:	d011      	beq.n	900042ea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
900042c6:	4b2d      	ldr	r3, [pc, #180]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900042c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900042cc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
900042d0:	687b      	ldr	r3, [r7, #4]
900042d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
900042d4:	4929      	ldr	r1, [pc, #164]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
900042d6:	4313      	orrs	r3, r2
900042d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
900042dc:	687b      	ldr	r3, [r7, #4]
900042de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
900042e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
900042e4:	d101      	bne.n	900042ea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
900042e6:	2301      	movs	r3, #1
900042e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
900042ea:	687b      	ldr	r3, [r7, #4]
900042ec:	681b      	ldr	r3, [r3, #0]
900042ee:	f003 0308 	and.w	r3, r3, #8
900042f2:	2b00      	cmp	r3, #0
900042f4:	d001      	beq.n	900042fa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
900042f6:	2301      	movs	r3, #1
900042f8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
900042fa:	687b      	ldr	r3, [r7, #4]
900042fc:	681b      	ldr	r3, [r3, #0]
900042fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
90004302:	2b00      	cmp	r3, #0
90004304:	d00a      	beq.n	9000431c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
90004306:	4b1d      	ldr	r3, [pc, #116]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90004308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000430c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
90004310:	687b      	ldr	r3, [r7, #4]
90004312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90004314:	4919      	ldr	r1, [pc, #100]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90004316:	4313      	orrs	r3, r2
90004318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
9000431c:	687b      	ldr	r3, [r7, #4]
9000431e:	681b      	ldr	r3, [r3, #0]
90004320:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
90004324:	2b00      	cmp	r3, #0
90004326:	d00b      	beq.n	90004340 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
90004328:	4b14      	ldr	r3, [pc, #80]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
9000432a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000432e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
90004332:	687b      	ldr	r3, [r7, #4]
90004334:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90004338:	4910      	ldr	r1, [pc, #64]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
9000433a:	4313      	orrs	r3, r2
9000433c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
90004340:	69fb      	ldr	r3, [r7, #28]
90004342:	2b01      	cmp	r3, #1
90004344:	d006      	beq.n	90004354 <HAL_RCCEx_PeriphCLKConfig+0x47c>
90004346:	687b      	ldr	r3, [r7, #4]
90004348:	681b      	ldr	r3, [r3, #0]
9000434a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
9000434e:	2b00      	cmp	r3, #0
90004350:	f000 80d9 	beq.w	90004506 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
90004354:	4b09      	ldr	r3, [pc, #36]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
90004356:	681b      	ldr	r3, [r3, #0]
90004358:	4a08      	ldr	r2, [pc, #32]	; (9000437c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
9000435a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
9000435e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90004360:	f7fd fdc0 	bl	90001ee4 <HAL_GetTick>
90004364:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
90004366:	e00b      	b.n	90004380 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
90004368:	f7fd fdbc 	bl	90001ee4 <HAL_GetTick>
9000436c:	4602      	mov	r2, r0
9000436e:	697b      	ldr	r3, [r7, #20]
90004370:	1ad3      	subs	r3, r2, r3
90004372:	2b64      	cmp	r3, #100	; 0x64
90004374:	d904      	bls.n	90004380 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
90004376:	2303      	movs	r3, #3
90004378:	e197      	b.n	900046aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
9000437a:	bf00      	nop
9000437c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
90004380:	4b6c      	ldr	r3, [pc, #432]	; (90004534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
90004382:	681b      	ldr	r3, [r3, #0]
90004384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
90004388:	2b00      	cmp	r3, #0
9000438a:	d1ed      	bne.n	90004368 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
9000438c:	687b      	ldr	r3, [r7, #4]
9000438e:	681b      	ldr	r3, [r3, #0]
90004390:	f003 0301 	and.w	r3, r3, #1
90004394:	2b00      	cmp	r3, #0
90004396:	d021      	beq.n	900043dc <HAL_RCCEx_PeriphCLKConfig+0x504>
90004398:	687b      	ldr	r3, [r7, #4]
9000439a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000439c:	2b00      	cmp	r3, #0
9000439e:	d11d      	bne.n	900043dc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
900043a0:	4b64      	ldr	r3, [pc, #400]	; (90004534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
900043a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
900043a6:	0c1b      	lsrs	r3, r3, #16
900043a8:	f003 0303 	and.w	r3, r3, #3
900043ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
900043ae:	4b61      	ldr	r3, [pc, #388]	; (90004534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
900043b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
900043b4:	0e1b      	lsrs	r3, r3, #24
900043b6:	f003 030f 	and.w	r3, r3, #15
900043ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
900043bc:	687b      	ldr	r3, [r7, #4]
900043be:	685b      	ldr	r3, [r3, #4]
900043c0:	019a      	lsls	r2, r3, #6
900043c2:	693b      	ldr	r3, [r7, #16]
900043c4:	041b      	lsls	r3, r3, #16
900043c6:	431a      	orrs	r2, r3
900043c8:	68fb      	ldr	r3, [r7, #12]
900043ca:	061b      	lsls	r3, r3, #24
900043cc:	431a      	orrs	r2, r3
900043ce:	687b      	ldr	r3, [r7, #4]
900043d0:	689b      	ldr	r3, [r3, #8]
900043d2:	071b      	lsls	r3, r3, #28
900043d4:	4957      	ldr	r1, [pc, #348]	; (90004534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
900043d6:	4313      	orrs	r3, r2
900043d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
900043dc:	687b      	ldr	r3, [r7, #4]
900043de:	681b      	ldr	r3, [r3, #0]
900043e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
900043e4:	2b00      	cmp	r3, #0
900043e6:	d004      	beq.n	900043f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
900043e8:	687b      	ldr	r3, [r7, #4]
900043ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900043ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
900043f0:	d00a      	beq.n	90004408 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
900043f2:	687b      	ldr	r3, [r7, #4]
900043f4:	681b      	ldr	r3, [r3, #0]
900043f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
900043fa:	2b00      	cmp	r3, #0
900043fc:	d02e      	beq.n	9000445c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
900043fe:	687b      	ldr	r3, [r7, #4]
90004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90004402:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90004406:	d129      	bne.n	9000445c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
90004408:	4b4a      	ldr	r3, [pc, #296]	; (90004534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
9000440a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000440e:	0c1b      	lsrs	r3, r3, #16
90004410:	f003 0303 	and.w	r3, r3, #3
90004414:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
90004416:	4b47      	ldr	r3, [pc, #284]	; (90004534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
90004418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000441c:	0f1b      	lsrs	r3, r3, #28
9000441e:	f003 0307 	and.w	r3, r3, #7
90004422:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
90004424:	687b      	ldr	r3, [r7, #4]
90004426:	685b      	ldr	r3, [r3, #4]
90004428:	019a      	lsls	r2, r3, #6
9000442a:	693b      	ldr	r3, [r7, #16]
9000442c:	041b      	lsls	r3, r3, #16
9000442e:	431a      	orrs	r2, r3
90004430:	687b      	ldr	r3, [r7, #4]
90004432:	68db      	ldr	r3, [r3, #12]
90004434:	061b      	lsls	r3, r3, #24
90004436:	431a      	orrs	r2, r3
90004438:	68fb      	ldr	r3, [r7, #12]
9000443a:	071b      	lsls	r3, r3, #28
9000443c:	493d      	ldr	r1, [pc, #244]	; (90004534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
9000443e:	4313      	orrs	r3, r2
90004440:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
90004444:	4b3b      	ldr	r3, [pc, #236]	; (90004534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
90004446:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
9000444a:	f023 021f 	bic.w	r2, r3, #31
9000444e:	687b      	ldr	r3, [r7, #4]
90004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004452:	3b01      	subs	r3, #1
90004454:	4937      	ldr	r1, [pc, #220]	; (90004534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
90004456:	4313      	orrs	r3, r2
90004458:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000445c:	687b      	ldr	r3, [r7, #4]
9000445e:	681b      	ldr	r3, [r3, #0]
90004460:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
90004464:	2b00      	cmp	r3, #0
90004466:	d01d      	beq.n	900044a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
90004468:	4b32      	ldr	r3, [pc, #200]	; (90004534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
9000446a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000446e:	0e1b      	lsrs	r3, r3, #24
90004470:	f003 030f 	and.w	r3, r3, #15
90004474:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
90004476:	4b2f      	ldr	r3, [pc, #188]	; (90004534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
90004478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000447c:	0f1b      	lsrs	r3, r3, #28
9000447e:	f003 0307 	and.w	r3, r3, #7
90004482:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
90004484:	687b      	ldr	r3, [r7, #4]
90004486:	685b      	ldr	r3, [r3, #4]
90004488:	019a      	lsls	r2, r3, #6
9000448a:	687b      	ldr	r3, [r7, #4]
9000448c:	691b      	ldr	r3, [r3, #16]
9000448e:	041b      	lsls	r3, r3, #16
90004490:	431a      	orrs	r2, r3
90004492:	693b      	ldr	r3, [r7, #16]
90004494:	061b      	lsls	r3, r3, #24
90004496:	431a      	orrs	r2, r3
90004498:	68fb      	ldr	r3, [r7, #12]
9000449a:	071b      	lsls	r3, r3, #28
9000449c:	4925      	ldr	r1, [pc, #148]	; (90004534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
9000449e:	4313      	orrs	r3, r2
900044a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
900044a4:	687b      	ldr	r3, [r7, #4]
900044a6:	681b      	ldr	r3, [r3, #0]
900044a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
900044ac:	2b00      	cmp	r3, #0
900044ae:	d011      	beq.n	900044d4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
900044b0:	687b      	ldr	r3, [r7, #4]
900044b2:	685b      	ldr	r3, [r3, #4]
900044b4:	019a      	lsls	r2, r3, #6
900044b6:	687b      	ldr	r3, [r7, #4]
900044b8:	691b      	ldr	r3, [r3, #16]
900044ba:	041b      	lsls	r3, r3, #16
900044bc:	431a      	orrs	r2, r3
900044be:	687b      	ldr	r3, [r7, #4]
900044c0:	68db      	ldr	r3, [r3, #12]
900044c2:	061b      	lsls	r3, r3, #24
900044c4:	431a      	orrs	r2, r3
900044c6:	687b      	ldr	r3, [r7, #4]
900044c8:	689b      	ldr	r3, [r3, #8]
900044ca:	071b      	lsls	r3, r3, #28
900044cc:	4919      	ldr	r1, [pc, #100]	; (90004534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
900044ce:	4313      	orrs	r3, r2
900044d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
900044d4:	4b17      	ldr	r3, [pc, #92]	; (90004534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
900044d6:	681b      	ldr	r3, [r3, #0]
900044d8:	4a16      	ldr	r2, [pc, #88]	; (90004534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
900044da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
900044de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
900044e0:	f7fd fd00 	bl	90001ee4 <HAL_GetTick>
900044e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
900044e6:	e008      	b.n	900044fa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
900044e8:	f7fd fcfc 	bl	90001ee4 <HAL_GetTick>
900044ec:	4602      	mov	r2, r0
900044ee:	697b      	ldr	r3, [r7, #20]
900044f0:	1ad3      	subs	r3, r2, r3
900044f2:	2b64      	cmp	r3, #100	; 0x64
900044f4:	d901      	bls.n	900044fa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
900044f6:	2303      	movs	r3, #3
900044f8:	e0d7      	b.n	900046aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
900044fa:	4b0e      	ldr	r3, [pc, #56]	; (90004534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
900044fc:	681b      	ldr	r3, [r3, #0]
900044fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
90004502:	2b00      	cmp	r3, #0
90004504:	d0f0      	beq.n	900044e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
90004506:	69bb      	ldr	r3, [r7, #24]
90004508:	2b01      	cmp	r3, #1
9000450a:	f040 80cd 	bne.w	900046a8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
9000450e:	4b09      	ldr	r3, [pc, #36]	; (90004534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
90004510:	681b      	ldr	r3, [r3, #0]
90004512:	4a08      	ldr	r2, [pc, #32]	; (90004534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
90004514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
90004518:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000451a:	f7fd fce3 	bl	90001ee4 <HAL_GetTick>
9000451e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
90004520:	e00a      	b.n	90004538 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
90004522:	f7fd fcdf 	bl	90001ee4 <HAL_GetTick>
90004526:	4602      	mov	r2, r0
90004528:	697b      	ldr	r3, [r7, #20]
9000452a:	1ad3      	subs	r3, r2, r3
9000452c:	2b64      	cmp	r3, #100	; 0x64
9000452e:	d903      	bls.n	90004538 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
90004530:	2303      	movs	r3, #3
90004532:	e0ba      	b.n	900046aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
90004534:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
90004538:	4b5e      	ldr	r3, [pc, #376]	; (900046b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
9000453a:	681b      	ldr	r3, [r3, #0]
9000453c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90004540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90004544:	d0ed      	beq.n	90004522 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
90004546:	687b      	ldr	r3, [r7, #4]
90004548:	681b      	ldr	r3, [r3, #0]
9000454a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
9000454e:	2b00      	cmp	r3, #0
90004550:	d003      	beq.n	9000455a <HAL_RCCEx_PeriphCLKConfig+0x682>
90004552:	687b      	ldr	r3, [r7, #4]
90004554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90004556:	2b00      	cmp	r3, #0
90004558:	d009      	beq.n	9000456e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
9000455a:	687b      	ldr	r3, [r7, #4]
9000455c:	681b      	ldr	r3, [r3, #0]
9000455e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
90004562:	2b00      	cmp	r3, #0
90004564:	d02e      	beq.n	900045c4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
90004566:	687b      	ldr	r3, [r7, #4]
90004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000456a:	2b00      	cmp	r3, #0
9000456c:	d12a      	bne.n	900045c4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
9000456e:	4b51      	ldr	r3, [pc, #324]	; (900046b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
90004570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90004574:	0c1b      	lsrs	r3, r3, #16
90004576:	f003 0303 	and.w	r3, r3, #3
9000457a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
9000457c:	4b4d      	ldr	r3, [pc, #308]	; (900046b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
9000457e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90004582:	0f1b      	lsrs	r3, r3, #28
90004584:	f003 0307 	and.w	r3, r3, #7
90004588:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
9000458a:	687b      	ldr	r3, [r7, #4]
9000458c:	695b      	ldr	r3, [r3, #20]
9000458e:	019a      	lsls	r2, r3, #6
90004590:	693b      	ldr	r3, [r7, #16]
90004592:	041b      	lsls	r3, r3, #16
90004594:	431a      	orrs	r2, r3
90004596:	687b      	ldr	r3, [r7, #4]
90004598:	699b      	ldr	r3, [r3, #24]
9000459a:	061b      	lsls	r3, r3, #24
9000459c:	431a      	orrs	r2, r3
9000459e:	68fb      	ldr	r3, [r7, #12]
900045a0:	071b      	lsls	r3, r3, #28
900045a2:	4944      	ldr	r1, [pc, #272]	; (900046b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
900045a4:	4313      	orrs	r3, r2
900045a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
900045aa:	4b42      	ldr	r3, [pc, #264]	; (900046b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
900045ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
900045b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
900045b4:	687b      	ldr	r3, [r7, #4]
900045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900045b8:	3b01      	subs	r3, #1
900045ba:	021b      	lsls	r3, r3, #8
900045bc:	493d      	ldr	r1, [pc, #244]	; (900046b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
900045be:	4313      	orrs	r3, r2
900045c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
900045c4:	687b      	ldr	r3, [r7, #4]
900045c6:	681b      	ldr	r3, [r3, #0]
900045c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
900045cc:	2b00      	cmp	r3, #0
900045ce:	d022      	beq.n	90004616 <HAL_RCCEx_PeriphCLKConfig+0x73e>
900045d0:	687b      	ldr	r3, [r7, #4]
900045d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
900045d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
900045d8:	d11d      	bne.n	90004616 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
900045da:	4b36      	ldr	r3, [pc, #216]	; (900046b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
900045dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
900045e0:	0e1b      	lsrs	r3, r3, #24
900045e2:	f003 030f 	and.w	r3, r3, #15
900045e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
900045e8:	4b32      	ldr	r3, [pc, #200]	; (900046b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
900045ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
900045ee:	0f1b      	lsrs	r3, r3, #28
900045f0:	f003 0307 	and.w	r3, r3, #7
900045f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
900045f6:	687b      	ldr	r3, [r7, #4]
900045f8:	695b      	ldr	r3, [r3, #20]
900045fa:	019a      	lsls	r2, r3, #6
900045fc:	687b      	ldr	r3, [r7, #4]
900045fe:	6a1b      	ldr	r3, [r3, #32]
90004600:	041b      	lsls	r3, r3, #16
90004602:	431a      	orrs	r2, r3
90004604:	693b      	ldr	r3, [r7, #16]
90004606:	061b      	lsls	r3, r3, #24
90004608:	431a      	orrs	r2, r3
9000460a:	68fb      	ldr	r3, [r7, #12]
9000460c:	071b      	lsls	r3, r3, #28
9000460e:	4929      	ldr	r1, [pc, #164]	; (900046b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
90004610:	4313      	orrs	r3, r2
90004612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
90004616:	687b      	ldr	r3, [r7, #4]
90004618:	681b      	ldr	r3, [r3, #0]
9000461a:	f003 0308 	and.w	r3, r3, #8
9000461e:	2b00      	cmp	r3, #0
90004620:	d028      	beq.n	90004674 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
90004622:	4b24      	ldr	r3, [pc, #144]	; (900046b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
90004624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90004628:	0e1b      	lsrs	r3, r3, #24
9000462a:	f003 030f 	and.w	r3, r3, #15
9000462e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
90004630:	4b20      	ldr	r3, [pc, #128]	; (900046b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
90004632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90004636:	0c1b      	lsrs	r3, r3, #16
90004638:	f003 0303 	and.w	r3, r3, #3
9000463c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
9000463e:	687b      	ldr	r3, [r7, #4]
90004640:	695b      	ldr	r3, [r3, #20]
90004642:	019a      	lsls	r2, r3, #6
90004644:	68fb      	ldr	r3, [r7, #12]
90004646:	041b      	lsls	r3, r3, #16
90004648:	431a      	orrs	r2, r3
9000464a:	693b      	ldr	r3, [r7, #16]
9000464c:	061b      	lsls	r3, r3, #24
9000464e:	431a      	orrs	r2, r3
90004650:	687b      	ldr	r3, [r7, #4]
90004652:	69db      	ldr	r3, [r3, #28]
90004654:	071b      	lsls	r3, r3, #28
90004656:	4917      	ldr	r1, [pc, #92]	; (900046b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
90004658:	4313      	orrs	r3, r2
9000465a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
9000465e:	4b15      	ldr	r3, [pc, #84]	; (900046b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
90004660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90004664:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
90004668:	687b      	ldr	r3, [r7, #4]
9000466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000466c:	4911      	ldr	r1, [pc, #68]	; (900046b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
9000466e:	4313      	orrs	r3, r2
90004670:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
90004674:	4b0f      	ldr	r3, [pc, #60]	; (900046b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
90004676:	681b      	ldr	r3, [r3, #0]
90004678:	4a0e      	ldr	r2, [pc, #56]	; (900046b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
9000467a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
9000467e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90004680:	f7fd fc30 	bl	90001ee4 <HAL_GetTick>
90004684:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
90004686:	e008      	b.n	9000469a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
90004688:	f7fd fc2c 	bl	90001ee4 <HAL_GetTick>
9000468c:	4602      	mov	r2, r0
9000468e:	697b      	ldr	r3, [r7, #20]
90004690:	1ad3      	subs	r3, r2, r3
90004692:	2b64      	cmp	r3, #100	; 0x64
90004694:	d901      	bls.n	9000469a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
90004696:	2303      	movs	r3, #3
90004698:	e007      	b.n	900046aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
9000469a:	4b06      	ldr	r3, [pc, #24]	; (900046b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
9000469c:	681b      	ldr	r3, [r3, #0]
9000469e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
900046a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900046a6:	d1ef      	bne.n	90004688 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
900046a8:	2300      	movs	r3, #0
}
900046aa:	4618      	mov	r0, r3
900046ac:	3720      	adds	r7, #32
900046ae:	46bd      	mov	sp, r7
900046b0:	bd80      	pop	{r7, pc}
900046b2:	bf00      	nop
900046b4:	40023800 	.word	0x40023800

900046b8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
900046b8:	b580      	push	{r7, lr}
900046ba:	b082      	sub	sp, #8
900046bc:	af00      	add	r7, sp, #0
900046be:	6078      	str	r0, [r7, #4]
900046c0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
900046c2:	687b      	ldr	r3, [r7, #4]
900046c4:	2b00      	cmp	r3, #0
900046c6:	d101      	bne.n	900046cc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
900046c8:	2301      	movs	r3, #1
900046ca:	e025      	b.n	90004718 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
900046cc:	687b      	ldr	r3, [r7, #4]
900046ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
900046d2:	b2db      	uxtb	r3, r3
900046d4:	2b00      	cmp	r3, #0
900046d6:	d106      	bne.n	900046e6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
900046d8:	687b      	ldr	r3, [r7, #4]
900046da:	2200      	movs	r2, #0
900046dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
900046e0:	6878      	ldr	r0, [r7, #4]
900046e2:	f000 f81d 	bl	90004720 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
900046e6:	687b      	ldr	r3, [r7, #4]
900046e8:	2202      	movs	r2, #2
900046ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
900046ee:	687b      	ldr	r3, [r7, #4]
900046f0:	681a      	ldr	r2, [r3, #0]
900046f2:	687b      	ldr	r3, [r7, #4]
900046f4:	3304      	adds	r3, #4
900046f6:	4619      	mov	r1, r3
900046f8:	4610      	mov	r0, r2
900046fa:	f000 f867 	bl	900047cc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
900046fe:	687b      	ldr	r3, [r7, #4]
90004700:	6818      	ldr	r0, [r3, #0]
90004702:	687b      	ldr	r3, [r7, #4]
90004704:	685b      	ldr	r3, [r3, #4]
90004706:	461a      	mov	r2, r3
90004708:	6839      	ldr	r1, [r7, #0]
9000470a:	f000 f8d1 	bl	900048b0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
9000470e:	687b      	ldr	r3, [r7, #4]
90004710:	2201      	movs	r2, #1
90004712:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
90004716:	2300      	movs	r3, #0
}
90004718:	4618      	mov	r0, r3
9000471a:	3708      	adds	r7, #8
9000471c:	46bd      	mov	sp, r7
9000471e:	bd80      	pop	{r7, pc}

90004720 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
90004720:	b480      	push	{r7}
90004722:	b083      	sub	sp, #12
90004724:	af00      	add	r7, sp, #0
90004726:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
90004728:	bf00      	nop
9000472a:	370c      	adds	r7, #12
9000472c:	46bd      	mov	sp, r7
9000472e:	f85d 7b04 	ldr.w	r7, [sp], #4
90004732:	4770      	bx	lr

90004734 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
90004734:	b580      	push	{r7, lr}
90004736:	b084      	sub	sp, #16
90004738:	af00      	add	r7, sp, #0
9000473a:	60f8      	str	r0, [r7, #12]
9000473c:	60b9      	str	r1, [r7, #8]
9000473e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
90004740:	68fb      	ldr	r3, [r7, #12]
90004742:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
90004746:	b2db      	uxtb	r3, r3
90004748:	2b02      	cmp	r3, #2
9000474a:	d101      	bne.n	90004750 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
9000474c:	2302      	movs	r3, #2
9000474e:	e018      	b.n	90004782 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90004750:	68fb      	ldr	r3, [r7, #12]
90004752:	2202      	movs	r2, #2
90004754:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
90004758:	68fb      	ldr	r3, [r7, #12]
9000475a:	681b      	ldr	r3, [r3, #0]
9000475c:	687a      	ldr	r2, [r7, #4]
9000475e:	68b9      	ldr	r1, [r7, #8]
90004760:	4618      	mov	r0, r3
90004762:	f000 f925 	bl	900049b0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
90004766:	68bb      	ldr	r3, [r7, #8]
90004768:	681b      	ldr	r3, [r3, #0]
9000476a:	2b02      	cmp	r3, #2
9000476c:	d104      	bne.n	90004778 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000476e:	68fb      	ldr	r3, [r7, #12]
90004770:	2205      	movs	r2, #5
90004772:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
90004776:	e003      	b.n	90004780 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
90004778:	68fb      	ldr	r3, [r7, #12]
9000477a:	2201      	movs	r2, #1
9000477c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
90004780:	2300      	movs	r3, #0
}
90004782:	4618      	mov	r0, r3
90004784:	3710      	adds	r7, #16
90004786:	46bd      	mov	sp, r7
90004788:	bd80      	pop	{r7, pc}

9000478a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
9000478a:	b580      	push	{r7, lr}
9000478c:	b082      	sub	sp, #8
9000478e:	af00      	add	r7, sp, #0
90004790:	6078      	str	r0, [r7, #4]
90004792:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
90004794:	687b      	ldr	r3, [r7, #4]
90004796:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
9000479a:	b2db      	uxtb	r3, r3
9000479c:	2b02      	cmp	r3, #2
9000479e:	d101      	bne.n	900047a4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
900047a0:	2302      	movs	r3, #2
900047a2:	e00e      	b.n	900047c2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
900047a4:	687b      	ldr	r3, [r7, #4]
900047a6:	2202      	movs	r2, #2
900047a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
900047ac:	687b      	ldr	r3, [r7, #4]
900047ae:	681b      	ldr	r3, [r3, #0]
900047b0:	6839      	ldr	r1, [r7, #0]
900047b2:	4618      	mov	r0, r3
900047b4:	f000 f920 	bl	900049f8 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
900047b8:	687b      	ldr	r3, [r7, #4]
900047ba:	2201      	movs	r2, #1
900047bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
900047c0:	2300      	movs	r3, #0
}
900047c2:	4618      	mov	r0, r3
900047c4:	3708      	adds	r7, #8
900047c6:	46bd      	mov	sp, r7
900047c8:	bd80      	pop	{r7, pc}
	...

900047cc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
900047cc:	b480      	push	{r7}
900047ce:	b085      	sub	sp, #20
900047d0:	af00      	add	r7, sp, #0
900047d2:	6078      	str	r0, [r7, #4]
900047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
900047d6:	2300      	movs	r3, #0
900047d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
900047da:	2300      	movs	r3, #0
900047dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
900047de:	683b      	ldr	r3, [r7, #0]
900047e0:	681b      	ldr	r3, [r3, #0]
900047e2:	2b01      	cmp	r3, #1
900047e4:	d027      	beq.n	90004836 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
900047e6:	687b      	ldr	r3, [r7, #4]
900047e8:	681b      	ldr	r3, [r3, #0]
900047ea:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
900047ec:	68fa      	ldr	r2, [r7, #12]
900047ee:	4b2f      	ldr	r3, [pc, #188]	; (900048ac <FMC_SDRAM_Init+0xe0>)
900047f0:	4013      	ands	r3, r2
900047f2:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
900047f4:	683b      	ldr	r3, [r7, #0]
900047f6:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
900047f8:	683b      	ldr	r3, [r7, #0]
900047fa:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
900047fc:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
900047fe:	683b      	ldr	r3, [r7, #0]
90004800:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
90004802:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
90004804:	683b      	ldr	r3, [r7, #0]
90004806:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
90004808:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
9000480a:	683b      	ldr	r3, [r7, #0]
9000480c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
9000480e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
90004810:	683b      	ldr	r3, [r7, #0]
90004812:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
90004814:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
90004816:	683b      	ldr	r3, [r7, #0]
90004818:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
9000481a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
9000481c:	683b      	ldr	r3, [r7, #0]
9000481e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
90004820:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
90004822:	683b      	ldr	r3, [r7, #0]
90004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
90004826:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
90004828:	68fa      	ldr	r2, [r7, #12]
9000482a:	4313      	orrs	r3, r2
9000482c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
9000482e:	687b      	ldr	r3, [r7, #4]
90004830:	68fa      	ldr	r2, [r7, #12]
90004832:	601a      	str	r2, [r3, #0]
90004834:	e032      	b.n	9000489c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
90004836:	687b      	ldr	r3, [r7, #4]
90004838:	681b      	ldr	r3, [r3, #0]
9000483a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
9000483c:	68fb      	ldr	r3, [r7, #12]
9000483e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
90004842:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
90004844:	683b      	ldr	r3, [r7, #0]
90004846:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
90004848:	683b      	ldr	r3, [r7, #0]
9000484a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
9000484c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
9000484e:	683b      	ldr	r3, [r7, #0]
90004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
90004852:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
90004854:	68fa      	ldr	r2, [r7, #12]
90004856:	4313      	orrs	r3, r2
90004858:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
9000485a:	687b      	ldr	r3, [r7, #4]
9000485c:	685b      	ldr	r3, [r3, #4]
9000485e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
90004860:	68ba      	ldr	r2, [r7, #8]
90004862:	4b12      	ldr	r3, [pc, #72]	; (900048ac <FMC_SDRAM_Init+0xe0>)
90004864:	4013      	ands	r3, r2
90004866:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
90004868:	683b      	ldr	r3, [r7, #0]
9000486a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
9000486c:	683b      	ldr	r3, [r7, #0]
9000486e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
90004870:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
90004872:	683b      	ldr	r3, [r7, #0]
90004874:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
90004876:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
90004878:	683b      	ldr	r3, [r7, #0]
9000487a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
9000487c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
9000487e:	683b      	ldr	r3, [r7, #0]
90004880:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
90004882:	431a      	orrs	r2, r3
                       Init->WriteProtection);
90004884:	683b      	ldr	r3, [r7, #0]
90004886:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
90004888:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
9000488a:	68ba      	ldr	r2, [r7, #8]
9000488c:	4313      	orrs	r3, r2
9000488e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
90004890:	687b      	ldr	r3, [r7, #4]
90004892:	68fa      	ldr	r2, [r7, #12]
90004894:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
90004896:	687b      	ldr	r3, [r7, #4]
90004898:	68ba      	ldr	r2, [r7, #8]
9000489a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
9000489c:	2300      	movs	r3, #0
}
9000489e:	4618      	mov	r0, r3
900048a0:	3714      	adds	r7, #20
900048a2:	46bd      	mov	sp, r7
900048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
900048a8:	4770      	bx	lr
900048aa:	bf00      	nop
900048ac:	ffff8000 	.word	0xffff8000

900048b0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
900048b0:	b480      	push	{r7}
900048b2:	b087      	sub	sp, #28
900048b4:	af00      	add	r7, sp, #0
900048b6:	60f8      	str	r0, [r7, #12]
900048b8:	60b9      	str	r1, [r7, #8]
900048ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
900048bc:	2300      	movs	r3, #0
900048be:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
900048c0:	2300      	movs	r3, #0
900048c2:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
900048c4:	687b      	ldr	r3, [r7, #4]
900048c6:	2b01      	cmp	r3, #1
900048c8:	d02e      	beq.n	90004928 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
900048ca:	68fb      	ldr	r3, [r7, #12]
900048cc:	689b      	ldr	r3, [r3, #8]
900048ce:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
900048d0:	697b      	ldr	r3, [r7, #20]
900048d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
900048d6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
900048d8:	68bb      	ldr	r3, [r7, #8]
900048da:	681b      	ldr	r3, [r3, #0]
900048dc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
900048de:	68bb      	ldr	r3, [r7, #8]
900048e0:	685b      	ldr	r3, [r3, #4]
900048e2:	3b01      	subs	r3, #1
900048e4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
900048e6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
900048e8:	68bb      	ldr	r3, [r7, #8]
900048ea:	689b      	ldr	r3, [r3, #8]
900048ec:	3b01      	subs	r3, #1
900048ee:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
900048f0:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
900048f2:	68bb      	ldr	r3, [r7, #8]
900048f4:	68db      	ldr	r3, [r3, #12]
900048f6:	3b01      	subs	r3, #1
900048f8:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
900048fa:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
900048fc:	68bb      	ldr	r3, [r7, #8]
900048fe:	691b      	ldr	r3, [r3, #16]
90004900:	3b01      	subs	r3, #1
90004902:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
90004904:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
90004906:	68bb      	ldr	r3, [r7, #8]
90004908:	695b      	ldr	r3, [r3, #20]
9000490a:	3b01      	subs	r3, #1
9000490c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
9000490e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
90004910:	68bb      	ldr	r3, [r7, #8]
90004912:	699b      	ldr	r3, [r3, #24]
90004914:	3b01      	subs	r3, #1
90004916:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90004918:	4313      	orrs	r3, r2
9000491a:	697a      	ldr	r2, [r7, #20]
9000491c:	4313      	orrs	r3, r2
9000491e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
90004920:	68fb      	ldr	r3, [r7, #12]
90004922:	697a      	ldr	r2, [r7, #20]
90004924:	609a      	str	r2, [r3, #8]
90004926:	e039      	b.n	9000499c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
90004928:	68fb      	ldr	r3, [r7, #12]
9000492a:	689b      	ldr	r3, [r3, #8]
9000492c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
9000492e:	697a      	ldr	r2, [r7, #20]
90004930:	4b1e      	ldr	r3, [pc, #120]	; (900049ac <FMC_SDRAM_Timing_Init+0xfc>)
90004932:	4013      	ands	r3, r2
90004934:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
90004936:	68bb      	ldr	r3, [r7, #8]
90004938:	68db      	ldr	r3, [r3, #12]
9000493a:	3b01      	subs	r3, #1
9000493c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
9000493e:	68bb      	ldr	r3, [r7, #8]
90004940:	695b      	ldr	r3, [r3, #20]
90004942:	3b01      	subs	r3, #1
90004944:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
90004946:	4313      	orrs	r3, r2
90004948:	697a      	ldr	r2, [r7, #20]
9000494a:	4313      	orrs	r3, r2
9000494c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
9000494e:	68fb      	ldr	r3, [r7, #12]
90004950:	68db      	ldr	r3, [r3, #12]
90004952:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
90004954:	693b      	ldr	r3, [r7, #16]
90004956:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
9000495a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
9000495c:	68bb      	ldr	r3, [r7, #8]
9000495e:	681b      	ldr	r3, [r3, #0]
90004960:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
90004962:	68bb      	ldr	r3, [r7, #8]
90004964:	685b      	ldr	r3, [r3, #4]
90004966:	3b01      	subs	r3, #1
90004968:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
9000496a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
9000496c:	68bb      	ldr	r3, [r7, #8]
9000496e:	689b      	ldr	r3, [r3, #8]
90004970:	3b01      	subs	r3, #1
90004972:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
90004974:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
90004976:	68bb      	ldr	r3, [r7, #8]
90004978:	691b      	ldr	r3, [r3, #16]
9000497a:	3b01      	subs	r3, #1
9000497c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
9000497e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
90004980:	68bb      	ldr	r3, [r7, #8]
90004982:	699b      	ldr	r3, [r3, #24]
90004984:	3b01      	subs	r3, #1
90004986:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90004988:	4313      	orrs	r3, r2
9000498a:	693a      	ldr	r2, [r7, #16]
9000498c:	4313      	orrs	r3, r2
9000498e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
90004990:	68fb      	ldr	r3, [r7, #12]
90004992:	697a      	ldr	r2, [r7, #20]
90004994:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
90004996:	68fb      	ldr	r3, [r7, #12]
90004998:	693a      	ldr	r2, [r7, #16]
9000499a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
9000499c:	2300      	movs	r3, #0
}
9000499e:	4618      	mov	r0, r3
900049a0:	371c      	adds	r7, #28
900049a2:	46bd      	mov	sp, r7
900049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
900049a8:	4770      	bx	lr
900049aa:	bf00      	nop
900049ac:	ff0f0fff 	.word	0xff0f0fff

900049b0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
900049b0:	b480      	push	{r7}
900049b2:	b085      	sub	sp, #20
900049b4:	af00      	add	r7, sp, #0
900049b6:	60f8      	str	r0, [r7, #12]
900049b8:	60b9      	str	r1, [r7, #8]
900049ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
900049bc:	68fb      	ldr	r3, [r7, #12]
900049be:	691a      	ldr	r2, [r3, #16]
900049c0:	4b0c      	ldr	r3, [pc, #48]	; (900049f4 <FMC_SDRAM_SendCommand+0x44>)
900049c2:	4013      	ands	r3, r2
900049c4:	68ba      	ldr	r2, [r7, #8]
900049c6:	6811      	ldr	r1, [r2, #0]
900049c8:	68ba      	ldr	r2, [r7, #8]
900049ca:	6852      	ldr	r2, [r2, #4]
900049cc:	4311      	orrs	r1, r2
900049ce:	68ba      	ldr	r2, [r7, #8]
900049d0:	6892      	ldr	r2, [r2, #8]
900049d2:	3a01      	subs	r2, #1
900049d4:	0152      	lsls	r2, r2, #5
900049d6:	4311      	orrs	r1, r2
900049d8:	68ba      	ldr	r2, [r7, #8]
900049da:	68d2      	ldr	r2, [r2, #12]
900049dc:	0252      	lsls	r2, r2, #9
900049de:	430a      	orrs	r2, r1
900049e0:	431a      	orrs	r2, r3
900049e2:	68fb      	ldr	r3, [r7, #12]
900049e4:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
900049e6:	2300      	movs	r3, #0
}
900049e8:	4618      	mov	r0, r3
900049ea:	3714      	adds	r7, #20
900049ec:	46bd      	mov	sp, r7
900049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
900049f2:	4770      	bx	lr
900049f4:	ffc00000 	.word	0xffc00000

900049f8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
900049f8:	b480      	push	{r7}
900049fa:	b083      	sub	sp, #12
900049fc:	af00      	add	r7, sp, #0
900049fe:	6078      	str	r0, [r7, #4]
90004a00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
90004a02:	687b      	ldr	r3, [r7, #4]
90004a04:	695a      	ldr	r2, [r3, #20]
90004a06:	683b      	ldr	r3, [r7, #0]
90004a08:	005b      	lsls	r3, r3, #1
90004a0a:	431a      	orrs	r2, r3
90004a0c:	687b      	ldr	r3, [r7, #4]
90004a0e:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
90004a10:	2300      	movs	r3, #0
}
90004a12:	4618      	mov	r0, r3
90004a14:	370c      	adds	r7, #12
90004a16:	46bd      	mov	sp, r7
90004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
90004a1c:	4770      	bx	lr
	...

90004a20 <_ZN15LCD_DISCO_F7508C1Ev>:
*/

#include "LCD_DISCO_F7508.h"

// Constructor
LCD_DISCO_F7508::LCD_DISCO_F7508()
90004a20:	b590      	push	{r4, r7, lr}
90004a22:	b083      	sub	sp, #12
90004a24:	af00      	add	r7, sp, #0
90004a26:	6078      	str	r0, [r7, #4]
{
  BSP_LCD_Init();
90004a28:	f7fb ff78 	bl	9000091c <BSP_LCD_Init>
  
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
90004a2c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
90004a30:	2000      	movs	r0, #0
90004a32:	f7fc f827 	bl	90000a84 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+(BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4));
90004a36:	f7fb fffd 	bl	90000a34 <BSP_LCD_GetXSize>
90004a3a:	4604      	mov	r4, r0
90004a3c:	f7fc f80e 	bl	90000a5c <BSP_LCD_GetYSize>
90004a40:	4603      	mov	r3, r0
90004a42:	fb03 f304 	mul.w	r3, r3, r4
90004a46:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
90004a4a:	009b      	lsls	r3, r3, #2
90004a4c:	4619      	mov	r1, r3
90004a4e:	2001      	movs	r0, #1
90004a50:	f7fc f818 	bl	90000a84 <BSP_LCD_LayerDefaultInit>
  
  BSP_LCD_DisplayOn();
90004a54:	f7fc fdd4 	bl	90001600 <BSP_LCD_DisplayOn>
  
  BSP_LCD_SelectLayer(0);
90004a58:	2000      	movs	r0, #0
90004a5a:	f7fc f873 	bl	90000b44 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
90004a5e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
90004a62:	f7fc f8e1 	bl	90000c28 <BSP_LCD_Clear>

  BSP_LCD_SelectLayer(1);
90004a66:	2001      	movs	r0, #1
90004a68:	f7fc f86c 	bl	90000b44 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
90004a6c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
90004a70:	f7fc f8da 	bl	90000c28 <BSP_LCD_Clear>
  
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
90004a74:	4807      	ldr	r0, [pc, #28]	; (90004a94 <_ZN15LCD_DISCO_F7508C1Ev+0x74>)
90004a76:	f7fc f8a7 	bl	90000bc8 <BSP_LCD_SetFont>
  
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
90004a7a:	f04f 30ff 	mov.w	r0, #4294967295
90004a7e:	f7fc f889 	bl	90000b94 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
90004a82:	4805      	ldr	r0, [pc, #20]	; (90004a98 <_ZN15LCD_DISCO_F7508C1Ev+0x78>)
90004a84:	f7fc f86e 	bl	90000b64 <BSP_LCD_SetTextColor>
}
90004a88:	687b      	ldr	r3, [r7, #4]
90004a8a:	4618      	mov	r0, r3
90004a8c:	370c      	adds	r7, #12
90004a8e:	46bd      	mov	sp, r7
90004a90:	bd90      	pop	{r4, r7, pc}
90004a92:	bf00      	nop
90004a94:	20000004 	.word	0x20000004
90004a98:	ff000080 	.word	0xff000080

90004a9c <_ZN15LCD_DISCO_F7508D1Ev>:

// Destructor
LCD_DISCO_F7508::~LCD_DISCO_F7508()
90004a9c:	b580      	push	{r7, lr}
90004a9e:	b082      	sub	sp, #8
90004aa0:	af00      	add	r7, sp, #0
90004aa2:	6078      	str	r0, [r7, #4]
{
  BSP_LCD_DeInit();
90004aa4:	f7fb ffaa 	bl	900009fc <BSP_LCD_DeInit>
}
90004aa8:	687b      	ldr	r3, [r7, #4]
90004aaa:	4618      	mov	r0, r3
90004aac:	3708      	adds	r7, #8
90004aae:	46bd      	mov	sp, r7
90004ab0:	bd80      	pop	{r7, pc}

90004ab2 <_ZN15LCD_DISCO_F750812SetTextColorEm>:
{
  BSP_LCD_SetLayerVisible(LayerIndex, State);
}

void LCD_DISCO_F7508::SetTextColor(uint32_t Color)
{
90004ab2:	b580      	push	{r7, lr}
90004ab4:	b082      	sub	sp, #8
90004ab6:	af00      	add	r7, sp, #0
90004ab8:	6078      	str	r0, [r7, #4]
90004aba:	6039      	str	r1, [r7, #0]
  BSP_LCD_SetTextColor(Color);
90004abc:	6838      	ldr	r0, [r7, #0]
90004abe:	f7fc f851 	bl	90000b64 <BSP_LCD_SetTextColor>
}
90004ac2:	bf00      	nop
90004ac4:	3708      	adds	r7, #8
90004ac6:	46bd      	mov	sp, r7
90004ac8:	bd80      	pop	{r7, pc}

90004aca <_ZN15LCD_DISCO_F750812SetBackColorEm>:
{
  return BSP_LCD_GetTextColor();
}

void LCD_DISCO_F7508::SetBackColor(uint32_t Color)
{
90004aca:	b580      	push	{r7, lr}
90004acc:	b082      	sub	sp, #8
90004ace:	af00      	add	r7, sp, #0
90004ad0:	6078      	str	r0, [r7, #4]
90004ad2:	6039      	str	r1, [r7, #0]
  BSP_LCD_SetBackColor(Color);
90004ad4:	6838      	ldr	r0, [r7, #0]
90004ad6:	f7fc f85d 	bl	90000b94 <BSP_LCD_SetBackColor>
}
90004ada:	bf00      	nop
90004adc:	3708      	adds	r7, #8
90004ade:	46bd      	mov	sp, r7
90004ae0:	bd80      	pop	{r7, pc}

90004ae2 <_ZN15LCD_DISCO_F75085ClearEm>:
{
  BSP_LCD_DrawPixel(Xpos, Ypos, pixel);
}

void LCD_DISCO_F7508::Clear(uint32_t Color)
{
90004ae2:	b580      	push	{r7, lr}
90004ae4:	b082      	sub	sp, #8
90004ae6:	af00      	add	r7, sp, #0
90004ae8:	6078      	str	r0, [r7, #4]
90004aea:	6039      	str	r1, [r7, #0]
  BSP_LCD_Clear(Color);
90004aec:	6838      	ldr	r0, [r7, #0]
90004aee:	f7fc f89b 	bl	90000c28 <BSP_LCD_Clear>
}
90004af2:	bf00      	nop
90004af4:	3708      	adds	r7, #8
90004af6:	46bd      	mov	sp, r7
90004af8:	bd80      	pop	{r7, pc}

90004afa <_ZN15LCD_DISCO_F750815DisplayStringAtEttPh20Text_AlignModeTypdef>:
{
  BSP_LCD_DisplayStringAtLine(Line, ptr);
}

void LCD_DISCO_F7508::DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
90004afa:	b580      	push	{r7, lr}
90004afc:	b084      	sub	sp, #16
90004afe:	af00      	add	r7, sp, #0
90004b00:	60f8      	str	r0, [r7, #12]
90004b02:	607b      	str	r3, [r7, #4]
90004b04:	460b      	mov	r3, r1
90004b06:	817b      	strh	r3, [r7, #10]
90004b08:	4613      	mov	r3, r2
90004b0a:	813b      	strh	r3, [r7, #8]
  BSP_LCD_DisplayStringAt(Xpos, Ypos, Text, Mode);
90004b0c:	7e3b      	ldrb	r3, [r7, #24]
90004b0e:	8939      	ldrh	r1, [r7, #8]
90004b10:	8978      	ldrh	r0, [r7, #10]
90004b12:	687a      	ldr	r2, [r7, #4]
90004b14:	f7fc f8f4 	bl	90000d00 <BSP_LCD_DisplayStringAt>
}
90004b18:	bf00      	nop
90004b1a:	3710      	adds	r7, #16
90004b1c:	46bd      	mov	sp, r7
90004b1e:	bd80      	pop	{r7, pc}

90004b20 <_ZN15LCD_DISCO_F75088DrawRectEtttt>:
{
  BSP_LCD_DrawLine(x1, y1, x2, y2);
}

void LCD_DISCO_F7508::DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
90004b20:	b580      	push	{r7, lr}
90004b22:	b084      	sub	sp, #16
90004b24:	af00      	add	r7, sp, #0
90004b26:	60f8      	str	r0, [r7, #12]
90004b28:	4608      	mov	r0, r1
90004b2a:	4611      	mov	r1, r2
90004b2c:	461a      	mov	r2, r3
90004b2e:	4603      	mov	r3, r0
90004b30:	817b      	strh	r3, [r7, #10]
90004b32:	460b      	mov	r3, r1
90004b34:	813b      	strh	r3, [r7, #8]
90004b36:	4613      	mov	r3, r2
90004b38:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DrawRect(Xpos, Ypos, Width, Height);
90004b3a:	8b3b      	ldrh	r3, [r7, #24]
90004b3c:	88fa      	ldrh	r2, [r7, #6]
90004b3e:	8939      	ldrh	r1, [r7, #8]
90004b40:	8978      	ldrh	r0, [r7, #10]
90004b42:	f7fc fa65 	bl	90001010 <BSP_LCD_DrawRect>
}
90004b46:	bf00      	nop
90004b48:	3710      	adds	r7, #16
90004b4a:	46bd      	mov	sp, r7
90004b4c:	bd80      	pop	{r7, pc}

90004b4e <_ZN15LCD_DISCO_F750810DrawCircleEttt>:

void LCD_DISCO_F7508::DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
90004b4e:	b580      	push	{r7, lr}
90004b50:	b084      	sub	sp, #16
90004b52:	af00      	add	r7, sp, #0
90004b54:	60f8      	str	r0, [r7, #12]
90004b56:	4608      	mov	r0, r1
90004b58:	4611      	mov	r1, r2
90004b5a:	461a      	mov	r2, r3
90004b5c:	4603      	mov	r3, r0
90004b5e:	817b      	strh	r3, [r7, #10]
90004b60:	460b      	mov	r3, r1
90004b62:	813b      	strh	r3, [r7, #8]
90004b64:	4613      	mov	r3, r2
90004b66:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
90004b68:	88fa      	ldrh	r2, [r7, #6]
90004b6a:	8939      	ldrh	r1, [r7, #8]
90004b6c:	897b      	ldrh	r3, [r7, #10]
90004b6e:	4618      	mov	r0, r3
90004b70:	f7fc fa80 	bl	90001074 <BSP_LCD_DrawCircle>
}
90004b74:	bf00      	nop
90004b76:	3710      	adds	r7, #16
90004b78:	46bd      	mov	sp, r7
90004b7a:	bd80      	pop	{r7, pc}

90004b7c <_ZN15LCD_DISCO_F750811DrawEllipseEiiii>:
{
  BSP_LCD_DrawPolygon(Points, PointCount);
}

void LCD_DISCO_F7508::DrawEllipse(int Xpos, int Ypos, int XRadius, int YRadius)
{
90004b7c:	b580      	push	{r7, lr}
90004b7e:	b084      	sub	sp, #16
90004b80:	af00      	add	r7, sp, #0
90004b82:	60f8      	str	r0, [r7, #12]
90004b84:	60b9      	str	r1, [r7, #8]
90004b86:	607a      	str	r2, [r7, #4]
90004b88:	603b      	str	r3, [r7, #0]
  BSP_LCD_DrawEllipse(Xpos, Ypos, XRadius, YRadius);
90004b8a:	69bb      	ldr	r3, [r7, #24]
90004b8c:	683a      	ldr	r2, [r7, #0]
90004b8e:	6879      	ldr	r1, [r7, #4]
90004b90:	68b8      	ldr	r0, [r7, #8]
90004b92:	f7fc fb59 	bl	90001248 <BSP_LCD_DrawEllipse>
}
90004b96:	bf00      	nop
90004b98:	3710      	adds	r7, #16
90004b9a:	46bd      	mov	sp, r7
90004b9c:	bd80      	pop	{r7, pc}

90004b9e <_ZN15LCD_DISCO_F750810FillCircleEttt>:
{
  BSP_LCD_FillRect(Xpos, Ypos, Width, Height);
}

void LCD_DISCO_F7508::FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
90004b9e:	b580      	push	{r7, lr}
90004ba0:	b084      	sub	sp, #16
90004ba2:	af00      	add	r7, sp, #0
90004ba4:	60f8      	str	r0, [r7, #12]
90004ba6:	4608      	mov	r0, r1
90004ba8:	4611      	mov	r1, r2
90004baa:	461a      	mov	r2, r3
90004bac:	4603      	mov	r3, r0
90004bae:	817b      	strh	r3, [r7, #10]
90004bb0:	460b      	mov	r3, r1
90004bb2:	813b      	strh	r3, [r7, #8]
90004bb4:	4613      	mov	r3, r2
90004bb6:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_FillCircle(Xpos, Ypos, Radius);
90004bb8:	88fa      	ldrh	r2, [r7, #6]
90004bba:	8939      	ldrh	r1, [r7, #8]
90004bbc:	897b      	ldrh	r3, [r7, #10]
90004bbe:	4618      	mov	r0, r3
90004bc0:	f7fc fc7e 	bl	900014c0 <BSP_LCD_FillCircle>
}
90004bc4:	bf00      	nop
90004bc6:	3710      	adds	r7, #16
90004bc8:	46bd      	mov	sp, r7
90004bca:	bd80      	pop	{r7, pc}

90004bcc <__libc_init_array>:
90004bcc:	b570      	push	{r4, r5, r6, lr}
90004bce:	4d0d      	ldr	r5, [pc, #52]	; (90004c04 <__libc_init_array+0x38>)
90004bd0:	4c0d      	ldr	r4, [pc, #52]	; (90004c08 <__libc_init_array+0x3c>)
90004bd2:	1b64      	subs	r4, r4, r5
90004bd4:	10a4      	asrs	r4, r4, #2
90004bd6:	2600      	movs	r6, #0
90004bd8:	42a6      	cmp	r6, r4
90004bda:	d109      	bne.n	90004bf0 <__libc_init_array+0x24>
90004bdc:	4d0b      	ldr	r5, [pc, #44]	; (90004c0c <__libc_init_array+0x40>)
90004bde:	4c0c      	ldr	r4, [pc, #48]	; (90004c10 <__libc_init_array+0x44>)
90004be0:	f000 f820 	bl	90004c24 <_init>
90004be4:	1b64      	subs	r4, r4, r5
90004be6:	10a4      	asrs	r4, r4, #2
90004be8:	2600      	movs	r6, #0
90004bea:	42a6      	cmp	r6, r4
90004bec:	d105      	bne.n	90004bfa <__libc_init_array+0x2e>
90004bee:	bd70      	pop	{r4, r5, r6, pc}
90004bf0:	f855 3b04 	ldr.w	r3, [r5], #4
90004bf4:	4798      	blx	r3
90004bf6:	3601      	adds	r6, #1
90004bf8:	e7ee      	b.n	90004bd8 <__libc_init_array+0xc>
90004bfa:	f855 3b04 	ldr.w	r3, [r5], #4
90004bfe:	4798      	blx	r3
90004c00:	3601      	adds	r6, #1
90004c02:	e7f2      	b.n	90004bea <__libc_init_array+0x1e>
90004c04:	9000674c 	.word	0x9000674c
90004c08:	9000674c 	.word	0x9000674c
90004c0c:	9000674c 	.word	0x9000674c
90004c10:	90006754 	.word	0x90006754

90004c14 <memset>:
90004c14:	4402      	add	r2, r0
90004c16:	4603      	mov	r3, r0
90004c18:	4293      	cmp	r3, r2
90004c1a:	d100      	bne.n	90004c1e <memset+0xa>
90004c1c:	4770      	bx	lr
90004c1e:	f803 1b01 	strb.w	r1, [r3], #1
90004c22:	e7f9      	b.n	90004c18 <memset+0x4>

90004c24 <_init>:
90004c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90004c26:	bf00      	nop
90004c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
90004c2a:	bc08      	pop	{r3}
90004c2c:	469e      	mov	lr, r3
90004c2e:	4770      	bx	lr

90004c30 <_fini>:
90004c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90004c32:	bf00      	nop
90004c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
90004c36:	bc08      	pop	{r3}
90004c38:	469e      	mov	lr, r3
90004c3a:	4770      	bx	lr
