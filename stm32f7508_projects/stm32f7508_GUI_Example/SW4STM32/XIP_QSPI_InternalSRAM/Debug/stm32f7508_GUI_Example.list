
stm32f7508_GUI_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  90000000  90000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032a0  900001c8  900001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d10  90003468  90003468  00013468  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  90007178  90007178  00017178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  90007180  90007180  00017180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  90007184  90007184  00017184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  20000000  90007188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005c4  20000060  900071e8  00020060  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  20000624  900071e8  00020624  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c347  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004021  00000000  00000000  0003c3d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0000f03c  00000000  00000000  000403f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001000  00000000  00000000  0004f438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001798  00000000  00000000  00050438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002aa89  00000000  00000000  00051bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001c2d4  00000000  00000000  0007c659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00108b96  00000000  00000000  0009892d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001a14c3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002fac  00000000  00000000  001a1518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900001c8 <__do_global_dtors_aux>:
900001c8:	b510      	push	{r4, lr}
900001ca:	4c05      	ldr	r4, [pc, #20]	; (900001e0 <__do_global_dtors_aux+0x18>)
900001cc:	7823      	ldrb	r3, [r4, #0]
900001ce:	b933      	cbnz	r3, 900001de <__do_global_dtors_aux+0x16>
900001d0:	4b04      	ldr	r3, [pc, #16]	; (900001e4 <__do_global_dtors_aux+0x1c>)
900001d2:	b113      	cbz	r3, 900001da <__do_global_dtors_aux+0x12>
900001d4:	4804      	ldr	r0, [pc, #16]	; (900001e8 <__do_global_dtors_aux+0x20>)
900001d6:	f3af 8000 	nop.w
900001da:	2301      	movs	r3, #1
900001dc:	7023      	strb	r3, [r4, #0]
900001de:	bd10      	pop	{r4, pc}
900001e0:	20000060 	.word	0x20000060
900001e4:	00000000 	.word	0x00000000
900001e8:	90003450 	.word	0x90003450

900001ec <frame_dummy>:
900001ec:	b508      	push	{r3, lr}
900001ee:	4b03      	ldr	r3, [pc, #12]	; (900001fc <frame_dummy+0x10>)
900001f0:	b11b      	cbz	r3, 900001fa <frame_dummy+0xe>
900001f2:	4903      	ldr	r1, [pc, #12]	; (90000200 <frame_dummy+0x14>)
900001f4:	4803      	ldr	r0, [pc, #12]	; (90000204 <frame_dummy+0x18>)
900001f6:	f3af 8000 	nop.w
900001fa:	bd08      	pop	{r3, pc}
900001fc:	00000000 	.word	0x00000000
90000200:	20000064 	.word	0x20000064
90000204:	90003450 	.word	0x90003450

90000208 <__aeabi_uldivmod>:
90000208:	b953      	cbnz	r3, 90000220 <__aeabi_uldivmod+0x18>
9000020a:	b94a      	cbnz	r2, 90000220 <__aeabi_uldivmod+0x18>
9000020c:	2900      	cmp	r1, #0
9000020e:	bf08      	it	eq
90000210:	2800      	cmpeq	r0, #0
90000212:	bf1c      	itt	ne
90000214:	f04f 31ff 	movne.w	r1, #4294967295
90000218:	f04f 30ff 	movne.w	r0, #4294967295
9000021c:	f000 b96e 	b.w	900004fc <__aeabi_idiv0>
90000220:	f1ad 0c08 	sub.w	ip, sp, #8
90000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
90000228:	f000 f806 	bl	90000238 <__udivmoddi4>
9000022c:	f8dd e004 	ldr.w	lr, [sp, #4]
90000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
90000234:	b004      	add	sp, #16
90000236:	4770      	bx	lr

90000238 <__udivmoddi4>:
90000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000023c:	9d08      	ldr	r5, [sp, #32]
9000023e:	4604      	mov	r4, r0
90000240:	468c      	mov	ip, r1
90000242:	2b00      	cmp	r3, #0
90000244:	f040 8083 	bne.w	9000034e <__udivmoddi4+0x116>
90000248:	428a      	cmp	r2, r1
9000024a:	4617      	mov	r7, r2
9000024c:	d947      	bls.n	900002de <__udivmoddi4+0xa6>
9000024e:	fab2 f282 	clz	r2, r2
90000252:	b142      	cbz	r2, 90000266 <__udivmoddi4+0x2e>
90000254:	f1c2 0020 	rsb	r0, r2, #32
90000258:	fa24 f000 	lsr.w	r0, r4, r0
9000025c:	4091      	lsls	r1, r2
9000025e:	4097      	lsls	r7, r2
90000260:	ea40 0c01 	orr.w	ip, r0, r1
90000264:	4094      	lsls	r4, r2
90000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
9000026a:	0c23      	lsrs	r3, r4, #16
9000026c:	fbbc f6f8 	udiv	r6, ip, r8
90000270:	fa1f fe87 	uxth.w	lr, r7
90000274:	fb08 c116 	mls	r1, r8, r6, ip
90000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000027c:	fb06 f10e 	mul.w	r1, r6, lr
90000280:	4299      	cmp	r1, r3
90000282:	d909      	bls.n	90000298 <__udivmoddi4+0x60>
90000284:	18fb      	adds	r3, r7, r3
90000286:	f106 30ff 	add.w	r0, r6, #4294967295
9000028a:	f080 8119 	bcs.w	900004c0 <__udivmoddi4+0x288>
9000028e:	4299      	cmp	r1, r3
90000290:	f240 8116 	bls.w	900004c0 <__udivmoddi4+0x288>
90000294:	3e02      	subs	r6, #2
90000296:	443b      	add	r3, r7
90000298:	1a5b      	subs	r3, r3, r1
9000029a:	b2a4      	uxth	r4, r4
9000029c:	fbb3 f0f8 	udiv	r0, r3, r8
900002a0:	fb08 3310 	mls	r3, r8, r0, r3
900002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
900002a8:	fb00 fe0e 	mul.w	lr, r0, lr
900002ac:	45a6      	cmp	lr, r4
900002ae:	d909      	bls.n	900002c4 <__udivmoddi4+0x8c>
900002b0:	193c      	adds	r4, r7, r4
900002b2:	f100 33ff 	add.w	r3, r0, #4294967295
900002b6:	f080 8105 	bcs.w	900004c4 <__udivmoddi4+0x28c>
900002ba:	45a6      	cmp	lr, r4
900002bc:	f240 8102 	bls.w	900004c4 <__udivmoddi4+0x28c>
900002c0:	3802      	subs	r0, #2
900002c2:	443c      	add	r4, r7
900002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
900002c8:	eba4 040e 	sub.w	r4, r4, lr
900002cc:	2600      	movs	r6, #0
900002ce:	b11d      	cbz	r5, 900002d8 <__udivmoddi4+0xa0>
900002d0:	40d4      	lsrs	r4, r2
900002d2:	2300      	movs	r3, #0
900002d4:	e9c5 4300 	strd	r4, r3, [r5]
900002d8:	4631      	mov	r1, r6
900002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900002de:	b902      	cbnz	r2, 900002e2 <__udivmoddi4+0xaa>
900002e0:	deff      	udf	#255	; 0xff
900002e2:	fab2 f282 	clz	r2, r2
900002e6:	2a00      	cmp	r2, #0
900002e8:	d150      	bne.n	9000038c <__udivmoddi4+0x154>
900002ea:	1bcb      	subs	r3, r1, r7
900002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900002f0:	fa1f f887 	uxth.w	r8, r7
900002f4:	2601      	movs	r6, #1
900002f6:	fbb3 fcfe 	udiv	ip, r3, lr
900002fa:	0c21      	lsrs	r1, r4, #16
900002fc:	fb0e 331c 	mls	r3, lr, ip, r3
90000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
90000304:	fb08 f30c 	mul.w	r3, r8, ip
90000308:	428b      	cmp	r3, r1
9000030a:	d907      	bls.n	9000031c <__udivmoddi4+0xe4>
9000030c:	1879      	adds	r1, r7, r1
9000030e:	f10c 30ff 	add.w	r0, ip, #4294967295
90000312:	d202      	bcs.n	9000031a <__udivmoddi4+0xe2>
90000314:	428b      	cmp	r3, r1
90000316:	f200 80e9 	bhi.w	900004ec <__udivmoddi4+0x2b4>
9000031a:	4684      	mov	ip, r0
9000031c:	1ac9      	subs	r1, r1, r3
9000031e:	b2a3      	uxth	r3, r4
90000320:	fbb1 f0fe 	udiv	r0, r1, lr
90000324:	fb0e 1110 	mls	r1, lr, r0, r1
90000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
9000032c:	fb08 f800 	mul.w	r8, r8, r0
90000330:	45a0      	cmp	r8, r4
90000332:	d907      	bls.n	90000344 <__udivmoddi4+0x10c>
90000334:	193c      	adds	r4, r7, r4
90000336:	f100 33ff 	add.w	r3, r0, #4294967295
9000033a:	d202      	bcs.n	90000342 <__udivmoddi4+0x10a>
9000033c:	45a0      	cmp	r8, r4
9000033e:	f200 80d9 	bhi.w	900004f4 <__udivmoddi4+0x2bc>
90000342:	4618      	mov	r0, r3
90000344:	eba4 0408 	sub.w	r4, r4, r8
90000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
9000034c:	e7bf      	b.n	900002ce <__udivmoddi4+0x96>
9000034e:	428b      	cmp	r3, r1
90000350:	d909      	bls.n	90000366 <__udivmoddi4+0x12e>
90000352:	2d00      	cmp	r5, #0
90000354:	f000 80b1 	beq.w	900004ba <__udivmoddi4+0x282>
90000358:	2600      	movs	r6, #0
9000035a:	e9c5 0100 	strd	r0, r1, [r5]
9000035e:	4630      	mov	r0, r6
90000360:	4631      	mov	r1, r6
90000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000366:	fab3 f683 	clz	r6, r3
9000036a:	2e00      	cmp	r6, #0
9000036c:	d14a      	bne.n	90000404 <__udivmoddi4+0x1cc>
9000036e:	428b      	cmp	r3, r1
90000370:	d302      	bcc.n	90000378 <__udivmoddi4+0x140>
90000372:	4282      	cmp	r2, r0
90000374:	f200 80b8 	bhi.w	900004e8 <__udivmoddi4+0x2b0>
90000378:	1a84      	subs	r4, r0, r2
9000037a:	eb61 0103 	sbc.w	r1, r1, r3
9000037e:	2001      	movs	r0, #1
90000380:	468c      	mov	ip, r1
90000382:	2d00      	cmp	r5, #0
90000384:	d0a8      	beq.n	900002d8 <__udivmoddi4+0xa0>
90000386:	e9c5 4c00 	strd	r4, ip, [r5]
9000038a:	e7a5      	b.n	900002d8 <__udivmoddi4+0xa0>
9000038c:	f1c2 0320 	rsb	r3, r2, #32
90000390:	fa20 f603 	lsr.w	r6, r0, r3
90000394:	4097      	lsls	r7, r2
90000396:	fa01 f002 	lsl.w	r0, r1, r2
9000039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
9000039e:	40d9      	lsrs	r1, r3
900003a0:	4330      	orrs	r0, r6
900003a2:	0c03      	lsrs	r3, r0, #16
900003a4:	fbb1 f6fe 	udiv	r6, r1, lr
900003a8:	fa1f f887 	uxth.w	r8, r7
900003ac:	fb0e 1116 	mls	r1, lr, r6, r1
900003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
900003b4:	fb06 f108 	mul.w	r1, r6, r8
900003b8:	4299      	cmp	r1, r3
900003ba:	fa04 f402 	lsl.w	r4, r4, r2
900003be:	d909      	bls.n	900003d4 <__udivmoddi4+0x19c>
900003c0:	18fb      	adds	r3, r7, r3
900003c2:	f106 3cff 	add.w	ip, r6, #4294967295
900003c6:	f080 808d 	bcs.w	900004e4 <__udivmoddi4+0x2ac>
900003ca:	4299      	cmp	r1, r3
900003cc:	f240 808a 	bls.w	900004e4 <__udivmoddi4+0x2ac>
900003d0:	3e02      	subs	r6, #2
900003d2:	443b      	add	r3, r7
900003d4:	1a5b      	subs	r3, r3, r1
900003d6:	b281      	uxth	r1, r0
900003d8:	fbb3 f0fe 	udiv	r0, r3, lr
900003dc:	fb0e 3310 	mls	r3, lr, r0, r3
900003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
900003e4:	fb00 f308 	mul.w	r3, r0, r8
900003e8:	428b      	cmp	r3, r1
900003ea:	d907      	bls.n	900003fc <__udivmoddi4+0x1c4>
900003ec:	1879      	adds	r1, r7, r1
900003ee:	f100 3cff 	add.w	ip, r0, #4294967295
900003f2:	d273      	bcs.n	900004dc <__udivmoddi4+0x2a4>
900003f4:	428b      	cmp	r3, r1
900003f6:	d971      	bls.n	900004dc <__udivmoddi4+0x2a4>
900003f8:	3802      	subs	r0, #2
900003fa:	4439      	add	r1, r7
900003fc:	1acb      	subs	r3, r1, r3
900003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
90000402:	e778      	b.n	900002f6 <__udivmoddi4+0xbe>
90000404:	f1c6 0c20 	rsb	ip, r6, #32
90000408:	fa03 f406 	lsl.w	r4, r3, r6
9000040c:	fa22 f30c 	lsr.w	r3, r2, ip
90000410:	431c      	orrs	r4, r3
90000412:	fa20 f70c 	lsr.w	r7, r0, ip
90000416:	fa01 f306 	lsl.w	r3, r1, r6
9000041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
9000041e:	fa21 f10c 	lsr.w	r1, r1, ip
90000422:	431f      	orrs	r7, r3
90000424:	0c3b      	lsrs	r3, r7, #16
90000426:	fbb1 f9fe 	udiv	r9, r1, lr
9000042a:	fa1f f884 	uxth.w	r8, r4
9000042e:	fb0e 1119 	mls	r1, lr, r9, r1
90000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
90000436:	fb09 fa08 	mul.w	sl, r9, r8
9000043a:	458a      	cmp	sl, r1
9000043c:	fa02 f206 	lsl.w	r2, r2, r6
90000440:	fa00 f306 	lsl.w	r3, r0, r6
90000444:	d908      	bls.n	90000458 <__udivmoddi4+0x220>
90000446:	1861      	adds	r1, r4, r1
90000448:	f109 30ff 	add.w	r0, r9, #4294967295
9000044c:	d248      	bcs.n	900004e0 <__udivmoddi4+0x2a8>
9000044e:	458a      	cmp	sl, r1
90000450:	d946      	bls.n	900004e0 <__udivmoddi4+0x2a8>
90000452:	f1a9 0902 	sub.w	r9, r9, #2
90000456:	4421      	add	r1, r4
90000458:	eba1 010a 	sub.w	r1, r1, sl
9000045c:	b2bf      	uxth	r7, r7
9000045e:	fbb1 f0fe 	udiv	r0, r1, lr
90000462:	fb0e 1110 	mls	r1, lr, r0, r1
90000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
9000046a:	fb00 f808 	mul.w	r8, r0, r8
9000046e:	45b8      	cmp	r8, r7
90000470:	d907      	bls.n	90000482 <__udivmoddi4+0x24a>
90000472:	19e7      	adds	r7, r4, r7
90000474:	f100 31ff 	add.w	r1, r0, #4294967295
90000478:	d22e      	bcs.n	900004d8 <__udivmoddi4+0x2a0>
9000047a:	45b8      	cmp	r8, r7
9000047c:	d92c      	bls.n	900004d8 <__udivmoddi4+0x2a0>
9000047e:	3802      	subs	r0, #2
90000480:	4427      	add	r7, r4
90000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
90000486:	eba7 0708 	sub.w	r7, r7, r8
9000048a:	fba0 8902 	umull	r8, r9, r0, r2
9000048e:	454f      	cmp	r7, r9
90000490:	46c6      	mov	lr, r8
90000492:	4649      	mov	r1, r9
90000494:	d31a      	bcc.n	900004cc <__udivmoddi4+0x294>
90000496:	d017      	beq.n	900004c8 <__udivmoddi4+0x290>
90000498:	b15d      	cbz	r5, 900004b2 <__udivmoddi4+0x27a>
9000049a:	ebb3 020e 	subs.w	r2, r3, lr
9000049e:	eb67 0701 	sbc.w	r7, r7, r1
900004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
900004a6:	40f2      	lsrs	r2, r6
900004a8:	ea4c 0202 	orr.w	r2, ip, r2
900004ac:	40f7      	lsrs	r7, r6
900004ae:	e9c5 2700 	strd	r2, r7, [r5]
900004b2:	2600      	movs	r6, #0
900004b4:	4631      	mov	r1, r6
900004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900004ba:	462e      	mov	r6, r5
900004bc:	4628      	mov	r0, r5
900004be:	e70b      	b.n	900002d8 <__udivmoddi4+0xa0>
900004c0:	4606      	mov	r6, r0
900004c2:	e6e9      	b.n	90000298 <__udivmoddi4+0x60>
900004c4:	4618      	mov	r0, r3
900004c6:	e6fd      	b.n	900002c4 <__udivmoddi4+0x8c>
900004c8:	4543      	cmp	r3, r8
900004ca:	d2e5      	bcs.n	90000498 <__udivmoddi4+0x260>
900004cc:	ebb8 0e02 	subs.w	lr, r8, r2
900004d0:	eb69 0104 	sbc.w	r1, r9, r4
900004d4:	3801      	subs	r0, #1
900004d6:	e7df      	b.n	90000498 <__udivmoddi4+0x260>
900004d8:	4608      	mov	r0, r1
900004da:	e7d2      	b.n	90000482 <__udivmoddi4+0x24a>
900004dc:	4660      	mov	r0, ip
900004de:	e78d      	b.n	900003fc <__udivmoddi4+0x1c4>
900004e0:	4681      	mov	r9, r0
900004e2:	e7b9      	b.n	90000458 <__udivmoddi4+0x220>
900004e4:	4666      	mov	r6, ip
900004e6:	e775      	b.n	900003d4 <__udivmoddi4+0x19c>
900004e8:	4630      	mov	r0, r6
900004ea:	e74a      	b.n	90000382 <__udivmoddi4+0x14a>
900004ec:	f1ac 0c02 	sub.w	ip, ip, #2
900004f0:	4439      	add	r1, r7
900004f2:	e713      	b.n	9000031c <__udivmoddi4+0xe4>
900004f4:	3802      	subs	r0, #2
900004f6:	443c      	add	r4, r7
900004f8:	e724      	b.n	90000344 <__udivmoddi4+0x10c>
900004fa:	bf00      	nop

900004fc <__aeabi_idiv0>:
900004fc:	4770      	bx	lr
900004fe:	bf00      	nop

90000500 <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
90000500:	4770      	bx	lr

90000502 <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
90000502:	2000      	movs	r0, #0
90000504:	4770      	bx	lr
	...

90000508 <ft5336_ReadID>:
{
90000508:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
9000050a:	2300      	movs	r3, #0
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
9000050c:	4c0f      	ldr	r4, [pc, #60]	; (9000054c <ft5336_ReadID+0x44>)
{
9000050e:	4605      	mov	r5, r0
  volatile uint8_t ucReadId = 0;
90000510:	f88d 3007 	strb.w	r3, [sp, #7]
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
90000514:	7823      	ldrb	r3, [r4, #0]
90000516:	b91b      	cbnz	r3, 90000520 <ft5336_ReadID+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
90000518:	f000 f99e 	bl	90000858 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
9000051c:	2301      	movs	r3, #1
9000051e:	7023      	strb	r3, [r4, #0]
{
90000520:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
90000522:	b2ed      	uxtb	r5, r5
90000524:	3c01      	subs	r4, #1
90000526:	21a8      	movs	r1, #168	; 0xa8
90000528:	4628      	mov	r0, r5
9000052a:	f000 f9a9 	bl	90000880 <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
9000052e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
90000532:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
90000536:	f89d 3007 	ldrb.w	r3, [sp, #7]
9000053a:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
9000053c:	d103      	bne.n	90000546 <ft5336_ReadID+0x3e>
  return (ucReadId);
9000053e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
90000542:	b003      	add	sp, #12
90000544:	bd30      	pop	{r4, r5, pc}
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
90000546:	2b51      	cmp	r3, #81	; 0x51
90000548:	d1ec      	bne.n	90000524 <ft5336_ReadID+0x1c>
9000054a:	e7f8      	b.n	9000053e <ft5336_ReadID+0x36>
9000054c:	2000007c 	.word	0x2000007c

90000550 <ft5336_TS_DetectTouch>:
{
90000550:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
90000552:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
90000554:	2102      	movs	r1, #2
90000556:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
90000558:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
9000055c:	f000 f990 	bl	90000880 <TS_IO_Read>
90000560:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
90000564:	f89d 3007 	ldrb.w	r3, [sp, #7]
90000568:	f003 030f 	and.w	r3, r3, #15
9000056c:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
90000570:	f89d 3007 	ldrb.w	r3, [sp, #7]
90000574:	2b05      	cmp	r3, #5
90000576:	d901      	bls.n	9000057c <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
90000578:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
9000057c:	f89d 2007 	ldrb.w	r2, [sp, #7]
90000580:	4b03      	ldr	r3, [pc, #12]	; (90000590 <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
90000582:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
90000586:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
90000588:	2200      	movs	r2, #0
9000058a:	709a      	strb	r2, [r3, #2]
}
9000058c:	b002      	add	sp, #8
9000058e:	bd10      	pop	{r4, pc}
90000590:	2000007c 	.word	0x2000007c

90000594 <ft5336_TS_GetXY>:
{
90000594:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
90000598:	4d2b      	ldr	r5, [pc, #172]	; (90000648 <ft5336_TS_GetXY+0xb4>)
{
9000059a:	4616      	mov	r6, r2
  volatile uint8_t ucReadData = 0;
9000059c:	2300      	movs	r3, #0
{
9000059e:	460f      	mov	r7, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
900005a0:	78ac      	ldrb	r4, [r5, #2]
900005a2:	786a      	ldrb	r2, [r5, #1]
  volatile uint8_t ucReadData = 0;
900005a4:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
900005a8:	42a2      	cmp	r2, r4
900005aa:	d945      	bls.n	90000638 <ft5336_TS_GetXY+0xa4>
    switch(ft5336_handle.currActiveTouchIdx)
900005ac:	2c09      	cmp	r4, #9
900005ae:	d846      	bhi.n	9000063e <ft5336_TS_GetXY+0xaa>
900005b0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
900005b4:	005b      	lsls	r3, r3, #1
900005b6:	b2db      	uxtb	r3, r3
900005b8:	1d19      	adds	r1, r3, #4
900005ba:	f103 0a03 	add.w	sl, r3, #3
900005be:	f103 0906 	add.w	r9, r3, #6
900005c2:	3305      	adds	r3, #5
900005c4:	b2c9      	uxtb	r1, r1
900005c6:	fa5f fa8a 	uxtb.w	sl, sl
900005ca:	fa5f f989 	uxtb.w	r9, r9
900005ce:	fa5f f883 	uxtb.w	r8, r3
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
900005d2:	b2c4      	uxtb	r4, r0
900005d4:	4620      	mov	r0, r4
900005d6:	f000 f953 	bl	90000880 <TS_IO_Read>
900005da:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
900005de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
900005e2:	4651      	mov	r1, sl
900005e4:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
900005e6:	80ab      	strh	r3, [r5, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
900005e8:	f000 f94a 	bl	90000880 <TS_IO_Read>
900005ec:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
900005f0:	4649      	mov	r1, r9
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
900005f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
900005f6:	4620      	mov	r0, r4
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
900005f8:	88aa      	ldrh	r2, [r5, #4]
900005fa:	021b      	lsls	r3, r3, #8
900005fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
90000600:	4313      	orrs	r3, r2
    *X = coord;
90000602:	803b      	strh	r3, [r7, #0]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
90000604:	80ab      	strh	r3, [r5, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
90000606:	f000 f93b 	bl	90000880 <TS_IO_Read>
9000060a:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
9000060e:	4641      	mov	r1, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
90000610:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
90000614:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
90000616:	80ab      	strh	r3, [r5, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
90000618:	f000 f932 	bl	90000880 <TS_IO_Read>
9000061c:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
90000620:	f89d 3007 	ldrb.w	r3, [sp, #7]
90000624:	88aa      	ldrh	r2, [r5, #4]
90000626:	021b      	lsls	r3, r3, #8
90000628:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
9000062c:	4313      	orrs	r3, r2
9000062e:	80ab      	strh	r3, [r5, #4]
    *Y = coord;
90000630:	8033      	strh	r3, [r6, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
90000632:	78ab      	ldrb	r3, [r5, #2]
90000634:	3301      	adds	r3, #1
90000636:	70ab      	strb	r3, [r5, #2]
}
90000638:	b002      	add	sp, #8
9000063a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
9000063e:	4698      	mov	r8, r3
90000640:	4699      	mov	r9, r3
90000642:	469a      	mov	sl, r3
90000644:	4619      	mov	r1, r3
90000646:	e7c4      	b.n	900005d2 <ft5336_TS_GetXY+0x3e>
90000648:	2000007c 	.word	0x2000007c

9000064c <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
9000064c:	2201      	movs	r2, #1
9000064e:	21a4      	movs	r1, #164	; 0xa4
90000650:	b2c0      	uxtb	r0, r0
90000652:	f000 b903 	b.w	9000085c <TS_IO_Write>

90000656 <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
90000656:	2200      	movs	r2, #0
90000658:	21a4      	movs	r1, #164	; 0xa4
9000065a:	b2c0      	uxtb	r0, r0
9000065c:	f000 b8fe 	b.w	9000085c <TS_IO_Write>

90000660 <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
90000660:	f7ff bff9 	b.w	90000656 <ft5336_TS_DisableIT>

90000664 <ft5336_TS_ClearIT>:
90000664:	4770      	bx	lr
	...

90000668 <ft5336_Init>:
{
90000668:	b510      	push	{r4, lr}
  return(ft5336_handle.i2cInitialized);
9000066a:	4c05      	ldr	r4, [pc, #20]	; (90000680 <ft5336_Init+0x18>)
  TS_IO_Delay(200);
9000066c:	20c8      	movs	r0, #200	; 0xc8
9000066e:	f000 f91d 	bl	900008ac <TS_IO_Delay>
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
90000672:	7823      	ldrb	r3, [r4, #0]
90000674:	b91b      	cbnz	r3, 9000067e <ft5336_Init+0x16>
    TS_IO_Init();
90000676:	f000 f8ef 	bl	90000858 <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
9000067a:	2301      	movs	r3, #1
9000067c:	7023      	strb	r3, [r4, #0]
}
9000067e:	bd10      	pop	{r4, pc}
90000680:	2000007c 	.word	0x2000007c

90000684 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
90000684:	b570      	push	{r4, r5, r6, lr}
90000686:	b08a      	sub	sp, #40	; 0x28
90000688:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
9000068a:	f001 fdd3 	bl	90002234 <HAL_I2C_GetState>
9000068e:	2800      	cmp	r0, #0
90000690:	d155      	bne.n	9000073e <I2Cx_Init+0xba>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
90000692:	4b4a      	ldr	r3, [pc, #296]	; (900007bc <I2Cx_Init+0x138>)
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
90000694:	2600      	movs	r6, #0
90000696:	4c4a      	ldr	r4, [pc, #296]	; (900007c0 <I2Cx_Init+0x13c>)
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
90000698:	429d      	cmp	r5, r3
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
9000069a:	616e      	str	r6, [r5, #20]
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
9000069c:	bf0c      	ite	eq
9000069e:	4a49      	ldreq	r2, [pc, #292]	; (900007c4 <I2Cx_Init+0x140>)
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
900006a0:	4a49      	ldrne	r2, [pc, #292]	; (900007c8 <I2Cx_Init+0x144>)
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
900006a2:	429d      	cmp	r5, r3
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
900006a4:	602a      	str	r2, [r5, #0]
    i2c_handler->Init.OwnAddress1      = 0;
900006a6:	4a49      	ldr	r2, [pc, #292]	; (900007cc <I2Cx_Init+0x148>)
900006a8:	e9c5 2601 	strd	r2, r6, [r5, #4]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
900006ac:	f04f 0201 	mov.w	r2, #1
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
900006b0:	e9c5 6607 	strd	r6, r6, [r5, #28]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
900006b4:	e9c5 2603 	strd	r2, r6, [r5, #12]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
900006b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
900006ba:	d142      	bne.n	90000742 <I2Cx_Init+0xbe>
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
900006bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
900006c0:	2080      	movs	r0, #128	; 0x80
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
900006c2:	f04f 0c02 	mov.w	ip, #2
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
900006c6:	a905      	add	r1, sp, #20
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
900006c8:	6323      	str	r3, [r4, #48]	; 0x30
900006ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
900006cc:	9607      	str	r6, [sp, #28]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
900006ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
900006d2:	9301      	str	r3, [sp, #4]
900006d4:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
900006d6:	2312      	movs	r3, #18
900006d8:	e9cd 0305 	strd	r0, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
900006dc:	2304      	movs	r3, #4
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
900006de:	483c      	ldr	r0, [pc, #240]	; (900007d0 <I2Cx_Init+0x14c>)
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
900006e0:	e9cd c308 	strd	ip, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
900006e4:	f001 f98e 	bl	90001a04 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
900006e8:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
900006ec:	a905      	add	r1, sp, #20
900006ee:	4838      	ldr	r0, [pc, #224]	; (900007d0 <I2Cx_Init+0x14c>)
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
900006f0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
900006f2:	f001 f987 	bl	90001a04 <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
900006f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
900006f8:	4632      	mov	r2, r6
900006fa:	210f      	movs	r1, #15
900006fc:	2048      	movs	r0, #72	; 0x48
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
900006fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
90000702:	6423      	str	r3, [r4, #64]	; 0x40
90000704:	6c23      	ldr	r3, [r4, #64]	; 0x40
90000706:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
9000070a:	9302      	str	r3, [sp, #8]
9000070c:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
9000070e:	6a23      	ldr	r3, [r4, #32]
90000710:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
90000714:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
90000716:	6a23      	ldr	r3, [r4, #32]
90000718:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
9000071c:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
9000071e:	f000 fe4b 	bl	900013b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
90000722:	2048      	movs	r0, #72	; 0x48
90000724:	f000 fe7a 	bl	9000141c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
90000728:	2049      	movs	r0, #73	; 0x49
9000072a:	4632      	mov	r2, r6
9000072c:	210f      	movs	r1, #15
9000072e:	f000 fe43 	bl	900013b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
90000732:	2049      	movs	r0, #73	; 0x49
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
90000734:	f000 fe72 	bl	9000141c <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
90000738:	4628      	mov	r0, r5
9000073a:	f001 fb9e 	bl	90001e7a <HAL_I2C_Init>
  }
}
9000073e:	b00a      	add	sp, #40	; 0x28
90000740:	bd70      	pop	{r4, r5, r6, pc}
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
90000742:	f043 0302 	orr.w	r3, r3, #2
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
90000746:	f44f 7280 	mov.w	r2, #256	; 0x100
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
9000074a:	2102      	movs	r1, #2
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
9000074c:	4821      	ldr	r0, [pc, #132]	; (900007d4 <I2Cx_Init+0x150>)
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
9000074e:	6323      	str	r3, [r4, #48]	; 0x30
90000750:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
90000752:	9607      	str	r6, [sp, #28]
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
90000754:	f003 0302 	and.w	r3, r3, #2
90000758:	9303      	str	r3, [sp, #12]
9000075a:	9b03      	ldr	r3, [sp, #12]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
9000075c:	2312      	movs	r3, #18
9000075e:	e9cd 2305 	strd	r2, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
90000762:	2304      	movs	r3, #4
90000764:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90000768:	a905      	add	r1, sp, #20
9000076a:	f001 f94b 	bl	90001a04 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
9000076e:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90000772:	a905      	add	r1, sp, #20
90000774:	4817      	ldr	r0, [pc, #92]	; (900007d4 <I2Cx_Init+0x150>)
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
90000776:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90000778:	f001 f944 	bl	90001a04 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
9000077c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
9000077e:	4632      	mov	r2, r6
90000780:	210f      	movs	r1, #15
90000782:	201f      	movs	r0, #31
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
90000784:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
90000788:	6423      	str	r3, [r4, #64]	; 0x40
9000078a:	6c23      	ldr	r3, [r4, #64]	; 0x40
9000078c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90000790:	9304      	str	r3, [sp, #16]
90000792:	9b04      	ldr	r3, [sp, #16]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
90000794:	6a23      	ldr	r3, [r4, #32]
90000796:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
9000079a:	6223      	str	r3, [r4, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
9000079c:	6a23      	ldr	r3, [r4, #32]
9000079e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
900007a2:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
900007a4:	f000 fe08 	bl	900013b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
900007a8:	201f      	movs	r0, #31
900007aa:	f000 fe37 	bl	9000141c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
900007ae:	2020      	movs	r0, #32
900007b0:	4632      	mov	r2, r6
900007b2:	210f      	movs	r1, #15
900007b4:	f000 fe00 	bl	900013b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
900007b8:	2020      	movs	r0, #32
900007ba:	e7bb      	b.n	90000734 <I2Cx_Init+0xb0>
900007bc:	20000084 	.word	0x20000084
900007c0:	40023800 	.word	0x40023800
900007c4:	40005c00 	.word	0x40005c00
900007c8:	40005400 	.word	0x40005400
900007cc:	40912732 	.word	0x40912732
900007d0:	40021c00 	.word	0x40021c00
900007d4:	40020400 	.word	0x40020400

900007d8 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
900007d8:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
900007da:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
900007de:	b085      	sub	sp, #20
900007e0:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
900007e2:	9402      	str	r4, [sp, #8]
900007e4:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
900007e8:	9401      	str	r4, [sp, #4]
900007ea:	9c08      	ldr	r4, [sp, #32]
900007ec:	9400      	str	r4, [sp, #0]
900007ee:	f001 fbaf 	bl	90001f50 <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
900007f2:	4604      	mov	r4, r0
900007f4:	b128      	cbz	r0, 90000802 <I2Cx_WriteMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
900007f6:	4628      	mov	r0, r5
900007f8:	f001 fb91 	bl	90001f1e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
900007fc:	4628      	mov	r0, r5
900007fe:	f7ff ff41 	bl	90000684 <I2Cx_Init>
}
90000802:	4620      	mov	r0, r4
90000804:	b005      	add	sp, #20
90000806:	bd30      	pop	{r4, r5, pc}

90000808 <I2Cx_ReadMultiple>:
{
90000808:	b530      	push	{r4, r5, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
9000080a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
9000080e:	b085      	sub	sp, #20
90000810:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
90000812:	9402      	str	r4, [sp, #8]
90000814:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
90000818:	9401      	str	r4, [sp, #4]
9000081a:	9c08      	ldr	r4, [sp, #32]
9000081c:	9400      	str	r4, [sp, #0]
9000081e:	f001 fc4d 	bl	900020bc <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
90000822:	4604      	mov	r4, r0
90000824:	b128      	cbz	r0, 90000832 <I2Cx_ReadMultiple+0x2a>
  HAL_I2C_DeInit(i2c_handler);
90000826:	4628      	mov	r0, r5
90000828:	f001 fb79 	bl	90001f1e <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
9000082c:	4628      	mov	r0, r5
9000082e:	f7ff ff29 	bl	90000684 <I2Cx_Init>
}
90000832:	4620      	mov	r0, r4
90000834:	b005      	add	sp, #20
90000836:	bd30      	pop	{r4, r5, pc}

90000838 <BSP_LED_On>:
  if (Led == LED1)	/* Switch On LED connected to GPIO */
90000838:	b920      	cbnz	r0, 90000844 <BSP_LED_On+0xc>
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_SET);
9000083a:	2201      	movs	r2, #1
9000083c:	2102      	movs	r1, #2
9000083e:	4802      	ldr	r0, [pc, #8]	; (90000848 <BSP_LED_On+0x10>)
90000840:	f001 b9c6 	b.w	90001bd0 <HAL_GPIO_WritePin>
}
90000844:	4770      	bx	lr
90000846:	bf00      	nop
90000848:	40022000 	.word	0x40022000

9000084c <AUDIO_IO_Init>:
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
  I2Cx_Init(&hI2cAudioHandler);
9000084c:	4801      	ldr	r0, [pc, #4]	; (90000854 <AUDIO_IO_Init+0x8>)
9000084e:	f7ff bf19 	b.w	90000684 <I2Cx_Init>
90000852:	bf00      	nop
90000854:	20000084 	.word	0x20000084

90000858 <TS_IO_Init>:
90000858:	f7ff bff8 	b.w	9000084c <AUDIO_IO_Init>

9000085c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
9000085c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
9000085e:	f88d 200f 	strb.w	r2, [sp, #15]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
90000862:	f10d 020f 	add.w	r2, sp, #15
90000866:	2301      	movs	r3, #1
90000868:	9200      	str	r2, [sp, #0]
9000086a:	460a      	mov	r2, r1
9000086c:	4601      	mov	r1, r0
9000086e:	9301      	str	r3, [sp, #4]
90000870:	4802      	ldr	r0, [pc, #8]	; (9000087c <TS_IO_Write+0x20>)
90000872:	f7ff ffb1 	bl	900007d8 <I2Cx_WriteMultiple>
}
90000876:	b005      	add	sp, #20
90000878:	f85d fb04 	ldr.w	pc, [sp], #4
9000087c:	20000084 	.word	0x20000084

90000880 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
90000880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t read_value = 0;
90000882:	2300      	movs	r3, #0
{
90000884:	460a      	mov	r2, r1

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
90000886:	f10d 010f 	add.w	r1, sp, #15
  uint8_t read_value = 0;
9000088a:	f88d 300f 	strb.w	r3, [sp, #15]
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
9000088e:	2301      	movs	r3, #1
90000890:	9100      	str	r1, [sp, #0]
90000892:	4601      	mov	r1, r0
90000894:	9301      	str	r3, [sp, #4]
90000896:	4804      	ldr	r0, [pc, #16]	; (900008a8 <TS_IO_Read+0x28>)
90000898:	f7ff ffb6 	bl	90000808 <I2Cx_ReadMultiple>

  return read_value;
}
9000089c:	f89d 000f 	ldrb.w	r0, [sp, #15]
900008a0:	b005      	add	sp, #20
900008a2:	f85d fb04 	ldr.w	pc, [sp], #4
900008a6:	bf00      	nop
900008a8:	20000084 	.word	0x20000084

900008ac <TS_IO_Delay>:
900008ac:	f000 bd60 	b.w	90001370 <HAL_Delay>

900008b0 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
900008b0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
900008b4:	4c19      	ldr	r4, [pc, #100]	; (9000091c <LL_FillBuffer+0x6c>)
{
900008b6:	4698      	mov	r8, r3
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
900008b8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
{
900008bc:	460e      	mov	r6, r1
900008be:	4617      	mov	r7, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900008c0:	2134      	movs	r1, #52	; 0x34
900008c2:	4a17      	ldr	r2, [pc, #92]	; (90000920 <LL_FillBuffer+0x70>)
{
900008c4:	4681      	mov	r9, r0
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
900008c6:	6063      	str	r3, [r4, #4]
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
900008c8:	4620      	mov	r0, r4
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900008ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
{
900008cc:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900008d0:	fb01 2303 	mla	r3, r1, r3, r2
900008d4:	6c9d      	ldr	r5, [r3, #72]	; 0x48
  hDma2dHandler.Init.OutputOffset = OffLine;      
900008d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
900008d8:	2d02      	cmp	r5, #2
  hDma2dHandler.Init.OutputOffset = OffLine;      
900008da:	60e3      	str	r3, [r4, #12]
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
900008dc:	bf18      	it	ne
900008de:	2500      	movne	r5, #0
  hDma2dHandler.Instance = DMA2D;
900008e0:	4b10      	ldr	r3, [pc, #64]	; (90000924 <LL_FillBuffer+0x74>)
900008e2:	60a5      	str	r5, [r4, #8]
900008e4:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
900008e6:	f000 ff7e 	bl	900017e6 <HAL_DMA2D_Init>
900008ea:	b9a0      	cbnz	r0, 90000916 <LL_FillBuffer+0x66>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
900008ec:	4649      	mov	r1, r9
900008ee:	4620      	mov	r0, r4
900008f0:	f001 f840 	bl	90001974 <HAL_DMA2D_ConfigLayer>
900008f4:	b978      	cbnz	r0, 90000916 <LL_FillBuffer+0x66>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
900008f6:	463b      	mov	r3, r7
900008f8:	4632      	mov	r2, r6
900008fa:	4651      	mov	r1, sl
900008fc:	4620      	mov	r0, r4
900008fe:	f8cd 8000 	str.w	r8, [sp]
90000902:	f000 ff9c 	bl	9000183e <HAL_DMA2D_Start>
90000906:	b930      	cbnz	r0, 90000916 <LL_FillBuffer+0x66>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
90000908:	210a      	movs	r1, #10
9000090a:	4620      	mov	r0, r4
      }
    }
  } 
}
9000090c:	b002      	add	sp, #8
9000090e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
90000912:	f000 bfae 	b.w	90001872 <HAL_DMA2D_PollForTransfer>
}
90000916:	b002      	add	sp, #8
90000918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000091c:	20000344 	.word	0x20000344
90000920:	20000544 	.word	0x20000544
90000924:	4002b000 	.word	0x4002b000

90000928 <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90000928:	4b03      	ldr	r3, [pc, #12]	; (90000938 <BSP_LCD_GetXSize+0x10>)
9000092a:	2134      	movs	r1, #52	; 0x34
9000092c:	4a03      	ldr	r2, [pc, #12]	; (9000093c <BSP_LCD_GetXSize+0x14>)
9000092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90000930:	fb01 2303 	mla	r3, r1, r3, r2
}
90000934:	6e18      	ldr	r0, [r3, #96]	; 0x60
90000936:	4770      	bx	lr
90000938:	20000344 	.word	0x20000344
9000093c:	20000544 	.word	0x20000544

90000940 <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
90000940:	4b03      	ldr	r3, [pc, #12]	; (90000950 <BSP_LCD_GetYSize+0x10>)
90000942:	2134      	movs	r1, #52	; 0x34
90000944:	4a03      	ldr	r2, [pc, #12]	; (90000954 <BSP_LCD_GetYSize+0x14>)
90000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90000948:	fb01 2303 	mla	r3, r1, r3, r2
}
9000094c:	6e58      	ldr	r0, [r3, #100]	; 0x64
9000094e:	4770      	bx	lr
90000950:	20000344 	.word	0x20000344
90000954:	20000544 	.word	0x20000544

90000958 <BSP_LCD_LayerDefaultInit>:
{     
90000958:	b570      	push	{r4, r5, r6, lr}
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
9000095a:	4d18      	ldr	r5, [pc, #96]	; (900009bc <BSP_LCD_LayerDefaultInit+0x64>)
{     
9000095c:	4604      	mov	r4, r0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
9000095e:	2634      	movs	r6, #52	; 0x34
90000960:	4817      	ldr	r0, [pc, #92]	; (900009c0 <BSP_LCD_LayerDefaultInit+0x68>)
90000962:	6c2a      	ldr	r2, [r5, #64]	; 0x40
{     
90000964:	b08e      	sub	sp, #56	; 0x38
  layer_cfg.WindowX0 = 0;
90000966:	2300      	movs	r3, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90000968:	fb06 0202 	mla	r2, r6, r2, r0
  layer_cfg.FBStartAdress = FB_Address;
9000096c:	910a      	str	r1, [sp, #40]	; 0x28
  layer_cfg.Alpha = 255;
9000096e:	21ff      	movs	r1, #255	; 0xff
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90000970:	6e16      	ldr	r6, [r2, #96]	; 0x60
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
90000972:	6e52      	ldr	r2, [r2, #100]	; 0x64
  layer_cfg.WindowX0 = 0;
90000974:	9301      	str	r3, [sp, #4]
  layer_cfg.Backcolor.Blue = 0;
90000976:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Red = 0;
9000097a:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
9000097e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  layer_cfg.Alpha0 = 0;
90000982:	e9cd 1306 	strd	r1, r3, [sp, #24]
  layer_cfg.WindowY0 = 0;
90000986:	e9cd 6302 	strd	r6, r3, [sp, #8]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
9000098a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
9000098e:	2307      	movs	r3, #7
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
90000990:	e9cd 620b 	strd	r6, r2, [sp, #44]	; 0x2c
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
90000994:	e9cd 1308 	strd	r1, r3, [sp, #32]
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
90000998:	4622      	mov	r2, r4
9000099a:	a901      	add	r1, sp, #4
9000099c:	f001 fd40 	bl	90002420 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
900009a0:	200c      	movs	r0, #12
900009a2:	f04f 33ff 	mov.w	r3, #4294967295
900009a6:	fb00 5004 	mla	r0, r0, r4, r5
900009aa:	6483      	str	r3, [r0, #72]	; 0x48
  DrawProp[LayerIndex].pFont     = &Font24;
900009ac:	4b05      	ldr	r3, [pc, #20]	; (900009c4 <BSP_LCD_LayerDefaultInit+0x6c>)
900009ae:	64c3      	str	r3, [r0, #76]	; 0x4c
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
900009b0:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
900009b4:	6443      	str	r3, [r0, #68]	; 0x44
}
900009b6:	b00e      	add	sp, #56	; 0x38
900009b8:	bd70      	pop	{r4, r5, r6, pc}
900009ba:	bf00      	nop
900009bc:	20000344 	.word	0x20000344
900009c0:	20000544 	.word	0x20000544
900009c4:	20000028 	.word	0x20000028

900009c8 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
900009c8:	4b01      	ldr	r3, [pc, #4]	; (900009d0 <BSP_LCD_SelectLayer+0x8>)
900009ca:	6418      	str	r0, [r3, #64]	; 0x40
} 
900009cc:	4770      	bx	lr
900009ce:	bf00      	nop
900009d0:	20000344 	.word	0x20000344

900009d4 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
900009d4:	4a03      	ldr	r2, [pc, #12]	; (900009e4 <BSP_LCD_SetTextColor+0x10>)
900009d6:	210c      	movs	r1, #12
900009d8:	6c13      	ldr	r3, [r2, #64]	; 0x40
900009da:	fb01 2303 	mla	r3, r1, r3, r2
900009de:	6458      	str	r0, [r3, #68]	; 0x44
}
900009e0:	4770      	bx	lr
900009e2:	bf00      	nop
900009e4:	20000344 	.word	0x20000344

900009e8 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
900009e8:	4a03      	ldr	r2, [pc, #12]	; (900009f8 <BSP_LCD_SetBackColor+0x10>)
900009ea:	210c      	movs	r1, #12
900009ec:	6c13      	ldr	r3, [r2, #64]	; 0x40
900009ee:	fb01 2303 	mla	r3, r1, r3, r2
900009f2:	6498      	str	r0, [r3, #72]	; 0x48
}
900009f4:	4770      	bx	lr
900009f6:	bf00      	nop
900009f8:	20000344 	.word	0x20000344

900009fc <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
900009fc:	4a03      	ldr	r2, [pc, #12]	; (90000a0c <BSP_LCD_SetFont+0x10>)
900009fe:	210c      	movs	r1, #12
90000a00:	6c13      	ldr	r3, [r2, #64]	; 0x40
90000a02:	fb01 2303 	mla	r3, r1, r3, r2
90000a06:	64d8      	str	r0, [r3, #76]	; 0x4c
}
90000a08:	4770      	bx	lr
90000a0a:	bf00      	nop
90000a0c:	20000344 	.word	0x20000344

90000a10 <BSP_LCD_Clear>:
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
90000a10:	4b08      	ldr	r3, [pc, #32]	; (90000a34 <BSP_LCD_Clear+0x24>)
{ 
90000a12:	b513      	push	{r0, r1, r4, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
90000a14:	6c1c      	ldr	r4, [r3, #64]	; 0x40
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
90000a16:	2134      	movs	r1, #52	; 0x34
90000a18:	4b07      	ldr	r3, [pc, #28]	; (90000a38 <BSP_LCD_Clear+0x28>)
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
90000a1a:	9001      	str	r0, [sp, #4]
90000a1c:	4620      	mov	r0, r4
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
90000a1e:	fb01 3104 	mla	r1, r1, r4, r3
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
90000a22:	2300      	movs	r3, #0
90000a24:	9300      	str	r3, [sp, #0]
90000a26:	e9d1 2318 	ldrd	r2, r3, [r1, #96]	; 0x60
90000a2a:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
90000a2c:	f7ff ff40 	bl	900008b0 <LL_FillBuffer>
}
90000a30:	b002      	add	sp, #8
90000a32:	bd10      	pop	{r4, pc}
90000a34:	20000344 	.word	0x20000344
90000a38:	20000544 	.word	0x20000544

90000a3c <BSP_LCD_DrawHLine>:
{
90000a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90000a3e:	4d0f      	ldr	r5, [pc, #60]	; (90000a7c <BSP_LCD_DrawHLine+0x40>)
90000a40:	2434      	movs	r4, #52	; 0x34
90000a42:	4b0f      	ldr	r3, [pc, #60]	; (90000a80 <BSP_LCD_DrawHLine+0x44>)
90000a44:	6c2e      	ldr	r6, [r5, #64]	; 0x40
90000a46:	fb04 3406 	mla	r4, r4, r6, r3
90000a4a:	e9d4 3717 	ldrd	r3, r7, [r4, #92]	; 0x5c
90000a4e:	fb07 0101 	mla	r1, r7, r1, r0
90000a52:	6ca0      	ldr	r0, [r4, #72]	; 0x48
90000a54:	2802      	cmp	r0, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
90000a56:	4630      	mov	r0, r6
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
90000a58:	bf0c      	ite	eq
90000a5a:	eb03 0141 	addeq.w	r1, r3, r1, lsl #1
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
90000a5e:	eb03 0181 	addne.w	r1, r3, r1, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
90000a62:	230c      	movs	r3, #12
90000a64:	fb03 5506 	mla	r5, r3, r6, r5
90000a68:	6c6b      	ldr	r3, [r5, #68]	; 0x44
90000a6a:	9301      	str	r3, [sp, #4]
90000a6c:	2300      	movs	r3, #0
90000a6e:	9300      	str	r3, [sp, #0]
90000a70:	2301      	movs	r3, #1
90000a72:	f7ff ff1d 	bl	900008b0 <LL_FillBuffer>
}
90000a76:	b003      	add	sp, #12
90000a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
90000a7a:	bf00      	nop
90000a7c:	20000344 	.word	0x20000344
90000a80:	20000544 	.word	0x20000544

90000a84 <BSP_LCD_DrawPixel>:
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90000a84:	4b0a      	ldr	r3, [pc, #40]	; (90000ab0 <BSP_LCD_DrawPixel+0x2c>)
{
90000a86:	b530      	push	{r4, r5, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90000a8a:	2534      	movs	r5, #52	; 0x34
90000a8c:	4c09      	ldr	r4, [pc, #36]	; (90000ab4 <BSP_LCD_DrawPixel+0x30>)
90000a8e:	fb05 4303 	mla	r3, r5, r3, r4
90000a92:	e9d3 4517 	ldrd	r4, r5, [r3, #92]	; 0x5c
90000a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90000a98:	fb05 0101 	mla	r1, r5, r1, r0
90000a9c:	2b02      	cmp	r3, #2
90000a9e:	d103      	bne.n	90000aa8 <BSP_LCD_DrawPixel+0x24>
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
90000aa0:	b292      	uxth	r2, r2
90000aa2:	f824 2011 	strh.w	r2, [r4, r1, lsl #1]
}
90000aa6:	bd30      	pop	{r4, r5, pc}
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
90000aa8:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
}
90000aac:	e7fb      	b.n	90000aa6 <BSP_LCD_DrawPixel+0x22>
90000aae:	bf00      	nop
90000ab0:	20000344 	.word	0x20000344
90000ab4:	20000544 	.word	0x20000544

90000ab8 <BSP_LCD_DisplayChar>:
{
90000ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90000abc:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
90000abe:	f1a2 0520 	sub.w	r5, r2, #32
  for(i = 0; i < height; i++)
90000ac2:	f04f 0800 	mov.w	r8, #0
{
90000ac6:	e9cd 0100 	strd	r0, r1, [sp]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
90000aca:	4828      	ldr	r0, [pc, #160]	; (90000b6c <BSP_LCD_DisplayChar+0xb4>)
90000acc:	210c      	movs	r1, #12
90000ace:	f8d0 b040 	ldr.w	fp, [r0, #64]	; 0x40
90000ad2:	fb01 010b 	mla	r1, r1, fp, r0
90000ad6:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
90000ad8:	f8b1 9004 	ldrh.w	r9, [r1, #4]
90000adc:	f8b1 a006 	ldrh.w	sl, [r1, #6]
90000ae0:	f109 0607 	add.w	r6, r9, #7
90000ae4:	680a      	ldr	r2, [r1, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
90000ae6:	fb0a f505 	mul.w	r5, sl, r5
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
90000aea:	10f6      	asrs	r6, r6, #3
  offset =  8 *((width + 7)/8) -  width ;
90000aec:	ebc9 00c6 	rsb	r0, r9, r6, lsl #3
  for(i = 0; i < height; i++)
90000af0:	fb06 2505 	mla	r5, r6, r5, r2
      if(line & (1 << (width- j + offset- 1))) 
90000af4:	f109 32ff 	add.w	r2, r9, #4294967295
90000af8:	fa52 f380 	uxtab	r3, r2, r0
90000afc:	9302      	str	r3, [sp, #8]
90000afe:	9b01      	ldr	r3, [sp, #4]
  for(i = 0; i < height; i++)
90000b00:	45d0      	cmp	r8, sl
90000b02:	eb03 0108 	add.w	r1, r3, r8
90000b06:	b289      	uxth	r1, r1
90000b08:	d302      	bcc.n	90000b10 <BSP_LCD_DisplayChar+0x58>
}
90000b0a:	b005      	add	sp, #20
90000b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
90000b10:	2e01      	cmp	r6, #1
90000b12:	782c      	ldrb	r4, [r5, #0]
90000b14:	d004      	beq.n	90000b20 <BSP_LCD_DisplayChar+0x68>
90000b16:	2e02      	cmp	r6, #2
90000b18:	d109      	bne.n	90000b2e <BSP_LCD_DisplayChar+0x76>
      line =  (pchar[0]<< 8) | pchar[1];      
90000b1a:	882c      	ldrh	r4, [r5, #0]
90000b1c:	ba64      	rev16	r4, r4
90000b1e:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
90000b20:	2700      	movs	r7, #0
90000b22:	45b9      	cmp	r9, r7
90000b24:	d80a      	bhi.n	90000b3c <BSP_LCD_DisplayChar+0x84>
  for(i = 0; i < height; i++)
90000b26:	f108 0801 	add.w	r8, r8, #1
90000b2a:	4435      	add	r5, r6
90000b2c:	e7e7      	b.n	90000afe <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
90000b2e:	786a      	ldrb	r2, [r5, #1]
90000b30:	0424      	lsls	r4, r4, #16
90000b32:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
90000b36:	78aa      	ldrb	r2, [r5, #2]
90000b38:	4314      	orrs	r4, r2
      break;
90000b3a:	e7f1      	b.n	90000b20 <BSP_LCD_DisplayChar+0x68>
      if(line & (1 << (width- j + offset- 1))) 
90000b3c:	9b00      	ldr	r3, [sp, #0]
90000b3e:	2201      	movs	r2, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
90000b40:	9103      	str	r1, [sp, #12]
90000b42:	19d8      	adds	r0, r3, r7
      if(line & (1 << (width- j + offset- 1))) 
90000b44:	9b02      	ldr	r3, [sp, #8]
90000b46:	eba3 0c07 	sub.w	ip, r3, r7
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
90000b4a:	4b08      	ldr	r3, [pc, #32]	; (90000b6c <BSP_LCD_DisplayChar+0xb4>)
90000b4c:	b280      	uxth	r0, r0
    for (j = 0; j < width; j++)
90000b4e:	3701      	adds	r7, #1
      if(line & (1 << (width- j + offset- 1))) 
90000b50:	fa02 f20c 	lsl.w	r2, r2, ip
90000b54:	4222      	tst	r2, r4
90000b56:	f04f 020c 	mov.w	r2, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
90000b5a:	fb02 320b 	mla	r2, r2, fp, r3
90000b5e:	bf14      	ite	ne
90000b60:	6c52      	ldrne	r2, [r2, #68]	; 0x44
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
90000b62:	6c92      	ldreq	r2, [r2, #72]	; 0x48
90000b64:	f7ff ff8e 	bl	90000a84 <BSP_LCD_DrawPixel>
90000b68:	9903      	ldr	r1, [sp, #12]
    for (j = 0; j < width; j++)
90000b6a:	e7da      	b.n	90000b22 <BSP_LCD_DisplayChar+0x6a>
90000b6c:	20000344 	.word	0x20000344

90000b70 <BSP_LCD_DisplayStringAt>:
{
90000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90000b74:	4605      	mov	r5, r0
90000b76:	468a      	mov	sl, r1
90000b78:	4616      	mov	r6, r2
  while (*ptr++) size ++ ;
90000b7a:	4614      	mov	r4, r2
90000b7c:	f812 0b01 	ldrb.w	r0, [r2], #1
90000b80:	2800      	cmp	r0, #0
90000b82:	d1fa      	bne.n	90000b7a <BSP_LCD_DisplayStringAt+0xa>
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90000b84:	4824      	ldr	r0, [pc, #144]	; (90000c18 <BSP_LCD_DisplayStringAt+0xa8>)
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
90000b86:	220c      	movs	r2, #12
  switch (Mode)
90000b88:	2b01      	cmp	r3, #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90000b8a:	6c01      	ldr	r1, [r0, #64]	; 0x40
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
90000b8c:	fb02 0201 	mla	r2, r2, r1, r0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90000b90:	f04f 0034 	mov.w	r0, #52	; 0x34
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
90000b94:	6cd7      	ldr	r7, [r2, #76]	; 0x4c
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90000b96:	4a21      	ldr	r2, [pc, #132]	; (90000c1c <BSP_LCD_DisplayStringAt+0xac>)
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
90000b98:	f8b7 e004 	ldrh.w	lr, [r7, #4]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90000b9c:	fb00 2001 	mla	r0, r0, r1, r2
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
90000ba0:	6e00      	ldr	r0, [r0, #96]	; 0x60
90000ba2:	fbb0 f0fe 	udiv	r0, r0, lr
  switch (Mode)
90000ba6:	d021      	beq.n	90000bec <BSP_LCD_DisplayStringAt+0x7c>
90000ba8:	2b02      	cmp	r3, #2
90000baa:	d027      	beq.n	90000bfc <BSP_LCD_DisplayStringAt+0x8c>
  if ((ref_column < 1) || (ref_column >= 0x8000))
90000bac:	b22b      	sxth	r3, r5
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90000bae:	f04f 0834 	mov.w	r8, #52	; 0x34
    ref_column = 1;
90000bb2:	f04f 0900 	mov.w	r9, #0
90000bb6:	2b00      	cmp	r3, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90000bb8:	fb08 2801 	mla	r8, r8, r1, r2
    ref_column = 1;
90000bbc:	bfd8      	it	le
90000bbe:	2501      	movle	r5, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
90000bc0:	88bc      	ldrh	r4, [r7, #4]
90000bc2:	fa1f f389 	uxth.w	r3, r9
90000bc6:	f8d8 0060 	ldr.w	r0, [r8, #96]	; 0x60
90000bca:	f816 2009 	ldrb.w	r2, [r6, r9]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90000bce:	f109 0901 	add.w	r9, r9, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
90000bd2:	fb04 0313 	mls	r3, r4, r3, r0
90000bd6:	b29b      	uxth	r3, r3
90000bd8:	42a3      	cmp	r3, r4
90000bda:	bf34      	ite	cc
90000bdc:	2300      	movcc	r3, #0
90000bde:	2301      	movcs	r3, #1
90000be0:	2a00      	cmp	r2, #0
90000be2:	bf08      	it	eq
90000be4:	2300      	moveq	r3, #0
90000be6:	b97b      	cbnz	r3, 90000c08 <BSP_LCD_DisplayStringAt+0x98>
}
90000be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
90000bec:	1b34      	subs	r4, r6, r4
90000bee:	4404      	add	r4, r0
90000bf0:	fb0e f404 	mul.w	r4, lr, r4
90000bf4:	eb05 0054 	add.w	r0, r5, r4, lsr #1
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
90000bf8:	b285      	uxth	r5, r0
      break;
90000bfa:	e7d7      	b.n	90000bac <BSP_LCD_DisplayStringAt+0x3c>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
90000bfc:	1b34      	subs	r4, r6, r4
90000bfe:	4404      	add	r4, r0
90000c00:	fb14 f40e 	smulbb	r4, r4, lr
90000c04:	1b60      	subs	r0, r4, r5
90000c06:	e7f7      	b.n	90000bf8 <BSP_LCD_DisplayStringAt+0x88>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
90000c08:	4628      	mov	r0, r5
90000c0a:	4651      	mov	r1, sl
90000c0c:	f7ff ff54 	bl	90000ab8 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
90000c10:	88b8      	ldrh	r0, [r7, #4]
90000c12:	4428      	add	r0, r5
90000c14:	b285      	uxth	r5, r0
    i++;
90000c16:	e7d3      	b.n	90000bc0 <BSP_LCD_DisplayStringAt+0x50>
90000c18:	20000344 	.word	0x20000344
90000c1c:	20000544 	.word	0x20000544

90000c20 <BSP_LCD_DrawCircle>:
{
90000c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  decision = 3 - (Radius << 1);
90000c24:	0054      	lsls	r4, r2, #1
{
90000c26:	b087      	sub	sp, #28
90000c28:	4688      	mov	r8, r1
  current_y = Radius;
90000c2a:	4615      	mov	r5, r2
  decision = 3 - (Radius << 1);
90000c2c:	f1c4 0403 	rsb	r4, r4, #3
  current_x = 0;
90000c30:	2700      	movs	r7, #0
{
90000c32:	9001      	str	r0, [sp, #4]
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
90000c34:	4835      	ldr	r0, [pc, #212]	; (90000d0c <BSP_LCD_DrawCircle+0xec>)
90000c36:	f04f 0c0c 	mov.w	ip, #12
90000c3a:	9b01      	ldr	r3, [sp, #4]
90000c3c:	b2ae      	uxth	r6, r5
90000c3e:	6c02      	ldr	r2, [r0, #64]	; 0x40
90000c40:	fa1f f987 	uxth.w	r9, r7
90000c44:	fa13 f387 	uxtah	r3, r3, r7
90000c48:	eba8 0106 	sub.w	r1, r8, r6
90000c4c:	fb0c 0202 	mla	r2, ip, r2, r0
90000c50:	b29b      	uxth	r3, r3
90000c52:	b289      	uxth	r1, r1
90000c54:	6c52      	ldr	r2, [r2, #68]	; 0x44
90000c56:	4618      	mov	r0, r3
90000c58:	9305      	str	r3, [sp, #20]
90000c5a:	e9cd 2103 	strd	r2, r1, [sp, #12]
90000c5e:	f7ff ff11 	bl	90000a84 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
90000c62:	9b01      	ldr	r3, [sp, #4]
90000c64:	f8cd 9008 	str.w	r9, [sp, #8]
90000c68:	eba3 0b09 	sub.w	fp, r3, r9
90000c6c:	fa1f fb8b 	uxth.w	fp, fp
90000c70:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
90000c74:	4658      	mov	r0, fp
90000c76:	f7ff ff05 	bl	90000a84 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
90000c7a:	9b01      	ldr	r3, [sp, #4]
90000c7c:	9a03      	ldr	r2, [sp, #12]
90000c7e:	eb06 0a03 	add.w	sl, r6, r3
90000c82:	9b02      	ldr	r3, [sp, #8]
90000c84:	eba8 0103 	sub.w	r1, r8, r3
90000c88:	fa1f fa8a 	uxth.w	sl, sl
90000c8c:	b289      	uxth	r1, r1
90000c8e:	4650      	mov	r0, sl
90000c90:	9104      	str	r1, [sp, #16]
90000c92:	f7ff fef7 	bl	90000a84 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
90000c96:	9b01      	ldr	r3, [sp, #4]
90000c98:	eba3 0906 	sub.w	r9, r3, r6
90000c9c:	fa1f f989 	uxth.w	r9, r9
90000ca0:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
90000ca4:	4648      	mov	r0, r9
90000ca6:	f7ff feed 	bl	90000a84 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
90000caa:	eb06 0108 	add.w	r1, r6, r8
90000cae:	9b05      	ldr	r3, [sp, #20]
90000cb0:	b289      	uxth	r1, r1
90000cb2:	9a03      	ldr	r2, [sp, #12]
90000cb4:	4618      	mov	r0, r3
90000cb6:	9104      	str	r1, [sp, #16]
90000cb8:	f7ff fee4 	bl	90000a84 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
90000cbc:	4658      	mov	r0, fp
90000cbe:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
90000cc2:	f7ff fedf 	bl	90000a84 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
90000cc6:	9b02      	ldr	r3, [sp, #8]
90000cc8:	9a03      	ldr	r2, [sp, #12]
90000cca:	4650      	mov	r0, sl
90000ccc:	eb03 0108 	add.w	r1, r3, r8
90000cd0:	b289      	uxth	r1, r1
90000cd2:	9102      	str	r1, [sp, #8]
90000cd4:	f7ff fed6 	bl	90000a84 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
90000cd8:	4648      	mov	r0, r9
90000cda:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
90000cde:	f7ff fed1 	bl	90000a84 <BSP_LCD_DrawPixel>
    if (decision < 0)
90000ce2:	2c00      	cmp	r4, #0
      decision += (current_x << 2) + 6;
90000ce4:	bfb1      	iteee	lt
90000ce6:	3406      	addlt	r4, #6
      decision += ((current_x - current_y) << 2) + 10;
90000ce8:	1b7b      	subge	r3, r7, r5
90000cea:	340a      	addge	r4, #10
      current_y--;
90000cec:	f105 35ff 	addge.w	r5, r5, #4294967295
      decision += (current_x << 2) + 6;
90000cf0:	bfb8      	it	lt
90000cf2:	eb04 0487 	addlt.w	r4, r4, r7, lsl #2
    current_x++;
90000cf6:	f107 0701 	add.w	r7, r7, #1
      decision += ((current_x - current_y) << 2) + 10;
90000cfa:	bfa8      	it	ge
90000cfc:	eb04 0483 	addge.w	r4, r4, r3, lsl #2
  while (current_x <= current_y)
90000d00:	42bd      	cmp	r5, r7
90000d02:	d297      	bcs.n	90000c34 <BSP_LCD_DrawCircle+0x14>
}
90000d04:	b007      	add	sp, #28
90000d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90000d0a:	bf00      	nop
90000d0c:	20000344 	.word	0x20000344

90000d10 <BSP_LCD_FillCircle>:
{
90000d10:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  decision = 3 - (Radius << 1);
90000d14:	0054      	lsls	r4, r2, #1
{
90000d16:	4680      	mov	r8, r0
90000d18:	460e      	mov	r6, r1
90000d1a:	4691      	mov	r9, r2
  decision = 3 - (Radius << 1);
90000d1c:	f1c4 0403 	rsb	r4, r4, #3
  current_y = Radius;
90000d20:	4617      	mov	r7, r2
  current_x = 0;
90000d22:	2500      	movs	r5, #0
    if(current_y > 0) 
90000d24:	b1af      	cbz	r7, 90000d52 <BSP_LCD_FillCircle+0x42>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
90000d26:	b2ba      	uxth	r2, r7
90000d28:	fa16 f185 	uxtah	r1, r6, r5
90000d2c:	fa1f fa85 	uxth.w	sl, r5
90000d30:	eba8 0002 	sub.w	r0, r8, r2
90000d34:	0052      	lsls	r2, r2, #1
90000d36:	b289      	uxth	r1, r1
90000d38:	b280      	uxth	r0, r0
90000d3a:	b292      	uxth	r2, r2
90000d3c:	9000      	str	r0, [sp, #0]
90000d3e:	9201      	str	r2, [sp, #4]
90000d40:	f7ff fe7c 	bl	90000a3c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
90000d44:	4651      	mov	r1, sl
90000d46:	9a01      	ldr	r2, [sp, #4]
90000d48:	9800      	ldr	r0, [sp, #0]
90000d4a:	1a71      	subs	r1, r6, r1
90000d4c:	b289      	uxth	r1, r1
90000d4e:	f7ff fe75 	bl	90000a3c <BSP_LCD_DrawHLine>
    if(current_x > 0) 
90000d52:	b1a5      	cbz	r5, 90000d7e <BSP_LCD_FillCircle+0x6e>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
90000d54:	b2aa      	uxth	r2, r5
90000d56:	b2b9      	uxth	r1, r7
90000d58:	eba8 0002 	sub.w	r0, r8, r2
90000d5c:	0052      	lsls	r2, r2, #1
90000d5e:	468a      	mov	sl, r1
90000d60:	1a71      	subs	r1, r6, r1
90000d62:	b280      	uxth	r0, r0
90000d64:	b292      	uxth	r2, r2
90000d66:	b289      	uxth	r1, r1
90000d68:	9000      	str	r0, [sp, #0]
90000d6a:	9201      	str	r2, [sp, #4]
90000d6c:	f7ff fe66 	bl	90000a3c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
90000d70:	eb0a 0106 	add.w	r1, sl, r6
90000d74:	9a01      	ldr	r2, [sp, #4]
90000d76:	9800      	ldr	r0, [sp, #0]
90000d78:	b289      	uxth	r1, r1
90000d7a:	f7ff fe5f 	bl	90000a3c <BSP_LCD_DrawHLine>
    if (decision < 0)
90000d7e:	2c00      	cmp	r4, #0
      decision += (current_x << 2) + 6;
90000d80:	bfb1      	iteee	lt
90000d82:	3406      	addlt	r4, #6
      decision += ((current_x - current_y) << 2) + 10;
90000d84:	1beb      	subge	r3, r5, r7
90000d86:	340a      	addge	r4, #10
      current_y--;
90000d88:	f107 37ff 	addge.w	r7, r7, #4294967295
      decision += (current_x << 2) + 6;
90000d8c:	bfb8      	it	lt
90000d8e:	eb04 0485 	addlt.w	r4, r4, r5, lsl #2
    current_x++;
90000d92:	f105 0501 	add.w	r5, r5, #1
      decision += ((current_x - current_y) << 2) + 10;
90000d96:	bfa8      	it	ge
90000d98:	eb04 0483 	addge.w	r4, r4, r3, lsl #2
  while (current_x <= current_y)
90000d9c:	42af      	cmp	r7, r5
90000d9e:	d2c1      	bcs.n	90000d24 <BSP_LCD_FillCircle+0x14>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
90000da0:	464a      	mov	r2, r9
90000da2:	4631      	mov	r1, r6
90000da4:	4640      	mov	r0, r8
}
90000da6:	b002      	add	sp, #8
90000da8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
90000dac:	f7ff bf38 	b.w	90000c20 <BSP_LCD_DrawCircle>

90000db0 <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
90000db0:	4b4b      	ldr	r3, [pc, #300]	; (90000ee0 <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90000db2:	484c      	ldr	r0, [pc, #304]	; (90000ee4 <BSP_LCD_MspInit+0x134>)
  __HAL_RCC_LTDC_CLK_ENABLE();
90000db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
90000db6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
{
90000dba:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
90000dbc:	645a      	str	r2, [r3, #68]	; 0x44
{
90000dbe:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
90000dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90000dc2:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
90000dc4:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90000dc6:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_LTDC_CLK_ENABLE();
90000dc8:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  gpio_init_structure.Pin       = GPIO_PIN_12;
90000dcc:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90000dd0:	4e45      	ldr	r6, [pc, #276]	; (90000ee8 <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
90000dd2:	9200      	str	r2, [sp, #0]
90000dd4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
90000dd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000dd8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
90000ddc:	631a      	str	r2, [r3, #48]	; 0x30
90000dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000de0:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
90000de4:	9201      	str	r2, [sp, #4]
90000de6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90000de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000dea:	f042 0210 	orr.w	r2, r2, #16
90000dee:	631a      	str	r2, [r3, #48]	; 0x30
90000df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000df2:	f002 0210 	and.w	r2, r2, #16
90000df6:	9202      	str	r2, [sp, #8]
90000df8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90000dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000dfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
90000e00:	631a      	str	r2, [r3, #48]	; 0x30
90000e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000e04:	f002 0240 	and.w	r2, r2, #64	; 0x40
90000e08:	9203      	str	r2, [sp, #12]
90000e0a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
90000e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000e0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
90000e12:	631a      	str	r2, [r3, #48]	; 0x30
90000e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000e16:	f402 7280 	and.w	r2, r2, #256	; 0x100
90000e1a:	9204      	str	r2, [sp, #16]
90000e1c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
90000e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
90000e24:	631a      	str	r2, [r3, #48]	; 0x30
90000e26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000e28:	f402 7200 	and.w	r2, r2, #512	; 0x200
90000e2c:	9205      	str	r2, [sp, #20]
90000e2e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
90000e30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000e32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
90000e36:	631a      	str	r2, [r3, #48]	; 0x30
90000e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000e3a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
90000e3e:	9206      	str	r2, [sp, #24]
90000e40:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
90000e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000e44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
90000e48:	631a      	str	r2, [r3, #48]	; 0x30
90000e4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000e4c:	f402 7280 	and.w	r2, r2, #256	; 0x100
90000e50:	9207      	str	r2, [sp, #28]
90000e52:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
90000e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000e56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
90000e5a:	631a      	str	r2, [r3, #48]	; 0x30
90000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
90000e5e:	950d      	str	r5, [sp, #52]	; 0x34
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
90000e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
90000e64:	9308      	str	r3, [sp, #32]
90000e66:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90000e68:	2310      	movs	r3, #16
90000e6a:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
90000e6e:	2300      	movs	r3, #0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
90000e70:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90000e74:	f000 fdc6 	bl	90001a04 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
90000e78:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90000e7a:	a909      	add	r1, sp, #36	; 0x24
90000e7c:	481b      	ldr	r0, [pc, #108]	; (90000eec <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
90000e7e:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90000e80:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90000e84:	f000 fdbe 	bl	90001a04 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
90000e88:	f44f 4366 	mov.w	r3, #58880	; 0xe600
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90000e8c:	a909      	add	r1, sp, #36	; 0x24
90000e8e:	4630      	mov	r0, r6
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90000e90:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90000e92:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90000e96:	f000 fdb5 	bl	90001a04 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
90000e9a:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
90000e9e:	a909      	add	r1, sp, #36	; 0x24
90000ea0:	4813      	ldr	r0, [pc, #76]	; (90000ef0 <BSP_LCD_MspInit+0x140>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90000ea2:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90000ea4:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
90000ea8:	f000 fdac 	bl	90001a04 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
90000eac:	23f7      	movs	r3, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
90000eae:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90000eb0:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
90000eb2:	2501      	movs	r5, #1
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90000eb4:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
90000eb8:	4c0e      	ldr	r4, [pc, #56]	; (90000ef4 <BSP_LCD_MspInit+0x144>)
90000eba:	4620      	mov	r0, r4
90000ebc:	f000 fda2 	bl	90001a04 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
90000ec0:	a909      	add	r1, sp, #36	; 0x24
90000ec2:	4630      	mov	r0, r6
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
90000ec4:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
90000ec6:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
90000ec8:	f000 fd9c 	bl	90001a04 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
90000ecc:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
90000ece:	a909      	add	r1, sp, #36	; 0x24
90000ed0:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
90000ed2:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
90000ed6:	f000 fd95 	bl	90001a04 <HAL_GPIO_Init>
}
90000eda:	b00f      	add	sp, #60	; 0x3c
90000edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
90000ede:	bf00      	nop
90000ee0:	40023800 	.word	0x40023800
90000ee4:	40021000 	.word	0x40021000
90000ee8:	40022000 	.word	0x40022000
90000eec:	40021800 	.word	0x40021800
90000ef0:	40022400 	.word	0x40022400
90000ef4:	40022800 	.word	0x40022800

90000ef8 <BSP_LCD_ClockConfig>:
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90000ef8:	4806      	ldr	r0, [pc, #24]	; (90000f14 <BSP_LCD_ClockConfig+0x1c>)
90000efa:	2308      	movs	r3, #8
90000efc:	65c3      	str	r3, [r0, #92]	; 0x5c
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
90000efe:	23c0      	movs	r3, #192	; 0xc0
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
90000f00:	305c      	adds	r0, #92	; 0x5c
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
90000f02:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
90000f04:	2305      	movs	r3, #5
90000f06:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
90000f08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
90000f0c:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
90000f0e:	f001 bd7b 	b.w	90002a08 <HAL_RCCEx_PeriphCLKConfig>
90000f12:	bf00      	nop
90000f14:	20000344 	.word	0x20000344

90000f18 <BSP_LCD_Init>:
{    
90000f18:	b510      	push	{r4, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
90000f1a:	2228      	movs	r2, #40	; 0x28
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
90000f1c:	4c24      	ldr	r4, [pc, #144]	; (90000fb0 <BSP_LCD_Init+0x98>)
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
90000f1e:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
90000f20:	2135      	movs	r1, #53	; 0x35
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
90000f22:	f240 101b 	movw	r0, #283	; 0x11b
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
90000f26:	f240 1c1d 	movw	ip, #285	; 0x11d
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
90000f2a:	e9c4 2305 	strd	r2, r3, [r4, #20]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
90000f2e:	230b      	movs	r3, #11
90000f30:	e9c4 1307 	strd	r1, r3, [r4, #28]
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
90000f34:	f240 2315 	movw	r3, #533	; 0x215
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
90000f38:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
90000f3a:	e9c4 3009 	strd	r3, r0, [r4, #36]	; 0x24
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
90000f3e:	f240 2335 	movw	r3, #565	; 0x235
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
90000f42:	4620      	mov	r0, r4
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
90000f44:	e9c4 3c0b 	strd	r3, ip, [r4, #44]	; 0x2c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
90000f48:	f7ff ffd6 	bl	90000ef8 <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
90000f4c:	f44f 7ef0 	mov.w	lr, #480	; 0x1e0
90000f50:	f44f 7388 	mov.w	r3, #272	; 0x110
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
90000f54:	4620      	mov	r0, r4
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
90000f56:	e9c4 e318 	strd	lr, r3, [r4, #96]	; 0x60
  hLtdcHandler.Init.Backcolor.Blue = 0;
90000f5a:	2300      	movs	r3, #0
90000f5c:	86a3      	strh	r3, [r4, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Red = 0;
90000f5e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
90000f62:	e9c4 3301 	strd	r3, r3, [r4, #4]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90000f66:	e9c4 3303 	strd	r3, r3, [r4, #12]
  hLtdcHandler.Instance = LTDC;
90000f6a:	4b12      	ldr	r3, [pc, #72]	; (90000fb4 <BSP_LCD_Init+0x9c>)
90000f6c:	6023      	str	r3, [r4, #0]
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
90000f6e:	f001 fa84 	bl	9000247a <HAL_LTDC_GetState>
90000f72:	4601      	mov	r1, r0
90000f74:	b910      	cbnz	r0, 90000f7c <BSP_LCD_Init+0x64>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
90000f76:	4620      	mov	r0, r4
90000f78:	f7ff ff1a 	bl	90000db0 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
90000f7c:	480c      	ldr	r0, [pc, #48]	; (90000fb0 <BSP_LCD_Init+0x98>)
90000f7e:	f001 f9e3 	bl	90002348 <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
90000f82:	2201      	movs	r2, #1
90000f84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
90000f88:	480b      	ldr	r0, [pc, #44]	; (90000fb8 <BSP_LCD_Init+0xa0>)
90000f8a:	f000 fe21 	bl	90001bd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
90000f8e:	2201      	movs	r2, #1
90000f90:	2108      	movs	r1, #8
90000f92:	480a      	ldr	r0, [pc, #40]	; (90000fbc <BSP_LCD_Init+0xa4>)
90000f94:	f000 fe1c 	bl	90001bd0 <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
90000f98:	f000 f91e 	bl	900011d8 <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = fonts;
90000f9c:	4a08      	ldr	r2, [pc, #32]	; (90000fc0 <BSP_LCD_Init+0xa8>)
90000f9e:	210c      	movs	r1, #12
}
90000fa0:	2000      	movs	r0, #0
  DrawProp[ActiveLayer].pFont = fonts;
90000fa2:	6c13      	ldr	r3, [r2, #64]	; 0x40
90000fa4:	fb01 2303 	mla	r3, r1, r3, r2
90000fa8:	4a06      	ldr	r2, [pc, #24]	; (90000fc4 <BSP_LCD_Init+0xac>)
90000faa:	64da      	str	r2, [r3, #76]	; 0x4c
}
90000fac:	bd10      	pop	{r4, pc}
90000fae:	bf00      	nop
90000fb0:	20000544 	.word	0x20000544
90000fb4:	40016800 	.word	0x40016800
90000fb8:	40022000 	.word	0x40022000
90000fbc:	40022800 	.word	0x40022800
90000fc0:	20000344 	.word	0x20000344
90000fc4:	20000028 	.word	0x20000028

90000fc8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
90000fc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
90000fcc:	4c21      	ldr	r4, [pc, #132]	; (90001054 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90000fce:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90000fd0:	4d21      	ldr	r5, [pc, #132]	; (90001058 <BSP_SDRAM_Initialization_sequence+0x90>)
  __IO uint32_t tmpmrd = 0;
90000fd2:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90000fd6:	2710      	movs	r7, #16
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90000fd8:	4621      	mov	r1, r4
{
90000fda:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90000fdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
90000fe0:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
90000fe2:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90000fe6:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
90000fea:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90000fee:	f001 ffb6 	bl	90002f5e <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
90000ff2:	4630      	mov	r0, r6
90000ff4:	f000 f9bc 	bl	90001370 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
90000ff8:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
90000ffa:	4621      	mov	r1, r4
90000ffc:	f64f 72ff 	movw	r2, #65535	; 0xffff
90001000:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90001002:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
90001006:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
9000100a:	f001 ffa8 	bl	90002f5e <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
9000100e:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90001010:	4621      	mov	r1, r4
90001012:	f64f 72ff 	movw	r2, #65535	; 0xffff
90001016:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90001018:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
9000101c:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
9000101e:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90001022:	f001 ff9c 	bl	90002f5e <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
90001026:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
9000102a:	4621      	mov	r1, r4
9000102c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
90001030:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
90001032:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90001034:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
90001036:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90001038:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
9000103c:	9b01      	ldr	r3, [sp, #4]
9000103e:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90001040:	f001 ff8d 	bl	90002f5e <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
90001044:	4649      	mov	r1, r9
90001046:	4628      	mov	r0, r5
}
90001048:	b003      	add	sp, #12
9000104a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
9000104e:	f001 bf9d 	b.w	90002f8c <HAL_SDRAM_ProgramRefreshRate>
90001052:	bf00      	nop
90001054:	20000424 	.word	0x20000424
90001058:	200005ec 	.word	0x200005ec

9000105c <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
9000105c:	4b55      	ldr	r3, [pc, #340]	; (900011b4 <BSP_SDRAM_MspInit+0x158>)
9000105e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90001060:	f042 0201 	orr.w	r2, r2, #1
{  
90001064:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
90001066:	639a      	str	r2, [r3, #56]	; 0x38
{  
90001068:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
9000106a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{  
9000106c:	4606      	mov	r6, r0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
9000106e:	a909      	add	r1, sp, #36	; 0x24
90001070:	4851      	ldr	r0, [pc, #324]	; (900011b8 <BSP_SDRAM_MspInit+0x15c>)
  __HAL_RCC_FMC_CLK_ENABLE();
90001072:	f002 0201 	and.w	r2, r2, #1
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
90001076:	2400      	movs	r4, #0
  __HAL_RCC_FMC_CLK_ENABLE();
90001078:	9201      	str	r2, [sp, #4]
9000107a:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
9000107c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000107e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
90001082:	631a      	str	r2, [r3, #48]	; 0x30
90001084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001086:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
9000108a:	9202      	str	r2, [sp, #8]
9000108c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
9000108e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001090:	f042 0204 	orr.w	r2, r2, #4
90001094:	631a      	str	r2, [r3, #48]	; 0x30
90001096:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001098:	f002 0204 	and.w	r2, r2, #4
9000109c:	9203      	str	r2, [sp, #12]
9000109e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
900010a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900010a2:	f042 0208 	orr.w	r2, r2, #8
900010a6:	631a      	str	r2, [r3, #48]	; 0x30
900010a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900010aa:	f002 0208 	and.w	r2, r2, #8
900010ae:	9204      	str	r2, [sp, #16]
900010b0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
900010b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900010b4:	f042 0210 	orr.w	r2, r2, #16
900010b8:	631a      	str	r2, [r3, #48]	; 0x30
900010ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900010bc:	f002 0210 	and.w	r2, r2, #16
900010c0:	9205      	str	r2, [sp, #20]
900010c2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
900010c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900010c6:	f042 0220 	orr.w	r2, r2, #32
900010ca:	631a      	str	r2, [r3, #48]	; 0x30
900010cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900010ce:	f002 0220 	and.w	r2, r2, #32
900010d2:	9206      	str	r2, [sp, #24]
900010d4:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
900010d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900010d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
900010dc:	631a      	str	r2, [r3, #48]	; 0x30
900010de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900010e0:	f002 0240 	and.w	r2, r2, #64	; 0x40
900010e4:	9207      	str	r2, [sp, #28]
900010e6:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
900010e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900010ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
900010ee:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
900010f0:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
900010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900010f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
900010f8:	9308      	str	r3, [sp, #32]
900010fa:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
900010fc:	2302      	movs	r3, #2
900010fe:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
90001102:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90001104:	230c      	movs	r3, #12
90001106:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
90001108:	2308      	movs	r3, #8
9000110a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
9000110c:	f000 fc7a 	bl	90001a04 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
90001110:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90001114:	a909      	add	r1, sp, #36	; 0x24
90001116:	4829      	ldr	r0, [pc, #164]	; (900011bc <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
90001118:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
9000111a:	f000 fc73 	bl	90001a04 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
9000111e:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90001122:	a909      	add	r1, sp, #36	; 0x24
90001124:	4826      	ldr	r0, [pc, #152]	; (900011c0 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90001126:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90001128:	f000 fc6c 	bl	90001a04 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
9000112c:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90001130:	a909      	add	r1, sp, #36	; 0x24
90001132:	4824      	ldr	r0, [pc, #144]	; (900011c4 <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90001134:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90001136:	f000 fc65 	bl	90001a04 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
9000113a:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
9000113e:	a909      	add	r1, sp, #36	; 0x24
90001140:	4821      	ldr	r0, [pc, #132]	; (900011c8 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
90001142:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90001144:	f000 fc5e 	bl	90001a04 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
90001148:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
9000114a:	a909      	add	r1, sp, #36	; 0x24
9000114c:	481f      	ldr	r0, [pc, #124]	; (900011cc <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
9000114e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
90001150:	f000 fc58 	bl	90001a04 <HAL_GPIO_Init>
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
90001154:	4b1e      	ldr	r3, [pc, #120]	; (900011d0 <BSP_SDRAM_MspInit+0x174>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
90001156:	2280      	movs	r2, #128	; 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
90001158:	f44f 7100 	mov.w	r1, #512	; 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
9000115c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
90001160:	461d      	mov	r5, r3
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
90001162:	641c      	str	r4, [r3, #64]	; 0x40
  dma_handle.Init.Mode                = DMA_NORMAL;
90001164:	62dc      	str	r4, [r3, #44]	; 0x2c
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
90001166:	e9c3 4205 	strd	r4, r2, [r3, #20]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
9000116a:	f44f 6280 	mov.w	r2, #1024	; 0x400
9000116e:	e9c3 1207 	strd	r1, r2, [r3, #28]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
90001172:	f44f 4280 	mov.w	r2, #16384	; 0x4000
90001176:	e9c3 0209 	strd	r0, r2, [r3, #36]	; 0x24
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
9000117a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
9000117e:	e9c3 240c 	strd	r2, r4, [r3, #48]	; 0x30
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
90001182:	2203      	movs	r2, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
90001184:	e9c3 240e 	strd	r2, r4, [r3, #56]	; 0x38
  dma_handle.Instance = SDRAM_DMAx_STREAM;
90001188:	4a12      	ldr	r2, [pc, #72]	; (900011d4 <BSP_SDRAM_MspInit+0x178>)
9000118a:	f845 2f10 	str.w	r2, [r5, #16]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
9000118e:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
90001190:	6335      	str	r5, [r6, #48]	; 0x30
90001192:	649e      	str	r6, [r3, #72]	; 0x48
  HAL_DMA_DeInit(&dma_handle);
90001194:	f000 f9fc 	bl	90001590 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
90001198:	4628      	mov	r0, r5
9000119a:	f000 f979 	bl	90001490 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
9000119e:	4622      	mov	r2, r4
900011a0:	210f      	movs	r1, #15
900011a2:	2038      	movs	r0, #56	; 0x38
900011a4:	f000 f908 	bl	900013b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
900011a8:	2038      	movs	r0, #56	; 0x38
900011aa:	f000 f937 	bl	9000141c <HAL_NVIC_EnableIRQ>
}
900011ae:	b00e      	add	sp, #56	; 0x38
900011b0:	bd70      	pop	{r4, r5, r6, pc}
900011b2:	bf00      	nop
900011b4:	40023800 	.word	0x40023800
900011b8:	40020800 	.word	0x40020800
900011bc:	40020c00 	.word	0x40020c00
900011c0:	40021000 	.word	0x40021000
900011c4:	40021400 	.word	0x40021400
900011c8:	40021800 	.word	0x40021800
900011cc:	40021c00 	.word	0x40021c00
900011d0:	20000424 	.word	0x20000424
900011d4:	40026410 	.word	0x40026410

900011d8 <BSP_SDRAM_Init>:
{ 
900011d8:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
900011da:	4c1a      	ldr	r4, [pc, #104]	; (90001244 <BSP_SDRAM_Init+0x6c>)
  Timing.ExitSelfRefreshDelay = 7;
900011dc:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
900011de:	4b1a      	ldr	r3, [pc, #104]	; (90001248 <BSP_SDRAM_Init+0x70>)
  Timing.SelfRefreshTime      = 4;
900011e0:	2204      	movs	r2, #4
  Timing.LoadToActiveDelay    = 2;
900011e2:	4d1a      	ldr	r5, [pc, #104]	; (9000124c <BSP_SDRAM_Init+0x74>)
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
900011e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
900011e8:	6023      	str	r3, [r4, #0]
  Timing.ExitSelfRefreshDelay = 7;
900011ea:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
900011ec:	60e2      	str	r2, [r4, #12]
  Timing.RCDDelay             = 2;
900011ee:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
  Timing.ExitSelfRefreshDelay = 7;
900011f2:	e9c5 311c 	strd	r3, r1, [r5, #112]	; 0x70
  Timing.RowCycleDelay        = 7;
900011f6:	e9c5 211e 	strd	r2, r1, [r5, #120]	; 0x78
  Timing.RPDelay              = 2;
900011fa:	e9c5 3320 	strd	r3, r3, [r5, #128]	; 0x80
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
900011fe:	2210      	movs	r2, #16
90001200:	2340      	movs	r3, #64	; 0x40
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
90001202:	2100      	movs	r1, #0
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90001204:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
90001208:	f44f 7380 	mov.w	r3, #256	; 0x100
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
9000120c:	62a1      	str	r1, [r4, #40]	; 0x28
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
9000120e:	e9c4 3106 	strd	r3, r1, [r4, #24]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90001212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90001216:	e9c4 0308 	strd	r0, r3, [r4, #32]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
9000121a:	4620      	mov	r0, r4
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
9000121c:	e9c4 1101 	strd	r1, r1, [r4, #4]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
90001220:	f7ff ff1c 	bl	9000105c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
90001224:	f105 0170 	add.w	r1, r5, #112	; 0x70
90001228:	4620      	mov	r0, r4
9000122a:	4c09      	ldr	r4, [pc, #36]	; (90001250 <BSP_SDRAM_Init+0x78>)
9000122c:	f001 fe77 	bl	90002f1e <HAL_SDRAM_Init>
90001230:	3800      	subs	r0, #0
90001232:	bf18      	it	ne
90001234:	2001      	movne	r0, #1
90001236:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
90001238:	f240 6003 	movw	r0, #1539	; 0x603
9000123c:	f7ff fec4 	bl	90000fc8 <BSP_SDRAM_Initialization_sequence>
}
90001240:	7820      	ldrb	r0, [r4, #0]
90001242:	bd38      	pop	{r3, r4, r5, pc}
90001244:	200005ec 	.word	0x200005ec
90001248:	a0000140 	.word	0xa0000140
9000124c:	20000424 	.word	0x20000424
90001250:	20000050 	.word	0x20000050

90001254 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
90001254:	b538      	push	{r3, r4, r5, lr}
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
90001256:	4c0b      	ldr	r4, [pc, #44]	; (90001284 <BSP_TS_Init+0x30>)
  tsYBoundary = ts_SizeY;
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
90001258:	4d0b      	ldr	r5, [pc, #44]	; (90001288 <BSP_TS_Init+0x34>)
  tsXBoundary = ts_SizeX;
9000125a:	8020      	strh	r0, [r4, #0]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
9000125c:	2070      	movs	r0, #112	; 0x70
9000125e:	682b      	ldr	r3, [r5, #0]
  tsYBoundary = ts_SizeY;
90001260:	8061      	strh	r1, [r4, #2]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
90001262:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
90001264:	686b      	ldr	r3, [r5, #4]
90001266:	2070      	movs	r0, #112	; 0x70
90001268:	4798      	blx	r3
9000126a:	2851      	cmp	r0, #81	; 0x51
9000126c:	d108      	bne.n	90001280 <BSP_TS_Init+0x2c>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
    I2cAddress = TS_I2C_ADDRESS;
    tsOrientation = TS_SWAP_XY;
9000126e:	2308      	movs	r3, #8
    I2cAddress = TS_I2C_ADDRESS;
90001270:	2070      	movs	r0, #112	; 0x70
    tsDriver = &ft5336_ts_drv;
90001272:	6065      	str	r5, [r4, #4]
    tsOrientation = TS_SWAP_XY;
90001274:	7263      	strb	r3, [r4, #9]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
90001276:	68eb      	ldr	r3, [r5, #12]
    I2cAddress = TS_I2C_ADDRESS;
90001278:	7220      	strb	r0, [r4, #8]
    tsDriver->Start(I2cAddress);
9000127a:	4798      	blx	r3
  uint8_t status = TS_OK;
9000127c:	2000      	movs	r0, #0
  {
    status = TS_DEVICE_NOT_FOUND;
  }

  return status;
}
9000127e:	bd38      	pop	{r3, r4, r5, pc}
    status = TS_DEVICE_NOT_FOUND;
90001280:	2003      	movs	r0, #3
90001282:	e7fc      	b.n	9000127e <BSP_TS_Init+0x2a>
90001284:	20000510 	.word	0x20000510
90001288:	20000000 	.word	0x20000000

9000128c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
9000128c:	490f      	ldr	r1, [pc, #60]	; (900012cc <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
9000128e:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
90001290:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
90001294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
90001298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
9000129c:	4b0c      	ldr	r3, [pc, #48]	; (900012d0 <SystemInit+0x44>)
9000129e:	681a      	ldr	r2, [r3, #0]
900012a0:	f042 0201 	orr.w	r2, r2, #1
900012a4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
900012a6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
900012a8:	681a      	ldr	r2, [r3, #0]
900012aa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
900012ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
900012b2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
900012b4:	4a07      	ldr	r2, [pc, #28]	; (900012d4 <SystemInit+0x48>)
900012b6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
900012b8:	681a      	ldr	r2, [r3, #0]
900012ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
900012be:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
900012c0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = APPLICATION_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation to APPLICATION_ADDRESS in preprocessor defines */
900012c2:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
900012c6:	608b      	str	r3, [r1, #8]
#endif
}
900012c8:	4770      	bx	lr
900012ca:	bf00      	nop
900012cc:	e000ed00 	.word	0xe000ed00
900012d0:	40023800 	.word	0x40023800
900012d4:	24003010 	.word	0x24003010

900012d8 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
900012d8:	4770      	bx	lr
	...

900012dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
900012dc:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
900012de:	4e0e      	ldr	r6, [pc, #56]	; (90001318 <HAL_InitTick+0x3c>)
{
900012e0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
900012e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
900012e6:	4a0d      	ldr	r2, [pc, #52]	; (9000131c <HAL_InitTick+0x40>)
900012e8:	7830      	ldrb	r0, [r6, #0]
900012ea:	fbb3 f3f0 	udiv	r3, r3, r0
900012ee:	6810      	ldr	r0, [r2, #0]
900012f0:	fbb0 f0f3 	udiv	r0, r0, r3
900012f4:	f000 f8a0 	bl	90001438 <HAL_SYSTICK_Config>
900012f8:	4604      	mov	r4, r0
900012fa:	b950      	cbnz	r0, 90001312 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
900012fc:	2d0f      	cmp	r5, #15
900012fe:	d808      	bhi.n	90001312 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
90001300:	4602      	mov	r2, r0
90001302:	4629      	mov	r1, r5
90001304:	f04f 30ff 	mov.w	r0, #4294967295
90001308:	f000 f856 	bl	900013b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
9000130c:	4620      	mov	r0, r4
9000130e:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
90001310:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
90001312:	2001      	movs	r0, #1
90001314:	e7fc      	b.n	90001310 <HAL_InitTick+0x34>
90001316:	bf00      	nop
90001318:	20000058 	.word	0x20000058
9000131c:	20000054 	.word	0x20000054

90001320 <HAL_Init>:
{
90001320:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
90001322:	4b09      	ldr	r3, [pc, #36]	; (90001348 <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90001324:	2003      	movs	r0, #3
   __HAL_FLASH_ART_ENABLE();
90001326:	681a      	ldr	r2, [r3, #0]
90001328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
9000132c:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
9000132e:	681a      	ldr	r2, [r3, #0]
90001330:	f442 7280 	orr.w	r2, r2, #256	; 0x100
90001334:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90001336:	f000 f82d 	bl	90001394 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
9000133a:	200f      	movs	r0, #15
9000133c:	f7ff ffce 	bl	900012dc <HAL_InitTick>
  HAL_MspInit();
90001340:	f7ff ffca 	bl	900012d8 <HAL_MspInit>
}
90001344:	2000      	movs	r0, #0
90001346:	bd08      	pop	{r3, pc}
90001348:	40023c00 	.word	0x40023c00

9000134c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
9000134c:	4a03      	ldr	r2, [pc, #12]	; (9000135c <HAL_IncTick+0x10>)
9000134e:	4b04      	ldr	r3, [pc, #16]	; (90001360 <HAL_IncTick+0x14>)
90001350:	6811      	ldr	r1, [r2, #0]
90001352:	781b      	ldrb	r3, [r3, #0]
90001354:	440b      	add	r3, r1
90001356:	6013      	str	r3, [r2, #0]
}
90001358:	4770      	bx	lr
9000135a:	bf00      	nop
9000135c:	20000620 	.word	0x20000620
90001360:	20000058 	.word	0x20000058

90001364 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
90001364:	4b01      	ldr	r3, [pc, #4]	; (9000136c <HAL_GetTick+0x8>)
90001366:	6818      	ldr	r0, [r3, #0]
}
90001368:	4770      	bx	lr
9000136a:	bf00      	nop
9000136c:	20000620 	.word	0x20000620

90001370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
90001370:	b538      	push	{r3, r4, r5, lr}
90001372:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
90001374:	f7ff fff6 	bl	90001364 <HAL_GetTick>
90001378:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
9000137a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
9000137c:	bf1e      	ittt	ne
9000137e:	4b04      	ldrne	r3, [pc, #16]	; (90001390 <HAL_Delay+0x20>)
90001380:	781b      	ldrbne	r3, [r3, #0]
90001382:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
90001384:	f7ff ffee 	bl	90001364 <HAL_GetTick>
90001388:	1b43      	subs	r3, r0, r5
9000138a:	42a3      	cmp	r3, r4
9000138c:	d3fa      	bcc.n	90001384 <HAL_Delay+0x14>
  {
  }
}
9000138e:	bd38      	pop	{r3, r4, r5, pc}
90001390:	20000058 	.word	0x20000058

90001394 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90001394:	4907      	ldr	r1, [pc, #28]	; (900013b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90001396:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90001398:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
9000139a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
9000139e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
900013a2:	0412      	lsls	r2, r2, #16
900013a4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
900013a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
900013a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
900013ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
900013b0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
900013b2:	4770      	bx	lr
900013b4:	e000ed00 	.word	0xe000ed00

900013b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
900013b8:	4b16      	ldr	r3, [pc, #88]	; (90001414 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
900013ba:	b530      	push	{r4, r5, lr}
900013bc:	68dc      	ldr	r4, [r3, #12]
900013be:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
900013c2:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
900013c6:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
900013c8:	2d04      	cmp	r5, #4
900013ca:	bf28      	it	cs
900013cc:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
900013ce:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900013d0:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
900013d4:	bf8c      	ite	hi
900013d6:	3c03      	subhi	r4, #3
900013d8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900013da:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
900013de:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
900013e0:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900013e4:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
900013e8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900013ec:	fa01 f104 	lsl.w	r1, r1, r4
900013f0:	ea41 0302 	orr.w	r3, r1, r2
900013f4:	ea4f 1303 	mov.w	r3, r3, lsl #4
900013f8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
900013fa:	db06      	blt.n	9000140a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900013fc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
90001400:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
90001404:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
90001408:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000140a:	f000 000f 	and.w	r0, r0, #15
9000140e:	4a02      	ldr	r2, [pc, #8]	; (90001418 <HAL_NVIC_SetPriority+0x60>)
90001410:	5413      	strb	r3, [r2, r0]
90001412:	e7f9      	b.n	90001408 <HAL_NVIC_SetPriority+0x50>
90001414:	e000ed00 	.word	0xe000ed00
90001418:	e000ed14 	.word	0xe000ed14

9000141c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
9000141c:	2800      	cmp	r0, #0
9000141e:	db08      	blt.n	90001432 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001420:	0942      	lsrs	r2, r0, #5
90001422:	2301      	movs	r3, #1
90001424:	f000 001f 	and.w	r0, r0, #31
90001428:	fa03 f000 	lsl.w	r0, r3, r0
9000142c:	4b01      	ldr	r3, [pc, #4]	; (90001434 <HAL_NVIC_EnableIRQ+0x18>)
9000142e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
90001432:	4770      	bx	lr
90001434:	e000e100 	.word	0xe000e100

90001438 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
90001438:	3801      	subs	r0, #1
9000143a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
9000143e:	d20a      	bcs.n	90001456 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
90001440:	4b06      	ldr	r3, [pc, #24]	; (9000145c <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90001442:	21f0      	movs	r1, #240	; 0xf0
90001444:	4a06      	ldr	r2, [pc, #24]	; (90001460 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
90001446:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
90001448:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000144a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
9000144e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
90001450:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
90001452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
90001454:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
90001456:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
90001458:	4770      	bx	lr
9000145a:	bf00      	nop
9000145c:	e000e010 	.word	0xe000e010
90001460:	e000ed00 	.word	0xe000ed00

90001464 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
90001464:	6803      	ldr	r3, [r0, #0]
{
90001466:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
90001468:	2018      	movs	r0, #24
9000146a:	b2d9      	uxtb	r1, r3
9000146c:	3910      	subs	r1, #16
9000146e:	fbb1 f0f0 	udiv	r0, r1, r0
{
90001472:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
90001474:	4c05      	ldr	r4, [pc, #20]	; (9000148c <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
90001476:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
90001478:	5c20      	ldrb	r0, [r4, r0]
9000147a:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
9000147c:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
90001480:	f020 0003 	bic.w	r0, r0, #3
90001484:	bf88      	it	hi
90001486:	3004      	addhi	r0, #4
90001488:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
9000148a:	bd10      	pop	{r4, pc}
9000148c:	9000715c 	.word	0x9000715c

90001490 <HAL_DMA_Init>:
{
90001490:	b570      	push	{r4, r5, r6, lr}
90001492:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
90001494:	f7ff ff66 	bl	90001364 <HAL_GetTick>
90001498:	4605      	mov	r5, r0
  if(hdma == NULL)
9000149a:	2c00      	cmp	r4, #0
9000149c:	d073      	beq.n	90001586 <HAL_DMA_Init+0xf6>
  __HAL_UNLOCK(hdma);
9000149e:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
900014a0:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
900014a2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
900014a6:	2302      	movs	r3, #2
900014a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
900014ac:	6813      	ldr	r3, [r2, #0]
900014ae:	f023 0301 	bic.w	r3, r3, #1
900014b2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
900014b4:	6821      	ldr	r1, [r4, #0]
900014b6:	680b      	ldr	r3, [r1, #0]
900014b8:	07d8      	lsls	r0, r3, #31
900014ba:	d42f      	bmi.n	9000151c <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
900014bc:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
900014be:	4d33      	ldr	r5, [pc, #204]	; (9000158c <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
900014c0:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
900014c2:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
900014c4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
900014c8:	4313      	orrs	r3, r2
900014ca:	68e2      	ldr	r2, [r4, #12]
900014cc:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
900014ce:	6922      	ldr	r2, [r4, #16]
900014d0:	4313      	orrs	r3, r2
900014d2:	6962      	ldr	r2, [r4, #20]
900014d4:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
900014d6:	69e2      	ldr	r2, [r4, #28]
900014d8:	4303      	orrs	r3, r0
900014da:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
900014dc:	6a22      	ldr	r2, [r4, #32]
900014de:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
900014e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
900014e2:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
900014e4:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
900014e8:	bf02      	ittt	eq
900014ea:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
900014ee:	4335      	orreq	r5, r6
900014f0:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
900014f2:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
900014f4:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
900014f6:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
900014f8:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
900014fc:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
90001500:	d133      	bne.n	9000156a <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
90001502:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
90001504:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
90001506:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
90001508:	b37d      	cbz	r5, 9000156a <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
9000150a:	b990      	cbnz	r0, 90001532 <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
9000150c:	2a01      	cmp	r2, #1
9000150e:	d021      	beq.n	90001554 <HAL_DMA_Init+0xc4>
90001510:	f032 0202 	bics.w	r2, r2, #2
90001514:	d129      	bne.n	9000156a <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
90001516:	01ea      	lsls	r2, r5, #7
90001518:	d527      	bpl.n	9000156a <HAL_DMA_Init+0xda>
9000151a:	e01e      	b.n	9000155a <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
9000151c:	f7ff ff22 	bl	90001364 <HAL_GetTick>
90001520:	1b40      	subs	r0, r0, r5
90001522:	2805      	cmp	r0, #5
90001524:	d9c6      	bls.n	900014b4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
90001526:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
90001528:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
9000152a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
9000152c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
90001530:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
90001532:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
90001536:	d114      	bne.n	90001562 <HAL_DMA_Init+0xd2>
    switch (tmp)
90001538:	2a03      	cmp	r2, #3
9000153a:	d816      	bhi.n	9000156a <HAL_DMA_Init+0xda>
9000153c:	a001      	add	r0, pc, #4	; (adr r0, 90001544 <HAL_DMA_Init+0xb4>)
9000153e:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
90001542:	bf00      	nop
90001544:	9000155b 	.word	0x9000155b
90001548:	90001517 	.word	0x90001517
9000154c:	9000155b 	.word	0x9000155b
90001550:	90001555 	.word	0x90001555
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
90001554:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
90001558:	d107      	bne.n	9000156a <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
9000155a:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
9000155c:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
9000155e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
90001560:	e7e4      	b.n	9000152c <HAL_DMA_Init+0x9c>
    switch (tmp)
90001562:	2a02      	cmp	r2, #2
90001564:	d9f9      	bls.n	9000155a <HAL_DMA_Init+0xca>
90001566:	2a03      	cmp	r2, #3
90001568:	d0d5      	beq.n	90001516 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
9000156a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
9000156c:	4620      	mov	r0, r4
9000156e:	f7ff ff79 	bl	90001464 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
90001572:	6de2      	ldr	r2, [r4, #92]	; 0x5c
90001574:	233f      	movs	r3, #63	; 0x3f
90001576:	4093      	lsls	r3, r2
90001578:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
9000157a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
9000157c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
9000157e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
90001580:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
90001584:	e7d4      	b.n	90001530 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
90001586:	2001      	movs	r0, #1
90001588:	e7d2      	b.n	90001530 <HAL_DMA_Init+0xa0>
9000158a:	bf00      	nop
9000158c:	f010803f 	.word	0xf010803f

90001590 <HAL_DMA_DeInit>:
{
90001590:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
90001592:	4605      	mov	r5, r0
90001594:	b320      	cbz	r0, 900015e0 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
90001596:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
9000159a:	2b02      	cmp	r3, #2
9000159c:	b2dc      	uxtb	r4, r3
9000159e:	d01d      	beq.n	900015dc <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
900015a0:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
900015a2:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
900015a4:	681a      	ldr	r2, [r3, #0]
900015a6:	f022 0201 	bic.w	r2, r2, #1
900015aa:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
900015ac:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
900015ae:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
900015b0:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
900015b2:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
900015b4:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
900015b6:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
900015b8:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
900015ba:	f7ff ff53 	bl	90001464 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
900015be:	6dea      	ldr	r2, [r5, #92]	; 0x5c
900015c0:	233f      	movs	r3, #63	; 0x3f
900015c2:	4093      	lsls	r3, r2
900015c4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
900015c6:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
900015c8:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
900015cc:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
900015d0:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
900015d4:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
900015d8:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
}
900015dc:	4620      	mov	r0, r4
900015de:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
900015e0:	2401      	movs	r4, #1
900015e2:	e7fb      	b.n	900015dc <HAL_DMA_DeInit+0x4c>

900015e4 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
900015e4:	2300      	movs	r3, #0
{
900015e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
900015e8:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
900015ea:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
900015ec:	4b5b      	ldr	r3, [pc, #364]	; (9000175c <HAL_DMA_IRQHandler+0x178>)
{
900015ee:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
900015f0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
900015f2:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
900015f4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
900015f6:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
900015f8:	409a      	lsls	r2, r3
900015fa:	4232      	tst	r2, r6
900015fc:	d00c      	beq.n	90001618 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
900015fe:	6801      	ldr	r1, [r0, #0]
90001600:	6808      	ldr	r0, [r1, #0]
90001602:	0740      	lsls	r0, r0, #29
90001604:	d508      	bpl.n	90001618 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
90001606:	6808      	ldr	r0, [r1, #0]
90001608:	f020 0004 	bic.w	r0, r0, #4
9000160c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
9000160e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
90001610:	6d62      	ldr	r2, [r4, #84]	; 0x54
90001612:	f042 0201 	orr.w	r2, r2, #1
90001616:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
90001618:	2201      	movs	r2, #1
9000161a:	409a      	lsls	r2, r3
9000161c:	4232      	tst	r2, r6
9000161e:	d008      	beq.n	90001632 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
90001620:	6821      	ldr	r1, [r4, #0]
90001622:	6949      	ldr	r1, [r1, #20]
90001624:	0609      	lsls	r1, r1, #24
90001626:	d504      	bpl.n	90001632 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
90001628:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
9000162a:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000162c:	f042 0202 	orr.w	r2, r2, #2
90001630:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
90001632:	2204      	movs	r2, #4
90001634:	409a      	lsls	r2, r3
90001636:	4232      	tst	r2, r6
90001638:	d008      	beq.n	9000164c <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
9000163a:	6821      	ldr	r1, [r4, #0]
9000163c:	6809      	ldr	r1, [r1, #0]
9000163e:	0788      	lsls	r0, r1, #30
90001640:	d504      	bpl.n	9000164c <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
90001642:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
90001644:	6d62      	ldr	r2, [r4, #84]	; 0x54
90001646:	f042 0204 	orr.w	r2, r2, #4
9000164a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
9000164c:	2210      	movs	r2, #16
9000164e:	409a      	lsls	r2, r3
90001650:	4232      	tst	r2, r6
90001652:	d010      	beq.n	90001676 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
90001654:	6823      	ldr	r3, [r4, #0]
90001656:	6819      	ldr	r1, [r3, #0]
90001658:	0709      	lsls	r1, r1, #28
9000165a:	d50c      	bpl.n	90001676 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
9000165c:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
9000165e:	681a      	ldr	r2, [r3, #0]
90001660:	0350      	lsls	r0, r2, #13
90001662:	d537      	bpl.n	900016d4 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
90001664:	681b      	ldr	r3, [r3, #0]
90001666:	0319      	lsls	r1, r3, #12
90001668:	d401      	bmi.n	9000166e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
9000166a:	6c23      	ldr	r3, [r4, #64]	; 0x40
9000166c:	e000      	b.n	90001670 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
9000166e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
90001670:	b10b      	cbz	r3, 90001676 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
90001672:	4620      	mov	r0, r4
90001674:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
90001676:	6de1      	ldr	r1, [r4, #92]	; 0x5c
90001678:	2220      	movs	r2, #32
9000167a:	408a      	lsls	r2, r1
9000167c:	4232      	tst	r2, r6
9000167e:	d03a      	beq.n	900016f6 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
90001680:	6823      	ldr	r3, [r4, #0]
90001682:	6818      	ldr	r0, [r3, #0]
90001684:	06c6      	lsls	r6, r0, #27
90001686:	d536      	bpl.n	900016f6 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
90001688:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
9000168a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
9000168e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
90001690:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
90001692:	d127      	bne.n	900016e4 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
90001694:	f022 0216 	bic.w	r2, r2, #22
90001698:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
9000169a:	695a      	ldr	r2, [r3, #20]
9000169c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
900016a0:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
900016a2:	6c22      	ldr	r2, [r4, #64]	; 0x40
900016a4:	b90a      	cbnz	r2, 900016aa <HAL_DMA_IRQHandler+0xc6>
900016a6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
900016a8:	b11a      	cbz	r2, 900016b2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
900016aa:	681a      	ldr	r2, [r3, #0]
900016ac:	f022 0208 	bic.w	r2, r2, #8
900016b0:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
900016b2:	233f      	movs	r3, #63	; 0x3f
900016b4:	408b      	lsls	r3, r1
900016b6:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
900016b8:	2300      	movs	r3, #0
900016ba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
900016be:	2301      	movs	r3, #1
900016c0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
900016c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
900016c6:	2b00      	cmp	r3, #0
900016c8:	d045      	beq.n	90001756 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
900016ca:	4620      	mov	r0, r4
}
900016cc:	b003      	add	sp, #12
900016ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
900016d2:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
900016d4:	681a      	ldr	r2, [r3, #0]
900016d6:	05d2      	lsls	r2, r2, #23
900016d8:	d4c7      	bmi.n	9000166a <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
900016da:	681a      	ldr	r2, [r3, #0]
900016dc:	f022 0208 	bic.w	r2, r2, #8
900016e0:	601a      	str	r2, [r3, #0]
900016e2:	e7c2      	b.n	9000166a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
900016e4:	0350      	lsls	r0, r2, #13
900016e6:	d527      	bpl.n	90001738 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
900016e8:	681b      	ldr	r3, [r3, #0]
900016ea:	0319      	lsls	r1, r3, #12
900016ec:	d431      	bmi.n	90001752 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
900016ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
900016f0:	b10b      	cbz	r3, 900016f6 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
900016f2:	4620      	mov	r0, r4
900016f4:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
900016f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
900016f8:	b36b      	cbz	r3, 90001756 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
900016fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
900016fc:	07da      	lsls	r2, r3, #31
900016fe:	d519      	bpl.n	90001734 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
90001700:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
90001704:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
90001706:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
9000170a:	2305      	movs	r3, #5
9000170c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
90001710:	6813      	ldr	r3, [r2, #0]
90001712:	f023 0301 	bic.w	r3, r3, #1
90001716:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
90001718:	9b01      	ldr	r3, [sp, #4]
9000171a:	3301      	adds	r3, #1
9000171c:	42bb      	cmp	r3, r7
9000171e:	9301      	str	r3, [sp, #4]
90001720:	d802      	bhi.n	90001728 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
90001722:	6813      	ldr	r3, [r2, #0]
90001724:	07db      	lsls	r3, r3, #31
90001726:	d4f7      	bmi.n	90001718 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
90001728:	2300      	movs	r3, #0
9000172a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
9000172e:	2301      	movs	r3, #1
90001730:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
90001734:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
90001736:	e7c6      	b.n	900016c6 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
90001738:	681a      	ldr	r2, [r3, #0]
9000173a:	f412 7280 	ands.w	r2, r2, #256	; 0x100
9000173e:	d108      	bne.n	90001752 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
90001740:	6819      	ldr	r1, [r3, #0]
90001742:	f021 0110 	bic.w	r1, r1, #16
90001746:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
90001748:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
9000174a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
9000174e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
90001752:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90001754:	e7cc      	b.n	900016f0 <HAL_DMA_IRQHandler+0x10c>
}
90001756:	b003      	add	sp, #12
90001758:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000175a:	bf00      	nop
9000175c:	20000054 	.word	0x20000054

90001760 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
90001760:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
90001762:	6804      	ldr	r4, [r0, #0]
90001764:	9d04      	ldr	r5, [sp, #16]
90001766:	6c66      	ldr	r6, [r4, #68]	; 0x44
90001768:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
9000176c:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
90001770:	4333      	orrs	r3, r6
90001772:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
90001774:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
90001776:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
90001778:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
9000177c:	d130      	bne.n	900017e0 <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
9000177e:	6886      	ldr	r6, [r0, #8]
90001780:	b11e      	cbz	r6, 9000178a <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
90001782:	2e01      	cmp	r6, #1
90001784:	d103      	bne.n	9000178e <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
90001786:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U );
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
9000178a:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
9000178c:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
9000178e:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
90001790:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
90001794:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
90001798:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
9000179a:	d107      	bne.n	900017ac <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
9000179c:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
9000179e:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
900017a0:	02db      	lsls	r3, r3, #11
900017a2:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
900017a6:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
900017aa:	e7ee      	b.n	9000178a <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
900017ac:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
900017ae:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
900017b2:	d10a      	bne.n	900017ca <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
900017b4:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
900017b6:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
900017b8:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
900017ba:	0fd1      	lsrs	r1, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
900017bc:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
900017c0:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
900017c4:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
900017c8:	e7df      	b.n	9000178a <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
900017ca:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
900017cc:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
900017ce:	0209      	lsls	r1, r1, #8
      tmp1 = (tmp1 >> 28U);
900017d0:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
900017d2:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
900017d6:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
900017da:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
900017de:	e7d4      	b.n	9000178a <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
900017e0:	60e1      	str	r1, [r4, #12]
}
900017e2:	e7d3      	b.n	9000178c <DMA2D_SetConfig+0x2c>

900017e4 <HAL_DMA2D_MspInit>:
}
900017e4:	4770      	bx	lr

900017e6 <HAL_DMA2D_Init>:
{
900017e6:	b510      	push	{r4, lr}
  if(hdma2d == NULL)
900017e8:	4604      	mov	r4, r0
900017ea:	b330      	cbz	r0, 9000183a <HAL_DMA2D_Init+0x54>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
900017ec:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
900017f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
900017f4:	b91b      	cbnz	r3, 900017fe <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
900017f6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
900017fa:	f7ff fff3 	bl	900017e4 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
900017fe:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90001800:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
90001802:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90001804:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90001806:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
9000180a:	6813      	ldr	r3, [r2, #0]
9000180c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
90001810:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
90001812:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
90001814:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
90001816:	6b53      	ldr	r3, [r2, #52]	; 0x34
90001818:	f023 0307 	bic.w	r3, r3, #7
9000181c:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
9000181e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
90001820:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90001822:	6c13      	ldr	r3, [r2, #64]	; 0x40
90001824:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
90001828:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
9000182c:	430b      	orrs	r3, r1
9000182e:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90001830:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90001832:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90001834:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
90001838:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
9000183a:	2001      	movs	r0, #1
9000183c:	e7fc      	b.n	90001838 <HAL_DMA2D_Init+0x52>

9000183e <HAL_DMA2D_Start>:
{
9000183e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
90001840:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
{
90001844:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
90001846:	2d01      	cmp	r5, #1
90001848:	f04f 0502 	mov.w	r5, #2
9000184c:	d00f      	beq.n	9000186e <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
9000184e:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
90001852:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
90001854:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
90001856:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
9000185a:	9500      	str	r5, [sp, #0]
9000185c:	f7ff ff80 	bl	90001760 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
90001860:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
90001862:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
90001864:	6813      	ldr	r3, [r2, #0]
90001866:	4333      	orrs	r3, r6
90001868:	6013      	str	r3, [r2, #0]
}
9000186a:	b002      	add	sp, #8
9000186c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
9000186e:	4628      	mov	r0, r5
90001870:	e7fb      	b.n	9000186a <HAL_DMA2D_Start+0x2c>

90001872 <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
90001872:	2300      	movs	r3, #0
{
90001874:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
90001876:	9301      	str	r3, [sp, #4]
{
90001878:	4604      	mov	r4, r0
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
9000187a:	6803      	ldr	r3, [r0, #0]
{
9000187c:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
9000187e:	681b      	ldr	r3, [r3, #0]
90001880:	07db      	lsls	r3, r3, #31
90001882:	d417      	bmi.n	900018b4 <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
90001884:	6822      	ldr	r2, [r4, #0]
90001886:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
90001888:	6a52      	ldr	r2, [r2, #36]	; 0x24
9000188a:	4313      	orrs	r3, r2
  if (layer_start != 0U)
9000188c:	069e      	lsls	r6, r3, #26
9000188e:	d506      	bpl.n	9000189e <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
90001890:	f7ff fd68 	bl	90001364 <HAL_GetTick>
90001894:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
90001896:	6823      	ldr	r3, [r4, #0]
90001898:	685a      	ldr	r2, [r3, #4]
9000189a:	06d2      	lsls	r2, r2, #27
9000189c:	d543      	bpl.n	90001926 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
9000189e:	6823      	ldr	r3, [r4, #0]
900018a0:	2212      	movs	r2, #18
  __HAL_UNLOCK(hdma2d);
900018a2:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
900018a4:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
900018a6:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma2d);
900018a8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_READY;
900018ac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
900018b0:	b002      	add	sp, #8
900018b2:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
900018b4:	f7ff fd56 	bl	90001364 <HAL_GetTick>
900018b8:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
900018ba:	6823      	ldr	r3, [r4, #0]
900018bc:	685a      	ldr	r2, [r3, #4]
900018be:	0792      	lsls	r2, r2, #30
900018c0:	d4e0      	bmi.n	90001884 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
900018c2:	685a      	ldr	r2, [r3, #4]
900018c4:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
900018c6:	9a01      	ldr	r2, [sp, #4]
900018c8:	f012 0f21 	tst.w	r2, #33	; 0x21
900018cc:	d017      	beq.n	900018fe <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
900018ce:	9a01      	ldr	r2, [sp, #4]
900018d0:	0695      	lsls	r5, r2, #26
900018d2:	d503      	bpl.n	900018dc <HAL_DMA2D_PollForTransfer+0x6a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
900018d4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
900018d6:	f042 0202 	orr.w	r2, r2, #2
900018da:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
900018dc:	9a01      	ldr	r2, [sp, #4]
900018de:	07d0      	lsls	r0, r2, #31
900018e0:	d503      	bpl.n	900018ea <HAL_DMA2D_PollForTransfer+0x78>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
900018e2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
900018e4:	f042 0201 	orr.w	r2, r2, #1
900018e8:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
900018ea:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
900018ec:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
900018ee:	2304      	movs	r3, #4
        return HAL_ERROR;
900018f0:	2001      	movs	r0, #1
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
900018f2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
900018f6:	2300      	movs	r3, #0
900018f8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
900018fc:	e7d8      	b.n	900018b0 <HAL_DMA2D_PollForTransfer+0x3e>
      if(Timeout != HAL_MAX_DELAY)
900018fe:	1c69      	adds	r1, r5, #1
90001900:	d0dc      	beq.n	900018bc <HAL_DMA2D_PollForTransfer+0x4a>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
90001902:	f7ff fd2f 	bl	90001364 <HAL_GetTick>
90001906:	1b80      	subs	r0, r0, r6
90001908:	42a8      	cmp	r0, r5
9000190a:	d801      	bhi.n	90001910 <HAL_DMA2D_PollForTransfer+0x9e>
9000190c:	2d00      	cmp	r5, #0
9000190e:	d1d4      	bne.n	900018ba <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90001910:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
90001912:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90001914:	f043 0320 	orr.w	r3, r3, #32
90001918:	63e3      	str	r3, [r4, #60]	; 0x3c
          __HAL_UNLOCK(hdma2d);
9000191a:	2300      	movs	r3, #0
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
9000191c:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
90001920:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
90001924:	e7c4      	b.n	900018b0 <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
90001926:	685a      	ldr	r2, [r3, #4]
90001928:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
9000192a:	9a01      	ldr	r2, [sp, #4]
9000192c:	f012 0f29 	tst.w	r2, #41	; 0x29
90001930:	d016      	beq.n	90001960 <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
90001932:	9a01      	ldr	r2, [sp, #4]
90001934:	0716      	lsls	r6, r2, #28
90001936:	d503      	bpl.n	90001940 <HAL_DMA2D_PollForTransfer+0xce>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
90001938:	6be2      	ldr	r2, [r4, #60]	; 0x3c
9000193a:	f042 0204 	orr.w	r2, r2, #4
9000193e:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
90001940:	9a01      	ldr	r2, [sp, #4]
90001942:	0695      	lsls	r5, r2, #26
90001944:	d503      	bpl.n	9000194e <HAL_DMA2D_PollForTransfer+0xdc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90001946:	6be2      	ldr	r2, [r4, #60]	; 0x3c
90001948:	f042 0202 	orr.w	r2, r2, #2
9000194c:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
9000194e:	9a01      	ldr	r2, [sp, #4]
90001950:	07d0      	lsls	r0, r2, #31
90001952:	d503      	bpl.n	9000195c <HAL_DMA2D_PollForTransfer+0xea>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90001954:	6be2      	ldr	r2, [r4, #60]	; 0x3c
90001956:	f042 0201 	orr.w	r2, r2, #1
9000195a:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
9000195c:	2229      	movs	r2, #41	; 0x29
9000195e:	e7c5      	b.n	900018ec <HAL_DMA2D_PollForTransfer+0x7a>
      if(Timeout != HAL_MAX_DELAY)
90001960:	1c69      	adds	r1, r5, #1
90001962:	d099      	beq.n	90001898 <HAL_DMA2D_PollForTransfer+0x26>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
90001964:	f7ff fcfe 	bl	90001364 <HAL_GetTick>
90001968:	1b80      	subs	r0, r0, r6
9000196a:	42a8      	cmp	r0, r5
9000196c:	d8d0      	bhi.n	90001910 <HAL_DMA2D_PollForTransfer+0x9e>
9000196e:	2d00      	cmp	r5, #0
90001970:	d191      	bne.n	90001896 <HAL_DMA2D_PollForTransfer+0x24>
90001972:	e7cd      	b.n	90001910 <HAL_DMA2D_PollForTransfer+0x9e>

90001974 <HAL_DMA2D_ConfigLayer>:
{
90001974:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
90001976:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
9000197a:	2b01      	cmp	r3, #1
9000197c:	f04f 0302 	mov.w	r3, #2
90001980:	d02b      	beq.n	900019da <HAL_DMA2D_ConfigLayer+0x66>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90001982:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
90001986:	2201      	movs	r2, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
90001988:	eb00 1301 	add.w	r3, r0, r1, lsl #4
9000198c:	4f1c      	ldr	r7, [pc, #112]	; (90001a00 <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
9000198e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
90001992:	010e      	lsls	r6, r1, #4
90001994:	6a5d      	ldr	r5, [r3, #36]	; 0x24
90001996:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
9000199a:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
9000199e:	3c09      	subs	r4, #9
900019a0:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
900019a2:	bf96      	itet	ls
900019a4:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
900019a8:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
900019ac:	431a      	orrls	r2, r3
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
900019ae:	6803      	ldr	r3, [r0, #0]
900019b0:	b9a9      	cbnz	r1, 900019de <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
900019b2:	6a59      	ldr	r1, [r3, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900019b4:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
900019b6:	ea01 0107 	and.w	r1, r1, r7
900019ba:	ea42 0201 	orr.w	r2, r2, r1
900019be:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
900019c0:	6982      	ldr	r2, [r0, #24]
900019c2:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900019c4:	d803      	bhi.n	900019ce <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
900019c6:	6a42      	ldr	r2, [r0, #36]	; 0x24
900019c8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
900019cc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
900019ce:	2301      	movs	r3, #1
900019d0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
900019d4:	2300      	movs	r3, #0
900019d6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
900019da:	4618      	mov	r0, r3
}
900019dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
900019de:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900019e0:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
900019e2:	ea01 0107 	and.w	r1, r1, r7
900019e6:	ea42 0201 	orr.w	r2, r2, r1
900019ea:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
900019ec:	eb00 0206 	add.w	r2, r0, r6
900019f0:	6992      	ldr	r2, [r2, #24]
900019f2:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900019f4:	d8eb      	bhi.n	900019ce <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
900019f6:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
900019fa:	621d      	str	r5, [r3, #32]
900019fc:	e7e7      	b.n	900019ce <HAL_DMA2D_ConfigLayer+0x5a>
900019fe:	bf00      	nop
90001a00:	00fcfff0 	.word	0x00fcfff0

90001a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
90001a04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
90001a08:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90001a0a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 90001bc8 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
90001a0e:	4a6c      	ldr	r2, [pc, #432]	; (90001bc0 <HAL_GPIO_Init+0x1bc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
90001a10:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 90001bcc <HAL_GPIO_Init+0x1c8>
    ioposition = ((uint32_t)0x01) << position;
90001a14:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
90001a16:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
90001a18:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
90001a1a:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
90001a1e:	43ac      	bics	r4, r5
90001a20:	f040 80b4 	bne.w	90001b8c <HAL_GPIO_Init+0x188>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
90001a24:	684c      	ldr	r4, [r1, #4]
90001a26:	ea4f 0e43 	mov.w	lr, r3, lsl #1
90001a2a:	2503      	movs	r5, #3
90001a2c:	f024 0c10 	bic.w	ip, r4, #16
90001a30:	fa05 f50e 	lsl.w	r5, r5, lr
90001a34:	f10c 37ff 	add.w	r7, ip, #4294967295
90001a38:	43ed      	mvns	r5, r5
90001a3a:	2f01      	cmp	r7, #1
90001a3c:	d811      	bhi.n	90001a62 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->OSPEEDR; 
90001a3e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
90001a40:	ea07 0a05 	and.w	sl, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
90001a44:	68cf      	ldr	r7, [r1, #12]
90001a46:	fa07 f70e 	lsl.w	r7, r7, lr
90001a4a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
90001a4e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
90001a50:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
90001a52:	ea27 0a06 	bic.w	sl, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
90001a56:	f3c4 1700 	ubfx	r7, r4, #4, #1
90001a5a:	409f      	lsls	r7, r3
90001a5c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
90001a60:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
90001a62:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
90001a64:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
90001a68:	ea07 0a05 	and.w	sl, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
90001a6c:	688f      	ldr	r7, [r1, #8]
90001a6e:	fa07 f70e 	lsl.w	r7, r7, lr
90001a72:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
90001a76:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
90001a78:	d116      	bne.n	90001aa8 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
90001a7a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
90001a7e:	f003 0b07 	and.w	fp, r3, #7
90001a82:	f04f 0c0f 	mov.w	ip, #15
90001a86:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
90001a8a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
90001a8e:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
90001a92:	fa0c fc0b 	lsl.w	ip, ip, fp
90001a96:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
90001a9a:	690f      	ldr	r7, [r1, #16]
90001a9c:	fa07 f70b 	lsl.w	r7, r7, fp
90001aa0:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
90001aa4:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
90001aa8:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
90001aaa:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
90001aac:	f004 0703 	and.w	r7, r4, #3
90001ab0:	fa07 fe0e 	lsl.w	lr, r7, lr
90001ab4:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->MODER = temp;
90001ab8:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
90001aba:	00e5      	lsls	r5, r4, #3
90001abc:	d566      	bpl.n	90001b8c <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90001abe:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
90001ac2:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
90001ac6:	f003 0c03 	and.w	ip, r3, #3
90001aca:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90001ace:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
90001ad2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
90001ad6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90001ada:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
90001ade:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
90001ae2:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
90001ae6:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
90001aea:	9501      	str	r5, [sp, #4]
90001aec:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
90001aee:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
90001af2:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
90001af6:	ea2a 0e05 	bic.w	lr, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
90001afa:	4d32      	ldr	r5, [pc, #200]	; (90001bc4 <HAL_GPIO_Init+0x1c0>)
90001afc:	42a8      	cmp	r0, r5
90001afe:	d04c      	beq.n	90001b9a <HAL_GPIO_Init+0x196>
90001b00:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90001b04:	42a8      	cmp	r0, r5
90001b06:	d04a      	beq.n	90001b9e <HAL_GPIO_Init+0x19a>
90001b08:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90001b0c:	42a8      	cmp	r0, r5
90001b0e:	d048      	beq.n	90001ba2 <HAL_GPIO_Init+0x19e>
90001b10:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90001b14:	42a8      	cmp	r0, r5
90001b16:	d046      	beq.n	90001ba6 <HAL_GPIO_Init+0x1a2>
90001b18:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90001b1c:	42a8      	cmp	r0, r5
90001b1e:	d044      	beq.n	90001baa <HAL_GPIO_Init+0x1a6>
90001b20:	4548      	cmp	r0, r9
90001b22:	d044      	beq.n	90001bae <HAL_GPIO_Init+0x1aa>
90001b24:	f505 6500 	add.w	r5, r5, #2048	; 0x800
90001b28:	42a8      	cmp	r0, r5
90001b2a:	d042      	beq.n	90001bb2 <HAL_GPIO_Init+0x1ae>
90001b2c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90001b30:	42a8      	cmp	r0, r5
90001b32:	d040      	beq.n	90001bb6 <HAL_GPIO_Init+0x1b2>
90001b34:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90001b38:	42a8      	cmp	r0, r5
90001b3a:	d03e      	beq.n	90001bba <HAL_GPIO_Init+0x1b6>
90001b3c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90001b40:	42a8      	cmp	r0, r5
90001b42:	bf0c      	ite	eq
90001b44:	2509      	moveq	r5, #9
90001b46:	250a      	movne	r5, #10
90001b48:	fa05 f50c 	lsl.w	r5, r5, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
90001b4c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
90001b50:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
90001b54:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
90001b56:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
90001b5a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
90001b5c:	bf0c      	ite	eq
90001b5e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
90001b60:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
90001b62:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
90001b66:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
90001b68:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
90001b6a:	bf0c      	ite	eq
90001b6c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
90001b6e:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
90001b70:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
90001b74:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
90001b76:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
90001b78:	bf0c      	ite	eq
90001b7a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
90001b7c:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
90001b7e:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
90001b80:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
90001b82:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
90001b84:	bf54      	ite	pl
90001b86:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
90001b88:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
90001b8a:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
90001b8c:	3301      	adds	r3, #1
90001b8e:	2b10      	cmp	r3, #16
90001b90:	f47f af40 	bne.w	90001a14 <HAL_GPIO_Init+0x10>
      }
    }
  }
}
90001b94:	b003      	add	sp, #12
90001b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
90001b9a:	2500      	movs	r5, #0
90001b9c:	e7d4      	b.n	90001b48 <HAL_GPIO_Init+0x144>
90001b9e:	2501      	movs	r5, #1
90001ba0:	e7d2      	b.n	90001b48 <HAL_GPIO_Init+0x144>
90001ba2:	2502      	movs	r5, #2
90001ba4:	e7d0      	b.n	90001b48 <HAL_GPIO_Init+0x144>
90001ba6:	2503      	movs	r5, #3
90001ba8:	e7ce      	b.n	90001b48 <HAL_GPIO_Init+0x144>
90001baa:	2504      	movs	r5, #4
90001bac:	e7cc      	b.n	90001b48 <HAL_GPIO_Init+0x144>
90001bae:	2505      	movs	r5, #5
90001bb0:	e7ca      	b.n	90001b48 <HAL_GPIO_Init+0x144>
90001bb2:	2506      	movs	r5, #6
90001bb4:	e7c8      	b.n	90001b48 <HAL_GPIO_Init+0x144>
90001bb6:	2507      	movs	r5, #7
90001bb8:	e7c6      	b.n	90001b48 <HAL_GPIO_Init+0x144>
90001bba:	2508      	movs	r5, #8
90001bbc:	e7c4      	b.n	90001b48 <HAL_GPIO_Init+0x144>
90001bbe:	bf00      	nop
90001bc0:	40013c00 	.word	0x40013c00
90001bc4:	40020000 	.word	0x40020000
90001bc8:	40023800 	.word	0x40023800
90001bcc:	40021400 	.word	0x40021400

90001bd0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
90001bd0:	b10a      	cbz	r2, 90001bd6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
90001bd2:	6181      	str	r1, [r0, #24]
  }
}
90001bd4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
90001bd6:	0409      	lsls	r1, r1, #16
90001bd8:	e7fb      	b.n	90001bd2 <HAL_GPIO_WritePin+0x2>

90001bda <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
90001bda:	4770      	bx	lr

90001bdc <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
90001bdc:	4a04      	ldr	r2, [pc, #16]	; (90001bf0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
90001bde:	6951      	ldr	r1, [r2, #20]
90001be0:	4201      	tst	r1, r0
{
90001be2:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
90001be4:	d002      	beq.n	90001bec <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
90001be6:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
90001be8:	f7ff fff7 	bl	90001bda <HAL_GPIO_EXTI_Callback>
}
90001bec:	bd08      	pop	{r3, pc}
90001bee:	bf00      	nop
90001bf0:	40013c00 	.word	0x40013c00

90001bf4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90001bf4:	6803      	ldr	r3, [r0, #0]
90001bf6:	699a      	ldr	r2, [r3, #24]
90001bf8:	0791      	lsls	r1, r2, #30
90001bfa:	d501      	bpl.n	90001c00 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
90001bfc:	2200      	movs	r2, #0
90001bfe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90001c00:	699a      	ldr	r2, [r3, #24]
90001c02:	07d2      	lsls	r2, r2, #31
90001c04:	d403      	bmi.n	90001c0e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90001c06:	699a      	ldr	r2, [r3, #24]
90001c08:	f042 0201 	orr.w	r2, r2, #1
90001c0c:	619a      	str	r2, [r3, #24]
  }
}
90001c0e:	4770      	bx	lr

90001c10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
90001c10:	b530      	push	{r4, r5, lr}
90001c12:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
90001c14:	f3c1 0109 	ubfx	r1, r1, #0, #10
90001c18:	6804      	ldr	r4, [r0, #0]
90001c1a:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
90001c1e:	6860      	ldr	r0, [r4, #4]
90001c20:	431a      	orrs	r2, r3
90001c22:	4b04      	ldr	r3, [pc, #16]	; (90001c34 <I2C_TransferConfig+0x24>)
90001c24:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
90001c28:	430a      	orrs	r2, r1
90001c2a:	ea20 0003 	bic.w	r0, r0, r3
90001c2e:	4302      	orrs	r2, r0
90001c30:	6062      	str	r2, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
90001c32:	bd30      	pop	{r4, r5, pc}
90001c34:	03ff63ff 	.word	0x03ff63ff

90001c38 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
90001c38:	6803      	ldr	r3, [r0, #0]
{
90001c3a:	b570      	push	{r4, r5, r6, lr}
90001c3c:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
90001c3e:	6998      	ldr	r0, [r3, #24]
{
90001c40:	460d      	mov	r5, r1
90001c42:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
90001c44:	f010 0010 	ands.w	r0, r0, #16
90001c48:	d116      	bne.n	90001c78 <I2C_IsAcknowledgeFailed+0x40>
}
90001c4a:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
90001c4c:	1c69      	adds	r1, r5, #1
90001c4e:	d014      	beq.n	90001c7a <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90001c50:	f7ff fb88 	bl	90001364 <HAL_GetTick>
90001c54:	1b80      	subs	r0, r0, r6
90001c56:	42a8      	cmp	r0, r5
90001c58:	d800      	bhi.n	90001c5c <I2C_IsAcknowledgeFailed+0x24>
90001c5a:	b96d      	cbnz	r5, 90001c78 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90001c5c:	6c63      	ldr	r3, [r4, #68]	; 0x44
90001c5e:	f043 0320 	orr.w	r3, r3, #32
90001c62:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90001c64:	2320      	movs	r3, #32
90001c66:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
90001c6a:	2300      	movs	r3, #0
    return HAL_ERROR;
90001c6c:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
90001c6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
90001c72:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
90001c76:	e7e8      	b.n	90001c4a <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90001c78:	6823      	ldr	r3, [r4, #0]
90001c7a:	699a      	ldr	r2, [r3, #24]
90001c7c:	0692      	lsls	r2, r2, #26
90001c7e:	d5e5      	bpl.n	90001c4c <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90001c80:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90001c82:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
90001c84:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90001c86:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90001c88:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
90001c8a:	f7ff ffb3 	bl	90001bf4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
90001c8e:	6822      	ldr	r2, [r4, #0]
90001c90:	6853      	ldr	r3, [r2, #4]
90001c92:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
90001c96:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
90001c9a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
90001c9e:	f023 0301 	bic.w	r3, r3, #1
90001ca2:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
90001ca4:	6c63      	ldr	r3, [r4, #68]	; 0x44
90001ca6:	f043 0304 	orr.w	r3, r3, #4
90001caa:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
90001cac:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
90001cb0:	e7db      	b.n	90001c6a <I2C_IsAcknowledgeFailed+0x32>

90001cb2 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
90001cb2:	b570      	push	{r4, r5, r6, lr}
90001cb4:	4604      	mov	r4, r0
90001cb6:	460d      	mov	r5, r1
90001cb8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90001cba:	6823      	ldr	r3, [r4, #0]
90001cbc:	699b      	ldr	r3, [r3, #24]
90001cbe:	069b      	lsls	r3, r3, #26
90001cc0:	d501      	bpl.n	90001cc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
90001cc2:	2000      	movs	r0, #0
}
90001cc4:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
90001cc6:	4632      	mov	r2, r6
90001cc8:	4629      	mov	r1, r5
90001cca:	4620      	mov	r0, r4
90001ccc:	f7ff ffb4 	bl	90001c38 <I2C_IsAcknowledgeFailed>
90001cd0:	b990      	cbnz	r0, 90001cf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90001cd2:	f7ff fb47 	bl	90001364 <HAL_GetTick>
90001cd6:	1b80      	subs	r0, r0, r6
90001cd8:	42a8      	cmp	r0, r5
90001cda:	d801      	bhi.n	90001ce0 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
90001cdc:	2d00      	cmp	r5, #0
90001cde:	d1ec      	bne.n	90001cba <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90001ce0:	6c63      	ldr	r3, [r4, #68]	; 0x44
90001ce2:	f043 0320 	orr.w	r3, r3, #32
90001ce6:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90001ce8:	2320      	movs	r3, #32
90001cea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90001cee:	2300      	movs	r3, #0
90001cf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
90001cf4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
90001cf8:	2001      	movs	r0, #1
90001cfa:	e7e3      	b.n	90001cc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

90001cfc <I2C_WaitOnFlagUntilTimeout>:
{
90001cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90001d00:	9f06      	ldr	r7, [sp, #24]
90001d02:	4604      	mov	r4, r0
90001d04:	4688      	mov	r8, r1
90001d06:	4616      	mov	r6, r2
90001d08:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90001d0a:	6822      	ldr	r2, [r4, #0]
90001d0c:	6993      	ldr	r3, [r2, #24]
90001d0e:	ea38 0303 	bics.w	r3, r8, r3
90001d12:	bf0c      	ite	eq
90001d14:	2301      	moveq	r3, #1
90001d16:	2300      	movne	r3, #0
90001d18:	42b3      	cmp	r3, r6
90001d1a:	d001      	beq.n	90001d20 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
90001d1c:	2000      	movs	r0, #0
90001d1e:	e015      	b.n	90001d4c <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
90001d20:	1c6b      	adds	r3, r5, #1
90001d22:	d0f3      	beq.n	90001d0c <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90001d24:	f7ff fb1e 	bl	90001364 <HAL_GetTick>
90001d28:	1bc0      	subs	r0, r0, r7
90001d2a:	42a8      	cmp	r0, r5
90001d2c:	d801      	bhi.n	90001d32 <I2C_WaitOnFlagUntilTimeout+0x36>
90001d2e:	2d00      	cmp	r5, #0
90001d30:	d1eb      	bne.n	90001d0a <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90001d32:	6c63      	ldr	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
90001d34:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90001d36:	f043 0320 	orr.w	r3, r3, #32
90001d3a:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90001d3c:	2320      	movs	r3, #32
90001d3e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90001d42:	2300      	movs	r3, #0
90001d44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
90001d48:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
90001d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90001d50 <I2C_WaitOnTXISFlagUntilTimeout>:
{
90001d50:	b570      	push	{r4, r5, r6, lr}
90001d52:	4604      	mov	r4, r0
90001d54:	460d      	mov	r5, r1
90001d56:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90001d58:	6823      	ldr	r3, [r4, #0]
90001d5a:	699b      	ldr	r3, [r3, #24]
90001d5c:	079b      	lsls	r3, r3, #30
90001d5e:	d501      	bpl.n	90001d64 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
90001d60:	2000      	movs	r0, #0
}
90001d62:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
90001d64:	4632      	mov	r2, r6
90001d66:	4629      	mov	r1, r5
90001d68:	4620      	mov	r0, r4
90001d6a:	f7ff ff65 	bl	90001c38 <I2C_IsAcknowledgeFailed>
90001d6e:	b9a0      	cbnz	r0, 90001d9a <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
90001d70:	1c6a      	adds	r2, r5, #1
90001d72:	d0f1      	beq.n	90001d58 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90001d74:	f7ff faf6 	bl	90001364 <HAL_GetTick>
90001d78:	1b80      	subs	r0, r0, r6
90001d7a:	42a8      	cmp	r0, r5
90001d7c:	d801      	bhi.n	90001d82 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
90001d7e:	2d00      	cmp	r5, #0
90001d80:	d1ea      	bne.n	90001d58 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90001d82:	6c63      	ldr	r3, [r4, #68]	; 0x44
90001d84:	f043 0320 	orr.w	r3, r3, #32
90001d88:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90001d8a:	2320      	movs	r3, #32
90001d8c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90001d90:	2300      	movs	r3, #0
90001d92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
90001d96:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
90001d9a:	2001      	movs	r0, #1
90001d9c:	e7e1      	b.n	90001d62 <I2C_WaitOnTXISFlagUntilTimeout+0x12>
	...

90001da0 <I2C_RequestMemoryWrite>:
{
90001da0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90001da4:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
90001da6:	4b18      	ldr	r3, [pc, #96]	; (90001e08 <I2C_RequestMemoryWrite+0x68>)
{
90001da8:	4605      	mov	r5, r0
90001daa:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
90001dac:	9300      	str	r3, [sp, #0]
90001dae:	b2f2      	uxtb	r2, r6
90001db0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
90001db4:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
90001db8:	f7ff ff2a 	bl	90001c10 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90001dbc:	4628      	mov	r0, r5
90001dbe:	4642      	mov	r2, r8
90001dc0:	4639      	mov	r1, r7
90001dc2:	f7ff ffc5 	bl	90001d50 <I2C_WaitOnTXISFlagUntilTimeout>
90001dc6:	b118      	cbz	r0, 90001dd0 <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
90001dc8:	2001      	movs	r0, #1
}
90001dca:	b002      	add	sp, #8
90001dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90001dd0:	2e01      	cmp	r6, #1
90001dd2:	682b      	ldr	r3, [r5, #0]
90001dd4:	d10d      	bne.n	90001df2 <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90001dd6:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
90001dd8:	2200      	movs	r2, #0
90001dda:	2180      	movs	r1, #128	; 0x80
90001ddc:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90001dde:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
90001de0:	463b      	mov	r3, r7
90001de2:	f8cd 8000 	str.w	r8, [sp]
90001de6:	f7ff ff89 	bl	90001cfc <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
90001dea:	3800      	subs	r0, #0
90001dec:	bf18      	it	ne
90001dee:	2001      	movne	r0, #1
90001df0:	e7eb      	b.n	90001dca <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90001df2:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90001df4:	4639      	mov	r1, r7
90001df6:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90001df8:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90001dfa:	4642      	mov	r2, r8
90001dfc:	f7ff ffa8 	bl	90001d50 <I2C_WaitOnTXISFlagUntilTimeout>
90001e00:	2800      	cmp	r0, #0
90001e02:	d1e1      	bne.n	90001dc8 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90001e04:	682b      	ldr	r3, [r5, #0]
90001e06:	e7e6      	b.n	90001dd6 <I2C_RequestMemoryWrite+0x36>
90001e08:	80002000 	.word	0x80002000

90001e0c <I2C_RequestMemoryRead>:
{
90001e0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90001e10:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90001e12:	4b18      	ldr	r3, [pc, #96]	; (90001e74 <I2C_RequestMemoryRead+0x68>)
{
90001e14:	4605      	mov	r5, r0
90001e16:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90001e18:	9300      	str	r3, [sp, #0]
90001e1a:	b2f2      	uxtb	r2, r6
90001e1c:	2300      	movs	r3, #0
{
90001e1e:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90001e22:	f7ff fef5 	bl	90001c10 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90001e26:	4628      	mov	r0, r5
90001e28:	4642      	mov	r2, r8
90001e2a:	4639      	mov	r1, r7
90001e2c:	f7ff ff90 	bl	90001d50 <I2C_WaitOnTXISFlagUntilTimeout>
90001e30:	b118      	cbz	r0, 90001e3a <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
90001e32:	2001      	movs	r0, #1
}
90001e34:	b002      	add	sp, #8
90001e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90001e3a:	2e01      	cmp	r6, #1
90001e3c:	682b      	ldr	r3, [r5, #0]
90001e3e:	d10d      	bne.n	90001e5c <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90001e40:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
90001e42:	2200      	movs	r2, #0
90001e44:	2140      	movs	r1, #64	; 0x40
90001e46:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90001e48:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
90001e4a:	463b      	mov	r3, r7
90001e4c:	f8cd 8000 	str.w	r8, [sp]
90001e50:	f7ff ff54 	bl	90001cfc <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
90001e54:	3800      	subs	r0, #0
90001e56:	bf18      	it	ne
90001e58:	2001      	movne	r0, #1
90001e5a:	e7eb      	b.n	90001e34 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90001e5c:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90001e5e:	4639      	mov	r1, r7
90001e60:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90001e62:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90001e64:	4642      	mov	r2, r8
90001e66:	f7ff ff73 	bl	90001d50 <I2C_WaitOnTXISFlagUntilTimeout>
90001e6a:	2800      	cmp	r0, #0
90001e6c:	d1e1      	bne.n	90001e32 <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90001e6e:	682b      	ldr	r3, [r5, #0]
90001e70:	e7e6      	b.n	90001e40 <I2C_RequestMemoryRead+0x34>
90001e72:	bf00      	nop
90001e74:	80002000 	.word	0x80002000

90001e78 <HAL_I2C_MspInit>:
}
90001e78:	4770      	bx	lr

90001e7a <HAL_I2C_Init>:
{
90001e7a:	b510      	push	{r4, lr}
  if (hi2c == NULL)
90001e7c:	4604      	mov	r4, r0
90001e7e:	2800      	cmp	r0, #0
90001e80:	d04a      	beq.n	90001f18 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
90001e82:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
90001e86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90001e8a:	b91b      	cbnz	r3, 90001e94 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
90001e8c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
90001e90:	f7ff fff2 	bl	90001e78 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
90001e94:	2324      	movs	r3, #36	; 0x24
90001e96:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
90001e9a:	6823      	ldr	r3, [r4, #0]
90001e9c:	681a      	ldr	r2, [r3, #0]
90001e9e:	f022 0201 	bic.w	r2, r2, #1
90001ea2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90001ea4:	6862      	ldr	r2, [r4, #4]
90001ea6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
90001eaa:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
90001eac:	689a      	ldr	r2, [r3, #8]
90001eae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
90001eb2:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
90001eb4:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
90001eb8:	2901      	cmp	r1, #1
90001eba:	d124      	bne.n	90001f06 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90001ebc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
90001ec0:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90001ec2:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90001ec4:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90001ec6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
90001eca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
90001ece:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
90001ed0:	68da      	ldr	r2, [r3, #12]
90001ed2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
90001ed6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
90001ed8:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
90001edc:	430a      	orrs	r2, r1
90001ede:	69a1      	ldr	r1, [r4, #24]
90001ee0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90001ee4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90001ee6:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
90001eea:	430a      	orrs	r2, r1
90001eec:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
90001eee:	681a      	ldr	r2, [r3, #0]
90001ef0:	f042 0201 	orr.w	r2, r2, #1
90001ef4:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
90001ef6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90001ef8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
90001efa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90001efe:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90001f00:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
90001f04:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90001f06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90001f0a:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90001f0c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90001f0e:	d1d8      	bne.n	90001ec2 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
90001f10:	f44f 6200 	mov.w	r2, #2048	; 0x800
90001f14:	605a      	str	r2, [r3, #4]
90001f16:	e7d4      	b.n	90001ec2 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
90001f18:	2001      	movs	r0, #1
90001f1a:	e7f3      	b.n	90001f04 <HAL_I2C_Init+0x8a>

90001f1c <HAL_I2C_MspDeInit>:
90001f1c:	4770      	bx	lr

90001f1e <HAL_I2C_DeInit>:
{
90001f1e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
90001f20:	4604      	mov	r4, r0
90001f22:	b198      	cbz	r0, 90001f4c <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
90001f24:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
90001f26:	2324      	movs	r3, #36	; 0x24
90001f28:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
90001f2c:	6813      	ldr	r3, [r2, #0]
90001f2e:	f023 0301 	bic.w	r3, r3, #1
90001f32:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
90001f34:	f7ff fff2 	bl	90001f1c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90001f38:	2000      	movs	r0, #0
90001f3a:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
90001f3c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
90001f40:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90001f44:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90001f46:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
90001f4a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
90001f4c:	2001      	movs	r0, #1
90001f4e:	e7fc      	b.n	90001f4a <HAL_I2C_DeInit+0x2c>

90001f50 <HAL_I2C_Mem_Write>:
{
90001f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90001f54:	b085      	sub	sp, #20
90001f56:	469b      	mov	fp, r3
90001f58:	4604      	mov	r4, r0
90001f5a:	460f      	mov	r7, r1
90001f5c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
90001f60:	4692      	mov	sl, r2
90001f62:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
90001f66:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
90001f68:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
90001f6c:	2b20      	cmp	r3, #32
90001f6e:	f040 80a3 	bne.w	900020b8 <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
90001f72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90001f74:	b10b      	cbz	r3, 90001f7a <HAL_I2C_Mem_Write+0x2a>
90001f76:	9b03      	ldr	r3, [sp, #12]
90001f78:	b933      	cbnz	r3, 90001f88 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90001f7a:	f44f 7300 	mov.w	r3, #512	; 0x200
90001f7e:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
90001f80:	2001      	movs	r0, #1
}
90001f82:	b005      	add	sp, #20
90001f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
90001f88:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
90001f8c:	2b01      	cmp	r3, #1
90001f8e:	f000 8093 	beq.w	900020b8 <HAL_I2C_Mem_Write+0x168>
90001f92:	2501      	movs	r5, #1
90001f94:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
90001f98:	f7ff f9e4 	bl	90001364 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90001f9c:	2319      	movs	r3, #25
90001f9e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
90001fa0:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90001fa2:	462a      	mov	r2, r5
90001fa4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90001fa8:	4620      	mov	r0, r4
90001faa:	f7ff fea7 	bl	90001cfc <I2C_WaitOnFlagUntilTimeout>
90001fae:	4680      	mov	r8, r0
90001fb0:	2800      	cmp	r0, #0
90001fb2:	d1e5      	bne.n	90001f80 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
90001fb4:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
90001fb6:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90001fb8:	4652      	mov	r2, sl
90001fba:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
90001fbc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90001fc0:	2340      	movs	r3, #64	; 0x40
90001fc2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
90001fc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90001fc8:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90001fca:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
90001fcc:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
90001fce:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90001fd0:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
90001fd4:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90001fd6:	465b      	mov	r3, fp
90001fd8:	f7ff fee2 	bl	90001da0 <I2C_RequestMemoryWrite>
90001fdc:	b110      	cbz	r0, 90001fe4 <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
90001fde:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
90001fe2:	e7cd      	b.n	90001f80 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90001fe4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90001fe6:	b29b      	uxth	r3, r3
90001fe8:	2bff      	cmp	r3, #255	; 0xff
90001fea:	d955      	bls.n	90002098 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
90001fec:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
90001fee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
90001ff2:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
90001ff4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90001ff6:	4639      	mov	r1, r7
90001ff8:	4620      	mov	r0, r4
90001ffa:	f7ff fe09 	bl	90001c10 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90001ffe:	4632      	mov	r2, r6
90002000:	4649      	mov	r1, r9
90002002:	4620      	mov	r0, r4
90002004:	f7ff fea4 	bl	90001d50 <I2C_WaitOnTXISFlagUntilTimeout>
90002008:	2800      	cmp	r0, #0
9000200a:	d1b9      	bne.n	90001f80 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
9000200c:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000200e:	6822      	ldr	r2, [r4, #0]
90002010:	f813 1b01 	ldrb.w	r1, [r3], #1
90002014:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
90002016:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
90002018:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
9000201a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
9000201c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
9000201e:	3a01      	subs	r2, #1
      hi2c->XferCount--;
90002020:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
90002022:	b292      	uxth	r2, r2
      hi2c->XferCount--;
90002024:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90002026:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
90002028:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000202a:	b29b      	uxth	r3, r3
9000202c:	b1ab      	cbz	r3, 9000205a <HAL_I2C_Mem_Write+0x10a>
9000202e:	b9a2      	cbnz	r2, 9000205a <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
90002030:	464b      	mov	r3, r9
90002032:	2180      	movs	r1, #128	; 0x80
90002034:	4620      	mov	r0, r4
90002036:	9600      	str	r6, [sp, #0]
90002038:	f7ff fe60 	bl	90001cfc <I2C_WaitOnFlagUntilTimeout>
9000203c:	2800      	cmp	r0, #0
9000203e:	d19f      	bne.n	90001f80 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90002040:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90002042:	b29b      	uxth	r3, r3
90002044:	2bff      	cmp	r3, #255	; 0xff
90002046:	d92f      	bls.n	900020a8 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
90002048:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
9000204a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
9000204e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
90002050:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90002052:	4639      	mov	r1, r7
90002054:	4620      	mov	r0, r4
90002056:	f7ff fddb 	bl	90001c10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
9000205a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000205c:	b29b      	uxth	r3, r3
9000205e:	2b00      	cmp	r3, #0
90002060:	d1cd      	bne.n	90001ffe <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90002062:	4632      	mov	r2, r6
90002064:	4649      	mov	r1, r9
90002066:	4620      	mov	r0, r4
90002068:	f7ff fe23 	bl	90001cb2 <I2C_WaitOnSTOPFlagUntilTimeout>
9000206c:	2800      	cmp	r0, #0
9000206e:	d187      	bne.n	90001f80 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90002070:	6823      	ldr	r3, [r4, #0]
90002072:	2120      	movs	r1, #32
90002074:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
90002076:	685a      	ldr	r2, [r3, #4]
90002078:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
9000207c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
90002080:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
90002084:	f022 0201 	bic.w	r2, r2, #1
90002088:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
9000208a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
9000208e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90002092:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
90002096:	e774      	b.n	90001f82 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
90002098:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
9000209a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
9000209e:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
900020a0:	b292      	uxth	r2, r2
900020a2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
900020a4:	b2d2      	uxtb	r2, r2
900020a6:	e7a6      	b.n	90001ff6 <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
900020a8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
900020aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
900020ae:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
900020b0:	b292      	uxth	r2, r2
900020b2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
900020b4:	b2d2      	uxtb	r2, r2
900020b6:	e7cc      	b.n	90002052 <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
900020b8:	2002      	movs	r0, #2
900020ba:	e762      	b.n	90001f82 <HAL_I2C_Mem_Write+0x32>

900020bc <HAL_I2C_Mem_Read>:
{
900020bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900020c0:	b085      	sub	sp, #20
900020c2:	469b      	mov	fp, r3
900020c4:	4604      	mov	r4, r0
900020c6:	460f      	mov	r7, r1
900020c8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
900020cc:	4692      	mov	sl, r2
900020ce:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
900020d2:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
900020d4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
900020d8:	2b20      	cmp	r3, #32
900020da:	f040 80a7 	bne.w	9000222c <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
900020de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900020e0:	b10b      	cbz	r3, 900020e6 <HAL_I2C_Mem_Read+0x2a>
900020e2:	9b03      	ldr	r3, [sp, #12]
900020e4:	b933      	cbnz	r3, 900020f4 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
900020e6:	f44f 7300 	mov.w	r3, #512	; 0x200
900020ea:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
900020ec:	2001      	movs	r0, #1
}
900020ee:	b005      	add	sp, #20
900020f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
900020f4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
900020f8:	2b01      	cmp	r3, #1
900020fa:	f000 8097 	beq.w	9000222c <HAL_I2C_Mem_Read+0x170>
900020fe:	2501      	movs	r5, #1
90002100:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
90002104:	f7ff f92e 	bl	90001364 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90002108:	2319      	movs	r3, #25
9000210a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
9000210c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
9000210e:	462a      	mov	r2, r5
90002110:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90002114:	4620      	mov	r0, r4
90002116:	f7ff fdf1 	bl	90001cfc <I2C_WaitOnFlagUntilTimeout>
9000211a:	4680      	mov	r8, r0
9000211c:	2800      	cmp	r0, #0
9000211e:	d1e5      	bne.n	900020ec <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90002120:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
90002122:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90002124:	4652      	mov	r2, sl
90002126:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90002128:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
9000212c:	2340      	movs	r3, #64	; 0x40
9000212e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
90002132:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90002134:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90002136:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
90002138:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
9000213a:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
9000213c:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
90002140:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90002142:	465b      	mov	r3, fp
90002144:	f7ff fe62 	bl	90001e0c <I2C_RequestMemoryRead>
90002148:	b110      	cbz	r0, 90002150 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
9000214a:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
9000214e:	e7cd      	b.n	900020ec <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90002150:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90002152:	b29b      	uxth	r3, r3
90002154:	2bff      	cmp	r3, #255	; 0xff
90002156:	4b36      	ldr	r3, [pc, #216]	; (90002230 <HAL_I2C_Mem_Read+0x174>)
90002158:	d958      	bls.n	9000220c <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
9000215a:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
9000215c:	9300      	str	r3, [sp, #0]
9000215e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
90002162:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
90002164:	4639      	mov	r1, r7
90002166:	4620      	mov	r0, r4
90002168:	f7ff fd52 	bl	90001c10 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
9000216c:	464b      	mov	r3, r9
9000216e:	2200      	movs	r2, #0
90002170:	2104      	movs	r1, #4
90002172:	4620      	mov	r0, r4
90002174:	9600      	str	r6, [sp, #0]
90002176:	f7ff fdc1 	bl	90001cfc <I2C_WaitOnFlagUntilTimeout>
9000217a:	2800      	cmp	r0, #0
9000217c:	d1b6      	bne.n	900020ec <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
9000217e:	6823      	ldr	r3, [r4, #0]
90002180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90002182:	6a63      	ldr	r3, [r4, #36]	; 0x24
90002184:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
90002186:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
90002188:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
9000218a:	3301      	adds	r3, #1
      hi2c->XferSize--;
9000218c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
9000218e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
90002190:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
90002192:	b292      	uxth	r2, r2
      hi2c->XferCount--;
90002194:	3b01      	subs	r3, #1
      hi2c->XferSize--;
90002196:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
90002198:	b29b      	uxth	r3, r3
9000219a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000219c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000219e:	b29b      	uxth	r3, r3
900021a0:	b1ab      	cbz	r3, 900021ce <HAL_I2C_Mem_Read+0x112>
900021a2:	b9a2      	cbnz	r2, 900021ce <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
900021a4:	464b      	mov	r3, r9
900021a6:	2180      	movs	r1, #128	; 0x80
900021a8:	4620      	mov	r0, r4
900021aa:	9600      	str	r6, [sp, #0]
900021ac:	f7ff fda6 	bl	90001cfc <I2C_WaitOnFlagUntilTimeout>
900021b0:	2800      	cmp	r0, #0
900021b2:	d19b      	bne.n	900020ec <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
900021b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
900021b6:	b29b      	uxth	r3, r3
900021b8:	2bff      	cmp	r3, #255	; 0xff
900021ba:	d92f      	bls.n	9000221c <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
900021bc:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
900021be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
900021c2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
900021c4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
900021c6:	4639      	mov	r1, r7
900021c8:	4620      	mov	r0, r4
900021ca:	f7ff fd21 	bl	90001c10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
900021ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
900021d0:	b29b      	uxth	r3, r3
900021d2:	2b00      	cmp	r3, #0
900021d4:	d1ca      	bne.n	9000216c <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
900021d6:	4632      	mov	r2, r6
900021d8:	4649      	mov	r1, r9
900021da:	4620      	mov	r0, r4
900021dc:	f7ff fd69 	bl	90001cb2 <I2C_WaitOnSTOPFlagUntilTimeout>
900021e0:	2800      	cmp	r0, #0
900021e2:	d183      	bne.n	900020ec <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900021e4:	6823      	ldr	r3, [r4, #0]
900021e6:	2120      	movs	r1, #32
900021e8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
900021ea:	685a      	ldr	r2, [r3, #4]
900021ec:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
900021f0:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
900021f4:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
900021f8:	f022 0201 	bic.w	r2, r2, #1
900021fc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
900021fe:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90002202:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90002206:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
9000220a:	e770      	b.n	900020ee <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
9000220c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
9000220e:	9300      	str	r3, [sp, #0]
90002210:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
90002214:	b292      	uxth	r2, r2
90002216:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
90002218:	b2d2      	uxtb	r2, r2
9000221a:	e7a3      	b.n	90002164 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
9000221c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
9000221e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
90002222:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
90002224:	b292      	uxth	r2, r2
90002226:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90002228:	b2d2      	uxtb	r2, r2
9000222a:	e7cc      	b.n	900021c6 <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
9000222c:	2002      	movs	r0, #2
9000222e:	e75e      	b.n	900020ee <HAL_I2C_Mem_Read+0x32>
90002230:	80002400 	.word	0x80002400

90002234 <HAL_I2C_GetState>:
  return hi2c->State;
90002234:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
90002238:	4770      	bx	lr

9000223a <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000223a:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000223c:	f8d1 c000 	ldr.w	ip, [r1]
{
90002240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90002244:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90002246:	6804      	ldr	r4, [r0, #0]
90002248:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000224a:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000224e:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90002250:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
90002252:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
90002256:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000225a:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000225c:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90002260:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90002264:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90002266:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90002268:	68e0      	ldr	r0, [r4, #12]
9000226a:	f3c0 400b 	ubfx	r0, r0, #16, #12
9000226e:	4430      	add	r0, r6
90002270:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90002274:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90002276:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90002278:	68e0      	ldr	r0, [r4, #12]
9000227a:	f3c0 000a 	ubfx	r0, r0, #0, #11
9000227e:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
90002280:	6898      	ldr	r0, [r3, #8]
90002282:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
90002286:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
90002288:	6888      	ldr	r0, [r1, #8]
9000228a:	68e6      	ldr	r6, [r4, #12]
9000228c:	3001      	adds	r0, #1
9000228e:	f3c6 060a 	ubfx	r6, r6, #0, #11
90002292:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
90002294:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
90002296:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
9000229a:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
9000229c:	6918      	ldr	r0, [r3, #16]
9000229e:	f020 0007 	bic.w	r0, r0, #7
900022a2:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
900022a4:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
900022a6:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
900022a8:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
900022ac:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
900022b0:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
900022b4:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
900022b8:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
900022bc:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
900022c0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
900022c4:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
900022c6:	6958      	ldr	r0, [r3, #20]
900022c8:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
900022cc:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
900022ce:	6948      	ldr	r0, [r1, #20]
900022d0:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
900022d2:	69d8      	ldr	r0, [r3, #28]
900022d4:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
900022d8:	f020 0007 	bic.w	r0, r0, #7
900022dc:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
900022de:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
900022e2:	4305      	orrs	r5, r0
900022e4:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
900022e6:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
900022e8:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
900022ea:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
900022ee:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
900022f0:	b31e      	cbz	r6, 9000233a <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
900022f2:	2e01      	cmp	r6, #1
900022f4:	d023      	beq.n	9000233e <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
900022f6:	1eb0      	subs	r0, r6, #2
900022f8:	2802      	cmp	r0, #2
900022fa:	d922      	bls.n	90002342 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
900022fc:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
900022fe:	bf0c      	ite	eq
90002300:	2002      	moveq	r0, #2
90002302:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
90002304:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
90002306:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
9000230a:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
9000230e:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
90002310:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90002312:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
90002314:	4345      	muls	r5, r0
90002316:	4378      	muls	r0, r7
90002318:	3003      	adds	r0, #3
9000231a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
9000231e:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
90002320:	6b18      	ldr	r0, [r3, #48]	; 0x30
90002322:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
90002326:	f020 0007 	bic.w	r0, r0, #7
9000232a:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
9000232c:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
9000232e:	58a3      	ldr	r3, [r4, r2]
90002330:	f043 0301 	orr.w	r3, r3, #1
90002334:	50a3      	str	r3, [r4, r2]
}
90002336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
9000233a:	2004      	movs	r0, #4
9000233c:	e7e2      	b.n	90002304 <LTDC_SetConfig+0xca>
    tmp = 3U;
9000233e:	2003      	movs	r0, #3
90002340:	e7e0      	b.n	90002304 <LTDC_SetConfig+0xca>
    tmp = 2U;
90002342:	2002      	movs	r0, #2
90002344:	e7de      	b.n	90002304 <LTDC_SetConfig+0xca>

90002346 <HAL_LTDC_MspInit>:
}
90002346:	4770      	bx	lr

90002348 <HAL_LTDC_Init>:
{
90002348:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
9000234a:	4604      	mov	r4, r0
9000234c:	2800      	cmp	r0, #0
9000234e:	d063      	beq.n	90002418 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
90002350:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
90002354:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90002358:	b91b      	cbnz	r3, 90002362 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
9000235a:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
9000235e:	f7ff fff2 	bl	90002346 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
90002362:	2302      	movs	r3, #2
90002364:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90002368:	6823      	ldr	r3, [r4, #0]
9000236a:	699a      	ldr	r2, [r3, #24]
9000236c:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
90002370:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90002372:	6999      	ldr	r1, [r3, #24]
90002374:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
90002378:	4302      	orrs	r2, r0
9000237a:	68e0      	ldr	r0, [r4, #12]
9000237c:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
9000237e:	6920      	ldr	r0, [r4, #16]
90002380:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
90002382:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90002384:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
90002386:	4925      	ldr	r1, [pc, #148]	; (9000241c <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90002388:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
9000238a:	689a      	ldr	r2, [r3, #8]
9000238c:	400a      	ands	r2, r1
9000238e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
90002390:	689a      	ldr	r2, [r3, #8]
90002392:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
90002396:	69a0      	ldr	r0, [r4, #24]
90002398:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
9000239a:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
9000239c:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
9000239e:	68da      	ldr	r2, [r3, #12]
900023a0:	400a      	ands	r2, r1
900023a2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
900023a4:	68da      	ldr	r2, [r3, #12]
900023a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
900023aa:	6a20      	ldr	r0, [r4, #32]
900023ac:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
900023ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
900023b0:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
900023b2:	691a      	ldr	r2, [r3, #16]
900023b4:	400a      	ands	r2, r1
900023b6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
900023b8:	691a      	ldr	r2, [r3, #16]
900023ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
900023be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
900023c0:	4302      	orrs	r2, r0
900023c2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
900023c4:	695a      	ldr	r2, [r3, #20]
900023c6:	4011      	ands	r1, r2
900023c8:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
900023ca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
900023cc:	695a      	ldr	r2, [r3, #20]
900023ce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
900023d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
900023d4:	430a      	orrs	r2, r1
900023d6:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
900023d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
900023da:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
900023de:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
900023e2:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
900023e6:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
900023e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
900023ea:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
900023ee:	430a      	orrs	r2, r1
900023f0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
900023f4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
900023f8:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
900023fa:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
900023fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900023fe:	f042 0206 	orr.w	r2, r2, #6
90002402:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
90002404:	699a      	ldr	r2, [r3, #24]
90002406:	f042 0201 	orr.w	r2, r2, #1
9000240a:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
9000240c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
9000240e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
90002412:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
90002416:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
90002418:	2001      	movs	r0, #1
9000241a:	e7fc      	b.n	90002416 <HAL_LTDC_Init+0xce>
9000241c:	f000f800 	.word	0xf000f800

90002420 <HAL_LTDC_ConfigLayer>:
{
90002420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
90002424:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
90002428:	4606      	mov	r6, r0
9000242a:	460f      	mov	r7, r1
9000242c:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
9000242e:	2b01      	cmp	r3, #1
90002430:	f04f 0002 	mov.w	r0, #2
90002434:	d01f      	beq.n	90002476 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90002436:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
90002438:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000243c:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000243e:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90002442:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
90002446:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000244a:	3438      	adds	r4, #56	; 0x38
9000244c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
9000244e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90002450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90002452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90002454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90002456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90002458:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
9000245a:	4630      	mov	r0, r6
9000245c:	4662      	mov	r2, ip
9000245e:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90002460:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
90002462:	f7ff feea 	bl	9000223a <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90002466:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
90002468:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
9000246a:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
9000246e:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
90002472:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
90002476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

9000247a <HAL_LTDC_GetState>:
  return hltdc->State;
9000247a:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
9000247e:	4770      	bx	lr

90002480 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
90002480:	4b19      	ldr	r3, [pc, #100]	; (900024e8 <HAL_PWREx_EnableOverDrive+0x68>)
{
90002482:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
90002484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
90002486:	4c19      	ldr	r4, [pc, #100]	; (900024ec <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
90002488:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
9000248c:	641a      	str	r2, [r3, #64]	; 0x40
9000248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90002490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90002494:	9301      	str	r3, [sp, #4]
90002496:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
90002498:	6823      	ldr	r3, [r4, #0]
9000249a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000249e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
900024a0:	f7fe ff60 	bl	90001364 <HAL_GetTick>
900024a4:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
900024a6:	6863      	ldr	r3, [r4, #4]
900024a8:	03da      	lsls	r2, r3, #15
900024aa:	d50c      	bpl.n	900024c6 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
900024ac:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
900024ae:	4d0f      	ldr	r5, [pc, #60]	; (900024ec <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
900024b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900024b4:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
900024b6:	f7fe ff55 	bl	90001364 <HAL_GetTick>
900024ba:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
900024bc:	686b      	ldr	r3, [r5, #4]
900024be:	039b      	lsls	r3, r3, #14
900024c0:	d50a      	bpl.n	900024d8 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
900024c2:	2000      	movs	r0, #0
900024c4:	e006      	b.n	900024d4 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
900024c6:	f7fe ff4d 	bl	90001364 <HAL_GetTick>
900024ca:	1b40      	subs	r0, r0, r5
900024cc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
900024d0:	d9e9      	bls.n	900024a6 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
900024d2:	2003      	movs	r0, #3
}
900024d4:	b003      	add	sp, #12
900024d6:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
900024d8:	f7fe ff44 	bl	90001364 <HAL_GetTick>
900024dc:	1b00      	subs	r0, r0, r4
900024de:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
900024e2:	d9eb      	bls.n	900024bc <HAL_PWREx_EnableOverDrive+0x3c>
900024e4:	e7f5      	b.n	900024d2 <HAL_PWREx_EnableOverDrive+0x52>
900024e6:	bf00      	nop
900024e8:	40023800 	.word	0x40023800
900024ec:	40007000 	.word	0x40007000

900024f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
900024f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
900024f4:	4604      	mov	r4, r0
900024f6:	b340      	cbz	r0, 9000254a <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
900024f8:	6803      	ldr	r3, [r0, #0]
900024fa:	07d8      	lsls	r0, r3, #31
900024fc:	d410      	bmi.n	90002520 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
900024fe:	6823      	ldr	r3, [r4, #0]
90002500:	0799      	lsls	r1, r3, #30
90002502:	d464      	bmi.n	900025ce <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
90002504:	6823      	ldr	r3, [r4, #0]
90002506:	0719      	lsls	r1, r3, #28
90002508:	f100 80aa 	bmi.w	90002660 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
9000250c:	6823      	ldr	r3, [r4, #0]
9000250e:	075a      	lsls	r2, r3, #29
90002510:	f100 80cb 	bmi.w	900026aa <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
90002514:	69a2      	ldr	r2, [r4, #24]
90002516:	2a00      	cmp	r2, #0
90002518:	f040 8134 	bne.w	90002784 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
9000251c:	2000      	movs	r0, #0
9000251e:	e02b      	b.n	90002578 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
90002520:	4b96      	ldr	r3, [pc, #600]	; (9000277c <HAL_RCC_OscConfig+0x28c>)
90002522:	689a      	ldr	r2, [r3, #8]
90002524:	f002 020c 	and.w	r2, r2, #12
90002528:	2a04      	cmp	r2, #4
9000252a:	d007      	beq.n	9000253c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
9000252c:	689a      	ldr	r2, [r3, #8]
9000252e:	f002 020c 	and.w	r2, r2, #12
90002532:	2a08      	cmp	r2, #8
90002534:	d10b      	bne.n	9000254e <HAL_RCC_OscConfig+0x5e>
90002536:	685a      	ldr	r2, [r3, #4]
90002538:	0252      	lsls	r2, r2, #9
9000253a:	d508      	bpl.n	9000254e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
9000253c:	4b8f      	ldr	r3, [pc, #572]	; (9000277c <HAL_RCC_OscConfig+0x28c>)
9000253e:	681b      	ldr	r3, [r3, #0]
90002540:	039b      	lsls	r3, r3, #14
90002542:	d5dc      	bpl.n	900024fe <HAL_RCC_OscConfig+0xe>
90002544:	6863      	ldr	r3, [r4, #4]
90002546:	2b00      	cmp	r3, #0
90002548:	d1d9      	bne.n	900024fe <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
9000254a:	2001      	movs	r0, #1
9000254c:	e014      	b.n	90002578 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000254e:	6862      	ldr	r2, [r4, #4]
90002550:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
90002554:	d113      	bne.n	9000257e <HAL_RCC_OscConfig+0x8e>
90002556:	681a      	ldr	r2, [r3, #0]
90002558:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
9000255c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
9000255e:	f7fe ff01 	bl	90001364 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90002562:	4e86      	ldr	r6, [pc, #536]	; (9000277c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
90002564:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90002566:	6833      	ldr	r3, [r6, #0]
90002568:	039f      	lsls	r7, r3, #14
9000256a:	d4c8      	bmi.n	900024fe <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000256c:	f7fe fefa 	bl	90001364 <HAL_GetTick>
90002570:	1b40      	subs	r0, r0, r5
90002572:	2864      	cmp	r0, #100	; 0x64
90002574:	d9f7      	bls.n	90002566 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
90002576:	2003      	movs	r0, #3
}
90002578:	b002      	add	sp, #8
9000257a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000257e:	4d7f      	ldr	r5, [pc, #508]	; (9000277c <HAL_RCC_OscConfig+0x28c>)
90002580:	682b      	ldr	r3, [r5, #0]
90002582:	b992      	cbnz	r2, 900025aa <HAL_RCC_OscConfig+0xba>
90002584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90002588:	602b      	str	r3, [r5, #0]
9000258a:	682b      	ldr	r3, [r5, #0]
9000258c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90002590:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
90002592:	f7fe fee7 	bl	90001364 <HAL_GetTick>
90002596:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
90002598:	682b      	ldr	r3, [r5, #0]
9000259a:	0398      	lsls	r0, r3, #14
9000259c:	d5af      	bpl.n	900024fe <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000259e:	f7fe fee1 	bl	90001364 <HAL_GetTick>
900025a2:	1b80      	subs	r0, r0, r6
900025a4:	2864      	cmp	r0, #100	; 0x64
900025a6:	d9f7      	bls.n	90002598 <HAL_RCC_OscConfig+0xa8>
900025a8:	e7e5      	b.n	90002576 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
900025aa:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
900025ae:	d107      	bne.n	900025c0 <HAL_RCC_OscConfig+0xd0>
900025b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
900025b4:	602b      	str	r3, [r5, #0]
900025b6:	682b      	ldr	r3, [r5, #0]
900025b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900025bc:	602b      	str	r3, [r5, #0]
900025be:	e7ce      	b.n	9000255e <HAL_RCC_OscConfig+0x6e>
900025c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
900025c4:	602b      	str	r3, [r5, #0]
900025c6:	682b      	ldr	r3, [r5, #0]
900025c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
900025cc:	e7f6      	b.n	900025bc <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
900025ce:	4b6b      	ldr	r3, [pc, #428]	; (9000277c <HAL_RCC_OscConfig+0x28c>)
900025d0:	689a      	ldr	r2, [r3, #8]
900025d2:	f012 0f0c 	tst.w	r2, #12
900025d6:	d007      	beq.n	900025e8 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
900025d8:	689a      	ldr	r2, [r3, #8]
900025da:	f002 020c 	and.w	r2, r2, #12
900025de:	2a08      	cmp	r2, #8
900025e0:	d111      	bne.n	90002606 <HAL_RCC_OscConfig+0x116>
900025e2:	685a      	ldr	r2, [r3, #4]
900025e4:	0251      	lsls	r1, r2, #9
900025e6:	d40e      	bmi.n	90002606 <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
900025e8:	4b64      	ldr	r3, [pc, #400]	; (9000277c <HAL_RCC_OscConfig+0x28c>)
900025ea:	681a      	ldr	r2, [r3, #0]
900025ec:	0792      	lsls	r2, r2, #30
900025ee:	d502      	bpl.n	900025f6 <HAL_RCC_OscConfig+0x106>
900025f0:	68e2      	ldr	r2, [r4, #12]
900025f2:	2a01      	cmp	r2, #1
900025f4:	d1a9      	bne.n	9000254a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
900025f6:	681a      	ldr	r2, [r3, #0]
900025f8:	6921      	ldr	r1, [r4, #16]
900025fa:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
900025fe:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
90002602:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
90002604:	e77e      	b.n	90002504 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
90002606:	68e2      	ldr	r2, [r4, #12]
90002608:	b1c2      	cbz	r2, 9000263c <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
9000260a:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
9000260c:	4d5b      	ldr	r5, [pc, #364]	; (9000277c <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
9000260e:	f042 0201 	orr.w	r2, r2, #1
90002612:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
90002614:	f7fe fea6 	bl	90001364 <HAL_GetTick>
90002618:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
9000261a:	682b      	ldr	r3, [r5, #0]
9000261c:	079f      	lsls	r7, r3, #30
9000261e:	d507      	bpl.n	90002630 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90002620:	682b      	ldr	r3, [r5, #0]
90002622:	6922      	ldr	r2, [r4, #16]
90002624:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
90002628:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9000262c:	602b      	str	r3, [r5, #0]
9000262e:	e769      	b.n	90002504 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90002630:	f7fe fe98 	bl	90001364 <HAL_GetTick>
90002634:	1b80      	subs	r0, r0, r6
90002636:	2802      	cmp	r0, #2
90002638:	d9ef      	bls.n	9000261a <HAL_RCC_OscConfig+0x12a>
9000263a:	e79c      	b.n	90002576 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
9000263c:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
9000263e:	4e4f      	ldr	r6, [pc, #316]	; (9000277c <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
90002640:	f022 0201 	bic.w	r2, r2, #1
90002644:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
90002646:	f7fe fe8d 	bl	90001364 <HAL_GetTick>
9000264a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
9000264c:	6833      	ldr	r3, [r6, #0]
9000264e:	0798      	lsls	r0, r3, #30
90002650:	f57f af58 	bpl.w	90002504 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90002654:	f7fe fe86 	bl	90001364 <HAL_GetTick>
90002658:	1b40      	subs	r0, r0, r5
9000265a:	2802      	cmp	r0, #2
9000265c:	d9f6      	bls.n	9000264c <HAL_RCC_OscConfig+0x15c>
9000265e:	e78a      	b.n	90002576 <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
90002660:	6963      	ldr	r3, [r4, #20]
90002662:	4d46      	ldr	r5, [pc, #280]	; (9000277c <HAL_RCC_OscConfig+0x28c>)
90002664:	b183      	cbz	r3, 90002688 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
90002666:	6f6b      	ldr	r3, [r5, #116]	; 0x74
90002668:	f043 0301 	orr.w	r3, r3, #1
9000266c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
9000266e:	f7fe fe79 	bl	90001364 <HAL_GetTick>
90002672:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
90002674:	6f6b      	ldr	r3, [r5, #116]	; 0x74
90002676:	079b      	lsls	r3, r3, #30
90002678:	f53f af48 	bmi.w	9000250c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000267c:	f7fe fe72 	bl	90001364 <HAL_GetTick>
90002680:	1b80      	subs	r0, r0, r6
90002682:	2802      	cmp	r0, #2
90002684:	d9f6      	bls.n	90002674 <HAL_RCC_OscConfig+0x184>
90002686:	e776      	b.n	90002576 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
90002688:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000268a:	f023 0301 	bic.w	r3, r3, #1
9000268e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
90002690:	f7fe fe68 	bl	90001364 <HAL_GetTick>
90002694:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
90002696:	6f6b      	ldr	r3, [r5, #116]	; 0x74
90002698:	079f      	lsls	r7, r3, #30
9000269a:	f57f af37 	bpl.w	9000250c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000269e:	f7fe fe61 	bl	90001364 <HAL_GetTick>
900026a2:	1b80      	subs	r0, r0, r6
900026a4:	2802      	cmp	r0, #2
900026a6:	d9f6      	bls.n	90002696 <HAL_RCC_OscConfig+0x1a6>
900026a8:	e765      	b.n	90002576 <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
900026aa:	4b34      	ldr	r3, [pc, #208]	; (9000277c <HAL_RCC_OscConfig+0x28c>)
900026ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
900026ae:	00d0      	lsls	r0, r2, #3
900026b0:	d427      	bmi.n	90002702 <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
900026b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
900026b4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
900026b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
900026ba:	641a      	str	r2, [r3, #64]	; 0x40
900026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900026be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
900026c2:	9301      	str	r3, [sp, #4]
900026c4:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
900026c6:	4d2e      	ldr	r5, [pc, #184]	; (90002780 <HAL_RCC_OscConfig+0x290>)
900026c8:	682b      	ldr	r3, [r5, #0]
900026ca:	05d9      	lsls	r1, r3, #23
900026cc:	d51b      	bpl.n	90002706 <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
900026ce:	68a3      	ldr	r3, [r4, #8]
900026d0:	4d2a      	ldr	r5, [pc, #168]	; (9000277c <HAL_RCC_OscConfig+0x28c>)
900026d2:	2b01      	cmp	r3, #1
900026d4:	d127      	bne.n	90002726 <HAL_RCC_OscConfig+0x236>
900026d6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
900026d8:	f043 0301 	orr.w	r3, r3, #1
900026dc:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
900026de:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
900026e2:	f7fe fe3f 	bl	90001364 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
900026e6:	4e25      	ldr	r6, [pc, #148]	; (9000277c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
900026e8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
900026ea:	6f33      	ldr	r3, [r6, #112]	; 0x70
900026ec:	079b      	lsls	r3, r3, #30
900026ee:	d53f      	bpl.n	90002770 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
900026f0:	2f00      	cmp	r7, #0
900026f2:	f43f af0f 	beq.w	90002514 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
900026f6:	4a21      	ldr	r2, [pc, #132]	; (9000277c <HAL_RCC_OscConfig+0x28c>)
900026f8:	6c13      	ldr	r3, [r2, #64]	; 0x40
900026fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
900026fe:	6413      	str	r3, [r2, #64]	; 0x40
90002700:	e708      	b.n	90002514 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
90002702:	2700      	movs	r7, #0
90002704:	e7df      	b.n	900026c6 <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
90002706:	682b      	ldr	r3, [r5, #0]
90002708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000270c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
9000270e:	f7fe fe29 	bl	90001364 <HAL_GetTick>
90002712:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
90002714:	682b      	ldr	r3, [r5, #0]
90002716:	05da      	lsls	r2, r3, #23
90002718:	d4d9      	bmi.n	900026ce <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000271a:	f7fe fe23 	bl	90001364 <HAL_GetTick>
9000271e:	1b80      	subs	r0, r0, r6
90002720:	2864      	cmp	r0, #100	; 0x64
90002722:	d9f7      	bls.n	90002714 <HAL_RCC_OscConfig+0x224>
90002724:	e727      	b.n	90002576 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90002726:	b9ab      	cbnz	r3, 90002754 <HAL_RCC_OscConfig+0x264>
90002728:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000272a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000272e:	f023 0301 	bic.w	r3, r3, #1
90002732:	672b      	str	r3, [r5, #112]	; 0x70
90002734:	6f2b      	ldr	r3, [r5, #112]	; 0x70
90002736:	f023 0304 	bic.w	r3, r3, #4
9000273a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
9000273c:	f7fe fe12 	bl	90001364 <HAL_GetTick>
90002740:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
90002742:	6f2b      	ldr	r3, [r5, #112]	; 0x70
90002744:	0798      	lsls	r0, r3, #30
90002746:	d5d3      	bpl.n	900026f0 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90002748:	f7fe fe0c 	bl	90001364 <HAL_GetTick>
9000274c:	1b80      	subs	r0, r0, r6
9000274e:	4540      	cmp	r0, r8
90002750:	d9f7      	bls.n	90002742 <HAL_RCC_OscConfig+0x252>
90002752:	e710      	b.n	90002576 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90002754:	2b05      	cmp	r3, #5
90002756:	6f2b      	ldr	r3, [r5, #112]	; 0x70
90002758:	d103      	bne.n	90002762 <HAL_RCC_OscConfig+0x272>
9000275a:	f043 0304 	orr.w	r3, r3, #4
9000275e:	672b      	str	r3, [r5, #112]	; 0x70
90002760:	e7b9      	b.n	900026d6 <HAL_RCC_OscConfig+0x1e6>
90002762:	f023 0301 	bic.w	r3, r3, #1
90002766:	672b      	str	r3, [r5, #112]	; 0x70
90002768:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000276a:	f023 0304 	bic.w	r3, r3, #4
9000276e:	e7b5      	b.n	900026dc <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90002770:	f7fe fdf8 	bl	90001364 <HAL_GetTick>
90002774:	1b40      	subs	r0, r0, r5
90002776:	4540      	cmp	r0, r8
90002778:	d9b7      	bls.n	900026ea <HAL_RCC_OscConfig+0x1fa>
9000277a:	e6fc      	b.n	90002576 <HAL_RCC_OscConfig+0x86>
9000277c:	40023800 	.word	0x40023800
90002780:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
90002784:	4d38      	ldr	r5, [pc, #224]	; (90002868 <HAL_RCC_OscConfig+0x378>)
90002786:	68ab      	ldr	r3, [r5, #8]
90002788:	f003 030c 	and.w	r3, r3, #12
9000278c:	2b08      	cmp	r3, #8
9000278e:	d041      	beq.n	90002814 <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
90002790:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90002792:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
90002794:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90002798:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000279a:	d12e      	bne.n	900027fa <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
9000279c:	f7fe fde2 	bl	90001364 <HAL_GetTick>
900027a0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
900027a2:	682b      	ldr	r3, [r5, #0]
900027a4:	0199      	lsls	r1, r3, #6
900027a6:	d422      	bmi.n	900027ee <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
900027a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
900027aa:	085b      	lsrs	r3, r3, #1
900027ac:	1e5a      	subs	r2, r3, #1
900027ae:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
900027b2:	430b      	orrs	r3, r1
900027b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
900027b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
900027ba:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
900027be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
900027c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
900027c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
900027c8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
900027ca:	682b      	ldr	r3, [r5, #0]
900027cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
900027d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
900027d2:	f7fe fdc7 	bl	90001364 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
900027d6:	4d24      	ldr	r5, [pc, #144]	; (90002868 <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
900027d8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
900027da:	682b      	ldr	r3, [r5, #0]
900027dc:	019a      	lsls	r2, r3, #6
900027de:	f53f ae9d 	bmi.w	9000251c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900027e2:	f7fe fdbf 	bl	90001364 <HAL_GetTick>
900027e6:	1b00      	subs	r0, r0, r4
900027e8:	2802      	cmp	r0, #2
900027ea:	d9f6      	bls.n	900027da <HAL_RCC_OscConfig+0x2ea>
900027ec:	e6c3      	b.n	90002576 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900027ee:	f7fe fdb9 	bl	90001364 <HAL_GetTick>
900027f2:	1b80      	subs	r0, r0, r6
900027f4:	2802      	cmp	r0, #2
900027f6:	d9d4      	bls.n	900027a2 <HAL_RCC_OscConfig+0x2b2>
900027f8:	e6bd      	b.n	90002576 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
900027fa:	f7fe fdb3 	bl	90001364 <HAL_GetTick>
900027fe:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90002800:	682b      	ldr	r3, [r5, #0]
90002802:	019b      	lsls	r3, r3, #6
90002804:	f57f ae8a 	bpl.w	9000251c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90002808:	f7fe fdac 	bl	90001364 <HAL_GetTick>
9000280c:	1b00      	subs	r0, r0, r4
9000280e:	2802      	cmp	r0, #2
90002810:	d9f6      	bls.n	90002800 <HAL_RCC_OscConfig+0x310>
90002812:	e6b0      	b.n	90002576 <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90002814:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
90002816:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90002818:	f43f ae97 	beq.w	9000254a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000281c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90002820:	69e1      	ldr	r1, [r4, #28]
90002822:	428a      	cmp	r2, r1
90002824:	f47f ae91 	bne.w	9000254a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
90002828:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000282c:	6a21      	ldr	r1, [r4, #32]
9000282e:	428a      	cmp	r2, r1
90002830:	f47f ae8b 	bne.w	9000254a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
90002834:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
90002838:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
9000283a:	401a      	ands	r2, r3
9000283c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
90002840:	f47f ae83 	bne.w	9000254a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
90002844:	6aa2      	ldr	r2, [r4, #40]	; 0x28
90002846:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
9000284a:	0852      	lsrs	r2, r2, #1
9000284c:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
9000284e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
90002852:	f47f ae7a 	bne.w	9000254a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
90002856:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
9000285a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
9000285c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
90002860:	f43f ae5c 	beq.w	9000251c <HAL_RCC_OscConfig+0x2c>
90002864:	e671      	b.n	9000254a <HAL_RCC_OscConfig+0x5a>
90002866:	bf00      	nop
90002868:	40023800 	.word	0x40023800

9000286c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000286c:	4913      	ldr	r1, [pc, #76]	; (900028bc <HAL_RCC_GetSysClockFreq+0x50>)
{
9000286e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
90002870:	688b      	ldr	r3, [r1, #8]
90002872:	f003 030c 	and.w	r3, r3, #12
90002876:	2b04      	cmp	r3, #4
90002878:	d01b      	beq.n	900028b2 <HAL_RCC_GetSysClockFreq+0x46>
9000287a:	2b08      	cmp	r3, #8
9000287c:	d11b      	bne.n	900028b6 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
9000287e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
90002880:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
90002882:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
90002884:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
90002888:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
9000288c:	f3c1 1188 	ubfx	r1, r1, #6, #9
90002890:	bf1a      	itte	ne
90002892:	480b      	ldrne	r0, [pc, #44]	; (900028c0 <HAL_RCC_GetSysClockFreq+0x54>)
90002894:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
90002896:	480b      	ldreq	r0, [pc, #44]	; (900028c4 <HAL_RCC_GetSysClockFreq+0x58>)
90002898:	fba1 0100 	umull	r0, r1, r1, r0
9000289c:	f7fd fcb4 	bl	90000208 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
900028a0:	4b06      	ldr	r3, [pc, #24]	; (900028bc <HAL_RCC_GetSysClockFreq+0x50>)
900028a2:	685b      	ldr	r3, [r3, #4]
900028a4:	f3c3 4301 	ubfx	r3, r3, #16, #2
900028a8:	3301      	adds	r3, #1
900028aa:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
900028ac:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
900028b0:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
900028b2:	4803      	ldr	r0, [pc, #12]	; (900028c0 <HAL_RCC_GetSysClockFreq+0x54>)
900028b4:	e7fc      	b.n	900028b0 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
900028b6:	4803      	ldr	r0, [pc, #12]	; (900028c4 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
900028b8:	e7fa      	b.n	900028b0 <HAL_RCC_GetSysClockFreq+0x44>
900028ba:	bf00      	nop
900028bc:	40023800 	.word	0x40023800
900028c0:	017d7840 	.word	0x017d7840
900028c4:	00f42400 	.word	0x00f42400

900028c8 <HAL_RCC_ClockConfig>:
{
900028c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900028cc:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
900028ce:	4604      	mov	r4, r0
900028d0:	b910      	cbnz	r0, 900028d8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
900028d2:	2001      	movs	r0, #1
}
900028d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
900028d8:	4a46      	ldr	r2, [pc, #280]	; (900029f4 <HAL_RCC_ClockConfig+0x12c>)
900028da:	6813      	ldr	r3, [r2, #0]
900028dc:	f003 030f 	and.w	r3, r3, #15
900028e0:	428b      	cmp	r3, r1
900028e2:	d328      	bcc.n	90002936 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
900028e4:	6822      	ldr	r2, [r4, #0]
900028e6:	0797      	lsls	r7, r2, #30
900028e8:	d430      	bmi.n	9000294c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
900028ea:	07d0      	lsls	r0, r2, #31
900028ec:	d444      	bmi.n	90002978 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
900028ee:	4a41      	ldr	r2, [pc, #260]	; (900029f4 <HAL_RCC_ClockConfig+0x12c>)
900028f0:	6813      	ldr	r3, [r2, #0]
900028f2:	f003 030f 	and.w	r3, r3, #15
900028f6:	42ab      	cmp	r3, r5
900028f8:	d867      	bhi.n	900029ca <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
900028fa:	6822      	ldr	r2, [r4, #0]
900028fc:	0751      	lsls	r1, r2, #29
900028fe:	d470      	bmi.n	900029e2 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90002900:	0713      	lsls	r3, r2, #28
90002902:	d507      	bpl.n	90002914 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
90002904:	4a3c      	ldr	r2, [pc, #240]	; (900029f8 <HAL_RCC_ClockConfig+0x130>)
90002906:	6921      	ldr	r1, [r4, #16]
90002908:	6893      	ldr	r3, [r2, #8]
9000290a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
9000290e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
90002912:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
90002914:	f7ff ffaa 	bl	9000286c <HAL_RCC_GetSysClockFreq>
90002918:	4b37      	ldr	r3, [pc, #220]	; (900029f8 <HAL_RCC_ClockConfig+0x130>)
9000291a:	4a38      	ldr	r2, [pc, #224]	; (900029fc <HAL_RCC_ClockConfig+0x134>)
9000291c:	689b      	ldr	r3, [r3, #8]
9000291e:	f3c3 1303 	ubfx	r3, r3, #4, #4
90002922:	5cd3      	ldrb	r3, [r2, r3]
90002924:	40d8      	lsrs	r0, r3
90002926:	4b36      	ldr	r3, [pc, #216]	; (90002a00 <HAL_RCC_ClockConfig+0x138>)
90002928:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
9000292a:	4b36      	ldr	r3, [pc, #216]	; (90002a04 <HAL_RCC_ClockConfig+0x13c>)
9000292c:	6818      	ldr	r0, [r3, #0]
9000292e:	f7fe fcd5 	bl	900012dc <HAL_InitTick>
  return HAL_OK;
90002932:	2000      	movs	r0, #0
90002934:	e7ce      	b.n	900028d4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
90002936:	6813      	ldr	r3, [r2, #0]
90002938:	f023 030f 	bic.w	r3, r3, #15
9000293c:	430b      	orrs	r3, r1
9000293e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90002940:	6813      	ldr	r3, [r2, #0]
90002942:	f003 030f 	and.w	r3, r3, #15
90002946:	428b      	cmp	r3, r1
90002948:	d1c3      	bne.n	900028d2 <HAL_RCC_ClockConfig+0xa>
9000294a:	e7cb      	b.n	900028e4 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000294c:	f012 0f04 	tst.w	r2, #4
90002950:	4b29      	ldr	r3, [pc, #164]	; (900029f8 <HAL_RCC_ClockConfig+0x130>)
90002952:	d003      	beq.n	9000295c <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
90002954:	6899      	ldr	r1, [r3, #8]
90002956:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
9000295a:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000295c:	0716      	lsls	r6, r2, #28
9000295e:	d503      	bpl.n	90002968 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
90002960:	6899      	ldr	r1, [r3, #8]
90002962:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
90002966:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90002968:	4923      	ldr	r1, [pc, #140]	; (900029f8 <HAL_RCC_ClockConfig+0x130>)
9000296a:	68a0      	ldr	r0, [r4, #8]
9000296c:	688b      	ldr	r3, [r1, #8]
9000296e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
90002972:	4303      	orrs	r3, r0
90002974:	608b      	str	r3, [r1, #8]
90002976:	e7b8      	b.n	900028ea <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90002978:	6861      	ldr	r1, [r4, #4]
9000297a:	4b1f      	ldr	r3, [pc, #124]	; (900029f8 <HAL_RCC_ClockConfig+0x130>)
9000297c:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
9000297e:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90002980:	d11b      	bne.n	900029ba <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90002982:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90002986:	d0a4      	beq.n	900028d2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
90002988:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000298a:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000298e:	4f1a      	ldr	r7, [pc, #104]	; (900029f8 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
90002990:	f022 0203 	bic.w	r2, r2, #3
90002994:	430a      	orrs	r2, r1
90002996:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
90002998:	f7fe fce4 	bl	90001364 <HAL_GetTick>
9000299c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000299e:	68bb      	ldr	r3, [r7, #8]
900029a0:	6862      	ldr	r2, [r4, #4]
900029a2:	f003 030c 	and.w	r3, r3, #12
900029a6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
900029aa:	d0a0      	beq.n	900028ee <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
900029ac:	f7fe fcda 	bl	90001364 <HAL_GetTick>
900029b0:	1b80      	subs	r0, r0, r6
900029b2:	4540      	cmp	r0, r8
900029b4:	d9f3      	bls.n	9000299e <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
900029b6:	2003      	movs	r0, #3
900029b8:	e78c      	b.n	900028d4 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
900029ba:	2902      	cmp	r1, #2
900029bc:	d102      	bne.n	900029c4 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
900029be:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
900029c2:	e7e0      	b.n	90002986 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
900029c4:	f012 0f02 	tst.w	r2, #2
900029c8:	e7dd      	b.n	90002986 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
900029ca:	6813      	ldr	r3, [r2, #0]
900029cc:	f023 030f 	bic.w	r3, r3, #15
900029d0:	432b      	orrs	r3, r5
900029d2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
900029d4:	6813      	ldr	r3, [r2, #0]
900029d6:	f003 030f 	and.w	r3, r3, #15
900029da:	42ab      	cmp	r3, r5
900029dc:	f47f af79 	bne.w	900028d2 <HAL_RCC_ClockConfig+0xa>
900029e0:	e78b      	b.n	900028fa <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
900029e2:	4905      	ldr	r1, [pc, #20]	; (900029f8 <HAL_RCC_ClockConfig+0x130>)
900029e4:	68e0      	ldr	r0, [r4, #12]
900029e6:	688b      	ldr	r3, [r1, #8]
900029e8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
900029ec:	4303      	orrs	r3, r0
900029ee:	608b      	str	r3, [r1, #8]
900029f0:	e786      	b.n	90002900 <HAL_RCC_ClockConfig+0x38>
900029f2:	bf00      	nop
900029f4:	40023c00 	.word	0x40023c00
900029f8:	40023800 	.word	0x40023800
900029fc:	90007144 	.word	0x90007144
90002a00:	20000054 	.word	0x20000054
90002a04:	2000005c 	.word	0x2000005c

90002a08 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
90002a08:	6803      	ldr	r3, [r0, #0]
{
90002a0a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
90002a0e:	f013 0601 	ands.w	r6, r3, #1
{
90002a12:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
90002a14:	d00b      	beq.n	90002a2e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
90002a16:	4aab      	ldr	r2, [pc, #684]	; (90002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002a18:	6891      	ldr	r1, [r2, #8]
90002a1a:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
90002a1e:	6091      	str	r1, [r2, #8]
90002a20:	6b46      	ldr	r6, [r0, #52]	; 0x34
90002a22:	6891      	ldr	r1, [r2, #8]
90002a24:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
90002a26:	fab6 f686 	clz	r6, r6
90002a2a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
90002a2c:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
90002a2e:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
90002a32:	d012      	beq.n	90002a5a <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90002a34:	49a3      	ldr	r1, [pc, #652]	; (90002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002a36:	6be5      	ldr	r5, [r4, #60]	; 0x3c
90002a38:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
90002a3c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90002a40:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
90002a44:	bf08      	it	eq
90002a46:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90002a48:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
90002a4c:	bf16      	itet	ne
90002a4e:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
90002a52:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
90002a54:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90002a56:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
90002a5a:	02d8      	lsls	r0, r3, #11
90002a5c:	d510      	bpl.n	90002a80 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
90002a5e:	4899      	ldr	r0, [pc, #612]	; (90002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002a60:	6c21      	ldr	r1, [r4, #64]	; 0x40
90002a62:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
90002a66:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
90002a6a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
90002a6e:	ea42 0201 	orr.w	r2, r2, r1
90002a72:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
90002a76:	f000 8186 	beq.w	90002d86 <HAL_RCCEx_PeriphCLKConfig+0x37e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
90002a7a:	2900      	cmp	r1, #0
90002a7c:	bf08      	it	eq
90002a7e:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
90002a80:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
90002a84:	bf18      	it	ne
90002a86:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
90002a88:	0699      	lsls	r1, r3, #26
90002a8a:	d531      	bpl.n	90002af0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
90002a8c:	4b8d      	ldr	r3, [pc, #564]	; (90002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
90002a8e:	4f8e      	ldr	r7, [pc, #568]	; (90002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
    __HAL_RCC_PWR_CLK_ENABLE();
90002a90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
90002a92:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
90002a96:	641a      	str	r2, [r3, #64]	; 0x40
90002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90002a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90002a9e:	9301      	str	r3, [sp, #4]
90002aa0:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
90002aa2:	683b      	ldr	r3, [r7, #0]
90002aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90002aa8:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90002aaa:	f7fe fc5b 	bl	90001364 <HAL_GetTick>
90002aae:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
90002ab0:	683b      	ldr	r3, [r7, #0]
90002ab2:	05da      	lsls	r2, r3, #23
90002ab4:	f140 8169 	bpl.w	90002d8a <HAL_RCCEx_PeriphCLKConfig+0x382>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
90002ab8:	4f82      	ldr	r7, [pc, #520]	; (90002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002aba:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
90002abc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
90002ac0:	f040 816e 	bne.w	90002da0 <HAL_RCCEx_PeriphCLKConfig+0x398>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
90002ac4:	6b23      	ldr	r3, [r4, #48]	; 0x30
90002ac6:	f403 7240 	and.w	r2, r3, #768	; 0x300
90002aca:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
90002ace:	4a7d      	ldr	r2, [pc, #500]	; (90002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002ad0:	f040 818c 	bne.w	90002dec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
90002ad4:	6891      	ldr	r1, [r2, #8]
90002ad6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
90002ada:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
90002ade:	f420 7040 	bic.w	r0, r0, #768	; 0x300
90002ae2:	4301      	orrs	r1, r0
90002ae4:	6091      	str	r1, [r2, #8]
90002ae6:	f3c3 030b 	ubfx	r3, r3, #0, #12
90002aea:	6f11      	ldr	r1, [r2, #112]	; 0x70
90002aec:	430b      	orrs	r3, r1
90002aee:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
90002af0:	6823      	ldr	r3, [r4, #0]
90002af2:	06d9      	lsls	r1, r3, #27
90002af4:	d50c      	bpl.n	90002b10 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
90002af6:	4a73      	ldr	r2, [pc, #460]	; (90002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002af8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
90002afc:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
90002b00:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
90002b04:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
90002b08:	6ba0      	ldr	r0, [r4, #56]	; 0x38
90002b0a:	4301      	orrs	r1, r0
90002b0c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
90002b10:	045a      	lsls	r2, r3, #17
90002b12:	d508      	bpl.n	90002b26 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
90002b14:	496b      	ldr	r1, [pc, #428]	; (90002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002b16:	6e60      	ldr	r0, [r4, #100]	; 0x64
90002b18:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002b1c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
90002b20:	4302      	orrs	r2, r0
90002b22:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
90002b26:	041f      	lsls	r7, r3, #16
90002b28:	d508      	bpl.n	90002b3c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
90002b2a:	4966      	ldr	r1, [pc, #408]	; (90002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002b2c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
90002b2e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002b32:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
90002b36:	4302      	orrs	r2, r0
90002b38:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
90002b3c:	03d8      	lsls	r0, r3, #15
90002b3e:	d508      	bpl.n	90002b52 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
90002b40:	4960      	ldr	r1, [pc, #384]	; (90002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002b42:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
90002b44:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002b48:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
90002b4c:	4302      	orrs	r2, r0
90002b4e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
90002b52:	0399      	lsls	r1, r3, #14
90002b54:	d508      	bpl.n	90002b68 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
90002b56:	495b      	ldr	r1, [pc, #364]	; (90002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002b58:	6f20      	ldr	r0, [r4, #112]	; 0x70
90002b5a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002b5e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
90002b62:	4302      	orrs	r2, r0
90002b64:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
90002b68:	065a      	lsls	r2, r3, #25
90002b6a:	d508      	bpl.n	90002b7e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
90002b6c:	4955      	ldr	r1, [pc, #340]	; (90002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002b6e:	6c60      	ldr	r0, [r4, #68]	; 0x44
90002b70:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002b74:	f022 0203 	bic.w	r2, r2, #3
90002b78:	4302      	orrs	r2, r0
90002b7a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
90002b7e:	061f      	lsls	r7, r3, #24
90002b80:	d508      	bpl.n	90002b94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
90002b82:	4950      	ldr	r1, [pc, #320]	; (90002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002b84:	6ca0      	ldr	r0, [r4, #72]	; 0x48
90002b86:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002b8a:	f022 020c 	bic.w	r2, r2, #12
90002b8e:	4302      	orrs	r2, r0
90002b90:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
90002b94:	05d8      	lsls	r0, r3, #23
90002b96:	d508      	bpl.n	90002baa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
90002b98:	494a      	ldr	r1, [pc, #296]	; (90002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002b9a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
90002b9c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002ba0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
90002ba4:	4302      	orrs	r2, r0
90002ba6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
90002baa:	0599      	lsls	r1, r3, #22
90002bac:	d508      	bpl.n	90002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
90002bae:	4945      	ldr	r1, [pc, #276]	; (90002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002bb0:	6d20      	ldr	r0, [r4, #80]	; 0x50
90002bb2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002bb6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
90002bba:	4302      	orrs	r2, r0
90002bbc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
90002bc0:	055a      	lsls	r2, r3, #21
90002bc2:	d508      	bpl.n	90002bd6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
90002bc4:	493f      	ldr	r1, [pc, #252]	; (90002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002bc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
90002bc8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002bcc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
90002bd0:	4302      	orrs	r2, r0
90002bd2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
90002bd6:	051f      	lsls	r7, r3, #20
90002bd8:	d508      	bpl.n	90002bec <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
90002bda:	493a      	ldr	r1, [pc, #232]	; (90002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
90002bde:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002be2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
90002be6:	4302      	orrs	r2, r0
90002be8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
90002bec:	04d8      	lsls	r0, r3, #19
90002bee:	d508      	bpl.n	90002c02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
90002bf0:	4934      	ldr	r1, [pc, #208]	; (90002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002bf2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
90002bf4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002bf8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
90002bfc:	4302      	orrs	r2, r0
90002bfe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
90002c02:	0499      	lsls	r1, r3, #18
90002c04:	d508      	bpl.n	90002c18 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
90002c06:	492f      	ldr	r1, [pc, #188]	; (90002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002c08:	6e20      	ldr	r0, [r4, #96]	; 0x60
90002c0a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002c0e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
90002c12:	4302      	orrs	r2, r0
90002c14:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
90002c18:	025a      	lsls	r2, r3, #9
90002c1a:	d508      	bpl.n	90002c2e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
90002c1c:	4929      	ldr	r1, [pc, #164]	; (90002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002c1e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
90002c20:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002c24:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
90002c28:	4302      	orrs	r2, r0
90002c2a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
90002c2e:	029f      	lsls	r7, r3, #10
90002c30:	d50c      	bpl.n	90002c4c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
90002c32:	4824      	ldr	r0, [pc, #144]	; (90002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002c34:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
90002c36:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
90002c3a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
90002c3e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
90002c42:	bf08      	it	eq
90002c44:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
90002c46:	430a      	orrs	r2, r1
90002c48:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
90002c4c:	f013 0f08 	tst.w	r3, #8
90002c50:	bf18      	it	ne
90002c52:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
90002c54:	0358      	lsls	r0, r3, #13
90002c56:	d508      	bpl.n	90002c6a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
90002c58:	491a      	ldr	r1, [pc, #104]	; (90002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002c5a:	6f60      	ldr	r0, [r4, #116]	; 0x74
90002c5c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002c60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
90002c64:	4302      	orrs	r2, r0
90002c66:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
90002c6a:	0219      	lsls	r1, r3, #8
90002c6c:	d509      	bpl.n	90002c82 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
90002c6e:	4915      	ldr	r1, [pc, #84]	; (90002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002c70:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
90002c74:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002c78:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
90002c7c:	4302      	orrs	r2, r0
90002c7e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
90002c82:	2e01      	cmp	r6, #1
90002c84:	f000 80b6 	beq.w	90002df4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
90002c88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
90002c8c:	f000 80b2 	beq.w	90002df4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
90002c90:	2d01      	cmp	r5, #1
90002c92:	d176      	bne.n	90002d82 <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
90002c94:	4d0b      	ldr	r5, [pc, #44]	; (90002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002c96:	682b      	ldr	r3, [r5, #0]
90002c98:	462e      	mov	r6, r5
90002c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
90002c9e:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90002ca0:	f7fe fb60 	bl	90001364 <HAL_GetTick>
90002ca4:	4607      	mov	r7, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
90002ca6:	682b      	ldr	r3, [r5, #0]
90002ca8:	009b      	lsls	r3, r3, #2
90002caa:	f100 8127 	bmi.w	90002efc <HAL_RCCEx_PeriphCLKConfig+0x4f4>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
90002cae:	6822      	ldr	r2, [r4, #0]
90002cb0:	0315      	lsls	r5, r2, #12
90002cb2:	d501      	bpl.n	90002cb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
90002cb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90002cb6:	b14b      	cbz	r3, 90002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
90002cb8:	02d0      	lsls	r0, r2, #11
90002cba:	d522      	bpl.n	90002d02 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
90002cbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
90002cbe:	bb03      	cbnz	r3, 90002d02 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
90002cc0:	e004      	b.n	90002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
90002cc2:	bf00      	nop
90002cc4:	40023800 	.word	0x40023800
90002cc8:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
90002ccc:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
90002cd0:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
90002cd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90002cd8:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
90002cdc:	430b      	orrs	r3, r1
90002cde:	6961      	ldr	r1, [r4, #20]
90002ce0:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
90002ce4:	69a1      	ldr	r1, [r4, #24]
90002ce6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
90002cea:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
90002cee:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
90002cf2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
90002cf4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
90002cf8:	3901      	subs	r1, #1
90002cfa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
90002cfe:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
90002d02:	0291      	lsls	r1, r2, #10
90002d04:	d515      	bpl.n	90002d32 <HAL_RCCEx_PeriphCLKConfig+0x32a>
90002d06:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
90002d08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
90002d0c:	d111      	bne.n	90002d32 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
90002d0e:	4982      	ldr	r1, [pc, #520]	; (90002f18 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90002d10:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
90002d14:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
90002d18:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
90002d1c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
90002d20:	4303      	orrs	r3, r0
90002d22:	6960      	ldr	r0, [r4, #20]
90002d24:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
90002d28:	6a20      	ldr	r0, [r4, #32]
90002d2a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
90002d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
90002d32:	0712      	lsls	r2, r2, #28
90002d34:	d519      	bpl.n	90002d6a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
90002d36:	4a78      	ldr	r2, [pc, #480]	; (90002f18 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90002d38:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
90002d3c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
90002d40:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
90002d44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90002d48:	430b      	orrs	r3, r1
90002d4a:	6961      	ldr	r1, [r4, #20]
90002d4c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
90002d50:	69e1      	ldr	r1, [r4, #28]
90002d52:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
90002d56:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
90002d5a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
90002d5e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
90002d60:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
90002d64:	430b      	orrs	r3, r1
90002d66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
90002d6a:	4c6b      	ldr	r4, [pc, #428]	; (90002f18 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90002d6c:	6823      	ldr	r3, [r4, #0]
90002d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90002d72:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90002d74:	f7fe faf6 	bl	90001364 <HAL_GetTick>
90002d78:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
90002d7a:	6823      	ldr	r3, [r4, #0]
90002d7c:	009b      	lsls	r3, r3, #2
90002d7e:	f140 80c4 	bpl.w	90002f0a <HAL_RCCEx_PeriphCLKConfig+0x502>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
90002d82:	2000      	movs	r0, #0
90002d84:	e009      	b.n	90002d9a <HAL_RCCEx_PeriphCLKConfig+0x392>
      plli2sused = 1;
90002d86:	2601      	movs	r6, #1
90002d88:	e67a      	b.n	90002a80 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90002d8a:	f7fe faeb 	bl	90001364 <HAL_GetTick>
90002d8e:	eba0 0008 	sub.w	r0, r0, r8
90002d92:	2864      	cmp	r0, #100	; 0x64
90002d94:	f67f ae8c 	bls.w	90002ab0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
90002d98:	2003      	movs	r0, #3
}
90002d9a:	b003      	add	sp, #12
90002d9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
90002da0:	6b22      	ldr	r2, [r4, #48]	; 0x30
90002da2:	f402 7240 	and.w	r2, r2, #768	; 0x300
90002da6:	4293      	cmp	r3, r2
90002da8:	f43f ae8c 	beq.w	90002ac4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
90002dac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
90002dae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
90002db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
90002db4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
90002db8:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
90002dba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
90002dbc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
90002dc0:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
90002dc2:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
90002dc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
90002dc6:	07db      	lsls	r3, r3, #31
90002dc8:	f57f ae7c 	bpl.w	90002ac4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
90002dcc:	f7fe faca 	bl	90001364 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
90002dd0:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
90002dd4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90002dd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
90002dd8:	0798      	lsls	r0, r3, #30
90002dda:	f53f ae73 	bmi.w	90002ac4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
90002dde:	f7fe fac1 	bl	90001364 <HAL_GetTick>
90002de2:	eba0 0008 	sub.w	r0, r0, r8
90002de6:	4548      	cmp	r0, r9
90002de8:	d9f5      	bls.n	90002dd6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
90002dea:	e7d5      	b.n	90002d98 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
90002dec:	6891      	ldr	r1, [r2, #8]
90002dee:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
90002df2:	e677      	b.n	90002ae4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
90002df4:	4e48      	ldr	r6, [pc, #288]	; (90002f18 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90002df6:	6833      	ldr	r3, [r6, #0]
90002df8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
90002dfc:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
90002dfe:	f7fe fab1 	bl	90001364 <HAL_GetTick>
90002e02:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
90002e04:	6833      	ldr	r3, [r6, #0]
90002e06:	011a      	lsls	r2, r3, #4
90002e08:	d472      	bmi.n	90002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
90002e0a:	6822      	ldr	r2, [r4, #0]
90002e0c:	07d3      	lsls	r3, r2, #31
90002e0e:	d512      	bpl.n	90002e36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
90002e10:	6b63      	ldr	r3, [r4, #52]	; 0x34
90002e12:	b983      	cbnz	r3, 90002e36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
90002e14:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
90002e18:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
90002e1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90002e20:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
90002e24:	430b      	orrs	r3, r1
90002e26:	6861      	ldr	r1, [r4, #4]
90002e28:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
90002e2c:	68a1      	ldr	r1, [r4, #8]
90002e2e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
90002e32:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
90002e36:	0317      	lsls	r7, r2, #12
90002e38:	d503      	bpl.n	90002e42 <HAL_RCCEx_PeriphCLKConfig+0x43a>
90002e3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90002e3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90002e40:	d005      	beq.n	90002e4e <HAL_RCCEx_PeriphCLKConfig+0x446>
90002e42:	02d6      	lsls	r6, r2, #11
90002e44:	d51e      	bpl.n	90002e84 <HAL_RCCEx_PeriphCLKConfig+0x47c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
90002e46:	6c23      	ldr	r3, [r4, #64]	; 0x40
90002e48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90002e4c:	d11a      	bne.n	90002e84 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
90002e4e:	4932      	ldr	r1, [pc, #200]	; (90002f18 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90002e50:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
90002e54:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
90002e58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90002e5c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
90002e60:	4303      	orrs	r3, r0
90002e62:	6860      	ldr	r0, [r4, #4]
90002e64:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
90002e68:	68e0      	ldr	r0, [r4, #12]
90002e6a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
90002e6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
90002e72:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
90002e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
90002e78:	f020 001f 	bic.w	r0, r0, #31
90002e7c:	3b01      	subs	r3, #1
90002e7e:	4303      	orrs	r3, r0
90002e80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
90002e84:	01d0      	lsls	r0, r2, #7
90002e86:	d511      	bpl.n	90002eac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
90002e88:	4923      	ldr	r1, [pc, #140]	; (90002f18 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90002e8a:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
90002e8e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
90002e92:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
90002e96:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
90002e9a:	4303      	orrs	r3, r0
90002e9c:	6860      	ldr	r0, [r4, #4]
90002e9e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
90002ea2:	6920      	ldr	r0, [r4, #16]
90002ea4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
90002ea8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
90002eac:	0191      	lsls	r1, r2, #6
90002eae:	d50d      	bpl.n	90002ecc <HAL_RCCEx_PeriphCLKConfig+0x4c4>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
90002eb0:	6923      	ldr	r3, [r4, #16]
90002eb2:	6862      	ldr	r2, [r4, #4]
90002eb4:	041b      	lsls	r3, r3, #16
90002eb6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
90002eba:	68e2      	ldr	r2, [r4, #12]
90002ebc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
90002ec0:	68a2      	ldr	r2, [r4, #8]
90002ec2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
90002ec6:	4a14      	ldr	r2, [pc, #80]	; (90002f18 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90002ec8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
90002ecc:	4e12      	ldr	r6, [pc, #72]	; (90002f18 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90002ece:	6833      	ldr	r3, [r6, #0]
90002ed0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
90002ed4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
90002ed6:	f7fe fa45 	bl	90001364 <HAL_GetTick>
90002eda:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
90002edc:	6833      	ldr	r3, [r6, #0]
90002ede:	011a      	lsls	r2, r3, #4
90002ee0:	f53f aed6 	bmi.w	90002c90 <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
90002ee4:	f7fe fa3e 	bl	90001364 <HAL_GetTick>
90002ee8:	1bc0      	subs	r0, r0, r7
90002eea:	2864      	cmp	r0, #100	; 0x64
90002eec:	d9f6      	bls.n	90002edc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
90002eee:	e753      	b.n	90002d98 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
90002ef0:	f7fe fa38 	bl	90001364 <HAL_GetTick>
90002ef4:	1bc0      	subs	r0, r0, r7
90002ef6:	2864      	cmp	r0, #100	; 0x64
90002ef8:	d984      	bls.n	90002e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
90002efa:	e74d      	b.n	90002d98 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
90002efc:	f7fe fa32 	bl	90001364 <HAL_GetTick>
90002f00:	1bc0      	subs	r0, r0, r7
90002f02:	2864      	cmp	r0, #100	; 0x64
90002f04:	f67f aecf 	bls.w	90002ca6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
90002f08:	e746      	b.n	90002d98 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
90002f0a:	f7fe fa2b 	bl	90001364 <HAL_GetTick>
90002f0e:	1b40      	subs	r0, r0, r5
90002f10:	2864      	cmp	r0, #100	; 0x64
90002f12:	f67f af32 	bls.w	90002d7a <HAL_RCCEx_PeriphCLKConfig+0x372>
90002f16:	e73f      	b.n	90002d98 <HAL_RCCEx_PeriphCLKConfig+0x390>
90002f18:	40023800 	.word	0x40023800

90002f1c <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
90002f1c:	4770      	bx	lr

90002f1e <HAL_SDRAM_Init>:
{   
90002f1e:	b538      	push	{r3, r4, r5, lr}
90002f20:	460d      	mov	r5, r1
  if(hsdram == NULL)
90002f22:	4604      	mov	r4, r0
90002f24:	b1c8      	cbz	r0, 90002f5a <HAL_SDRAM_Init+0x3c>
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
90002f26:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
90002f2a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90002f2e:	b91b      	cbnz	r3, 90002f38 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
90002f30:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
90002f34:	f7ff fff2 	bl	90002f1c <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90002f38:	2302      	movs	r3, #2
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
90002f3a:	1d21      	adds	r1, r4, #4
90002f3c:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90002f3e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
90002f42:	f000 f835 	bl	90002fb0 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
90002f46:	6862      	ldr	r2, [r4, #4]
90002f48:	4629      	mov	r1, r5
90002f4a:	6820      	ldr	r0, [r4, #0]
90002f4c:	f000 f866 	bl	9000301c <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
90002f50:	2301      	movs	r3, #1
  return HAL_OK;
90002f52:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
90002f54:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
90002f58:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
90002f5a:	2001      	movs	r0, #1
90002f5c:	e7fc      	b.n	90002f58 <HAL_SDRAM_Init+0x3a>

90002f5e <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
90002f5e:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
90002f60:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
90002f64:	4604      	mov	r4, r0
90002f66:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
90002f68:	2b02      	cmp	r3, #2
90002f6a:	b2d8      	uxtb	r0, r3
90002f6c:	d00d      	beq.n	90002f8a <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90002f6e:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
90002f70:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90002f72:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
90002f76:	f000 f894 	bl	900030a2 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
90002f7a:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
90002f7c:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
90002f7e:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
90002f80:	bf0c      	ite	eq
90002f82:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
90002f84:	2301      	movne	r3, #1
90002f86:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
90002f8a:	bd38      	pop	{r3, r4, r5, pc}

90002f8c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
90002f8c:	b510      	push	{r4, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
90002f8e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
90002f92:	4604      	mov	r4, r0
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
90002f94:	2b02      	cmp	r3, #2
90002f96:	b2d8      	uxtb	r0, r3
90002f98:	d009      	beq.n	90002fae <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90002f9a:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
90002f9c:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90002f9e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
90002fa2:	f000 f891 	bl	900030c8 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
90002fa6:	2301      	movs	r3, #1
  
  return HAL_OK;   
90002fa8:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
90002faa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
90002fae:	bd10      	pop	{r4, pc}

90002fb0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
90002fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90002fb4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
90002fb6:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
90002fba:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
90002fbe:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
90002fc2:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
90002fc6:	6809      	ldr	r1, [r1, #0]
90002fc8:	4323      	orrs	r3, r4
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
90002fca:	6804      	ldr	r4, [r0, #0]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
90002fcc:	2901      	cmp	r1, #1
90002fce:	4912      	ldr	r1, [pc, #72]	; (90003018 <FMC_SDRAM_Init+0x68>)
90002fd0:	d00f      	beq.n	90002ff2 <FMC_SDRAM_Init+0x42>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
90002fd2:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
90002fd4:	4021      	ands	r1, r4
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
90002fd6:	432a      	orrs	r2, r5
90002fd8:	ea42 0308 	orr.w	r3, r2, r8
90002fdc:	ea43 030e 	orr.w	r3, r3, lr
90002fe0:	ea43 030c 	orr.w	r3, r3, ip
90002fe4:	433b      	orrs	r3, r7
90002fe6:	4333      	orrs	r3, r6
90002fe8:	430b      	orrs	r3, r1
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
90002fea:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
90002fec:	2000      	movs	r0, #0
90002fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
90002ff2:	4313      	orrs	r3, r2
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
90002ff4:	6842      	ldr	r2, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
90002ff6:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
90002ffa:	4011      	ands	r1, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
90002ffc:	ea45 0208 	orr.w	r2, r5, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
90003000:	4323      	orrs	r3, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
90003002:	ea42 020e 	orr.w	r2, r2, lr
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
90003006:	6003      	str	r3, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
90003008:	ea42 020c 	orr.w	r2, r2, ip
9000300c:	433a      	orrs	r2, r7
9000300e:	4332      	orrs	r2, r6
90003010:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
90003012:	6042      	str	r2, [r0, #4]
90003014:	e7ea      	b.n	90002fec <FMC_SDRAM_Init+0x3c>
90003016:	bf00      	nop
90003018:	ffff8000 	.word	0xffff8000

9000301c <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
9000301c:	68cb      	ldr	r3, [r1, #12]
9000301e:	2a01      	cmp	r2, #1
{
90003020:	b5f0      	push	{r4, r5, r6, r7, lr}
90003022:	680c      	ldr	r4, [r1, #0]
90003024:	f103 37ff 	add.w	r7, r3, #4294967295
90003028:	694b      	ldr	r3, [r1, #20]
9000302a:	688e      	ldr	r6, [r1, #8]
9000302c:	f104 3cff 	add.w	ip, r4, #4294967295
90003030:	690d      	ldr	r5, [r1, #16]
90003032:	f103 33ff 	add.w	r3, r3, #4294967295
90003036:	684c      	ldr	r4, [r1, #4]
90003038:	f106 36ff 	add.w	r6, r6, #4294967295
9000303c:	6989      	ldr	r1, [r1, #24]
9000303e:	ea4f 5303 	mov.w	r3, r3, lsl #20
90003042:	f104 34ff 	add.w	r4, r4, #4294967295
90003046:	f105 35ff 	add.w	r5, r5, #4294967295
9000304a:	f101 31ff 	add.w	r1, r1, #4294967295
9000304e:	ea4f 2606 	mov.w	r6, r6, lsl #8
90003052:	ea4f 1404 	mov.w	r4, r4, lsl #4
90003056:	ea4f 4505 	mov.w	r5, r5, lsl #16
9000305a:	ea4f 6101 	mov.w	r1, r1, lsl #24
9000305e:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  if (Bank != FMC_SDRAM_BANK2) 
90003062:	d00c      	beq.n	9000307e <FMC_SDRAM_Timing_Init+0x62>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90003064:	ea43 030c 	orr.w	r3, r3, ip
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
90003068:	6882      	ldr	r2, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
9000306a:	4323      	orrs	r3, r4
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
9000306c:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90003070:	4333      	orrs	r3, r6
90003072:	432b      	orrs	r3, r5
90003074:	430b      	orrs	r3, r1
90003076:	4313      	orrs	r3, r2
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
90003078:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
9000307a:	2000      	movs	r0, #0
9000307c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
9000307e:	6887      	ldr	r7, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90003080:	4334      	orrs	r4, r6
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
90003082:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90003086:	ea44 020c 	orr.w	r2, r4, ip
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
9000308a:	f427 4770 	bic.w	r7, r7, #61440	; 0xf000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
9000308e:	432a      	orrs	r2, r5
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
90003090:	433b      	orrs	r3, r7
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
90003092:	68c7      	ldr	r7, [r0, #12]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90003094:	430a      	orrs	r2, r1
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
90003096:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
9000309a:	6083      	str	r3, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
9000309c:	433a      	orrs	r2, r7
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
9000309e:	60c2      	str	r2, [r0, #12]
900030a0:	e7eb      	b.n	9000307a <FMC_SDRAM_Timing_Init+0x5e>

900030a2 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
900030a2:	e9d1 3200 	ldrd	r3, r2, [r1]
{
900030a6:	b513      	push	{r0, r1, r4, lr}
  tmpr = (uint32_t)((Command->CommandMode)                  |\
900030a8:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
900030aa:	68ca      	ldr	r2, [r1, #12]
  __IO uint32_t tmpr = 0;
900030ac:	2400      	movs	r4, #0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
900030ae:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
900030b2:	688a      	ldr	r2, [r1, #8]
  __IO uint32_t tmpr = 0;
900030b4:	9401      	str	r4, [sp, #4]
                    (((Command->AutoRefreshNumber)-1) << 5) |\
900030b6:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
900030b8:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
900030bc:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
900030be:	9b01      	ldr	r3, [sp, #4]
900030c0:	6103      	str	r3, [r0, #16]
  
  return HAL_OK;  
}
900030c2:	4620      	mov	r0, r4
900030c4:	b002      	add	sp, #8
900030c6:	bd10      	pop	{r4, pc}

900030c8 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
900030c8:	6943      	ldr	r3, [r0, #20]
900030ca:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
900030ce:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
900030d0:	2000      	movs	r0, #0
900030d2:	4770      	bx	lr

900030d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
900030d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 9000310c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
900030d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
900030da:	e003      	b.n	900030e4 <LoopCopyDataInit>

900030dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
900030dc:	4b0c      	ldr	r3, [pc, #48]	; (90003110 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
900030de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
900030e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
900030e2:	3104      	adds	r1, #4

900030e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
900030e4:	480b      	ldr	r0, [pc, #44]	; (90003114 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
900030e6:	4b0c      	ldr	r3, [pc, #48]	; (90003118 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
900030e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
900030ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
900030ec:	d3f6      	bcc.n	900030dc <CopyDataInit>
  ldr  r2, =_sbss
900030ee:	4a0b      	ldr	r2, [pc, #44]	; (9000311c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
900030f0:	e002      	b.n	900030f8 <LoopFillZerobss>

900030f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
900030f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
900030f4:	f842 3b04 	str.w	r3, [r2], #4

900030f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
900030f8:	4b09      	ldr	r3, [pc, #36]	; (90003120 <LoopFillZerobss+0x28>)
  cmp  r2, r3
900030fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
900030fc:	d3f9      	bcc.n	900030f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
900030fe:	f7fe f8c5 	bl	9000128c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
90003102:	f000 f981 	bl	90003408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
90003106:	f000 f821 	bl	9000314c <main>
  bx  lr    
9000310a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
9000310c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
90003110:	90007188 	.word	0x90007188
  ldr  r0, =_sdata
90003114:	20000000 	.word	0x20000000
  ldr  r3, =_edata
90003118:	20000060 	.word	0x20000060
  ldr  r2, =_sbss
9000311c:	20000060 	.word	0x20000060
  ldr  r3, = _ebss
90003120:	20000624 	.word	0x20000624

90003124 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
90003124:	e7fe      	b.n	90003124 <ADC_IRQHandler>
	...

90003128 <ct_smush>:
  rnd->iter = 0;
}

ct_inline uint32_t ct_smush(CT_Smush *rnd) {
  const uint32_t m = 0x5bd1e995;
  const uint32_t k = rnd->iter++ * m;
90003128:	6841      	ldr	r1, [r0, #4]
  rnd->seed        = (k ^ (k >> 24) ^ (rnd->seed * m)) * m;
9000312a:	6802      	ldr	r2, [r0, #0]
  const uint32_t k = rnd->iter++ * m;
9000312c:	1c4b      	adds	r3, r1, #1
9000312e:	6043      	str	r3, [r0, #4]
90003130:	4b05      	ldr	r3, [pc, #20]	; (90003148 <ct_smush+0x20>)
90003132:	4359      	muls	r1, r3
  rnd->seed        = (k ^ (k >> 24) ^ (rnd->seed * m)) * m;
90003134:	435a      	muls	r2, r3
90003136:	404a      	eors	r2, r1
90003138:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
9000313c:	4353      	muls	r3, r2
9000313e:	6003      	str	r3, [r0, #0]
  return rnd->seed ^ (rnd->seed >> 13);
}
90003140:	ea83 3053 	eor.w	r0, r3, r3, lsr #13
90003144:	4770      	bx	lr
90003146:	bf00      	nop
90003148:	5bd1e995 	.word	0x5bd1e995

9000314c <main>:
static void demoWelcome();
static void demoScribble();
static void demoGUI();
static void demoGraph();

int main() {
9000314c:	b510      	push	{r4, lr}
9000314e:	ed2d 8b04 	vpush	{d8-d9}
90003152:	b082      	sub	sp, #8
  CPU_CACHE_Enable();
90003154:	f000 f916 	bl	90003384 <CPU_CACHE_Enable>
  HAL_Init();
90003158:	f7fe f8e2 	bl	90001320 <HAL_Init>
  SystemClock_Config();
9000315c:	f000 f8c9 	bl	900032f2 <SystemClock_Config>
  BSP_LCD_Init();
90003160:	f7fd feda 	bl	90000f18 <BSP_LCD_Init>

  // only continue if touch screen init ok
  if (BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize()) == TS_OK) {
90003164:	f7fd fbe0 	bl	90000928 <BSP_LCD_GetXSize>
90003168:	4604      	mov	r4, r0
9000316a:	f7fd fbe9 	bl	90000940 <BSP_LCD_GetYSize>
9000316e:	b281      	uxth	r1, r0
90003170:	b2a0      	uxth	r0, r4
90003172:	f7fe f86f 	bl	90001254 <BSP_TS_Init>
90003176:	4604      	mov	r4, r0
90003178:	2800      	cmp	r0, #0
9000317a:	d17b      	bne.n	90003274 <main+0x128>
    BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, SDRAM_DEVICE_ADDR);
9000317c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
90003180:	2001      	movs	r0, #1
90003182:	f7fd fbe9 	bl	90000958 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
90003186:	2001      	movs	r0, #1
90003188:	f7fd fc1e 	bl	900009c8 <BSP_LCD_SelectLayer>
  }
  return 0;
}

static void demoWelcome() {
  BSP_LCD_SetFont(&CTGUI_FONT);
9000318c:	483c      	ldr	r0, [pc, #240]	; (90003280 <main+0x134>)
9000318e:	f7fd fc35 	bl	900009fc <BSP_LCD_SetFont>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
90003192:	f04f 30ff 	mov.w	r0, #4294967295
90003196:	f7fd fc27 	bl	900009e8 <BSP_LCD_SetBackColor>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
9000319a:	f04f 30ff 	mov.w	r0, #4294967295
9000319e:	f7fd fc37 	bl	90000a10 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
900031a2:	4838      	ldr	r0, [pc, #224]	; (90003284 <main+0x138>)
900031a4:	f7fd fc16 	bl	900009d4 <BSP_LCD_SetTextColor>
ct_inline float ct_maddf(const float a, const float b, const float c) {
  return a * b + c;
}

ct_inline float ct_mixf(const float a, const float b, const float t) {
  return a + (b - a) * t;
900031a8:	eef1 8a04 	vmov.f32	s17, #20	; 0x40a00000  5.0
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 - 8,
900031ac:	f7fd fbc8 	bl	90000940 <BSP_LCD_GetYSize>
900031b0:	2301      	movs	r3, #1
900031b2:	0840      	lsrs	r0, r0, #1
900031b4:	4a34      	ldr	r2, [pc, #208]	; (90003288 <main+0x13c>)
ct_inline float ct_smush_norm(CT_Smush *rnd) {
  return (float)ct_smush(rnd) * CT_INV_UINT32_MAX2 - 1.f;
}

ct_inline float ct_smush_normpos(CT_Smush *rnd) {
  return (float)ct_smush(rnd) * CT_INV_UINT32_MAX;
900031b6:	eddf 9a35 	vldr	s19, [pc, #212]	; 9000328c <main+0x140>
900031ba:	f1a0 0108 	sub.w	r1, r0, #8
900031be:	4620      	mov	r0, r4
900031c0:	b289      	uxth	r1, r1
900031c2:	f7fd fcd5 	bl	90000b70 <BSP_LCD_DisplayStringAt>
                          (uint8_t *)"STM32F746G", CENTER_MODE);
  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
900031c6:	4832      	ldr	r0, [pc, #200]	; (90003290 <main+0x144>)
900031c8:	f7fd fc04 	bl	900009d4 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 8, (uint8_t *)"Welcome!",
900031cc:	f7fd fbb8 	bl	90000940 <BSP_LCD_GetYSize>
900031d0:	2301      	movs	r3, #1
900031d2:	0840      	lsrs	r0, r0, #1
900031d4:	4a2f      	ldr	r2, [pc, #188]	; (90003294 <main+0x148>)
900031d6:	f100 0108 	add.w	r1, r0, #8
900031da:	4620      	mov	r0, r4
900031dc:	b289      	uxth	r1, r1
900031de:	f7fd fcc7 	bl	90000b70 <BSP_LCD_DisplayStringAt>
                          CENTER_MODE);
  const float w = BSP_LCD_GetXSize() - 5;
900031e2:	f7fd fba1 	bl	90000928 <BSP_LCD_GetXSize>
900031e6:	3805      	subs	r0, #5
900031e8:	ee07 0a90 	vmov	s15, r0
900031ec:	eeb8 9a67 	vcvt.f32.u32	s18, s15
  const float h = BSP_LCD_GetYSize() - 5;
900031f0:	f7fd fba6 	bl	90000940 <BSP_LCD_GetYSize>
900031f4:	3805      	subs	r0, #5
  rnd->seed = s;
900031f6:	4b28      	ldr	r3, [pc, #160]	; (90003298 <main+0x14c>)
900031f8:	ee07 0a90 	vmov	s15, r0
900031fc:	eeb8 8a67 	vcvt.f32.u32	s16, s15
  rnd->iter = 0;
90003200:	e9cd 3400 	strd	r3, r4, [sp]
  CT_Smush rnd;
  // seed random number generator
  ct_smush_init(&rnd, 0xdecafbad);

  while (1) {
    BSP_LCD_SetTextColor((ct_smush(&rnd) & 0xffffff) | 0xff000000);
90003204:	4668      	mov	r0, sp
90003206:	f7ff ff8f 	bl	90003128 <ct_smush>
9000320a:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
9000320e:	f7fd fbe1 	bl	900009d4 <BSP_LCD_SetTextColor>
  return (float)ct_smush(rnd) * CT_INV_UINT32_MAX;
90003212:	4668      	mov	r0, sp
90003214:	f7ff ff88 	bl	90003128 <ct_smush>
90003218:	ee07 0a90 	vmov	s15, r0
9000321c:	ee39 7a68 	vsub.f32	s14, s18, s17
90003220:	4668      	mov	r0, sp
90003222:	eef8 7a67 	vcvt.f32.u32	s15, s15
90003226:	eef0 6a68 	vmov.f32	s13, s17
9000322a:	ee67 7aa9 	vmul.f32	s15, s15, s19
9000322e:	eee7 6a27 	vfma.f32	s13, s14, s15
90003232:	eeb0 7a66 	vmov.f32	s14, s13
90003236:	f7ff ff77 	bl	90003128 <ct_smush>
9000323a:	ee07 0a90 	vmov	s15, r0
9000323e:	ee78 6a68 	vsub.f32	s13, s16, s17
90003242:	eeb0 6a68 	vmov.f32	s12, s17
    BSP_LCD_FillCircle(ct_smush_minmax(&rnd, 5.f, w),
90003246:	2204      	movs	r2, #4
90003248:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000324c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
90003250:	ee67 7aa9 	vmul.f32	s15, s15, s19
90003254:	eea6 6aa7 	vfma.f32	s12, s13, s15
90003258:	eefc 7ac6 	vcvt.u32.f32	s15, s12
9000325c:	ee17 3a90 	vmov	r3, s15
90003260:	b299      	uxth	r1, r3
90003262:	ee17 3a10 	vmov	r3, s14
90003266:	b298      	uxth	r0, r3
90003268:	f7fd fd52 	bl	90000d10 <BSP_LCD_FillCircle>
                       ct_smush_minmax(&rnd, 5.f, h), 4);
    HAL_Delay(1);
9000326c:	2001      	movs	r0, #1
9000326e:	f7fe f87f 	bl	90001370 <HAL_Delay>
  while (1) {
90003272:	e7c7      	b.n	90003204 <main+0xb8>
}
90003274:	2000      	movs	r0, #0
90003276:	b002      	add	sp, #8
90003278:	ecbd 8b04 	vpop	{d8-d9}
9000327c:	bd10      	pop	{r4, pc}
9000327e:	bf00      	nop
90003280:	20000038 	.word	0x20000038
90003284:	ff0000ff 	.word	0xff0000ff
90003288:	90007164 	.word	0x90007164
9000328c:	2f800000 	.word	0x2f800000
90003290:	ff000080 	.word	0xff000080
90003294:	9000716f 	.word	0x9000716f
90003298:	decafbad 	.word	0xdecafbad

9000329c <EXTI15_10_IRQHandler>:
}

// Interrupt handler shared between:
// SD_DETECT pin, USER_KEY button and touch screen interrupt
void EXTI15_10_IRQHandler(void) {
  if (__HAL_GPIO_EXTI_GET_IT(SD_DETECT_PIN) != RESET) {
9000329c:	4b04      	ldr	r3, [pc, #16]	; (900032b0 <EXTI15_10_IRQHandler+0x14>)
9000329e:	695b      	ldr	r3, [r3, #20]
900032a0:	049b      	lsls	r3, r3, #18
    HAL_GPIO_EXTI_IRQHandler(SD_DETECT_PIN | TS_INT_PIN);
900032a2:	bf4c      	ite	mi
900032a4:	f44f 5000 	movmi.w	r0, #8192	; 0x2000
  } else {
    // User button event or Touch screen interrupt
    HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
900032a8:	f44f 6000 	movpl.w	r0, #2048	; 0x800
900032ac:	f7fe bc96 	b.w	90001bdc <HAL_GPIO_EXTI_IRQHandler>
900032b0:	40013c00 	.word	0x40013c00

900032b4 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
900032b4:	4770      	bx	lr

900032b6 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
900032b6:	e7fe      	b.n	900032b6 <HardFault_Handler>

900032b8 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
900032b8:	e7fe      	b.n	900032b8 <MemManage_Handler>

900032ba <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
900032ba:	e7fe      	b.n	900032ba <BusFault_Handler>

900032bc <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
900032bc:	e7fe      	b.n	900032bc <UsageFault_Handler>

900032be <SVC_Handler>:
900032be:	4770      	bx	lr

900032c0 <DebugMon_Handler>:
900032c0:	4770      	bx	lr

900032c2 <PendSV_Handler>:
900032c2:	4770      	bx	lr

900032c4 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
900032c4:	f7fe b842 	b.w	9000134c <HAL_IncTick>

900032c8 <EXTI0_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(WAKEUP_BUTTON_PIN);
900032c8:	f44f 6000 	mov.w	r0, #2048	; 0x800
900032cc:	f7fe bc86 	b.w	90001bdc <HAL_GPIO_EXTI_IRQHandler>

900032d0 <EXTI2_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI2_IRQHandler(void)
{
   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
900032d0:	2004      	movs	r0, #4
900032d2:	f7fe bc83 	b.w	90001bdc <HAL_GPIO_EXTI_IRQHandler>
	...

900032d8 <DMA2_Stream7_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
900032d8:	4b01      	ldr	r3, [pc, #4]	; (900032e0 <DMA2_Stream7_IRQHandler+0x8>)
900032da:	6f18      	ldr	r0, [r3, #112]	; 0x70
900032dc:	f7fe b982 	b.w	900015e4 <HAL_DMA_IRQHandler>
900032e0:	200001a0 	.word	0x200001a0

900032e4 <DMA2_Stream0_IRQHandler>:
  * @brief  Handles SDRAM DMA transfer interrupt request.
  * @retval None
  */
void BSP_SDRAM_DMA_IRQHandler(void)
{
  HAL_DMA_IRQHandler(sdramHandle.hdma); 
900032e4:	4b01      	ldr	r3, [pc, #4]	; (900032ec <DMA2_Stream0_IRQHandler+0x8>)
900032e6:	6b18      	ldr	r0, [r3, #48]	; 0x30
900032e8:	f7fe b97c 	b.w	900015e4 <HAL_DMA_IRQHandler>
900032ec:	200005ec 	.word	0x200005ec

900032f0 <DMA2_Stream1_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Stream1_IRQHandler(void)
{
  BSP_CAMERA_DMA_IRQHandler();
900032f0:	e7fe      	b.n	900032f0 <DMA2_Stream1_IRQHandler>

900032f2 <SystemClock_Config>:
 *            Main regulator output voltage  = Scale1 mode
 *            Flash Latency(WS)              = 7
 * @param  None
 * @retval None
 */
void SystemClock_Config(void) {
900032f2:	b500      	push	{lr}
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
900032f4:	2201      	movs	r2, #1
void SystemClock_Config(void) {
900032f6:	b0b3      	sub	sp, #204	; 0xcc
  RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
900032f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM       = 25;
  RCC_OscInitStruct.PLL.PLLN       = 432;
900032fc:	2119      	movs	r1, #25
  RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ       = 9;

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
900032fe:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
90003300:	e9cd 2305 	strd	r2, r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
90003304:	2302      	movs	r3, #2
90003306:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV2;
9000330a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
9000330c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN       = 432;
90003310:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
  RCC_OscInitStruct.PLL.PLLQ       = 9;
90003314:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLN       = 432;
90003316:	e9cd 120d 	strd	r1, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ       = 9;
9000331a:	9310      	str	r3, [sp, #64]	; 0x40
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
9000331c:	f7ff f8e8 	bl	900024f0 <HAL_RCC_OscConfig>
  if (ret != HAL_OK) {
90003320:	b108      	cbz	r0, 90003326 <SystemClock_Config+0x34>
    Error_Handler();
90003322:	f000 f86b 	bl	900033fc <Error_Handler>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
90003326:	f7ff f8ab 	bl	90002480 <HAL_PWREx_EnableOverDrive>
  if (ret != HAL_OK) {
9000332a:	b108      	cbz	r0, 90003330 <SystemClock_Config+0x3e>
    Error_Handler();
9000332c:	f000 f866 	bl	900033fc <Error_Handler>
  }

  /* Select PLLSAI output as USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
90003330:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  PeriphClkInitStruct.Clk48ClockSelection  = RCC_CLK48SOURCE_PLLSAIP;
  PeriphClkInitStruct.PLLSAI.PLLSAIN       = 192;
  PeriphClkInitStruct.PLLSAI.PLLSAIQ       = 4;
90003334:	f04f 0ec0 	mov.w	lr, #192	; 0xc0
  PeriphClkInitStruct.PLLSAI.PLLSAIP       = RCC_PLLSAIP_DIV4;
  ret = HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
90003338:	a811      	add	r0, sp, #68	; 0x44
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
9000333a:	9311      	str	r3, [sp, #68]	; 0x44
  PeriphClkInitStruct.Clk48ClockSelection  = RCC_CLK48SOURCE_PLLSAIP;
9000333c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
90003340:	9330      	str	r3, [sp, #192]	; 0xc0
  PeriphClkInitStruct.PLLSAI.PLLSAIQ       = 4;
90003342:	2304      	movs	r3, #4
90003344:	e9cd e316 	strd	lr, r3, [sp, #88]	; 0x58
  PeriphClkInitStruct.PLLSAI.PLLSAIP       = RCC_PLLSAIP_DIV4;
90003348:	2301      	movs	r3, #1
9000334a:	9319      	str	r3, [sp, #100]	; 0x64
  ret = HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
9000334c:	f7ff fb5c 	bl	90002a08 <HAL_RCCEx_PeriphCLKConfig>
  if (ret != HAL_OK) {
90003350:	b108      	cbz	r0, 90003356 <SystemClock_Config+0x64>
    Error_Handler();
90003352:	f000 f853 	bl	900033fc <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
                                 RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
90003356:	2302      	movs	r3, #2
90003358:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
9000335a:	2100      	movs	r1, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
9000335c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
9000335e:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
90003362:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
90003366:	e9cd 1302 	strd	r1, r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
9000336a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
9000336e:	2107      	movs	r1, #7
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
90003370:	9304      	str	r3, [sp, #16]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
90003372:	f7ff faa9 	bl	900028c8 <HAL_RCC_ClockConfig>
  if (ret != HAL_OK) {
90003376:	b108      	cbz	r0, 9000337c <SystemClock_Config+0x8a>
    Error_Handler();
90003378:	f000 f840 	bl	900033fc <Error_Handler>
  }
}
9000337c:	b033      	add	sp, #204	; 0xcc
9000337e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

90003384 <CPU_CACHE_Enable>:
    Error_Handler();
  }
}

// Enable instruction & data caches
void CPU_CACHE_Enable(void) {
90003384:	b570      	push	{r4, r5, r6, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90003386:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000338a:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
9000338e:	4b1a      	ldr	r3, [pc, #104]	; (900033f8 <CPU_CACHE_Enable+0x74>)
90003390:	2100      	movs	r1, #0
90003392:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
90003396:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000339a:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
9000339e:	695a      	ldr	r2, [r3, #20]
900033a0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
900033a4:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
900033a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900033aa:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
900033ae:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
900033b2:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
900033b6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900033ba:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
900033be:	f3c2 00c9 	ubfx	r0, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
900033c2:	f3c2 324e 	ubfx	r2, r2, #13, #15
900033c6:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900033c8:	ea02 0604 	and.w	r6, r2, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
900033cc:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900033ce:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
900033d2:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900033d4:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
      } while (ways-- != 0U);
900033d8:	d2f9      	bcs.n	900033ce <CPU_CACHE_Enable+0x4a>
    } while(sets-- != 0U);
900033da:	3a20      	subs	r2, #32
900033dc:	f112 0f20 	cmn.w	r2, #32
900033e0:	d1f2      	bne.n	900033c8 <CPU_CACHE_Enable+0x44>
900033e2:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
900033e6:	695a      	ldr	r2, [r3, #20]
900033e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
900033ec:	615a      	str	r2, [r3, #20]
900033ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900033f2:	f3bf 8f6f 	isb	sy
  SCB_EnableICache();
  SCB_EnableDCache();
}
900033f6:	bd70      	pop	{r4, r5, r6, pc}
900033f8:	e000ed00 	.word	0xe000ed00

900033fc <Error_Handler>:
#include "stm32f7508_discovery.h"
#include "stm32f7xx_hal.h"

void Error_Handler(void) {
  BSP_LED_On(LED_GREEN);
900033fc:	2000      	movs	r0, #0
void Error_Handler(void) {
900033fe:	b508      	push	{r3, lr}
  BSP_LED_On(LED_GREEN);
90003400:	f7fd fa1a 	bl	90000838 <BSP_LED_On>
  while (1) {
90003404:	e7fe      	b.n	90003404 <Error_Handler+0x8>
	...

90003408 <__libc_init_array>:
90003408:	b570      	push	{r4, r5, r6, lr}
9000340a:	4d0d      	ldr	r5, [pc, #52]	; (90003440 <__libc_init_array+0x38>)
9000340c:	4c0d      	ldr	r4, [pc, #52]	; (90003444 <__libc_init_array+0x3c>)
9000340e:	1b64      	subs	r4, r4, r5
90003410:	10a4      	asrs	r4, r4, #2
90003412:	2600      	movs	r6, #0
90003414:	42a6      	cmp	r6, r4
90003416:	d109      	bne.n	9000342c <__libc_init_array+0x24>
90003418:	4d0b      	ldr	r5, [pc, #44]	; (90003448 <__libc_init_array+0x40>)
9000341a:	4c0c      	ldr	r4, [pc, #48]	; (9000344c <__libc_init_array+0x44>)
9000341c:	f000 f818 	bl	90003450 <_init>
90003420:	1b64      	subs	r4, r4, r5
90003422:	10a4      	asrs	r4, r4, #2
90003424:	2600      	movs	r6, #0
90003426:	42a6      	cmp	r6, r4
90003428:	d105      	bne.n	90003436 <__libc_init_array+0x2e>
9000342a:	bd70      	pop	{r4, r5, r6, pc}
9000342c:	f855 3b04 	ldr.w	r3, [r5], #4
90003430:	4798      	blx	r3
90003432:	3601      	adds	r6, #1
90003434:	e7ee      	b.n	90003414 <__libc_init_array+0xc>
90003436:	f855 3b04 	ldr.w	r3, [r5], #4
9000343a:	4798      	blx	r3
9000343c:	3601      	adds	r6, #1
9000343e:	e7f2      	b.n	90003426 <__libc_init_array+0x1e>
90003440:	90007180 	.word	0x90007180
90003444:	90007180 	.word	0x90007180
90003448:	90007180 	.word	0x90007180
9000344c:	90007184 	.word	0x90007184

90003450 <_init>:
90003450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90003452:	bf00      	nop
90003454:	bcf8      	pop	{r3, r4, r5, r6, r7}
90003456:	bc08      	pop	{r3}
90003458:	469e      	mov	lr, r3
9000345a:	4770      	bx	lr

9000345c <_fini>:
9000345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000345e:	bf00      	nop
90003460:	bcf8      	pop	{r3, r4, r5, r6, r7}
90003462:	bc08      	pop	{r3}
90003464:	469e      	mov	lr, r3
90003466:	4770      	bx	lr
