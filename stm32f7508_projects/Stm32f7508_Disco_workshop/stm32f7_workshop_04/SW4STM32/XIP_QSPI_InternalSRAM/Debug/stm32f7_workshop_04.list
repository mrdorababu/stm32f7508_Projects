
stm32f7_workshop_04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  90000000  90000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003adc  900001d0  900001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ecc  90003cac  90003cac  00013cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  90007b78  90007b78  00017b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  90007b80  90007b80  00017b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  90007b84  90007b84  00017b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  20000000  90007b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005188  2000009c  90007c24  0002009c  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  20005224  90007c24  00025224  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016b3c  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000356d  00000000  00000000  00036c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0000a4d0  00000000  00000000  0003a175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000cc8  00000000  00000000  00044648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000011c0  00000000  00000000  00045310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000053b4  00000000  00000000  000464d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000148ae  00000000  00000000  0004b884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001087fc  00000000  00000000  00060132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0016892e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002c04  00000000  00000000  00168984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900001d0 <__do_global_dtors_aux>:
900001d0:	b510      	push	{r4, lr}
900001d2:	4c05      	ldr	r4, [pc, #20]	; (900001e8 <__do_global_dtors_aux+0x18>)
900001d4:	7823      	ldrb	r3, [r4, #0]
900001d6:	b933      	cbnz	r3, 900001e6 <__do_global_dtors_aux+0x16>
900001d8:	4b04      	ldr	r3, [pc, #16]	; (900001ec <__do_global_dtors_aux+0x1c>)
900001da:	b113      	cbz	r3, 900001e2 <__do_global_dtors_aux+0x12>
900001dc:	4804      	ldr	r0, [pc, #16]	; (900001f0 <__do_global_dtors_aux+0x20>)
900001de:	f3af 8000 	nop.w
900001e2:	2301      	movs	r3, #1
900001e4:	7023      	strb	r3, [r4, #0]
900001e6:	bd10      	pop	{r4, pc}
900001e8:	2000009c 	.word	0x2000009c
900001ec:	00000000 	.word	0x00000000
900001f0:	90003c94 	.word	0x90003c94

900001f4 <frame_dummy>:
900001f4:	b508      	push	{r3, lr}
900001f6:	4b03      	ldr	r3, [pc, #12]	; (90000204 <frame_dummy+0x10>)
900001f8:	b11b      	cbz	r3, 90000202 <frame_dummy+0xe>
900001fa:	4903      	ldr	r1, [pc, #12]	; (90000208 <frame_dummy+0x14>)
900001fc:	4803      	ldr	r0, [pc, #12]	; (9000020c <frame_dummy+0x18>)
900001fe:	f3af 8000 	nop.w
90000202:	bd08      	pop	{r3, pc}
90000204:	00000000 	.word	0x00000000
90000208:	200000a0 	.word	0x200000a0
9000020c:	90003c94 	.word	0x90003c94

90000210 <memchr>:
90000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
90000214:	2a10      	cmp	r2, #16
90000216:	db2b      	blt.n	90000270 <memchr+0x60>
90000218:	f010 0f07 	tst.w	r0, #7
9000021c:	d008      	beq.n	90000230 <memchr+0x20>
9000021e:	f810 3b01 	ldrb.w	r3, [r0], #1
90000222:	3a01      	subs	r2, #1
90000224:	428b      	cmp	r3, r1
90000226:	d02d      	beq.n	90000284 <memchr+0x74>
90000228:	f010 0f07 	tst.w	r0, #7
9000022c:	b342      	cbz	r2, 90000280 <memchr+0x70>
9000022e:	d1f6      	bne.n	9000021e <memchr+0xe>
90000230:	b4f0      	push	{r4, r5, r6, r7}
90000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000023a:	f022 0407 	bic.w	r4, r2, #7
9000023e:	f07f 0700 	mvns.w	r7, #0
90000242:	2300      	movs	r3, #0
90000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000248:	3c08      	subs	r4, #8
9000024a:	ea85 0501 	eor.w	r5, r5, r1
9000024e:	ea86 0601 	eor.w	r6, r6, r1
90000252:	fa85 f547 	uadd8	r5, r5, r7
90000256:	faa3 f587 	sel	r5, r3, r7
9000025a:	fa86 f647 	uadd8	r6, r6, r7
9000025e:	faa5 f687 	sel	r6, r5, r7
90000262:	b98e      	cbnz	r6, 90000288 <memchr+0x78>
90000264:	d1ee      	bne.n	90000244 <memchr+0x34>
90000266:	bcf0      	pop	{r4, r5, r6, r7}
90000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
9000026c:	f002 0207 	and.w	r2, r2, #7
90000270:	b132      	cbz	r2, 90000280 <memchr+0x70>
90000272:	f810 3b01 	ldrb.w	r3, [r0], #1
90000276:	3a01      	subs	r2, #1
90000278:	ea83 0301 	eor.w	r3, r3, r1
9000027c:	b113      	cbz	r3, 90000284 <memchr+0x74>
9000027e:	d1f8      	bne.n	90000272 <memchr+0x62>
90000280:	2000      	movs	r0, #0
90000282:	4770      	bx	lr
90000284:	3801      	subs	r0, #1
90000286:	4770      	bx	lr
90000288:	2d00      	cmp	r5, #0
9000028a:	bf06      	itte	eq
9000028c:	4635      	moveq	r5, r6
9000028e:	3803      	subeq	r0, #3
90000290:	3807      	subne	r0, #7
90000292:	f015 0f01 	tst.w	r5, #1
90000296:	d107      	bne.n	900002a8 <memchr+0x98>
90000298:	3001      	adds	r0, #1
9000029a:	f415 7f80 	tst.w	r5, #256	; 0x100
9000029e:	bf02      	ittt	eq
900002a0:	3001      	addeq	r0, #1
900002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
900002a6:	3001      	addeq	r0, #1
900002a8:	bcf0      	pop	{r4, r5, r6, r7}
900002aa:	3801      	subs	r0, #1
900002ac:	4770      	bx	lr
900002ae:	bf00      	nop

900002b0 <__aeabi_uldivmod>:
900002b0:	b953      	cbnz	r3, 900002c8 <__aeabi_uldivmod+0x18>
900002b2:	b94a      	cbnz	r2, 900002c8 <__aeabi_uldivmod+0x18>
900002b4:	2900      	cmp	r1, #0
900002b6:	bf08      	it	eq
900002b8:	2800      	cmpeq	r0, #0
900002ba:	bf1c      	itt	ne
900002bc:	f04f 31ff 	movne.w	r1, #4294967295
900002c0:	f04f 30ff 	movne.w	r0, #4294967295
900002c4:	f000 b96e 	b.w	900005a4 <__aeabi_idiv0>
900002c8:	f1ad 0c08 	sub.w	ip, sp, #8
900002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
900002d0:	f000 f806 	bl	900002e0 <__udivmoddi4>
900002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
900002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
900002dc:	b004      	add	sp, #16
900002de:	4770      	bx	lr

900002e0 <__udivmoddi4>:
900002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900002e4:	9d08      	ldr	r5, [sp, #32]
900002e6:	4604      	mov	r4, r0
900002e8:	468c      	mov	ip, r1
900002ea:	2b00      	cmp	r3, #0
900002ec:	f040 8083 	bne.w	900003f6 <__udivmoddi4+0x116>
900002f0:	428a      	cmp	r2, r1
900002f2:	4617      	mov	r7, r2
900002f4:	d947      	bls.n	90000386 <__udivmoddi4+0xa6>
900002f6:	fab2 f282 	clz	r2, r2
900002fa:	b142      	cbz	r2, 9000030e <__udivmoddi4+0x2e>
900002fc:	f1c2 0020 	rsb	r0, r2, #32
90000300:	fa24 f000 	lsr.w	r0, r4, r0
90000304:	4091      	lsls	r1, r2
90000306:	4097      	lsls	r7, r2
90000308:	ea40 0c01 	orr.w	ip, r0, r1
9000030c:	4094      	lsls	r4, r2
9000030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
90000312:	0c23      	lsrs	r3, r4, #16
90000314:	fbbc f6f8 	udiv	r6, ip, r8
90000318:	fa1f fe87 	uxth.w	lr, r7
9000031c:	fb08 c116 	mls	r1, r8, r6, ip
90000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
90000324:	fb06 f10e 	mul.w	r1, r6, lr
90000328:	4299      	cmp	r1, r3
9000032a:	d909      	bls.n	90000340 <__udivmoddi4+0x60>
9000032c:	18fb      	adds	r3, r7, r3
9000032e:	f106 30ff 	add.w	r0, r6, #4294967295
90000332:	f080 8119 	bcs.w	90000568 <__udivmoddi4+0x288>
90000336:	4299      	cmp	r1, r3
90000338:	f240 8116 	bls.w	90000568 <__udivmoddi4+0x288>
9000033c:	3e02      	subs	r6, #2
9000033e:	443b      	add	r3, r7
90000340:	1a5b      	subs	r3, r3, r1
90000342:	b2a4      	uxth	r4, r4
90000344:	fbb3 f0f8 	udiv	r0, r3, r8
90000348:	fb08 3310 	mls	r3, r8, r0, r3
9000034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
90000350:	fb00 fe0e 	mul.w	lr, r0, lr
90000354:	45a6      	cmp	lr, r4
90000356:	d909      	bls.n	9000036c <__udivmoddi4+0x8c>
90000358:	193c      	adds	r4, r7, r4
9000035a:	f100 33ff 	add.w	r3, r0, #4294967295
9000035e:	f080 8105 	bcs.w	9000056c <__udivmoddi4+0x28c>
90000362:	45a6      	cmp	lr, r4
90000364:	f240 8102 	bls.w	9000056c <__udivmoddi4+0x28c>
90000368:	3802      	subs	r0, #2
9000036a:	443c      	add	r4, r7
9000036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
90000370:	eba4 040e 	sub.w	r4, r4, lr
90000374:	2600      	movs	r6, #0
90000376:	b11d      	cbz	r5, 90000380 <__udivmoddi4+0xa0>
90000378:	40d4      	lsrs	r4, r2
9000037a:	2300      	movs	r3, #0
9000037c:	e9c5 4300 	strd	r4, r3, [r5]
90000380:	4631      	mov	r1, r6
90000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000386:	b902      	cbnz	r2, 9000038a <__udivmoddi4+0xaa>
90000388:	deff      	udf	#255	; 0xff
9000038a:	fab2 f282 	clz	r2, r2
9000038e:	2a00      	cmp	r2, #0
90000390:	d150      	bne.n	90000434 <__udivmoddi4+0x154>
90000392:	1bcb      	subs	r3, r1, r7
90000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
90000398:	fa1f f887 	uxth.w	r8, r7
9000039c:	2601      	movs	r6, #1
9000039e:	fbb3 fcfe 	udiv	ip, r3, lr
900003a2:	0c21      	lsrs	r1, r4, #16
900003a4:	fb0e 331c 	mls	r3, lr, ip, r3
900003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
900003ac:	fb08 f30c 	mul.w	r3, r8, ip
900003b0:	428b      	cmp	r3, r1
900003b2:	d907      	bls.n	900003c4 <__udivmoddi4+0xe4>
900003b4:	1879      	adds	r1, r7, r1
900003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
900003ba:	d202      	bcs.n	900003c2 <__udivmoddi4+0xe2>
900003bc:	428b      	cmp	r3, r1
900003be:	f200 80e9 	bhi.w	90000594 <__udivmoddi4+0x2b4>
900003c2:	4684      	mov	ip, r0
900003c4:	1ac9      	subs	r1, r1, r3
900003c6:	b2a3      	uxth	r3, r4
900003c8:	fbb1 f0fe 	udiv	r0, r1, lr
900003cc:	fb0e 1110 	mls	r1, lr, r0, r1
900003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
900003d4:	fb08 f800 	mul.w	r8, r8, r0
900003d8:	45a0      	cmp	r8, r4
900003da:	d907      	bls.n	900003ec <__udivmoddi4+0x10c>
900003dc:	193c      	adds	r4, r7, r4
900003de:	f100 33ff 	add.w	r3, r0, #4294967295
900003e2:	d202      	bcs.n	900003ea <__udivmoddi4+0x10a>
900003e4:	45a0      	cmp	r8, r4
900003e6:	f200 80d9 	bhi.w	9000059c <__udivmoddi4+0x2bc>
900003ea:	4618      	mov	r0, r3
900003ec:	eba4 0408 	sub.w	r4, r4, r8
900003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
900003f4:	e7bf      	b.n	90000376 <__udivmoddi4+0x96>
900003f6:	428b      	cmp	r3, r1
900003f8:	d909      	bls.n	9000040e <__udivmoddi4+0x12e>
900003fa:	2d00      	cmp	r5, #0
900003fc:	f000 80b1 	beq.w	90000562 <__udivmoddi4+0x282>
90000400:	2600      	movs	r6, #0
90000402:	e9c5 0100 	strd	r0, r1, [r5]
90000406:	4630      	mov	r0, r6
90000408:	4631      	mov	r1, r6
9000040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000040e:	fab3 f683 	clz	r6, r3
90000412:	2e00      	cmp	r6, #0
90000414:	d14a      	bne.n	900004ac <__udivmoddi4+0x1cc>
90000416:	428b      	cmp	r3, r1
90000418:	d302      	bcc.n	90000420 <__udivmoddi4+0x140>
9000041a:	4282      	cmp	r2, r0
9000041c:	f200 80b8 	bhi.w	90000590 <__udivmoddi4+0x2b0>
90000420:	1a84      	subs	r4, r0, r2
90000422:	eb61 0103 	sbc.w	r1, r1, r3
90000426:	2001      	movs	r0, #1
90000428:	468c      	mov	ip, r1
9000042a:	2d00      	cmp	r5, #0
9000042c:	d0a8      	beq.n	90000380 <__udivmoddi4+0xa0>
9000042e:	e9c5 4c00 	strd	r4, ip, [r5]
90000432:	e7a5      	b.n	90000380 <__udivmoddi4+0xa0>
90000434:	f1c2 0320 	rsb	r3, r2, #32
90000438:	fa20 f603 	lsr.w	r6, r0, r3
9000043c:	4097      	lsls	r7, r2
9000043e:	fa01 f002 	lsl.w	r0, r1, r2
90000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
90000446:	40d9      	lsrs	r1, r3
90000448:	4330      	orrs	r0, r6
9000044a:	0c03      	lsrs	r3, r0, #16
9000044c:	fbb1 f6fe 	udiv	r6, r1, lr
90000450:	fa1f f887 	uxth.w	r8, r7
90000454:	fb0e 1116 	mls	r1, lr, r6, r1
90000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000045c:	fb06 f108 	mul.w	r1, r6, r8
90000460:	4299      	cmp	r1, r3
90000462:	fa04 f402 	lsl.w	r4, r4, r2
90000466:	d909      	bls.n	9000047c <__udivmoddi4+0x19c>
90000468:	18fb      	adds	r3, r7, r3
9000046a:	f106 3cff 	add.w	ip, r6, #4294967295
9000046e:	f080 808d 	bcs.w	9000058c <__udivmoddi4+0x2ac>
90000472:	4299      	cmp	r1, r3
90000474:	f240 808a 	bls.w	9000058c <__udivmoddi4+0x2ac>
90000478:	3e02      	subs	r6, #2
9000047a:	443b      	add	r3, r7
9000047c:	1a5b      	subs	r3, r3, r1
9000047e:	b281      	uxth	r1, r0
90000480:	fbb3 f0fe 	udiv	r0, r3, lr
90000484:	fb0e 3310 	mls	r3, lr, r0, r3
90000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
9000048c:	fb00 f308 	mul.w	r3, r0, r8
90000490:	428b      	cmp	r3, r1
90000492:	d907      	bls.n	900004a4 <__udivmoddi4+0x1c4>
90000494:	1879      	adds	r1, r7, r1
90000496:	f100 3cff 	add.w	ip, r0, #4294967295
9000049a:	d273      	bcs.n	90000584 <__udivmoddi4+0x2a4>
9000049c:	428b      	cmp	r3, r1
9000049e:	d971      	bls.n	90000584 <__udivmoddi4+0x2a4>
900004a0:	3802      	subs	r0, #2
900004a2:	4439      	add	r1, r7
900004a4:	1acb      	subs	r3, r1, r3
900004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
900004aa:	e778      	b.n	9000039e <__udivmoddi4+0xbe>
900004ac:	f1c6 0c20 	rsb	ip, r6, #32
900004b0:	fa03 f406 	lsl.w	r4, r3, r6
900004b4:	fa22 f30c 	lsr.w	r3, r2, ip
900004b8:	431c      	orrs	r4, r3
900004ba:	fa20 f70c 	lsr.w	r7, r0, ip
900004be:	fa01 f306 	lsl.w	r3, r1, r6
900004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
900004c6:	fa21 f10c 	lsr.w	r1, r1, ip
900004ca:	431f      	orrs	r7, r3
900004cc:	0c3b      	lsrs	r3, r7, #16
900004ce:	fbb1 f9fe 	udiv	r9, r1, lr
900004d2:	fa1f f884 	uxth.w	r8, r4
900004d6:	fb0e 1119 	mls	r1, lr, r9, r1
900004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
900004de:	fb09 fa08 	mul.w	sl, r9, r8
900004e2:	458a      	cmp	sl, r1
900004e4:	fa02 f206 	lsl.w	r2, r2, r6
900004e8:	fa00 f306 	lsl.w	r3, r0, r6
900004ec:	d908      	bls.n	90000500 <__udivmoddi4+0x220>
900004ee:	1861      	adds	r1, r4, r1
900004f0:	f109 30ff 	add.w	r0, r9, #4294967295
900004f4:	d248      	bcs.n	90000588 <__udivmoddi4+0x2a8>
900004f6:	458a      	cmp	sl, r1
900004f8:	d946      	bls.n	90000588 <__udivmoddi4+0x2a8>
900004fa:	f1a9 0902 	sub.w	r9, r9, #2
900004fe:	4421      	add	r1, r4
90000500:	eba1 010a 	sub.w	r1, r1, sl
90000504:	b2bf      	uxth	r7, r7
90000506:	fbb1 f0fe 	udiv	r0, r1, lr
9000050a:	fb0e 1110 	mls	r1, lr, r0, r1
9000050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
90000512:	fb00 f808 	mul.w	r8, r0, r8
90000516:	45b8      	cmp	r8, r7
90000518:	d907      	bls.n	9000052a <__udivmoddi4+0x24a>
9000051a:	19e7      	adds	r7, r4, r7
9000051c:	f100 31ff 	add.w	r1, r0, #4294967295
90000520:	d22e      	bcs.n	90000580 <__udivmoddi4+0x2a0>
90000522:	45b8      	cmp	r8, r7
90000524:	d92c      	bls.n	90000580 <__udivmoddi4+0x2a0>
90000526:	3802      	subs	r0, #2
90000528:	4427      	add	r7, r4
9000052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
9000052e:	eba7 0708 	sub.w	r7, r7, r8
90000532:	fba0 8902 	umull	r8, r9, r0, r2
90000536:	454f      	cmp	r7, r9
90000538:	46c6      	mov	lr, r8
9000053a:	4649      	mov	r1, r9
9000053c:	d31a      	bcc.n	90000574 <__udivmoddi4+0x294>
9000053e:	d017      	beq.n	90000570 <__udivmoddi4+0x290>
90000540:	b15d      	cbz	r5, 9000055a <__udivmoddi4+0x27a>
90000542:	ebb3 020e 	subs.w	r2, r3, lr
90000546:	eb67 0701 	sbc.w	r7, r7, r1
9000054a:	fa07 fc0c 	lsl.w	ip, r7, ip
9000054e:	40f2      	lsrs	r2, r6
90000550:	ea4c 0202 	orr.w	r2, ip, r2
90000554:	40f7      	lsrs	r7, r6
90000556:	e9c5 2700 	strd	r2, r7, [r5]
9000055a:	2600      	movs	r6, #0
9000055c:	4631      	mov	r1, r6
9000055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000562:	462e      	mov	r6, r5
90000564:	4628      	mov	r0, r5
90000566:	e70b      	b.n	90000380 <__udivmoddi4+0xa0>
90000568:	4606      	mov	r6, r0
9000056a:	e6e9      	b.n	90000340 <__udivmoddi4+0x60>
9000056c:	4618      	mov	r0, r3
9000056e:	e6fd      	b.n	9000036c <__udivmoddi4+0x8c>
90000570:	4543      	cmp	r3, r8
90000572:	d2e5      	bcs.n	90000540 <__udivmoddi4+0x260>
90000574:	ebb8 0e02 	subs.w	lr, r8, r2
90000578:	eb69 0104 	sbc.w	r1, r9, r4
9000057c:	3801      	subs	r0, #1
9000057e:	e7df      	b.n	90000540 <__udivmoddi4+0x260>
90000580:	4608      	mov	r0, r1
90000582:	e7d2      	b.n	9000052a <__udivmoddi4+0x24a>
90000584:	4660      	mov	r0, ip
90000586:	e78d      	b.n	900004a4 <__udivmoddi4+0x1c4>
90000588:	4681      	mov	r9, r0
9000058a:	e7b9      	b.n	90000500 <__udivmoddi4+0x220>
9000058c:	4666      	mov	r6, ip
9000058e:	e775      	b.n	9000047c <__udivmoddi4+0x19c>
90000590:	4630      	mov	r0, r6
90000592:	e74a      	b.n	9000042a <__udivmoddi4+0x14a>
90000594:	f1ac 0c02 	sub.w	ip, ip, #2
90000598:	4439      	add	r1, r7
9000059a:	e713      	b.n	900003c4 <__udivmoddi4+0xe4>
9000059c:	3802      	subs	r0, #2
9000059e:	443c      	add	r4, r7
900005a0:	e724      	b.n	900003ec <__udivmoddi4+0x10c>
900005a2:	bf00      	nop

900005a4 <__aeabi_idiv0>:
900005a4:	4770      	bx	lr
900005a6:	bf00      	nop

900005a8 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
900005a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
900005ac:	4c19      	ldr	r4, [pc, #100]	; (90000614 <LL_FillBuffer+0x6c>)
{
900005ae:	4698      	mov	r8, r3
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
900005b0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
{
900005b4:	460e      	mov	r6, r1
900005b6:	4617      	mov	r7, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900005b8:	2134      	movs	r1, #52	; 0x34
900005ba:	4a17      	ldr	r2, [pc, #92]	; (90000618 <LL_FillBuffer+0x70>)
{
900005bc:	4681      	mov	r9, r0
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
900005be:	6063      	str	r3, [r4, #4]
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
900005c0:	4620      	mov	r0, r4
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900005c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
{
900005c4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900005c8:	fb01 2303 	mla	r3, r1, r3, r2
900005cc:	6c9d      	ldr	r5, [r3, #72]	; 0x48
  hDma2dHandler.Init.OutputOffset = OffLine;      
900005ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
900005d0:	2d02      	cmp	r5, #2
  hDma2dHandler.Init.OutputOffset = OffLine;      
900005d2:	60e3      	str	r3, [r4, #12]
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
900005d4:	bf18      	it	ne
900005d6:	2500      	movne	r5, #0
  hDma2dHandler.Instance = DMA2D;
900005d8:	4b10      	ldr	r3, [pc, #64]	; (9000061c <LL_FillBuffer+0x74>)
900005da:	60a5      	str	r5, [r4, #8]
900005dc:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
900005de:	f000 ff00 	bl	900013e2 <HAL_DMA2D_Init>
900005e2:	b9a0      	cbnz	r0, 9000060e <LL_FillBuffer+0x66>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
900005e4:	4649      	mov	r1, r9
900005e6:	4620      	mov	r0, r4
900005e8:	f000 ffc2 	bl	90001570 <HAL_DMA2D_ConfigLayer>
900005ec:	b978      	cbnz	r0, 9000060e <LL_FillBuffer+0x66>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
900005ee:	463b      	mov	r3, r7
900005f0:	4632      	mov	r2, r6
900005f2:	4651      	mov	r1, sl
900005f4:	4620      	mov	r0, r4
900005f6:	f8cd 8000 	str.w	r8, [sp]
900005fa:	f000 ff1e 	bl	9000143a <HAL_DMA2D_Start>
900005fe:	b930      	cbnz	r0, 9000060e <LL_FillBuffer+0x66>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
90000600:	210a      	movs	r1, #10
90000602:	4620      	mov	r0, r4
      }
    }
  } 
}
90000604:	b002      	add	sp, #8
90000606:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
9000060a:	f000 bf30 	b.w	9000146e <HAL_DMA2D_PollForTransfer>
}
9000060e:	b002      	add	sp, #8
90000610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000614:	200002e0 	.word	0x200002e0
90000618:	200004bc 	.word	0x200004bc
9000061c:	4002b000 	.word	0x4002b000

90000620 <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90000620:	4b03      	ldr	r3, [pc, #12]	; (90000630 <BSP_LCD_GetXSize+0x10>)
90000622:	2134      	movs	r1, #52	; 0x34
90000624:	4a03      	ldr	r2, [pc, #12]	; (90000634 <BSP_LCD_GetXSize+0x14>)
90000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90000628:	fb01 2303 	mla	r3, r1, r3, r2
}
9000062c:	6e18      	ldr	r0, [r3, #96]	; 0x60
9000062e:	4770      	bx	lr
90000630:	200002e0 	.word	0x200002e0
90000634:	200004bc 	.word	0x200004bc

90000638 <BSP_LCD_LayerDefaultInit>:
{     
90000638:	b570      	push	{r4, r5, r6, lr}
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
9000063a:	4d18      	ldr	r5, [pc, #96]	; (9000069c <BSP_LCD_LayerDefaultInit+0x64>)
{     
9000063c:	4604      	mov	r4, r0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
9000063e:	2634      	movs	r6, #52	; 0x34
90000640:	4817      	ldr	r0, [pc, #92]	; (900006a0 <BSP_LCD_LayerDefaultInit+0x68>)
90000642:	6c2a      	ldr	r2, [r5, #64]	; 0x40
{     
90000644:	b08e      	sub	sp, #56	; 0x38
  layer_cfg.WindowX0 = 0;
90000646:	2300      	movs	r3, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90000648:	fb06 0202 	mla	r2, r6, r2, r0
  layer_cfg.FBStartAdress = FB_Address;
9000064c:	910a      	str	r1, [sp, #40]	; 0x28
  layer_cfg.Alpha = 255;
9000064e:	21ff      	movs	r1, #255	; 0xff
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90000650:	6e16      	ldr	r6, [r2, #96]	; 0x60
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
90000652:	6e52      	ldr	r2, [r2, #100]	; 0x64
  layer_cfg.WindowX0 = 0;
90000654:	9301      	str	r3, [sp, #4]
  layer_cfg.Backcolor.Blue = 0;
90000656:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Red = 0;
9000065a:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
9000065e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  layer_cfg.Alpha0 = 0;
90000662:	e9cd 1306 	strd	r1, r3, [sp, #24]
  layer_cfg.WindowY0 = 0;
90000666:	e9cd 6302 	strd	r6, r3, [sp, #8]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
9000066a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
9000066e:	2307      	movs	r3, #7
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
90000670:	e9cd 620b 	strd	r6, r2, [sp, #44]	; 0x2c
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
90000674:	e9cd 1308 	strd	r1, r3, [sp, #32]
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
90000678:	4622      	mov	r2, r4
9000067a:	a901      	add	r1, sp, #4
9000067c:	f001 f9ac 	bl	900019d8 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
90000680:	200c      	movs	r0, #12
90000682:	f04f 33ff 	mov.w	r3, #4294967295
90000686:	fb00 5004 	mla	r0, r0, r4, r5
9000068a:	6483      	str	r3, [r0, #72]	; 0x48
  DrawProp[LayerIndex].pFont     = &Font24;
9000068c:	4b05      	ldr	r3, [pc, #20]	; (900006a4 <BSP_LCD_LayerDefaultInit+0x6c>)
9000068e:	64c3      	str	r3, [r0, #76]	; 0x4c
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
90000690:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
90000694:	6443      	str	r3, [r0, #68]	; 0x44
}
90000696:	b00e      	add	sp, #56	; 0x38
90000698:	bd70      	pop	{r4, r5, r6, pc}
9000069a:	bf00      	nop
9000069c:	200002e0 	.word	0x200002e0
900006a0:	200004bc 	.word	0x200004bc
900006a4:	20000000 	.word	0x20000000

900006a8 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
900006a8:	4b01      	ldr	r3, [pc, #4]	; (900006b0 <BSP_LCD_SelectLayer+0x8>)
900006aa:	6418      	str	r0, [r3, #64]	; 0x40
} 
900006ac:	4770      	bx	lr
900006ae:	bf00      	nop
900006b0:	200002e0 	.word	0x200002e0

900006b4 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
900006b4:	4a03      	ldr	r2, [pc, #12]	; (900006c4 <BSP_LCD_SetTextColor+0x10>)
900006b6:	210c      	movs	r1, #12
900006b8:	6c13      	ldr	r3, [r2, #64]	; 0x40
900006ba:	fb01 2303 	mla	r3, r1, r3, r2
900006be:	6458      	str	r0, [r3, #68]	; 0x44
}
900006c0:	4770      	bx	lr
900006c2:	bf00      	nop
900006c4:	200002e0 	.word	0x200002e0

900006c8 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
900006c8:	4a03      	ldr	r2, [pc, #12]	; (900006d8 <BSP_LCD_SetBackColor+0x10>)
900006ca:	210c      	movs	r1, #12
900006cc:	6c13      	ldr	r3, [r2, #64]	; 0x40
900006ce:	fb01 2303 	mla	r3, r1, r3, r2
900006d2:	6498      	str	r0, [r3, #72]	; 0x48
}
900006d4:	4770      	bx	lr
900006d6:	bf00      	nop
900006d8:	200002e0 	.word	0x200002e0

900006dc <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
900006dc:	4a03      	ldr	r2, [pc, #12]	; (900006ec <BSP_LCD_SetFont+0x10>)
900006de:	210c      	movs	r1, #12
900006e0:	6c13      	ldr	r3, [r2, #64]	; 0x40
900006e2:	fb01 2303 	mla	r3, r1, r3, r2
900006e6:	64d8      	str	r0, [r3, #76]	; 0x4c
}
900006e8:	4770      	bx	lr
900006ea:	bf00      	nop
900006ec:	200002e0 	.word	0x200002e0

900006f0 <BSP_LCD_GetFont>:
  return DrawProp[ActiveLayer].pFont;
900006f0:	4a03      	ldr	r2, [pc, #12]	; (90000700 <BSP_LCD_GetFont+0x10>)
900006f2:	210c      	movs	r1, #12
900006f4:	6c13      	ldr	r3, [r2, #64]	; 0x40
900006f6:	fb01 2303 	mla	r3, r1, r3, r2
}
900006fa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
900006fc:	4770      	bx	lr
900006fe:	bf00      	nop
90000700:	200002e0 	.word	0x200002e0

90000704 <BSP_LCD_Clear>:
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
90000704:	4b08      	ldr	r3, [pc, #32]	; (90000728 <BSP_LCD_Clear+0x24>)
{ 
90000706:	b513      	push	{r0, r1, r4, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
90000708:	6c1c      	ldr	r4, [r3, #64]	; 0x40
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
9000070a:	2134      	movs	r1, #52	; 0x34
9000070c:	4b07      	ldr	r3, [pc, #28]	; (9000072c <BSP_LCD_Clear+0x28>)
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
9000070e:	9001      	str	r0, [sp, #4]
90000710:	4620      	mov	r0, r4
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
90000712:	fb01 3104 	mla	r1, r1, r4, r3
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
90000716:	2300      	movs	r3, #0
90000718:	9300      	str	r3, [sp, #0]
9000071a:	e9d1 2318 	ldrd	r2, r3, [r1, #96]	; 0x60
9000071e:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
90000720:	f7ff ff42 	bl	900005a8 <LL_FillBuffer>
}
90000724:	b002      	add	sp, #8
90000726:	bd10      	pop	{r4, pc}
90000728:	200002e0 	.word	0x200002e0
9000072c:	200004bc 	.word	0x200004bc

90000730 <BSP_LCD_DrawPixel>:
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90000730:	4b0a      	ldr	r3, [pc, #40]	; (9000075c <BSP_LCD_DrawPixel+0x2c>)
{
90000732:	b530      	push	{r4, r5, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90000734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90000736:	2534      	movs	r5, #52	; 0x34
90000738:	4c09      	ldr	r4, [pc, #36]	; (90000760 <BSP_LCD_DrawPixel+0x30>)
9000073a:	fb05 4303 	mla	r3, r5, r3, r4
9000073e:	e9d3 4517 	ldrd	r4, r5, [r3, #92]	; 0x5c
90000742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90000744:	fb05 0101 	mla	r1, r5, r1, r0
90000748:	2b02      	cmp	r3, #2
9000074a:	d103      	bne.n	90000754 <BSP_LCD_DrawPixel+0x24>
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
9000074c:	b292      	uxth	r2, r2
9000074e:	f824 2011 	strh.w	r2, [r4, r1, lsl #1]
}
90000752:	bd30      	pop	{r4, r5, pc}
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
90000754:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
}
90000758:	e7fb      	b.n	90000752 <BSP_LCD_DrawPixel+0x22>
9000075a:	bf00      	nop
9000075c:	200002e0 	.word	0x200002e0
90000760:	200004bc 	.word	0x200004bc

90000764 <BSP_LCD_DisplayChar>:
{
90000764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90000768:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
9000076a:	f1a2 0520 	sub.w	r5, r2, #32
  for(i = 0; i < height; i++)
9000076e:	f04f 0800 	mov.w	r8, #0
{
90000772:	e9cd 0100 	strd	r0, r1, [sp]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
90000776:	4828      	ldr	r0, [pc, #160]	; (90000818 <BSP_LCD_DisplayChar+0xb4>)
90000778:	210c      	movs	r1, #12
9000077a:	f8d0 b040 	ldr.w	fp, [r0, #64]	; 0x40
9000077e:	fb01 010b 	mla	r1, r1, fp, r0
90000782:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
90000784:	f8b1 9004 	ldrh.w	r9, [r1, #4]
90000788:	f8b1 a006 	ldrh.w	sl, [r1, #6]
9000078c:	f109 0607 	add.w	r6, r9, #7
90000790:	680a      	ldr	r2, [r1, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
90000792:	fb0a f505 	mul.w	r5, sl, r5
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
90000796:	10f6      	asrs	r6, r6, #3
  offset =  8 *((width + 7)/8) -  width ;
90000798:	ebc9 00c6 	rsb	r0, r9, r6, lsl #3
  for(i = 0; i < height; i++)
9000079c:	fb06 2505 	mla	r5, r6, r5, r2
      if(line & (1 << (width- j + offset- 1))) 
900007a0:	f109 32ff 	add.w	r2, r9, #4294967295
900007a4:	fa52 f380 	uxtab	r3, r2, r0
900007a8:	9302      	str	r3, [sp, #8]
900007aa:	9b01      	ldr	r3, [sp, #4]
  for(i = 0; i < height; i++)
900007ac:	45d0      	cmp	r8, sl
900007ae:	eb03 0108 	add.w	r1, r3, r8
900007b2:	b289      	uxth	r1, r1
900007b4:	d302      	bcc.n	900007bc <BSP_LCD_DisplayChar+0x58>
}
900007b6:	b005      	add	sp, #20
900007b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
900007bc:	2e01      	cmp	r6, #1
900007be:	782c      	ldrb	r4, [r5, #0]
900007c0:	d004      	beq.n	900007cc <BSP_LCD_DisplayChar+0x68>
900007c2:	2e02      	cmp	r6, #2
900007c4:	d109      	bne.n	900007da <BSP_LCD_DisplayChar+0x76>
      line =  (pchar[0]<< 8) | pchar[1];      
900007c6:	882c      	ldrh	r4, [r5, #0]
900007c8:	ba64      	rev16	r4, r4
900007ca:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
900007cc:	2700      	movs	r7, #0
900007ce:	45b9      	cmp	r9, r7
900007d0:	d80a      	bhi.n	900007e8 <BSP_LCD_DisplayChar+0x84>
  for(i = 0; i < height; i++)
900007d2:	f108 0801 	add.w	r8, r8, #1
900007d6:	4435      	add	r5, r6
900007d8:	e7e7      	b.n	900007aa <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
900007da:	786a      	ldrb	r2, [r5, #1]
900007dc:	0424      	lsls	r4, r4, #16
900007de:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
900007e2:	78aa      	ldrb	r2, [r5, #2]
900007e4:	4314      	orrs	r4, r2
      break;
900007e6:	e7f1      	b.n	900007cc <BSP_LCD_DisplayChar+0x68>
      if(line & (1 << (width- j + offset- 1))) 
900007e8:	9b00      	ldr	r3, [sp, #0]
900007ea:	2201      	movs	r2, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
900007ec:	9103      	str	r1, [sp, #12]
900007ee:	19d8      	adds	r0, r3, r7
      if(line & (1 << (width- j + offset- 1))) 
900007f0:	9b02      	ldr	r3, [sp, #8]
900007f2:	eba3 0c07 	sub.w	ip, r3, r7
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
900007f6:	4b08      	ldr	r3, [pc, #32]	; (90000818 <BSP_LCD_DisplayChar+0xb4>)
900007f8:	b280      	uxth	r0, r0
    for (j = 0; j < width; j++)
900007fa:	3701      	adds	r7, #1
      if(line & (1 << (width- j + offset- 1))) 
900007fc:	fa02 f20c 	lsl.w	r2, r2, ip
90000800:	4222      	tst	r2, r4
90000802:	f04f 020c 	mov.w	r2, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
90000806:	fb02 320b 	mla	r2, r2, fp, r3
9000080a:	bf14      	ite	ne
9000080c:	6c52      	ldrne	r2, [r2, #68]	; 0x44
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
9000080e:	6c92      	ldreq	r2, [r2, #72]	; 0x48
90000810:	f7ff ff8e 	bl	90000730 <BSP_LCD_DrawPixel>
90000814:	9903      	ldr	r1, [sp, #12]
    for (j = 0; j < width; j++)
90000816:	e7da      	b.n	900007ce <BSP_LCD_DisplayChar+0x6a>
90000818:	200002e0 	.word	0x200002e0

9000081c <BSP_LCD_DisplayStringAt>:
{
9000081c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90000820:	4605      	mov	r5, r0
90000822:	468a      	mov	sl, r1
90000824:	4616      	mov	r6, r2
  while (*ptr++) size ++ ;
90000826:	4614      	mov	r4, r2
90000828:	f812 0b01 	ldrb.w	r0, [r2], #1
9000082c:	2800      	cmp	r0, #0
9000082e:	d1fa      	bne.n	90000826 <BSP_LCD_DisplayStringAt+0xa>
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90000830:	4824      	ldr	r0, [pc, #144]	; (900008c4 <BSP_LCD_DisplayStringAt+0xa8>)
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
90000832:	220c      	movs	r2, #12
  switch (Mode)
90000834:	2b01      	cmp	r3, #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90000836:	6c01      	ldr	r1, [r0, #64]	; 0x40
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
90000838:	fb02 0201 	mla	r2, r2, r1, r0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
9000083c:	f04f 0034 	mov.w	r0, #52	; 0x34
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
90000840:	6cd7      	ldr	r7, [r2, #76]	; 0x4c
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90000842:	4a21      	ldr	r2, [pc, #132]	; (900008c8 <BSP_LCD_DisplayStringAt+0xac>)
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
90000844:	f8b7 e004 	ldrh.w	lr, [r7, #4]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90000848:	fb00 2001 	mla	r0, r0, r1, r2
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
9000084c:	6e00      	ldr	r0, [r0, #96]	; 0x60
9000084e:	fbb0 f0fe 	udiv	r0, r0, lr
  switch (Mode)
90000852:	d021      	beq.n	90000898 <BSP_LCD_DisplayStringAt+0x7c>
90000854:	2b02      	cmp	r3, #2
90000856:	d027      	beq.n	900008a8 <BSP_LCD_DisplayStringAt+0x8c>
  if ((ref_column < 1) || (ref_column >= 0x8000))
90000858:	b22b      	sxth	r3, r5
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
9000085a:	f04f 0834 	mov.w	r8, #52	; 0x34
    ref_column = 1;
9000085e:	f04f 0900 	mov.w	r9, #0
90000862:	2b00      	cmp	r3, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90000864:	fb08 2801 	mla	r8, r8, r1, r2
    ref_column = 1;
90000868:	bfd8      	it	le
9000086a:	2501      	movle	r5, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
9000086c:	88bc      	ldrh	r4, [r7, #4]
9000086e:	fa1f f389 	uxth.w	r3, r9
90000872:	f8d8 0060 	ldr.w	r0, [r8, #96]	; 0x60
90000876:	f816 2009 	ldrb.w	r2, [r6, r9]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
9000087a:	f109 0901 	add.w	r9, r9, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
9000087e:	fb04 0313 	mls	r3, r4, r3, r0
90000882:	b29b      	uxth	r3, r3
90000884:	42a3      	cmp	r3, r4
90000886:	bf34      	ite	cc
90000888:	2300      	movcc	r3, #0
9000088a:	2301      	movcs	r3, #1
9000088c:	2a00      	cmp	r2, #0
9000088e:	bf08      	it	eq
90000890:	2300      	moveq	r3, #0
90000892:	b97b      	cbnz	r3, 900008b4 <BSP_LCD_DisplayStringAt+0x98>
}
90000894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
90000898:	1b34      	subs	r4, r6, r4
9000089a:	4404      	add	r4, r0
9000089c:	fb0e f404 	mul.w	r4, lr, r4
900008a0:	eb05 0054 	add.w	r0, r5, r4, lsr #1
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
900008a4:	b285      	uxth	r5, r0
      break;
900008a6:	e7d7      	b.n	90000858 <BSP_LCD_DisplayStringAt+0x3c>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
900008a8:	1b34      	subs	r4, r6, r4
900008aa:	4404      	add	r4, r0
900008ac:	fb14 f40e 	smulbb	r4, r4, lr
900008b0:	1b60      	subs	r0, r4, r5
900008b2:	e7f7      	b.n	900008a4 <BSP_LCD_DisplayStringAt+0x88>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
900008b4:	4628      	mov	r0, r5
900008b6:	4651      	mov	r1, sl
900008b8:	f7ff ff54 	bl	90000764 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
900008bc:	88b8      	ldrh	r0, [r7, #4]
900008be:	4428      	add	r0, r5
900008c0:	b285      	uxth	r5, r0
    i++;
900008c2:	e7d3      	b.n	9000086c <BSP_LCD_DisplayStringAt+0x50>
900008c4:	200002e0 	.word	0x200002e0
900008c8:	200004bc 	.word	0x200004bc

900008cc <BSP_LCD_DisplayStringAtLine>:
{  
900008cc:	b410      	push	{r4}
  return DrawProp[ActiveLayer].pFont;
900008ce:	4c08      	ldr	r4, [pc, #32]	; (900008f0 <BSP_LCD_DisplayStringAtLine+0x24>)
{  
900008d0:	460a      	mov	r2, r1
  return DrawProp[ActiveLayer].pFont;
900008d2:	210c      	movs	r1, #12
900008d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
900008d6:	fb01 4303 	mla	r3, r1, r3, r4
}
900008da:	f85d 4b04 	ldr.w	r4, [sp], #4
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
900008de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900008e0:	88db      	ldrh	r3, [r3, #6]
900008e2:	fb13 f000 	smulbb	r0, r3, r0
900008e6:	2303      	movs	r3, #3
900008e8:	b281      	uxth	r1, r0
900008ea:	2000      	movs	r0, #0
900008ec:	f7ff bf96 	b.w	9000081c <BSP_LCD_DisplayStringAt>
900008f0:	200002e0 	.word	0x200002e0

900008f4 <BSP_LCD_FillRect>:
{
900008f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
900008f6:	4d0f      	ldr	r5, [pc, #60]	; (90000934 <BSP_LCD_FillRect+0x40>)
900008f8:	240c      	movs	r4, #12
900008fa:	6c2f      	ldr	r7, [r5, #64]	; 0x40
900008fc:	fb04 5407 	mla	r4, r4, r7, r5
90000900:	2534      	movs	r5, #52	; 0x34
90000902:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90000906:	4c0c      	ldr	r4, [pc, #48]	; (90000938 <BSP_LCD_FillRect+0x44>)
90000908:	fb05 4507 	mla	r5, r5, r7, r4
9000090c:	e9d5 4617 	ldrd	r4, r6, [r5, #92]	; 0x5c
90000910:	fb06 0101 	mla	r1, r6, r1, r0
90000914:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
90000916:	1ab6      	subs	r6, r6, r2
90000918:	f8cd c004 	str.w	ip, [sp, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
9000091c:	2802      	cmp	r0, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
9000091e:	4638      	mov	r0, r7
90000920:	9600      	str	r6, [sp, #0]
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
90000922:	bf0c      	ite	eq
90000924:	eb04 0141 	addeq.w	r1, r4, r1, lsl #1
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
90000928:	eb04 0181 	addne.w	r1, r4, r1, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
9000092c:	f7ff fe3c 	bl	900005a8 <LL_FillBuffer>
}
90000930:	b003      	add	sp, #12
90000932:	bdf0      	pop	{r4, r5, r6, r7, pc}
90000934:	200002e0 	.word	0x200002e0
90000938:	200004bc 	.word	0x200004bc

9000093c <BSP_LCD_DisplayOn>:
{
9000093c:	b508      	push	{r3, lr}
  __HAL_LTDC_ENABLE(&hLtdcHandler);
9000093e:	4b09      	ldr	r3, [pc, #36]	; (90000964 <BSP_LCD_DisplayOn+0x28>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
90000940:	f44f 5180 	mov.w	r1, #4096	; 0x1000
90000944:	4808      	ldr	r0, [pc, #32]	; (90000968 <BSP_LCD_DisplayOn+0x2c>)
  __HAL_LTDC_ENABLE(&hLtdcHandler);
90000946:	681a      	ldr	r2, [r3, #0]
90000948:	6993      	ldr	r3, [r2, #24]
9000094a:	f043 0301 	orr.w	r3, r3, #1
9000094e:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
90000950:	2201      	movs	r2, #1
90000952:	f000 ff3b 	bl	900017cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
90000956:	2201      	movs	r2, #1
90000958:	2108      	movs	r1, #8
9000095a:	4804      	ldr	r0, [pc, #16]	; (9000096c <BSP_LCD_DisplayOn+0x30>)
}
9000095c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
90000960:	f000 bf34 	b.w	900017cc <HAL_GPIO_WritePin>
90000964:	200004bc 	.word	0x200004bc
90000968:	40022000 	.word	0x40022000
9000096c:	40022800 	.word	0x40022800

90000970 <BSP_LCD_DisplayOff>:
{
90000970:	b508      	push	{r3, lr}
  __HAL_LTDC_DISABLE(&hLtdcHandler);
90000972:	4b09      	ldr	r3, [pc, #36]	; (90000998 <BSP_LCD_DisplayOff+0x28>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_RESET);      /* De-assert LCD_DISP pin */
90000974:	f44f 5180 	mov.w	r1, #4096	; 0x1000
90000978:	4808      	ldr	r0, [pc, #32]	; (9000099c <BSP_LCD_DisplayOff+0x2c>)
  __HAL_LTDC_DISABLE(&hLtdcHandler);
9000097a:	681a      	ldr	r2, [r3, #0]
9000097c:	6993      	ldr	r3, [r2, #24]
9000097e:	f023 0301 	bic.w	r3, r3, #1
90000982:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_RESET);      /* De-assert LCD_DISP pin */
90000984:	2200      	movs	r2, #0
90000986:	f000 ff21 	bl	900017cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_RESET);/* De-assert LCD_BL_CTRL pin */
9000098a:	2200      	movs	r2, #0
9000098c:	2108      	movs	r1, #8
9000098e:	4804      	ldr	r0, [pc, #16]	; (900009a0 <BSP_LCD_DisplayOff+0x30>)
}
90000990:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_RESET);/* De-assert LCD_BL_CTRL pin */
90000994:	f000 bf1a 	b.w	900017cc <HAL_GPIO_WritePin>
90000998:	200004bc 	.word	0x200004bc
9000099c:	40022000 	.word	0x40022000
900009a0:	40022800 	.word	0x40022800

900009a4 <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
900009a4:	4b4b      	ldr	r3, [pc, #300]	; (90000ad4 <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
900009a6:	484c      	ldr	r0, [pc, #304]	; (90000ad8 <BSP_LCD_MspInit+0x134>)
  __HAL_RCC_LTDC_CLK_ENABLE();
900009a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
900009aa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
{
900009ae:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
900009b0:	645a      	str	r2, [r3, #68]	; 0x44
{
900009b2:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
900009b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
900009b6:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
900009b8:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
900009ba:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_LTDC_CLK_ENABLE();
900009bc:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  gpio_init_structure.Pin       = GPIO_PIN_12;
900009c0:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
900009c4:	4e45      	ldr	r6, [pc, #276]	; (90000adc <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
900009c6:	9200      	str	r2, [sp, #0]
900009c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
900009ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900009cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
900009d0:	631a      	str	r2, [r3, #48]	; 0x30
900009d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900009d4:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
900009d8:	9201      	str	r2, [sp, #4]
900009da:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
900009dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900009de:	f042 0210 	orr.w	r2, r2, #16
900009e2:	631a      	str	r2, [r3, #48]	; 0x30
900009e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900009e6:	f002 0210 	and.w	r2, r2, #16
900009ea:	9202      	str	r2, [sp, #8]
900009ec:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
900009ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900009f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
900009f4:	631a      	str	r2, [r3, #48]	; 0x30
900009f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900009f8:	f002 0240 	and.w	r2, r2, #64	; 0x40
900009fc:	9203      	str	r2, [sp, #12]
900009fe:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
90000a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000a02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
90000a06:	631a      	str	r2, [r3, #48]	; 0x30
90000a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000a0a:	f402 7280 	and.w	r2, r2, #256	; 0x100
90000a0e:	9204      	str	r2, [sp, #16]
90000a10:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
90000a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
90000a18:	631a      	str	r2, [r3, #48]	; 0x30
90000a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000a1c:	f402 7200 	and.w	r2, r2, #512	; 0x200
90000a20:	9205      	str	r2, [sp, #20]
90000a22:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
90000a24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000a26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
90000a2a:	631a      	str	r2, [r3, #48]	; 0x30
90000a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000a2e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
90000a32:	9206      	str	r2, [sp, #24]
90000a34:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
90000a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000a38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
90000a3c:	631a      	str	r2, [r3, #48]	; 0x30
90000a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000a40:	f402 7280 	and.w	r2, r2, #256	; 0x100
90000a44:	9207      	str	r2, [sp, #28]
90000a46:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
90000a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000a4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
90000a4e:	631a      	str	r2, [r3, #48]	; 0x30
90000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
90000a52:	950d      	str	r5, [sp, #52]	; 0x34
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
90000a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
90000a58:	9308      	str	r3, [sp, #32]
90000a5a:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90000a5c:	2310      	movs	r3, #16
90000a5e:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
90000a62:	2300      	movs	r3, #0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
90000a64:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90000a68:	f000 fdca 	bl	90001600 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
90000a6c:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90000a6e:	a909      	add	r1, sp, #36	; 0x24
90000a70:	481b      	ldr	r0, [pc, #108]	; (90000ae0 <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
90000a72:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90000a74:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90000a78:	f000 fdc2 	bl	90001600 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
90000a7c:	f44f 4366 	mov.w	r3, #58880	; 0xe600
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90000a80:	a909      	add	r1, sp, #36	; 0x24
90000a82:	4630      	mov	r0, r6
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90000a84:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90000a86:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90000a8a:	f000 fdb9 	bl	90001600 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
90000a8e:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
90000a92:	a909      	add	r1, sp, #36	; 0x24
90000a94:	4813      	ldr	r0, [pc, #76]	; (90000ae4 <BSP_LCD_MspInit+0x140>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90000a96:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90000a98:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
90000a9c:	f000 fdb0 	bl	90001600 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
90000aa0:	23f7      	movs	r3, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
90000aa2:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90000aa4:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
90000aa6:	2501      	movs	r5, #1
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90000aa8:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
90000aac:	4c0e      	ldr	r4, [pc, #56]	; (90000ae8 <BSP_LCD_MspInit+0x144>)
90000aae:	4620      	mov	r0, r4
90000ab0:	f000 fda6 	bl	90001600 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
90000ab4:	a909      	add	r1, sp, #36	; 0x24
90000ab6:	4630      	mov	r0, r6
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
90000ab8:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
90000aba:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
90000abc:	f000 fda0 	bl	90001600 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
90000ac0:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
90000ac2:	a909      	add	r1, sp, #36	; 0x24
90000ac4:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
90000ac6:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
90000aca:	f000 fd99 	bl	90001600 <HAL_GPIO_Init>
}
90000ace:	b00f      	add	sp, #60	; 0x3c
90000ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
90000ad2:	bf00      	nop
90000ad4:	40023800 	.word	0x40023800
90000ad8:	40021000 	.word	0x40021000
90000adc:	40022000 	.word	0x40022000
90000ae0:	40021800 	.word	0x40021800
90000ae4:	40022400 	.word	0x40022400
90000ae8:	40022800 	.word	0x40022800

90000aec <BSP_LCD_ClockConfig>:
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90000aec:	4806      	ldr	r0, [pc, #24]	; (90000b08 <BSP_LCD_ClockConfig+0x1c>)
90000aee:	2308      	movs	r3, #8
90000af0:	65c3      	str	r3, [r0, #92]	; 0x5c
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
90000af2:	23c0      	movs	r3, #192	; 0xc0
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
90000af4:	305c      	adds	r0, #92	; 0x5c
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
90000af6:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
90000af8:	2305      	movs	r3, #5
90000afa:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
90000afc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
90000b00:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
90000b02:	f001 ba5d 	b.w	90001fc0 <HAL_RCCEx_PeriphCLKConfig>
90000b06:	bf00      	nop
90000b08:	200002e0 	.word	0x200002e0

90000b0c <BSP_LCD_Init>:
{    
90000b0c:	b510      	push	{r4, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
90000b0e:	2228      	movs	r2, #40	; 0x28
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
90000b10:	4c24      	ldr	r4, [pc, #144]	; (90000ba4 <BSP_LCD_Init+0x98>)
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
90000b12:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
90000b14:	2135      	movs	r1, #53	; 0x35
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
90000b16:	f240 101b 	movw	r0, #283	; 0x11b
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
90000b1a:	f240 1c1d 	movw	ip, #285	; 0x11d
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
90000b1e:	e9c4 2305 	strd	r2, r3, [r4, #20]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
90000b22:	230b      	movs	r3, #11
90000b24:	e9c4 1307 	strd	r1, r3, [r4, #28]
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
90000b28:	f240 2315 	movw	r3, #533	; 0x215
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
90000b2c:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
90000b2e:	e9c4 3009 	strd	r3, r0, [r4, #36]	; 0x24
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
90000b32:	f240 2335 	movw	r3, #565	; 0x235
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
90000b36:	4620      	mov	r0, r4
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
90000b38:	e9c4 3c0b 	strd	r3, ip, [r4, #44]	; 0x2c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
90000b3c:	f7ff ffd6 	bl	90000aec <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
90000b40:	f44f 7ef0 	mov.w	lr, #480	; 0x1e0
90000b44:	f44f 7388 	mov.w	r3, #272	; 0x110
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
90000b48:	4620      	mov	r0, r4
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
90000b4a:	e9c4 e318 	strd	lr, r3, [r4, #96]	; 0x60
  hLtdcHandler.Init.Backcolor.Blue = 0;
90000b4e:	2300      	movs	r3, #0
90000b50:	86a3      	strh	r3, [r4, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Red = 0;
90000b52:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
90000b56:	e9c4 3301 	strd	r3, r3, [r4, #4]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90000b5a:	e9c4 3303 	strd	r3, r3, [r4, #12]
  hLtdcHandler.Instance = LTDC;
90000b5e:	4b12      	ldr	r3, [pc, #72]	; (90000ba8 <BSP_LCD_Init+0x9c>)
90000b60:	6023      	str	r3, [r4, #0]
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
90000b62:	f000 ff66 	bl	90001a32 <HAL_LTDC_GetState>
90000b66:	4601      	mov	r1, r0
90000b68:	b910      	cbnz	r0, 90000b70 <BSP_LCD_Init+0x64>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
90000b6a:	4620      	mov	r0, r4
90000b6c:	f7ff ff1a 	bl	900009a4 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
90000b70:	480c      	ldr	r0, [pc, #48]	; (90000ba4 <BSP_LCD_Init+0x98>)
90000b72:	f000 fec5 	bl	90001900 <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
90000b76:	2201      	movs	r2, #1
90000b78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
90000b7c:	480b      	ldr	r0, [pc, #44]	; (90000bac <BSP_LCD_Init+0xa0>)
90000b7e:	f000 fe25 	bl	900017cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
90000b82:	2201      	movs	r2, #1
90000b84:	2108      	movs	r1, #8
90000b86:	480a      	ldr	r0, [pc, #40]	; (90000bb0 <BSP_LCD_Init+0xa4>)
90000b88:	f000 fe20 	bl	900017cc <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
90000b8c:	f000 f91e 	bl	90000dcc <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = fonts;
90000b90:	4a08      	ldr	r2, [pc, #32]	; (90000bb4 <BSP_LCD_Init+0xa8>)
90000b92:	210c      	movs	r1, #12
}
90000b94:	2000      	movs	r0, #0
  DrawProp[ActiveLayer].pFont = fonts;
90000b96:	6c13      	ldr	r3, [r2, #64]	; 0x40
90000b98:	fb01 2303 	mla	r3, r1, r3, r2
90000b9c:	4a06      	ldr	r2, [pc, #24]	; (90000bb8 <BSP_LCD_Init+0xac>)
90000b9e:	64da      	str	r2, [r3, #76]	; 0x4c
}
90000ba0:	bd10      	pop	{r4, pc}
90000ba2:	bf00      	nop
90000ba4:	200004bc 	.word	0x200004bc
90000ba8:	40016800 	.word	0x40016800
90000bac:	40022000 	.word	0x40022000
90000bb0:	40022800 	.word	0x40022800
90000bb4:	200002e0 	.word	0x200002e0
90000bb8:	20000000 	.word	0x20000000

90000bbc <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
90000bbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
90000bc0:	4c21      	ldr	r4, [pc, #132]	; (90000c48 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90000bc2:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90000bc4:	4d21      	ldr	r5, [pc, #132]	; (90000c4c <BSP_SDRAM_Initialization_sequence+0x90>)
  __IO uint32_t tmpmrd = 0;
90000bc6:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90000bca:	2710      	movs	r7, #16
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90000bcc:	4621      	mov	r1, r4
{
90000bce:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90000bd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
90000bd4:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
90000bd6:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90000bda:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
90000bde:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90000be2:	f001 fc98 	bl	90002516 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
90000be6:	4630      	mov	r0, r6
90000be8:	f000 f988 	bl	90000efc <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
90000bec:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
90000bee:	4621      	mov	r1, r4
90000bf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
90000bf4:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90000bf6:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
90000bfa:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
90000bfe:	f001 fc8a 	bl	90002516 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
90000c02:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90000c04:	4621      	mov	r1, r4
90000c06:	f64f 72ff 	movw	r2, #65535	; 0xffff
90000c0a:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90000c0c:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
90000c10:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
90000c12:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90000c16:	f001 fc7e 	bl	90002516 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
90000c1a:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90000c1e:	4621      	mov	r1, r4
90000c20:	f64f 72ff 	movw	r2, #65535	; 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
90000c24:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
90000c26:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90000c28:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
90000c2a:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90000c2c:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
90000c30:	9b01      	ldr	r3, [sp, #4]
90000c32:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90000c34:	f001 fc6f 	bl	90002516 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
90000c38:	4649      	mov	r1, r9
90000c3a:	4628      	mov	r0, r5
}
90000c3c:	b003      	add	sp, #12
90000c3e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
90000c42:	f001 bc7f 	b.w	90002544 <HAL_SDRAM_ProgramRefreshRate>
90000c46:	bf00      	nop
90000c48:	200003c0 	.word	0x200003c0
90000c4c:	20000564 	.word	0x20000564

90000c50 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
90000c50:	4b55      	ldr	r3, [pc, #340]	; (90000da8 <BSP_SDRAM_MspInit+0x158>)
90000c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90000c54:	f042 0201 	orr.w	r2, r2, #1
{  
90000c58:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
90000c5a:	639a      	str	r2, [r3, #56]	; 0x38
{  
90000c5c:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
90000c5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{  
90000c60:	4606      	mov	r6, r0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
90000c62:	a909      	add	r1, sp, #36	; 0x24
90000c64:	4851      	ldr	r0, [pc, #324]	; (90000dac <BSP_SDRAM_MspInit+0x15c>)
  __HAL_RCC_FMC_CLK_ENABLE();
90000c66:	f002 0201 	and.w	r2, r2, #1
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
90000c6a:	2400      	movs	r4, #0
  __HAL_RCC_FMC_CLK_ENABLE();
90000c6c:	9201      	str	r2, [sp, #4]
90000c6e:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
90000c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000c72:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
90000c76:	631a      	str	r2, [r3, #48]	; 0x30
90000c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000c7a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
90000c7e:	9202      	str	r2, [sp, #8]
90000c80:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
90000c82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000c84:	f042 0204 	orr.w	r2, r2, #4
90000c88:	631a      	str	r2, [r3, #48]	; 0x30
90000c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000c8c:	f002 0204 	and.w	r2, r2, #4
90000c90:	9203      	str	r2, [sp, #12]
90000c92:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
90000c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000c96:	f042 0208 	orr.w	r2, r2, #8
90000c9a:	631a      	str	r2, [r3, #48]	; 0x30
90000c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000c9e:	f002 0208 	and.w	r2, r2, #8
90000ca2:	9204      	str	r2, [sp, #16]
90000ca4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90000ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000ca8:	f042 0210 	orr.w	r2, r2, #16
90000cac:	631a      	str	r2, [r3, #48]	; 0x30
90000cae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000cb0:	f002 0210 	and.w	r2, r2, #16
90000cb4:	9205      	str	r2, [sp, #20]
90000cb6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90000cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000cba:	f042 0220 	orr.w	r2, r2, #32
90000cbe:	631a      	str	r2, [r3, #48]	; 0x30
90000cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000cc2:	f002 0220 	and.w	r2, r2, #32
90000cc6:	9206      	str	r2, [sp, #24]
90000cc8:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90000cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
90000cd0:	631a      	str	r2, [r3, #48]	; 0x30
90000cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000cd4:	f002 0240 	and.w	r2, r2, #64	; 0x40
90000cd8:	9207      	str	r2, [sp, #28]
90000cda:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90000cdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000cde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
90000ce2:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
90000ce4:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
90000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
90000cec:	9308      	str	r3, [sp, #32]
90000cee:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
90000cf0:	2302      	movs	r3, #2
90000cf2:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
90000cf6:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90000cf8:	230c      	movs	r3, #12
90000cfa:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
90000cfc:	2308      	movs	r3, #8
90000cfe:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
90000d00:	f000 fc7e 	bl	90001600 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
90000d04:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90000d08:	a909      	add	r1, sp, #36	; 0x24
90000d0a:	4829      	ldr	r0, [pc, #164]	; (90000db0 <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
90000d0c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90000d0e:	f000 fc77 	bl	90001600 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90000d12:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90000d16:	a909      	add	r1, sp, #36	; 0x24
90000d18:	4826      	ldr	r0, [pc, #152]	; (90000db4 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90000d1a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90000d1c:	f000 fc70 	bl	90001600 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90000d20:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90000d24:	a909      	add	r1, sp, #36	; 0x24
90000d26:	4824      	ldr	r0, [pc, #144]	; (90000db8 <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90000d28:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90000d2a:	f000 fc69 	bl	90001600 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
90000d2e:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90000d32:	a909      	add	r1, sp, #36	; 0x24
90000d34:	4821      	ldr	r0, [pc, #132]	; (90000dbc <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
90000d36:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90000d38:	f000 fc62 	bl	90001600 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
90000d3c:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
90000d3e:	a909      	add	r1, sp, #36	; 0x24
90000d40:	481f      	ldr	r0, [pc, #124]	; (90000dc0 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
90000d42:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
90000d44:	f000 fc5c 	bl	90001600 <HAL_GPIO_Init>
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
90000d48:	4b1e      	ldr	r3, [pc, #120]	; (90000dc4 <BSP_SDRAM_MspInit+0x174>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
90000d4a:	2280      	movs	r2, #128	; 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
90000d4c:	f44f 7100 	mov.w	r1, #512	; 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
90000d50:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
90000d54:	461d      	mov	r5, r3
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
90000d56:	641c      	str	r4, [r3, #64]	; 0x40
  dma_handle.Init.Mode                = DMA_NORMAL;
90000d58:	62dc      	str	r4, [r3, #44]	; 0x2c
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
90000d5a:	e9c3 4205 	strd	r4, r2, [r3, #20]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
90000d5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
90000d62:	e9c3 1207 	strd	r1, r2, [r3, #28]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
90000d66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
90000d6a:	e9c3 0209 	strd	r0, r2, [r3, #36]	; 0x24
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
90000d6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
90000d72:	e9c3 240c 	strd	r2, r4, [r3, #48]	; 0x30
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
90000d76:	2203      	movs	r2, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
90000d78:	e9c3 240e 	strd	r2, r4, [r3, #56]	; 0x38
  dma_handle.Instance = SDRAM_DMAx_STREAM;
90000d7c:	4a12      	ldr	r2, [pc, #72]	; (90000dc8 <BSP_SDRAM_MspInit+0x178>)
90000d7e:	f845 2f10 	str.w	r2, [r5, #16]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
90000d82:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
90000d84:	6335      	str	r5, [r6, #48]	; 0x30
90000d86:	649e      	str	r6, [r3, #72]	; 0x48
  HAL_DMA_DeInit(&dma_handle);
90000d88:	f000 fa00 	bl	9000118c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
90000d8c:	4628      	mov	r0, r5
90000d8e:	f000 f97d 	bl	9000108c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
90000d92:	4622      	mov	r2, r4
90000d94:	210f      	movs	r1, #15
90000d96:	2038      	movs	r0, #56	; 0x38
90000d98:	f000 f8c2 	bl	90000f20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
90000d9c:	2038      	movs	r0, #56	; 0x38
90000d9e:	f000 f8f1 	bl	90000f84 <HAL_NVIC_EnableIRQ>
}
90000da2:	b00e      	add	sp, #56	; 0x38
90000da4:	bd70      	pop	{r4, r5, r6, pc}
90000da6:	bf00      	nop
90000da8:	40023800 	.word	0x40023800
90000dac:	40020800 	.word	0x40020800
90000db0:	40020c00 	.word	0x40020c00
90000db4:	40021000 	.word	0x40021000
90000db8:	40021400 	.word	0x40021400
90000dbc:	40021800 	.word	0x40021800
90000dc0:	40021c00 	.word	0x40021c00
90000dc4:	200003c0 	.word	0x200003c0
90000dc8:	40026410 	.word	0x40026410

90000dcc <BSP_SDRAM_Init>:
{ 
90000dcc:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
90000dce:	4c1a      	ldr	r4, [pc, #104]	; (90000e38 <BSP_SDRAM_Init+0x6c>)
  Timing.ExitSelfRefreshDelay = 7;
90000dd0:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
90000dd2:	4b1a      	ldr	r3, [pc, #104]	; (90000e3c <BSP_SDRAM_Init+0x70>)
  Timing.SelfRefreshTime      = 4;
90000dd4:	2204      	movs	r2, #4
  Timing.LoadToActiveDelay    = 2;
90000dd6:	4d1a      	ldr	r5, [pc, #104]	; (90000e40 <BSP_SDRAM_Init+0x74>)
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90000dd8:	f44f 6000 	mov.w	r0, #2048	; 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
90000ddc:	6023      	str	r3, [r4, #0]
  Timing.ExitSelfRefreshDelay = 7;
90000dde:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
90000de0:	60e2      	str	r2, [r4, #12]
  Timing.RCDDelay             = 2;
90000de2:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
  Timing.ExitSelfRefreshDelay = 7;
90000de6:	e9c5 311c 	strd	r3, r1, [r5, #112]	; 0x70
  Timing.RowCycleDelay        = 7;
90000dea:	e9c5 211e 	strd	r2, r1, [r5, #120]	; 0x78
  Timing.RPDelay              = 2;
90000dee:	e9c5 3320 	strd	r3, r3, [r5, #128]	; 0x80
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90000df2:	2210      	movs	r2, #16
90000df4:	2340      	movs	r3, #64	; 0x40
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
90000df6:	2100      	movs	r1, #0
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90000df8:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
90000dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90000e00:	62a1      	str	r1, [r4, #40]	; 0x28
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90000e02:	e9c4 3106 	strd	r3, r1, [r4, #24]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90000e06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90000e0a:	e9c4 0308 	strd	r0, r3, [r4, #32]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
90000e0e:	4620      	mov	r0, r4
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90000e10:	e9c4 1101 	strd	r1, r1, [r4, #4]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
90000e14:	f7ff ff1c 	bl	90000c50 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
90000e18:	f105 0170 	add.w	r1, r5, #112	; 0x70
90000e1c:	4620      	mov	r0, r4
90000e1e:	4c09      	ldr	r4, [pc, #36]	; (90000e44 <BSP_SDRAM_Init+0x78>)
90000e20:	f001 fb59 	bl	900024d6 <HAL_SDRAM_Init>
90000e24:	3800      	subs	r0, #0
90000e26:	bf18      	it	ne
90000e28:	2001      	movne	r0, #1
90000e2a:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
90000e2c:	f240 6003 	movw	r0, #1539	; 0x603
90000e30:	f7ff fec4 	bl	90000bbc <BSP_SDRAM_Initialization_sequence>
}
90000e34:	7820      	ldrb	r0, [r4, #0]
90000e36:	bd38      	pop	{r3, r4, r5, pc}
90000e38:	20000564 	.word	0x20000564
90000e3c:	a0000140 	.word	0xa0000140
90000e40:	200003c0 	.word	0x200003c0
90000e44:	20000028 	.word	0x20000028

90000e48 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
90000e48:	490f      	ldr	r1, [pc, #60]	; (90000e88 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90000e4a:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
90000e4c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
90000e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
90000e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
90000e58:	4b0c      	ldr	r3, [pc, #48]	; (90000e8c <SystemInit+0x44>)
90000e5a:	681a      	ldr	r2, [r3, #0]
90000e5c:	f042 0201 	orr.w	r2, r2, #1
90000e60:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
90000e62:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
90000e64:	681a      	ldr	r2, [r3, #0]
90000e66:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
90000e6a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
90000e6e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
90000e70:	4a07      	ldr	r2, [pc, #28]	; (90000e90 <SystemInit+0x48>)
90000e72:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
90000e74:	681a      	ldr	r2, [r3, #0]
90000e76:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
90000e7a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
90000e7c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = APPLICATION_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation to APPLICATION_ADDRESS in preprocessor defines */
90000e7e:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
90000e82:	608b      	str	r3, [r1, #8]
#endif
}
90000e84:	4770      	bx	lr
90000e86:	bf00      	nop
90000e88:	e000ed00 	.word	0xe000ed00
90000e8c:	40023800 	.word	0x40023800
90000e90:	24003010 	.word	0x24003010

90000e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
90000e94:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
90000e96:	4e0e      	ldr	r6, [pc, #56]	; (90000ed0 <HAL_InitTick+0x3c>)
{
90000e98:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
90000e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
90000e9e:	4a0d      	ldr	r2, [pc, #52]	; (90000ed4 <HAL_InitTick+0x40>)
90000ea0:	7830      	ldrb	r0, [r6, #0]
90000ea2:	fbb3 f3f0 	udiv	r3, r3, r0
90000ea6:	6810      	ldr	r0, [r2, #0]
90000ea8:	fbb0 f0f3 	udiv	r0, r0, r3
90000eac:	f000 f878 	bl	90000fa0 <HAL_SYSTICK_Config>
90000eb0:	4604      	mov	r4, r0
90000eb2:	b950      	cbnz	r0, 90000eca <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90000eb4:	2d0f      	cmp	r5, #15
90000eb6:	d808      	bhi.n	90000eca <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
90000eb8:	4602      	mov	r2, r0
90000eba:	4629      	mov	r1, r5
90000ebc:	f04f 30ff 	mov.w	r0, #4294967295
90000ec0:	f000 f82e 	bl	90000f20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
90000ec4:	4620      	mov	r0, r4
90000ec6:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
90000ec8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
90000eca:	2001      	movs	r0, #1
90000ecc:	e7fc      	b.n	90000ec8 <HAL_InitTick+0x34>
90000ece:	bf00      	nop
90000ed0:	20000030 	.word	0x20000030
90000ed4:	2000002c 	.word	0x2000002c

90000ed8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
90000ed8:	4a03      	ldr	r2, [pc, #12]	; (90000ee8 <HAL_IncTick+0x10>)
90000eda:	4b04      	ldr	r3, [pc, #16]	; (90000eec <HAL_IncTick+0x14>)
90000edc:	6811      	ldr	r1, [r2, #0]
90000ede:	781b      	ldrb	r3, [r3, #0]
90000ee0:	440b      	add	r3, r1
90000ee2:	6013      	str	r3, [r2, #0]
}
90000ee4:	4770      	bx	lr
90000ee6:	bf00      	nop
90000ee8:	20000598 	.word	0x20000598
90000eec:	20000030 	.word	0x20000030

90000ef0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
90000ef0:	4b01      	ldr	r3, [pc, #4]	; (90000ef8 <HAL_GetTick+0x8>)
90000ef2:	6818      	ldr	r0, [r3, #0]
}
90000ef4:	4770      	bx	lr
90000ef6:	bf00      	nop
90000ef8:	20000598 	.word	0x20000598

90000efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
90000efc:	b538      	push	{r3, r4, r5, lr}
90000efe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
90000f00:	f7ff fff6 	bl	90000ef0 <HAL_GetTick>
90000f04:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
90000f06:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
90000f08:	bf1e      	ittt	ne
90000f0a:	4b04      	ldrne	r3, [pc, #16]	; (90000f1c <HAL_Delay+0x20>)
90000f0c:	781b      	ldrbne	r3, [r3, #0]
90000f0e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
90000f10:	f7ff ffee 	bl	90000ef0 <HAL_GetTick>
90000f14:	1b43      	subs	r3, r0, r5
90000f16:	42a3      	cmp	r3, r4
90000f18:	d3fa      	bcc.n	90000f10 <HAL_Delay+0x14>
  {
  }
}
90000f1a:	bd38      	pop	{r3, r4, r5, pc}
90000f1c:	20000030 	.word	0x20000030

90000f20 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90000f20:	4b16      	ldr	r3, [pc, #88]	; (90000f7c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
90000f22:	b530      	push	{r4, r5, lr}
90000f24:	68dc      	ldr	r4, [r3, #12]
90000f26:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90000f2a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90000f2e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90000f30:	2d04      	cmp	r5, #4
90000f32:	bf28      	it	cs
90000f34:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90000f36:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90000f38:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90000f3c:	bf8c      	ite	hi
90000f3e:	3c03      	subhi	r4, #3
90000f40:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90000f42:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
90000f46:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90000f48:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90000f4c:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90000f50:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90000f54:	fa01 f104 	lsl.w	r1, r1, r4
90000f58:	ea41 0302 	orr.w	r3, r1, r2
90000f5c:	ea4f 1303 	mov.w	r3, r3, lsl #4
90000f60:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
90000f62:	db06      	blt.n	90000f72 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90000f64:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
90000f68:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
90000f6c:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
90000f70:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90000f72:	f000 000f 	and.w	r0, r0, #15
90000f76:	4a02      	ldr	r2, [pc, #8]	; (90000f80 <HAL_NVIC_SetPriority+0x60>)
90000f78:	5413      	strb	r3, [r2, r0]
90000f7a:	e7f9      	b.n	90000f70 <HAL_NVIC_SetPriority+0x50>
90000f7c:	e000ed00 	.word	0xe000ed00
90000f80:	e000ed14 	.word	0xe000ed14

90000f84 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
90000f84:	2800      	cmp	r0, #0
90000f86:	db08      	blt.n	90000f9a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90000f88:	0942      	lsrs	r2, r0, #5
90000f8a:	2301      	movs	r3, #1
90000f8c:	f000 001f 	and.w	r0, r0, #31
90000f90:	fa03 f000 	lsl.w	r0, r3, r0
90000f94:	4b01      	ldr	r3, [pc, #4]	; (90000f9c <HAL_NVIC_EnableIRQ+0x18>)
90000f96:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
90000f9a:	4770      	bx	lr
90000f9c:	e000e100 	.word	0xe000e100

90000fa0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
90000fa0:	3801      	subs	r0, #1
90000fa2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
90000fa6:	d20a      	bcs.n	90000fbe <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
90000fa8:	4b06      	ldr	r3, [pc, #24]	; (90000fc4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90000faa:	21f0      	movs	r1, #240	; 0xf0
90000fac:	4a06      	ldr	r2, [pc, #24]	; (90000fc8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
90000fae:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
90000fb0:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90000fb2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
90000fb6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
90000fb8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
90000fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
90000fbc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
90000fbe:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
90000fc0:	4770      	bx	lr
90000fc2:	bf00      	nop
90000fc4:	e000e010 	.word	0xe000e010
90000fc8:	e000ed00 	.word	0xe000ed00

90000fcc <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
90000fcc:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90000fd0:	4a04      	ldr	r2, [pc, #16]	; (90000fe4 <HAL_MPU_Disable+0x18>)
90000fd2:	6a53      	ldr	r3, [r2, #36]	; 0x24
90000fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90000fd8:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
90000fda:	2200      	movs	r2, #0
90000fdc:	4b02      	ldr	r3, [pc, #8]	; (90000fe8 <HAL_MPU_Disable+0x1c>)
90000fde:	605a      	str	r2, [r3, #4]
}
90000fe0:	4770      	bx	lr
90000fe2:	bf00      	nop
90000fe4:	e000ed00 	.word	0xe000ed00
90000fe8:	e000ed90 	.word	0xe000ed90

90000fec <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
90000fec:	4a06      	ldr	r2, [pc, #24]	; (90001008 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
90000fee:	f040 0001 	orr.w	r0, r0, #1
90000ff2:	4b06      	ldr	r3, [pc, #24]	; (9000100c <HAL_MPU_Enable+0x20>)
90000ff4:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
90000ff6:	6a53      	ldr	r3, [r2, #36]	; 0x24
90000ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90000ffc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
90000ffe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001002:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
90001006:	4770      	bx	lr
90001008:	e000ed00 	.word	0xe000ed00
9000100c:	e000ed90 	.word	0xe000ed90

90001010 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
90001010:	7843      	ldrb	r3, [r0, #1]
90001012:	4a12      	ldr	r2, [pc, #72]	; (9000105c <HAL_MPU_ConfigRegion+0x4c>)
{
90001014:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
90001016:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
90001018:	7801      	ldrb	r1, [r0, #0]
9000101a:	b1d9      	cbz	r1, 90001054 <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
9000101c:	6843      	ldr	r3, [r0, #4]
9000101e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90001020:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90001022:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90001024:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90001026:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
9000102a:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
9000102c:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
9000102e:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90001032:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90001034:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90001038:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
9000103a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
9000103e:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90001040:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90001044:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90001046:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
9000104a:	7a01      	ldrb	r1, [r0, #8]
9000104c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90001050:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
90001052:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
90001054:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
90001056:	6111      	str	r1, [r2, #16]
}
90001058:	e7fb      	b.n	90001052 <HAL_MPU_ConfigRegion+0x42>
9000105a:	bf00      	nop
9000105c:	e000ed90 	.word	0xe000ed90

90001060 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
90001060:	6803      	ldr	r3, [r0, #0]
{
90001062:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
90001064:	2018      	movs	r0, #24
90001066:	b2d9      	uxtb	r1, r3
90001068:	3910      	subs	r1, #16
9000106a:	fbb1 f0f0 	udiv	r0, r1, r0
{
9000106e:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
90001070:	4c05      	ldr	r4, [pc, #20]	; (90001088 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
90001072:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
90001074:	5c20      	ldrb	r0, [r4, r0]
90001076:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
90001078:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
9000107c:	f020 0003 	bic.w	r0, r0, #3
90001080:	bf88      	it	hi
90001082:	3004      	addhi	r0, #4
90001084:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
90001086:	bd10      	pop	{r4, pc}
90001088:	900079a0 	.word	0x900079a0

9000108c <HAL_DMA_Init>:
{
9000108c:	b570      	push	{r4, r5, r6, lr}
9000108e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
90001090:	f7ff ff2e 	bl	90000ef0 <HAL_GetTick>
90001094:	4605      	mov	r5, r0
  if(hdma == NULL)
90001096:	2c00      	cmp	r4, #0
90001098:	d073      	beq.n	90001182 <HAL_DMA_Init+0xf6>
  __HAL_UNLOCK(hdma);
9000109a:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
9000109c:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
9000109e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
900010a2:	2302      	movs	r3, #2
900010a4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
900010a8:	6813      	ldr	r3, [r2, #0]
900010aa:	f023 0301 	bic.w	r3, r3, #1
900010ae:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
900010b0:	6821      	ldr	r1, [r4, #0]
900010b2:	680b      	ldr	r3, [r1, #0]
900010b4:	07d8      	lsls	r0, r3, #31
900010b6:	d42f      	bmi.n	90001118 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
900010b8:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
900010ba:	4d33      	ldr	r5, [pc, #204]	; (90001188 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
900010bc:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
900010be:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
900010c0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
900010c4:	4313      	orrs	r3, r2
900010c6:	68e2      	ldr	r2, [r4, #12]
900010c8:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
900010ca:	6922      	ldr	r2, [r4, #16]
900010cc:	4313      	orrs	r3, r2
900010ce:	6962      	ldr	r2, [r4, #20]
900010d0:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
900010d2:	69e2      	ldr	r2, [r4, #28]
900010d4:	4303      	orrs	r3, r0
900010d6:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
900010d8:	6a22      	ldr	r2, [r4, #32]
900010da:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
900010dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
900010de:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
900010e0:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
900010e4:	bf02      	ittt	eq
900010e6:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
900010ea:	4335      	orreq	r5, r6
900010ec:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
900010ee:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
900010f0:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
900010f2:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
900010f4:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
900010f8:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
900010fc:	d133      	bne.n	90001166 <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
900010fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
90001100:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
90001102:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
90001104:	b37d      	cbz	r5, 90001166 <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
90001106:	b990      	cbnz	r0, 9000112e <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
90001108:	2a01      	cmp	r2, #1
9000110a:	d021      	beq.n	90001150 <HAL_DMA_Init+0xc4>
9000110c:	f032 0202 	bics.w	r2, r2, #2
90001110:	d129      	bne.n	90001166 <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
90001112:	01ea      	lsls	r2, r5, #7
90001114:	d527      	bpl.n	90001166 <HAL_DMA_Init+0xda>
90001116:	e01e      	b.n	90001156 <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
90001118:	f7ff feea 	bl	90000ef0 <HAL_GetTick>
9000111c:	1b40      	subs	r0, r0, r5
9000111e:	2805      	cmp	r0, #5
90001120:	d9c6      	bls.n	900010b0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
90001122:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
90001124:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
90001126:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
90001128:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
9000112c:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
9000112e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
90001132:	d114      	bne.n	9000115e <HAL_DMA_Init+0xd2>
    switch (tmp)
90001134:	2a03      	cmp	r2, #3
90001136:	d816      	bhi.n	90001166 <HAL_DMA_Init+0xda>
90001138:	a001      	add	r0, pc, #4	; (adr r0, 90001140 <HAL_DMA_Init+0xb4>)
9000113a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
9000113e:	bf00      	nop
90001140:	90001157 	.word	0x90001157
90001144:	90001113 	.word	0x90001113
90001148:	90001157 	.word	0x90001157
9000114c:	90001151 	.word	0x90001151
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
90001150:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
90001154:	d107      	bne.n	90001166 <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
90001156:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
90001158:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
9000115a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
9000115c:	e7e4      	b.n	90001128 <HAL_DMA_Init+0x9c>
    switch (tmp)
9000115e:	2a02      	cmp	r2, #2
90001160:	d9f9      	bls.n	90001156 <HAL_DMA_Init+0xca>
90001162:	2a03      	cmp	r2, #3
90001164:	d0d5      	beq.n	90001112 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
90001166:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
90001168:	4620      	mov	r0, r4
9000116a:	f7ff ff79 	bl	90001060 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
9000116e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
90001170:	233f      	movs	r3, #63	; 0x3f
90001172:	4093      	lsls	r3, r2
90001174:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
90001176:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
90001178:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
9000117a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
9000117c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
90001180:	e7d4      	b.n	9000112c <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
90001182:	2001      	movs	r0, #1
90001184:	e7d2      	b.n	9000112c <HAL_DMA_Init+0xa0>
90001186:	bf00      	nop
90001188:	f010803f 	.word	0xf010803f

9000118c <HAL_DMA_DeInit>:
{
9000118c:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
9000118e:	4605      	mov	r5, r0
90001190:	b320      	cbz	r0, 900011dc <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
90001192:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
90001196:	2b02      	cmp	r3, #2
90001198:	b2dc      	uxtb	r4, r3
9000119a:	d01d      	beq.n	900011d8 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
9000119c:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
9000119e:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
900011a0:	681a      	ldr	r2, [r3, #0]
900011a2:	f022 0201 	bic.w	r2, r2, #1
900011a6:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
900011a8:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
900011aa:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
900011ac:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
900011ae:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
900011b0:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
900011b2:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
900011b4:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
900011b6:	f7ff ff53 	bl	90001060 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
900011ba:	6dea      	ldr	r2, [r5, #92]	; 0x5c
900011bc:	233f      	movs	r3, #63	; 0x3f
900011be:	4093      	lsls	r3, r2
900011c0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
900011c2:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
900011c4:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
900011c8:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
900011cc:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
900011d0:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
900011d4:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
}
900011d8:	4620      	mov	r0, r4
900011da:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
900011dc:	2401      	movs	r4, #1
900011de:	e7fb      	b.n	900011d8 <HAL_DMA_DeInit+0x4c>

900011e0 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
900011e0:	2300      	movs	r3, #0
{
900011e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
900011e4:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
900011e6:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
900011e8:	4b5b      	ldr	r3, [pc, #364]	; (90001358 <HAL_DMA_IRQHandler+0x178>)
{
900011ea:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
900011ec:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
900011ee:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
900011f0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
900011f2:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
900011f4:	409a      	lsls	r2, r3
900011f6:	4232      	tst	r2, r6
900011f8:	d00c      	beq.n	90001214 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
900011fa:	6801      	ldr	r1, [r0, #0]
900011fc:	6808      	ldr	r0, [r1, #0]
900011fe:	0740      	lsls	r0, r0, #29
90001200:	d508      	bpl.n	90001214 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
90001202:	6808      	ldr	r0, [r1, #0]
90001204:	f020 0004 	bic.w	r0, r0, #4
90001208:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
9000120a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
9000120c:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000120e:	f042 0201 	orr.w	r2, r2, #1
90001212:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
90001214:	2201      	movs	r2, #1
90001216:	409a      	lsls	r2, r3
90001218:	4232      	tst	r2, r6
9000121a:	d008      	beq.n	9000122e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
9000121c:	6821      	ldr	r1, [r4, #0]
9000121e:	6949      	ldr	r1, [r1, #20]
90001220:	0609      	lsls	r1, r1, #24
90001222:	d504      	bpl.n	9000122e <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
90001224:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
90001226:	6d62      	ldr	r2, [r4, #84]	; 0x54
90001228:	f042 0202 	orr.w	r2, r2, #2
9000122c:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
9000122e:	2204      	movs	r2, #4
90001230:	409a      	lsls	r2, r3
90001232:	4232      	tst	r2, r6
90001234:	d008      	beq.n	90001248 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
90001236:	6821      	ldr	r1, [r4, #0]
90001238:	6809      	ldr	r1, [r1, #0]
9000123a:	0788      	lsls	r0, r1, #30
9000123c:	d504      	bpl.n	90001248 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
9000123e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
90001240:	6d62      	ldr	r2, [r4, #84]	; 0x54
90001242:	f042 0204 	orr.w	r2, r2, #4
90001246:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
90001248:	2210      	movs	r2, #16
9000124a:	409a      	lsls	r2, r3
9000124c:	4232      	tst	r2, r6
9000124e:	d010      	beq.n	90001272 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
90001250:	6823      	ldr	r3, [r4, #0]
90001252:	6819      	ldr	r1, [r3, #0]
90001254:	0709      	lsls	r1, r1, #28
90001256:	d50c      	bpl.n	90001272 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
90001258:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
9000125a:	681a      	ldr	r2, [r3, #0]
9000125c:	0350      	lsls	r0, r2, #13
9000125e:	d537      	bpl.n	900012d0 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
90001260:	681b      	ldr	r3, [r3, #0]
90001262:	0319      	lsls	r1, r3, #12
90001264:	d401      	bmi.n	9000126a <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
90001266:	6c23      	ldr	r3, [r4, #64]	; 0x40
90001268:	e000      	b.n	9000126c <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
9000126a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
9000126c:	b10b      	cbz	r3, 90001272 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
9000126e:	4620      	mov	r0, r4
90001270:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
90001272:	6de1      	ldr	r1, [r4, #92]	; 0x5c
90001274:	2220      	movs	r2, #32
90001276:	408a      	lsls	r2, r1
90001278:	4232      	tst	r2, r6
9000127a:	d03a      	beq.n	900012f2 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
9000127c:	6823      	ldr	r3, [r4, #0]
9000127e:	6818      	ldr	r0, [r3, #0]
90001280:	06c6      	lsls	r6, r0, #27
90001282:	d536      	bpl.n	900012f2 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
90001284:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
90001286:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
9000128a:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
9000128c:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
9000128e:	d127      	bne.n	900012e0 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
90001290:	f022 0216 	bic.w	r2, r2, #22
90001294:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
90001296:	695a      	ldr	r2, [r3, #20]
90001298:	f022 0280 	bic.w	r2, r2, #128	; 0x80
9000129c:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
9000129e:	6c22      	ldr	r2, [r4, #64]	; 0x40
900012a0:	b90a      	cbnz	r2, 900012a6 <HAL_DMA_IRQHandler+0xc6>
900012a2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
900012a4:	b11a      	cbz	r2, 900012ae <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
900012a6:	681a      	ldr	r2, [r3, #0]
900012a8:	f022 0208 	bic.w	r2, r2, #8
900012ac:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
900012ae:	233f      	movs	r3, #63	; 0x3f
900012b0:	408b      	lsls	r3, r1
900012b2:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
900012b4:	2300      	movs	r3, #0
900012b6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
900012ba:	2301      	movs	r3, #1
900012bc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
900012c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
900012c2:	2b00      	cmp	r3, #0
900012c4:	d045      	beq.n	90001352 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
900012c6:	4620      	mov	r0, r4
}
900012c8:	b003      	add	sp, #12
900012ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
900012ce:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
900012d0:	681a      	ldr	r2, [r3, #0]
900012d2:	05d2      	lsls	r2, r2, #23
900012d4:	d4c7      	bmi.n	90001266 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
900012d6:	681a      	ldr	r2, [r3, #0]
900012d8:	f022 0208 	bic.w	r2, r2, #8
900012dc:	601a      	str	r2, [r3, #0]
900012de:	e7c2      	b.n	90001266 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
900012e0:	0350      	lsls	r0, r2, #13
900012e2:	d527      	bpl.n	90001334 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
900012e4:	681b      	ldr	r3, [r3, #0]
900012e6:	0319      	lsls	r1, r3, #12
900012e8:	d431      	bmi.n	9000134e <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
900012ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
900012ec:	b10b      	cbz	r3, 900012f2 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
900012ee:	4620      	mov	r0, r4
900012f0:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
900012f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
900012f4:	b36b      	cbz	r3, 90001352 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
900012f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
900012f8:	07da      	lsls	r2, r3, #31
900012fa:	d519      	bpl.n	90001330 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
900012fc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
90001300:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
90001302:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
90001306:	2305      	movs	r3, #5
90001308:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
9000130c:	6813      	ldr	r3, [r2, #0]
9000130e:	f023 0301 	bic.w	r3, r3, #1
90001312:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
90001314:	9b01      	ldr	r3, [sp, #4]
90001316:	3301      	adds	r3, #1
90001318:	42bb      	cmp	r3, r7
9000131a:	9301      	str	r3, [sp, #4]
9000131c:	d802      	bhi.n	90001324 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
9000131e:	6813      	ldr	r3, [r2, #0]
90001320:	07db      	lsls	r3, r3, #31
90001322:	d4f7      	bmi.n	90001314 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
90001324:	2300      	movs	r3, #0
90001326:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
9000132a:	2301      	movs	r3, #1
9000132c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
90001330:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
90001332:	e7c6      	b.n	900012c2 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
90001334:	681a      	ldr	r2, [r3, #0]
90001336:	f412 7280 	ands.w	r2, r2, #256	; 0x100
9000133a:	d108      	bne.n	9000134e <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
9000133c:	6819      	ldr	r1, [r3, #0]
9000133e:	f021 0110 	bic.w	r1, r1, #16
90001342:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
90001344:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
90001346:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
9000134a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
9000134e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90001350:	e7cc      	b.n	900012ec <HAL_DMA_IRQHandler+0x10c>
}
90001352:	b003      	add	sp, #12
90001354:	bdf0      	pop	{r4, r5, r6, r7, pc}
90001356:	bf00      	nop
90001358:	2000002c 	.word	0x2000002c

9000135c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
9000135c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
9000135e:	6804      	ldr	r4, [r0, #0]
90001360:	9d04      	ldr	r5, [sp, #16]
90001362:	6c66      	ldr	r6, [r4, #68]	; 0x44
90001364:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
90001368:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
9000136c:	4333      	orrs	r3, r6
9000136e:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
90001370:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
90001372:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
90001374:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
90001378:	d130      	bne.n	900013dc <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
9000137a:	6886      	ldr	r6, [r0, #8]
9000137c:	b11e      	cbz	r6, 90001386 <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
9000137e:	2e01      	cmp	r6, #1
90001380:	d103      	bne.n	9000138a <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
90001382:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U );
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
90001386:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
90001388:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
9000138a:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
9000138c:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
90001390:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
90001394:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
90001396:	d107      	bne.n	900013a8 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
90001398:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
9000139a:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
9000139c:	02db      	lsls	r3, r3, #11
9000139e:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
900013a2:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
900013a6:	e7ee      	b.n	90001386 <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
900013a8:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
900013aa:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
900013ae:	d10a      	bne.n	900013c6 <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
900013b0:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
900013b2:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
900013b4:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
900013b6:	0fd1      	lsrs	r1, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
900013b8:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
900013bc:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
900013c0:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
900013c4:	e7df      	b.n	90001386 <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
900013c6:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
900013c8:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
900013ca:	0209      	lsls	r1, r1, #8
      tmp1 = (tmp1 >> 28U);
900013cc:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
900013ce:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
900013d2:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
900013d6:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
900013da:	e7d4      	b.n	90001386 <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
900013dc:	60e1      	str	r1, [r4, #12]
}
900013de:	e7d3      	b.n	90001388 <DMA2D_SetConfig+0x2c>

900013e0 <HAL_DMA2D_MspInit>:
}
900013e0:	4770      	bx	lr

900013e2 <HAL_DMA2D_Init>:
{
900013e2:	b510      	push	{r4, lr}
  if(hdma2d == NULL)
900013e4:	4604      	mov	r4, r0
900013e6:	b330      	cbz	r0, 90001436 <HAL_DMA2D_Init+0x54>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
900013e8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
900013ec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
900013f0:	b91b      	cbnz	r3, 900013fa <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
900013f2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
900013f6:	f7ff fff3 	bl	900013e0 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
900013fa:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900013fc:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
900013fe:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90001400:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90001402:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
90001406:	6813      	ldr	r3, [r2, #0]
90001408:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
9000140c:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
9000140e:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
90001410:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
90001412:	6b53      	ldr	r3, [r2, #52]	; 0x34
90001414:	f023 0307 	bic.w	r3, r3, #7
90001418:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
9000141a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
9000141c:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
9000141e:	6c13      	ldr	r3, [r2, #64]	; 0x40
90001420:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
90001424:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
90001428:	430b      	orrs	r3, r1
9000142a:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
9000142c:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
9000142e:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90001430:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
90001434:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
90001436:	2001      	movs	r0, #1
90001438:	e7fc      	b.n	90001434 <HAL_DMA2D_Init+0x52>

9000143a <HAL_DMA2D_Start>:
{
9000143a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
9000143c:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
{
90001440:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
90001442:	2d01      	cmp	r5, #1
90001444:	f04f 0502 	mov.w	r5, #2
90001448:	d00f      	beq.n	9000146a <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
9000144a:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
9000144e:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
90001450:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
90001452:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
90001456:	9500      	str	r5, [sp, #0]
90001458:	f7ff ff80 	bl	9000135c <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
9000145c:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
9000145e:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
90001460:	6813      	ldr	r3, [r2, #0]
90001462:	4333      	orrs	r3, r6
90001464:	6013      	str	r3, [r2, #0]
}
90001466:	b002      	add	sp, #8
90001468:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
9000146a:	4628      	mov	r0, r5
9000146c:	e7fb      	b.n	90001466 <HAL_DMA2D_Start+0x2c>

9000146e <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
9000146e:	2300      	movs	r3, #0
{
90001470:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
90001472:	9301      	str	r3, [sp, #4]
{
90001474:	4604      	mov	r4, r0
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
90001476:	6803      	ldr	r3, [r0, #0]
{
90001478:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
9000147a:	681b      	ldr	r3, [r3, #0]
9000147c:	07db      	lsls	r3, r3, #31
9000147e:	d417      	bmi.n	900014b0 <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
90001480:	6822      	ldr	r2, [r4, #0]
90001482:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
90001484:	6a52      	ldr	r2, [r2, #36]	; 0x24
90001486:	4313      	orrs	r3, r2
  if (layer_start != 0U)
90001488:	069e      	lsls	r6, r3, #26
9000148a:	d506      	bpl.n	9000149a <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
9000148c:	f7ff fd30 	bl	90000ef0 <HAL_GetTick>
90001490:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
90001492:	6823      	ldr	r3, [r4, #0]
90001494:	685a      	ldr	r2, [r3, #4]
90001496:	06d2      	lsls	r2, r2, #27
90001498:	d543      	bpl.n	90001522 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
9000149a:	6823      	ldr	r3, [r4, #0]
9000149c:	2212      	movs	r2, #18
  __HAL_UNLOCK(hdma2d);
9000149e:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
900014a0:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
900014a2:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma2d);
900014a4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_READY;
900014a8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
900014ac:	b002      	add	sp, #8
900014ae:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
900014b0:	f7ff fd1e 	bl	90000ef0 <HAL_GetTick>
900014b4:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
900014b6:	6823      	ldr	r3, [r4, #0]
900014b8:	685a      	ldr	r2, [r3, #4]
900014ba:	0792      	lsls	r2, r2, #30
900014bc:	d4e0      	bmi.n	90001480 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
900014be:	685a      	ldr	r2, [r3, #4]
900014c0:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
900014c2:	9a01      	ldr	r2, [sp, #4]
900014c4:	f012 0f21 	tst.w	r2, #33	; 0x21
900014c8:	d017      	beq.n	900014fa <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
900014ca:	9a01      	ldr	r2, [sp, #4]
900014cc:	0695      	lsls	r5, r2, #26
900014ce:	d503      	bpl.n	900014d8 <HAL_DMA2D_PollForTransfer+0x6a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
900014d0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
900014d2:	f042 0202 	orr.w	r2, r2, #2
900014d6:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
900014d8:	9a01      	ldr	r2, [sp, #4]
900014da:	07d0      	lsls	r0, r2, #31
900014dc:	d503      	bpl.n	900014e6 <HAL_DMA2D_PollForTransfer+0x78>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
900014de:	6be2      	ldr	r2, [r4, #60]	; 0x3c
900014e0:	f042 0201 	orr.w	r2, r2, #1
900014e4:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
900014e6:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
900014e8:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
900014ea:	2304      	movs	r3, #4
        return HAL_ERROR;
900014ec:	2001      	movs	r0, #1
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
900014ee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
900014f2:	2300      	movs	r3, #0
900014f4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
900014f8:	e7d8      	b.n	900014ac <HAL_DMA2D_PollForTransfer+0x3e>
      if(Timeout != HAL_MAX_DELAY)
900014fa:	1c69      	adds	r1, r5, #1
900014fc:	d0dc      	beq.n	900014b8 <HAL_DMA2D_PollForTransfer+0x4a>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
900014fe:	f7ff fcf7 	bl	90000ef0 <HAL_GetTick>
90001502:	1b80      	subs	r0, r0, r6
90001504:	42a8      	cmp	r0, r5
90001506:	d801      	bhi.n	9000150c <HAL_DMA2D_PollForTransfer+0x9e>
90001508:	2d00      	cmp	r5, #0
9000150a:	d1d4      	bne.n	900014b6 <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
9000150c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
9000150e:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90001510:	f043 0320 	orr.w	r3, r3, #32
90001514:	63e3      	str	r3, [r4, #60]	; 0x3c
          __HAL_UNLOCK(hdma2d);
90001516:	2300      	movs	r3, #0
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
90001518:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
9000151c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
90001520:	e7c4      	b.n	900014ac <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
90001522:	685a      	ldr	r2, [r3, #4]
90001524:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
90001526:	9a01      	ldr	r2, [sp, #4]
90001528:	f012 0f29 	tst.w	r2, #41	; 0x29
9000152c:	d016      	beq.n	9000155c <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
9000152e:	9a01      	ldr	r2, [sp, #4]
90001530:	0716      	lsls	r6, r2, #28
90001532:	d503      	bpl.n	9000153c <HAL_DMA2D_PollForTransfer+0xce>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
90001534:	6be2      	ldr	r2, [r4, #60]	; 0x3c
90001536:	f042 0204 	orr.w	r2, r2, #4
9000153a:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
9000153c:	9a01      	ldr	r2, [sp, #4]
9000153e:	0695      	lsls	r5, r2, #26
90001540:	d503      	bpl.n	9000154a <HAL_DMA2D_PollForTransfer+0xdc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90001542:	6be2      	ldr	r2, [r4, #60]	; 0x3c
90001544:	f042 0202 	orr.w	r2, r2, #2
90001548:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
9000154a:	9a01      	ldr	r2, [sp, #4]
9000154c:	07d0      	lsls	r0, r2, #31
9000154e:	d503      	bpl.n	90001558 <HAL_DMA2D_PollForTransfer+0xea>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90001550:	6be2      	ldr	r2, [r4, #60]	; 0x3c
90001552:	f042 0201 	orr.w	r2, r2, #1
90001556:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90001558:	2229      	movs	r2, #41	; 0x29
9000155a:	e7c5      	b.n	900014e8 <HAL_DMA2D_PollForTransfer+0x7a>
      if(Timeout != HAL_MAX_DELAY)
9000155c:	1c69      	adds	r1, r5, #1
9000155e:	d099      	beq.n	90001494 <HAL_DMA2D_PollForTransfer+0x26>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
90001560:	f7ff fcc6 	bl	90000ef0 <HAL_GetTick>
90001564:	1b80      	subs	r0, r0, r6
90001566:	42a8      	cmp	r0, r5
90001568:	d8d0      	bhi.n	9000150c <HAL_DMA2D_PollForTransfer+0x9e>
9000156a:	2d00      	cmp	r5, #0
9000156c:	d191      	bne.n	90001492 <HAL_DMA2D_PollForTransfer+0x24>
9000156e:	e7cd      	b.n	9000150c <HAL_DMA2D_PollForTransfer+0x9e>

90001570 <HAL_DMA2D_ConfigLayer>:
{
90001570:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
90001572:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
90001576:	2b01      	cmp	r3, #1
90001578:	f04f 0302 	mov.w	r3, #2
9000157c:	d02b      	beq.n	900015d6 <HAL_DMA2D_ConfigLayer+0x66>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
9000157e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
90001582:	2201      	movs	r2, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
90001584:	eb00 1301 	add.w	r3, r0, r1, lsl #4
90001588:	4f1c      	ldr	r7, [pc, #112]	; (900015fc <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
9000158a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
9000158e:	010e      	lsls	r6, r1, #4
90001590:	6a5d      	ldr	r5, [r3, #36]	; 0x24
90001592:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
90001596:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
9000159a:	3c09      	subs	r4, #9
9000159c:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
9000159e:	bf96      	itet	ls
900015a0:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
900015a4:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
900015a8:	431a      	orrls	r2, r3
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
900015aa:	6803      	ldr	r3, [r0, #0]
900015ac:	b9a9      	cbnz	r1, 900015da <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
900015ae:	6a59      	ldr	r1, [r3, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900015b0:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
900015b2:	ea01 0107 	and.w	r1, r1, r7
900015b6:	ea42 0201 	orr.w	r2, r2, r1
900015ba:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
900015bc:	6982      	ldr	r2, [r0, #24]
900015be:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900015c0:	d803      	bhi.n	900015ca <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
900015c2:	6a42      	ldr	r2, [r0, #36]	; 0x24
900015c4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
900015c8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
900015ca:	2301      	movs	r3, #1
900015cc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
900015d0:	2300      	movs	r3, #0
900015d2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
900015d6:	4618      	mov	r0, r3
}
900015d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
900015da:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900015dc:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
900015de:	ea01 0107 	and.w	r1, r1, r7
900015e2:	ea42 0201 	orr.w	r2, r2, r1
900015e6:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
900015e8:	eb00 0206 	add.w	r2, r0, r6
900015ec:	6992      	ldr	r2, [r2, #24]
900015ee:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900015f0:	d8eb      	bhi.n	900015ca <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
900015f2:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
900015f6:	621d      	str	r5, [r3, #32]
900015f8:	e7e7      	b.n	900015ca <HAL_DMA2D_ConfigLayer+0x5a>
900015fa:	bf00      	nop
900015fc:	00fcfff0 	.word	0x00fcfff0

90001600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
90001600:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
90001604:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90001606:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 900017c4 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
9000160a:	4a6c      	ldr	r2, [pc, #432]	; (900017bc <HAL_GPIO_Init+0x1bc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
9000160c:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 900017c8 <HAL_GPIO_Init+0x1c8>
    ioposition = ((uint32_t)0x01) << position;
90001610:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
90001612:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
90001614:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
90001616:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
9000161a:	43ac      	bics	r4, r5
9000161c:	f040 80b4 	bne.w	90001788 <HAL_GPIO_Init+0x188>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
90001620:	684c      	ldr	r4, [r1, #4]
90001622:	ea4f 0e43 	mov.w	lr, r3, lsl #1
90001626:	2503      	movs	r5, #3
90001628:	f024 0c10 	bic.w	ip, r4, #16
9000162c:	fa05 f50e 	lsl.w	r5, r5, lr
90001630:	f10c 37ff 	add.w	r7, ip, #4294967295
90001634:	43ed      	mvns	r5, r5
90001636:	2f01      	cmp	r7, #1
90001638:	d811      	bhi.n	9000165e <HAL_GPIO_Init+0x5e>
        temp = GPIOx->OSPEEDR; 
9000163a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
9000163c:	ea07 0a05 	and.w	sl, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
90001640:	68cf      	ldr	r7, [r1, #12]
90001642:	fa07 f70e 	lsl.w	r7, r7, lr
90001646:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
9000164a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
9000164c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
9000164e:	ea27 0a06 	bic.w	sl, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
90001652:	f3c4 1700 	ubfx	r7, r4, #4, #1
90001656:	409f      	lsls	r7, r3
90001658:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
9000165c:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
9000165e:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
90001660:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
90001664:	ea07 0a05 	and.w	sl, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
90001668:	688f      	ldr	r7, [r1, #8]
9000166a:	fa07 f70e 	lsl.w	r7, r7, lr
9000166e:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
90001672:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
90001674:	d116      	bne.n	900016a4 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
90001676:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
9000167a:	f003 0b07 	and.w	fp, r3, #7
9000167e:	f04f 0c0f 	mov.w	ip, #15
90001682:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
90001686:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
9000168a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
9000168e:	fa0c fc0b 	lsl.w	ip, ip, fp
90001692:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
90001696:	690f      	ldr	r7, [r1, #16]
90001698:	fa07 f70b 	lsl.w	r7, r7, fp
9000169c:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
900016a0:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
900016a4:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
900016a6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
900016a8:	f004 0703 	and.w	r7, r4, #3
900016ac:	fa07 fe0e 	lsl.w	lr, r7, lr
900016b0:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->MODER = temp;
900016b4:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
900016b6:	00e5      	lsls	r5, r4, #3
900016b8:	d566      	bpl.n	90001788 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
900016ba:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
900016be:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
900016c2:	f003 0c03 	and.w	ip, r3, #3
900016c6:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
900016ca:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
900016ce:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
900016d2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
900016d6:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
900016da:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
900016de:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
900016e2:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
900016e6:	9501      	str	r5, [sp, #4]
900016e8:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
900016ea:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
900016ee:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
900016f2:	ea2a 0e05 	bic.w	lr, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
900016f6:	4d32      	ldr	r5, [pc, #200]	; (900017c0 <HAL_GPIO_Init+0x1c0>)
900016f8:	42a8      	cmp	r0, r5
900016fa:	d04c      	beq.n	90001796 <HAL_GPIO_Init+0x196>
900016fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90001700:	42a8      	cmp	r0, r5
90001702:	d04a      	beq.n	9000179a <HAL_GPIO_Init+0x19a>
90001704:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90001708:	42a8      	cmp	r0, r5
9000170a:	d048      	beq.n	9000179e <HAL_GPIO_Init+0x19e>
9000170c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90001710:	42a8      	cmp	r0, r5
90001712:	d046      	beq.n	900017a2 <HAL_GPIO_Init+0x1a2>
90001714:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90001718:	42a8      	cmp	r0, r5
9000171a:	d044      	beq.n	900017a6 <HAL_GPIO_Init+0x1a6>
9000171c:	4548      	cmp	r0, r9
9000171e:	d044      	beq.n	900017aa <HAL_GPIO_Init+0x1aa>
90001720:	f505 6500 	add.w	r5, r5, #2048	; 0x800
90001724:	42a8      	cmp	r0, r5
90001726:	d042      	beq.n	900017ae <HAL_GPIO_Init+0x1ae>
90001728:	f505 6580 	add.w	r5, r5, #1024	; 0x400
9000172c:	42a8      	cmp	r0, r5
9000172e:	d040      	beq.n	900017b2 <HAL_GPIO_Init+0x1b2>
90001730:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90001734:	42a8      	cmp	r0, r5
90001736:	d03e      	beq.n	900017b6 <HAL_GPIO_Init+0x1b6>
90001738:	f505 6580 	add.w	r5, r5, #1024	; 0x400
9000173c:	42a8      	cmp	r0, r5
9000173e:	bf0c      	ite	eq
90001740:	2509      	moveq	r5, #9
90001742:	250a      	movne	r5, #10
90001744:	fa05 f50c 	lsl.w	r5, r5, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
90001748:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
9000174c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
90001750:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
90001752:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
90001756:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
90001758:	bf0c      	ite	eq
9000175a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
9000175c:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
9000175e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
90001762:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
90001764:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
90001766:	bf0c      	ite	eq
90001768:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
9000176a:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
9000176c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
90001770:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
90001772:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
90001774:	bf0c      	ite	eq
90001776:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
90001778:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
9000177a:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
9000177c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
9000177e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
90001780:	bf54      	ite	pl
90001782:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
90001784:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
90001786:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
90001788:	3301      	adds	r3, #1
9000178a:	2b10      	cmp	r3, #16
9000178c:	f47f af40 	bne.w	90001610 <HAL_GPIO_Init+0x10>
      }
    }
  }
}
90001790:	b003      	add	sp, #12
90001792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
90001796:	2500      	movs	r5, #0
90001798:	e7d4      	b.n	90001744 <HAL_GPIO_Init+0x144>
9000179a:	2501      	movs	r5, #1
9000179c:	e7d2      	b.n	90001744 <HAL_GPIO_Init+0x144>
9000179e:	2502      	movs	r5, #2
900017a0:	e7d0      	b.n	90001744 <HAL_GPIO_Init+0x144>
900017a2:	2503      	movs	r5, #3
900017a4:	e7ce      	b.n	90001744 <HAL_GPIO_Init+0x144>
900017a6:	2504      	movs	r5, #4
900017a8:	e7cc      	b.n	90001744 <HAL_GPIO_Init+0x144>
900017aa:	2505      	movs	r5, #5
900017ac:	e7ca      	b.n	90001744 <HAL_GPIO_Init+0x144>
900017ae:	2506      	movs	r5, #6
900017b0:	e7c8      	b.n	90001744 <HAL_GPIO_Init+0x144>
900017b2:	2507      	movs	r5, #7
900017b4:	e7c6      	b.n	90001744 <HAL_GPIO_Init+0x144>
900017b6:	2508      	movs	r5, #8
900017b8:	e7c4      	b.n	90001744 <HAL_GPIO_Init+0x144>
900017ba:	bf00      	nop
900017bc:	40013c00 	.word	0x40013c00
900017c0:	40020000 	.word	0x40020000
900017c4:	40023800 	.word	0x40023800
900017c8:	40021400 	.word	0x40021400

900017cc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
900017cc:	b10a      	cbz	r2, 900017d2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
900017ce:	6181      	str	r1, [r0, #24]
  }
}
900017d0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
900017d2:	0409      	lsls	r1, r1, #16
900017d4:	e7fb      	b.n	900017ce <HAL_GPIO_WritePin+0x2>

900017d6 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
900017d6:	4770      	bx	lr

900017d8 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
900017d8:	4a04      	ldr	r2, [pc, #16]	; (900017ec <HAL_GPIO_EXTI_IRQHandler+0x14>)
900017da:	6951      	ldr	r1, [r2, #20]
900017dc:	4201      	tst	r1, r0
{
900017de:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
900017e0:	d002      	beq.n	900017e8 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
900017e2:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
900017e4:	f7ff fff7 	bl	900017d6 <HAL_GPIO_EXTI_Callback>
}
900017e8:	bd08      	pop	{r3, pc}
900017ea:	bf00      	nop
900017ec:	40013c00 	.word	0x40013c00

900017f0 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
900017f0:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
900017f2:	f8d1 c000 	ldr.w	ip, [r1]
{
900017f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
900017fa:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
900017fc:	6804      	ldr	r4, [r0, #0]
900017fe:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90001800:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90001804:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90001806:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
90001808:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
9000180c:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90001810:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90001812:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90001816:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000181a:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000181c:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000181e:	68e0      	ldr	r0, [r4, #12]
90001820:	f3c0 400b 	ubfx	r0, r0, #16, #12
90001824:	4430      	add	r0, r6
90001826:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000182a:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000182c:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000182e:	68e0      	ldr	r0, [r4, #12]
90001830:	f3c0 000a 	ubfx	r0, r0, #0, #11
90001834:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
90001836:	6898      	ldr	r0, [r3, #8]
90001838:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
9000183c:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
9000183e:	6888      	ldr	r0, [r1, #8]
90001840:	68e6      	ldr	r6, [r4, #12]
90001842:	3001      	adds	r0, #1
90001844:	f3c6 060a 	ubfx	r6, r6, #0, #11
90001848:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
9000184a:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
9000184c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
90001850:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
90001852:	6918      	ldr	r0, [r3, #16]
90001854:	f020 0007 	bic.w	r0, r0, #7
90001858:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
9000185a:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
9000185c:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
9000185e:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
90001862:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
90001866:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
9000186a:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
9000186e:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
90001872:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
90001876:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
9000187a:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
9000187c:	6958      	ldr	r0, [r3, #20]
9000187e:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
90001882:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
90001884:	6948      	ldr	r0, [r1, #20]
90001886:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
90001888:	69d8      	ldr	r0, [r3, #28]
9000188a:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
9000188e:	f020 0007 	bic.w	r0, r0, #7
90001892:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
90001894:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
90001898:	4305      	orrs	r5, r0
9000189a:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
9000189c:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
9000189e:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
900018a0:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
900018a4:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
900018a6:	b31e      	cbz	r6, 900018f0 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
900018a8:	2e01      	cmp	r6, #1
900018aa:	d023      	beq.n	900018f4 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
900018ac:	1eb0      	subs	r0, r6, #2
900018ae:	2802      	cmp	r0, #2
900018b0:	d922      	bls.n	900018f8 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
900018b2:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
900018b4:	bf0c      	ite	eq
900018b6:	2002      	moveq	r0, #2
900018b8:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
900018ba:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
900018bc:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
900018c0:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
900018c4:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
900018c6:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
900018c8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
900018ca:	4345      	muls	r5, r0
900018cc:	4378      	muls	r0, r7
900018ce:	3003      	adds	r0, #3
900018d0:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
900018d4:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
900018d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
900018d8:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
900018dc:	f020 0007 	bic.w	r0, r0, #7
900018e0:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
900018e2:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
900018e4:	58a3      	ldr	r3, [r4, r2]
900018e6:	f043 0301 	orr.w	r3, r3, #1
900018ea:	50a3      	str	r3, [r4, r2]
}
900018ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
900018f0:	2004      	movs	r0, #4
900018f2:	e7e2      	b.n	900018ba <LTDC_SetConfig+0xca>
    tmp = 3U;
900018f4:	2003      	movs	r0, #3
900018f6:	e7e0      	b.n	900018ba <LTDC_SetConfig+0xca>
    tmp = 2U;
900018f8:	2002      	movs	r0, #2
900018fa:	e7de      	b.n	900018ba <LTDC_SetConfig+0xca>

900018fc <HAL_LTDC_MspInit>:
}
900018fc:	4770      	bx	lr
	...

90001900 <HAL_LTDC_Init>:
{
90001900:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
90001902:	4604      	mov	r4, r0
90001904:	2800      	cmp	r0, #0
90001906:	d063      	beq.n	900019d0 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
90001908:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
9000190c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90001910:	b91b      	cbnz	r3, 9000191a <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
90001912:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
90001916:	f7ff fff1 	bl	900018fc <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000191a:	2302      	movs	r3, #2
9000191c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90001920:	6823      	ldr	r3, [r4, #0]
90001922:	699a      	ldr	r2, [r3, #24]
90001924:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
90001928:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000192a:	6999      	ldr	r1, [r3, #24]
9000192c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
90001930:	4302      	orrs	r2, r0
90001932:	68e0      	ldr	r0, [r4, #12]
90001934:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90001936:	6920      	ldr	r0, [r4, #16]
90001938:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
9000193a:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000193c:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
9000193e:	4925      	ldr	r1, [pc, #148]	; (900019d4 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90001940:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
90001942:	689a      	ldr	r2, [r3, #8]
90001944:	400a      	ands	r2, r1
90001946:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
90001948:	689a      	ldr	r2, [r3, #8]
9000194a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000194e:	69a0      	ldr	r0, [r4, #24]
90001950:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
90001952:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
90001954:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
90001956:	68da      	ldr	r2, [r3, #12]
90001958:	400a      	ands	r2, r1
9000195a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
9000195c:	68da      	ldr	r2, [r3, #12]
9000195e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
90001962:	6a20      	ldr	r0, [r4, #32]
90001964:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
90001966:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
90001968:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
9000196a:	691a      	ldr	r2, [r3, #16]
9000196c:	400a      	ands	r2, r1
9000196e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
90001970:	691a      	ldr	r2, [r3, #16]
90001972:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
90001976:	6aa0      	ldr	r0, [r4, #40]	; 0x28
90001978:	4302      	orrs	r2, r0
9000197a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
9000197c:	695a      	ldr	r2, [r3, #20]
9000197e:	4011      	ands	r1, r2
90001980:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
90001982:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
90001984:	695a      	ldr	r2, [r3, #20]
90001986:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
9000198a:	6b21      	ldr	r1, [r4, #48]	; 0x30
9000198c:	430a      	orrs	r2, r1
9000198e:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90001990:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
90001992:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90001996:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
9000199a:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000199e:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
900019a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
900019a2:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
900019a6:	430a      	orrs	r2, r1
900019a8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
900019ac:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
900019b0:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
900019b2:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
900019b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900019b6:	f042 0206 	orr.w	r2, r2, #6
900019ba:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
900019bc:	699a      	ldr	r2, [r3, #24]
900019be:	f042 0201 	orr.w	r2, r2, #1
900019c2:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
900019c4:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
900019c6:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
900019ca:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
900019ce:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
900019d0:	2001      	movs	r0, #1
900019d2:	e7fc      	b.n	900019ce <HAL_LTDC_Init+0xce>
900019d4:	f000f800 	.word	0xf000f800

900019d8 <HAL_LTDC_ConfigLayer>:
{
900019d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
900019dc:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
900019e0:	4606      	mov	r6, r0
900019e2:	460f      	mov	r7, r1
900019e4:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
900019e6:	2b01      	cmp	r3, #1
900019e8:	f04f 0002 	mov.w	r0, #2
900019ec:	d01f      	beq.n	90001a2e <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
900019ee:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
900019f0:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
900019f4:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
900019f6:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
900019fa:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
900019fe:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90001a02:	3438      	adds	r4, #56	; 0x38
90001a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90001a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90001a08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90001a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90001a0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90001a0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90001a10:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
90001a12:	4630      	mov	r0, r6
90001a14:	4662      	mov	r2, ip
90001a16:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90001a18:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
90001a1a:	f7ff fee9 	bl	900017f0 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90001a1e:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
90001a20:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90001a22:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
90001a26:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
90001a2a:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
90001a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90001a32 <HAL_LTDC_GetState>:
  return hltdc->State;
90001a32:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
90001a36:	4770      	bx	lr

90001a38 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
90001a38:	4b19      	ldr	r3, [pc, #100]	; (90001aa0 <HAL_PWREx_EnableOverDrive+0x68>)
{
90001a3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
90001a3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
90001a3e:	4c19      	ldr	r4, [pc, #100]	; (90001aa4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
90001a40:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
90001a44:	641a      	str	r2, [r3, #64]	; 0x40
90001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90001a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90001a4c:	9301      	str	r3, [sp, #4]
90001a4e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
90001a50:	6823      	ldr	r3, [r4, #0]
90001a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90001a56:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
90001a58:	f7ff fa4a 	bl	90000ef0 <HAL_GetTick>
90001a5c:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
90001a5e:	6863      	ldr	r3, [r4, #4]
90001a60:	03da      	lsls	r2, r3, #15
90001a62:	d50c      	bpl.n	90001a7e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
90001a64:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
90001a66:	4d0f      	ldr	r5, [pc, #60]	; (90001aa4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
90001a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90001a6c:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
90001a6e:	f7ff fa3f 	bl	90000ef0 <HAL_GetTick>
90001a72:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
90001a74:	686b      	ldr	r3, [r5, #4]
90001a76:	039b      	lsls	r3, r3, #14
90001a78:	d50a      	bpl.n	90001a90 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
90001a7a:	2000      	movs	r0, #0
90001a7c:	e006      	b.n	90001a8c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
90001a7e:	f7ff fa37 	bl	90000ef0 <HAL_GetTick>
90001a82:	1b40      	subs	r0, r0, r5
90001a84:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
90001a88:	d9e9      	bls.n	90001a5e <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
90001a8a:	2003      	movs	r0, #3
}
90001a8c:	b003      	add	sp, #12
90001a8e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
90001a90:	f7ff fa2e 	bl	90000ef0 <HAL_GetTick>
90001a94:	1b00      	subs	r0, r0, r4
90001a96:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
90001a9a:	d9eb      	bls.n	90001a74 <HAL_PWREx_EnableOverDrive+0x3c>
90001a9c:	e7f5      	b.n	90001a8a <HAL_PWREx_EnableOverDrive+0x52>
90001a9e:	bf00      	nop
90001aa0:	40023800 	.word	0x40023800
90001aa4:	40007000 	.word	0x40007000

90001aa8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
90001aa8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
90001aac:	4604      	mov	r4, r0
90001aae:	b340      	cbz	r0, 90001b02 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
90001ab0:	6803      	ldr	r3, [r0, #0]
90001ab2:	07d8      	lsls	r0, r3, #31
90001ab4:	d410      	bmi.n	90001ad8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
90001ab6:	6823      	ldr	r3, [r4, #0]
90001ab8:	0799      	lsls	r1, r3, #30
90001aba:	d464      	bmi.n	90001b86 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
90001abc:	6823      	ldr	r3, [r4, #0]
90001abe:	0719      	lsls	r1, r3, #28
90001ac0:	f100 80aa 	bmi.w	90001c18 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
90001ac4:	6823      	ldr	r3, [r4, #0]
90001ac6:	075a      	lsls	r2, r3, #29
90001ac8:	f100 80cb 	bmi.w	90001c62 <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
90001acc:	69a2      	ldr	r2, [r4, #24]
90001ace:	2a00      	cmp	r2, #0
90001ad0:	f040 8134 	bne.w	90001d3c <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
90001ad4:	2000      	movs	r0, #0
90001ad6:	e02b      	b.n	90001b30 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
90001ad8:	4b96      	ldr	r3, [pc, #600]	; (90001d34 <HAL_RCC_OscConfig+0x28c>)
90001ada:	689a      	ldr	r2, [r3, #8]
90001adc:	f002 020c 	and.w	r2, r2, #12
90001ae0:	2a04      	cmp	r2, #4
90001ae2:	d007      	beq.n	90001af4 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
90001ae4:	689a      	ldr	r2, [r3, #8]
90001ae6:	f002 020c 	and.w	r2, r2, #12
90001aea:	2a08      	cmp	r2, #8
90001aec:	d10b      	bne.n	90001b06 <HAL_RCC_OscConfig+0x5e>
90001aee:	685a      	ldr	r2, [r3, #4]
90001af0:	0252      	lsls	r2, r2, #9
90001af2:	d508      	bpl.n	90001b06 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90001af4:	4b8f      	ldr	r3, [pc, #572]	; (90001d34 <HAL_RCC_OscConfig+0x28c>)
90001af6:	681b      	ldr	r3, [r3, #0]
90001af8:	039b      	lsls	r3, r3, #14
90001afa:	d5dc      	bpl.n	90001ab6 <HAL_RCC_OscConfig+0xe>
90001afc:	6863      	ldr	r3, [r4, #4]
90001afe:	2b00      	cmp	r3, #0
90001b00:	d1d9      	bne.n	90001ab6 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
90001b02:	2001      	movs	r0, #1
90001b04:	e014      	b.n	90001b30 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90001b06:	6862      	ldr	r2, [r4, #4]
90001b08:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
90001b0c:	d113      	bne.n	90001b36 <HAL_RCC_OscConfig+0x8e>
90001b0e:	681a      	ldr	r2, [r3, #0]
90001b10:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
90001b14:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
90001b16:	f7ff f9eb 	bl	90000ef0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90001b1a:	4e86      	ldr	r6, [pc, #536]	; (90001d34 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
90001b1c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90001b1e:	6833      	ldr	r3, [r6, #0]
90001b20:	039f      	lsls	r7, r3, #14
90001b22:	d4c8      	bmi.n	90001ab6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90001b24:	f7ff f9e4 	bl	90000ef0 <HAL_GetTick>
90001b28:	1b40      	subs	r0, r0, r5
90001b2a:	2864      	cmp	r0, #100	; 0x64
90001b2c:	d9f7      	bls.n	90001b1e <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
90001b2e:	2003      	movs	r0, #3
}
90001b30:	b002      	add	sp, #8
90001b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90001b36:	4d7f      	ldr	r5, [pc, #508]	; (90001d34 <HAL_RCC_OscConfig+0x28c>)
90001b38:	682b      	ldr	r3, [r5, #0]
90001b3a:	b992      	cbnz	r2, 90001b62 <HAL_RCC_OscConfig+0xba>
90001b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90001b40:	602b      	str	r3, [r5, #0]
90001b42:	682b      	ldr	r3, [r5, #0]
90001b44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90001b48:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
90001b4a:	f7ff f9d1 	bl	90000ef0 <HAL_GetTick>
90001b4e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
90001b50:	682b      	ldr	r3, [r5, #0]
90001b52:	0398      	lsls	r0, r3, #14
90001b54:	d5af      	bpl.n	90001ab6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90001b56:	f7ff f9cb 	bl	90000ef0 <HAL_GetTick>
90001b5a:	1b80      	subs	r0, r0, r6
90001b5c:	2864      	cmp	r0, #100	; 0x64
90001b5e:	d9f7      	bls.n	90001b50 <HAL_RCC_OscConfig+0xa8>
90001b60:	e7e5      	b.n	90001b2e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90001b62:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
90001b66:	d107      	bne.n	90001b78 <HAL_RCC_OscConfig+0xd0>
90001b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
90001b6c:	602b      	str	r3, [r5, #0]
90001b6e:	682b      	ldr	r3, [r5, #0]
90001b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90001b74:	602b      	str	r3, [r5, #0]
90001b76:	e7ce      	b.n	90001b16 <HAL_RCC_OscConfig+0x6e>
90001b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90001b7c:	602b      	str	r3, [r5, #0]
90001b7e:	682b      	ldr	r3, [r5, #0]
90001b80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90001b84:	e7f6      	b.n	90001b74 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
90001b86:	4b6b      	ldr	r3, [pc, #428]	; (90001d34 <HAL_RCC_OscConfig+0x28c>)
90001b88:	689a      	ldr	r2, [r3, #8]
90001b8a:	f012 0f0c 	tst.w	r2, #12
90001b8e:	d007      	beq.n	90001ba0 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
90001b90:	689a      	ldr	r2, [r3, #8]
90001b92:	f002 020c 	and.w	r2, r2, #12
90001b96:	2a08      	cmp	r2, #8
90001b98:	d111      	bne.n	90001bbe <HAL_RCC_OscConfig+0x116>
90001b9a:	685a      	ldr	r2, [r3, #4]
90001b9c:	0251      	lsls	r1, r2, #9
90001b9e:	d40e      	bmi.n	90001bbe <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
90001ba0:	4b64      	ldr	r3, [pc, #400]	; (90001d34 <HAL_RCC_OscConfig+0x28c>)
90001ba2:	681a      	ldr	r2, [r3, #0]
90001ba4:	0792      	lsls	r2, r2, #30
90001ba6:	d502      	bpl.n	90001bae <HAL_RCC_OscConfig+0x106>
90001ba8:	68e2      	ldr	r2, [r4, #12]
90001baa:	2a01      	cmp	r2, #1
90001bac:	d1a9      	bne.n	90001b02 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90001bae:	681a      	ldr	r2, [r3, #0]
90001bb0:	6921      	ldr	r1, [r4, #16]
90001bb2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
90001bb6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
90001bba:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
90001bbc:	e77e      	b.n	90001abc <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
90001bbe:	68e2      	ldr	r2, [r4, #12]
90001bc0:	b1c2      	cbz	r2, 90001bf4 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
90001bc2:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90001bc4:	4d5b      	ldr	r5, [pc, #364]	; (90001d34 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
90001bc6:	f042 0201 	orr.w	r2, r2, #1
90001bca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
90001bcc:	f7ff f990 	bl	90000ef0 <HAL_GetTick>
90001bd0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90001bd2:	682b      	ldr	r3, [r5, #0]
90001bd4:	079f      	lsls	r7, r3, #30
90001bd6:	d507      	bpl.n	90001be8 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90001bd8:	682b      	ldr	r3, [r5, #0]
90001bda:	6922      	ldr	r2, [r4, #16]
90001bdc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
90001be0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
90001be4:	602b      	str	r3, [r5, #0]
90001be6:	e769      	b.n	90001abc <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90001be8:	f7ff f982 	bl	90000ef0 <HAL_GetTick>
90001bec:	1b80      	subs	r0, r0, r6
90001bee:	2802      	cmp	r0, #2
90001bf0:	d9ef      	bls.n	90001bd2 <HAL_RCC_OscConfig+0x12a>
90001bf2:	e79c      	b.n	90001b2e <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
90001bf4:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
90001bf6:	4e4f      	ldr	r6, [pc, #316]	; (90001d34 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
90001bf8:	f022 0201 	bic.w	r2, r2, #1
90001bfc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
90001bfe:	f7ff f977 	bl	90000ef0 <HAL_GetTick>
90001c02:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
90001c04:	6833      	ldr	r3, [r6, #0]
90001c06:	0798      	lsls	r0, r3, #30
90001c08:	f57f af58 	bpl.w	90001abc <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90001c0c:	f7ff f970 	bl	90000ef0 <HAL_GetTick>
90001c10:	1b40      	subs	r0, r0, r5
90001c12:	2802      	cmp	r0, #2
90001c14:	d9f6      	bls.n	90001c04 <HAL_RCC_OscConfig+0x15c>
90001c16:	e78a      	b.n	90001b2e <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
90001c18:	6963      	ldr	r3, [r4, #20]
90001c1a:	4d46      	ldr	r5, [pc, #280]	; (90001d34 <HAL_RCC_OscConfig+0x28c>)
90001c1c:	b183      	cbz	r3, 90001c40 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
90001c1e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
90001c20:	f043 0301 	orr.w	r3, r3, #1
90001c24:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
90001c26:	f7ff f963 	bl	90000ef0 <HAL_GetTick>
90001c2a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
90001c2c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
90001c2e:	079b      	lsls	r3, r3, #30
90001c30:	f53f af48 	bmi.w	90001ac4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90001c34:	f7ff f95c 	bl	90000ef0 <HAL_GetTick>
90001c38:	1b80      	subs	r0, r0, r6
90001c3a:	2802      	cmp	r0, #2
90001c3c:	d9f6      	bls.n	90001c2c <HAL_RCC_OscConfig+0x184>
90001c3e:	e776      	b.n	90001b2e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
90001c40:	6f6b      	ldr	r3, [r5, #116]	; 0x74
90001c42:	f023 0301 	bic.w	r3, r3, #1
90001c46:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
90001c48:	f7ff f952 	bl	90000ef0 <HAL_GetTick>
90001c4c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
90001c4e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
90001c50:	079f      	lsls	r7, r3, #30
90001c52:	f57f af37 	bpl.w	90001ac4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90001c56:	f7ff f94b 	bl	90000ef0 <HAL_GetTick>
90001c5a:	1b80      	subs	r0, r0, r6
90001c5c:	2802      	cmp	r0, #2
90001c5e:	d9f6      	bls.n	90001c4e <HAL_RCC_OscConfig+0x1a6>
90001c60:	e765      	b.n	90001b2e <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
90001c62:	4b34      	ldr	r3, [pc, #208]	; (90001d34 <HAL_RCC_OscConfig+0x28c>)
90001c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
90001c66:	00d0      	lsls	r0, r2, #3
90001c68:	d427      	bmi.n	90001cba <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
90001c6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
90001c6c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
90001c6e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
90001c72:	641a      	str	r2, [r3, #64]	; 0x40
90001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90001c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90001c7a:	9301      	str	r3, [sp, #4]
90001c7c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
90001c7e:	4d2e      	ldr	r5, [pc, #184]	; (90001d38 <HAL_RCC_OscConfig+0x290>)
90001c80:	682b      	ldr	r3, [r5, #0]
90001c82:	05d9      	lsls	r1, r3, #23
90001c84:	d51b      	bpl.n	90001cbe <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90001c86:	68a3      	ldr	r3, [r4, #8]
90001c88:	4d2a      	ldr	r5, [pc, #168]	; (90001d34 <HAL_RCC_OscConfig+0x28c>)
90001c8a:	2b01      	cmp	r3, #1
90001c8c:	d127      	bne.n	90001cde <HAL_RCC_OscConfig+0x236>
90001c8e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
90001c90:	f043 0301 	orr.w	r3, r3, #1
90001c94:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90001c96:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
90001c9a:	f7ff f929 	bl	90000ef0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90001c9e:	4e25      	ldr	r6, [pc, #148]	; (90001d34 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
90001ca0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90001ca2:	6f33      	ldr	r3, [r6, #112]	; 0x70
90001ca4:	079b      	lsls	r3, r3, #30
90001ca6:	d53f      	bpl.n	90001d28 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
90001ca8:	2f00      	cmp	r7, #0
90001caa:	f43f af0f 	beq.w	90001acc <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
90001cae:	4a21      	ldr	r2, [pc, #132]	; (90001d34 <HAL_RCC_OscConfig+0x28c>)
90001cb0:	6c13      	ldr	r3, [r2, #64]	; 0x40
90001cb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
90001cb6:	6413      	str	r3, [r2, #64]	; 0x40
90001cb8:	e708      	b.n	90001acc <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
90001cba:	2700      	movs	r7, #0
90001cbc:	e7df      	b.n	90001c7e <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
90001cbe:	682b      	ldr	r3, [r5, #0]
90001cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90001cc4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
90001cc6:	f7ff f913 	bl	90000ef0 <HAL_GetTick>
90001cca:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
90001ccc:	682b      	ldr	r3, [r5, #0]
90001cce:	05da      	lsls	r2, r3, #23
90001cd0:	d4d9      	bmi.n	90001c86 <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90001cd2:	f7ff f90d 	bl	90000ef0 <HAL_GetTick>
90001cd6:	1b80      	subs	r0, r0, r6
90001cd8:	2864      	cmp	r0, #100	; 0x64
90001cda:	d9f7      	bls.n	90001ccc <HAL_RCC_OscConfig+0x224>
90001cdc:	e727      	b.n	90001b2e <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90001cde:	b9ab      	cbnz	r3, 90001d0c <HAL_RCC_OscConfig+0x264>
90001ce0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90001ce2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90001ce6:	f023 0301 	bic.w	r3, r3, #1
90001cea:	672b      	str	r3, [r5, #112]	; 0x70
90001cec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
90001cee:	f023 0304 	bic.w	r3, r3, #4
90001cf2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
90001cf4:	f7ff f8fc 	bl	90000ef0 <HAL_GetTick>
90001cf8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
90001cfa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
90001cfc:	0798      	lsls	r0, r3, #30
90001cfe:	d5d3      	bpl.n	90001ca8 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90001d00:	f7ff f8f6 	bl	90000ef0 <HAL_GetTick>
90001d04:	1b80      	subs	r0, r0, r6
90001d06:	4540      	cmp	r0, r8
90001d08:	d9f7      	bls.n	90001cfa <HAL_RCC_OscConfig+0x252>
90001d0a:	e710      	b.n	90001b2e <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90001d0c:	2b05      	cmp	r3, #5
90001d0e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
90001d10:	d103      	bne.n	90001d1a <HAL_RCC_OscConfig+0x272>
90001d12:	f043 0304 	orr.w	r3, r3, #4
90001d16:	672b      	str	r3, [r5, #112]	; 0x70
90001d18:	e7b9      	b.n	90001c8e <HAL_RCC_OscConfig+0x1e6>
90001d1a:	f023 0301 	bic.w	r3, r3, #1
90001d1e:	672b      	str	r3, [r5, #112]	; 0x70
90001d20:	6f2b      	ldr	r3, [r5, #112]	; 0x70
90001d22:	f023 0304 	bic.w	r3, r3, #4
90001d26:	e7b5      	b.n	90001c94 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90001d28:	f7ff f8e2 	bl	90000ef0 <HAL_GetTick>
90001d2c:	1b40      	subs	r0, r0, r5
90001d2e:	4540      	cmp	r0, r8
90001d30:	d9b7      	bls.n	90001ca2 <HAL_RCC_OscConfig+0x1fa>
90001d32:	e6fc      	b.n	90001b2e <HAL_RCC_OscConfig+0x86>
90001d34:	40023800 	.word	0x40023800
90001d38:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
90001d3c:	4d38      	ldr	r5, [pc, #224]	; (90001e20 <HAL_RCC_OscConfig+0x378>)
90001d3e:	68ab      	ldr	r3, [r5, #8]
90001d40:	f003 030c 	and.w	r3, r3, #12
90001d44:	2b08      	cmp	r3, #8
90001d46:	d041      	beq.n	90001dcc <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
90001d48:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90001d4a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
90001d4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90001d50:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90001d52:	d12e      	bne.n	90001db2 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
90001d54:	f7ff f8cc 	bl	90000ef0 <HAL_GetTick>
90001d58:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90001d5a:	682b      	ldr	r3, [r5, #0]
90001d5c:	0199      	lsls	r1, r3, #6
90001d5e:	d422      	bmi.n	90001da6 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
90001d60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90001d62:	085b      	lsrs	r3, r3, #1
90001d64:	1e5a      	subs	r2, r3, #1
90001d66:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
90001d6a:	430b      	orrs	r3, r1
90001d6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90001d70:	6a62      	ldr	r2, [r4, #36]	; 0x24
90001d72:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
90001d76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90001d78:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
90001d7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
90001d80:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
90001d82:	682b      	ldr	r3, [r5, #0]
90001d84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
90001d88:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
90001d8a:	f7ff f8b1 	bl	90000ef0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90001d8e:	4d24      	ldr	r5, [pc, #144]	; (90001e20 <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
90001d90:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90001d92:	682b      	ldr	r3, [r5, #0]
90001d94:	019a      	lsls	r2, r3, #6
90001d96:	f53f ae9d 	bmi.w	90001ad4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90001d9a:	f7ff f8a9 	bl	90000ef0 <HAL_GetTick>
90001d9e:	1b00      	subs	r0, r0, r4
90001da0:	2802      	cmp	r0, #2
90001da2:	d9f6      	bls.n	90001d92 <HAL_RCC_OscConfig+0x2ea>
90001da4:	e6c3      	b.n	90001b2e <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90001da6:	f7ff f8a3 	bl	90000ef0 <HAL_GetTick>
90001daa:	1b80      	subs	r0, r0, r6
90001dac:	2802      	cmp	r0, #2
90001dae:	d9d4      	bls.n	90001d5a <HAL_RCC_OscConfig+0x2b2>
90001db0:	e6bd      	b.n	90001b2e <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
90001db2:	f7ff f89d 	bl	90000ef0 <HAL_GetTick>
90001db6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90001db8:	682b      	ldr	r3, [r5, #0]
90001dba:	019b      	lsls	r3, r3, #6
90001dbc:	f57f ae8a 	bpl.w	90001ad4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90001dc0:	f7ff f896 	bl	90000ef0 <HAL_GetTick>
90001dc4:	1b00      	subs	r0, r0, r4
90001dc6:	2802      	cmp	r0, #2
90001dc8:	d9f6      	bls.n	90001db8 <HAL_RCC_OscConfig+0x310>
90001dca:	e6b0      	b.n	90001b2e <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90001dcc:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
90001dce:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90001dd0:	f43f ae97 	beq.w	90001b02 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90001dd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90001dd8:	69e1      	ldr	r1, [r4, #28]
90001dda:	428a      	cmp	r2, r1
90001ddc:	f47f ae91 	bne.w	90001b02 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
90001de0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90001de4:	6a21      	ldr	r1, [r4, #32]
90001de6:	428a      	cmp	r2, r1
90001de8:	f47f ae8b 	bne.w	90001b02 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
90001dec:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
90001df0:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
90001df2:	401a      	ands	r2, r3
90001df4:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
90001df8:	f47f ae83 	bne.w	90001b02 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
90001dfc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
90001dfe:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
90001e02:	0852      	lsrs	r2, r2, #1
90001e04:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
90001e06:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
90001e0a:	f47f ae7a 	bne.w	90001b02 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
90001e0e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
90001e12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
90001e14:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
90001e18:	f43f ae5c 	beq.w	90001ad4 <HAL_RCC_OscConfig+0x2c>
90001e1c:	e671      	b.n	90001b02 <HAL_RCC_OscConfig+0x5a>
90001e1e:	bf00      	nop
90001e20:	40023800 	.word	0x40023800

90001e24 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
90001e24:	4913      	ldr	r1, [pc, #76]	; (90001e74 <HAL_RCC_GetSysClockFreq+0x50>)
{
90001e26:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
90001e28:	688b      	ldr	r3, [r1, #8]
90001e2a:	f003 030c 	and.w	r3, r3, #12
90001e2e:	2b04      	cmp	r3, #4
90001e30:	d01b      	beq.n	90001e6a <HAL_RCC_GetSysClockFreq+0x46>
90001e32:	2b08      	cmp	r3, #8
90001e34:	d11b      	bne.n	90001e6e <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
90001e36:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
90001e38:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
90001e3a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
90001e3c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
90001e40:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
90001e44:	f3c1 1188 	ubfx	r1, r1, #6, #9
90001e48:	bf1a      	itte	ne
90001e4a:	480b      	ldrne	r0, [pc, #44]	; (90001e78 <HAL_RCC_GetSysClockFreq+0x54>)
90001e4c:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
90001e4e:	480b      	ldreq	r0, [pc, #44]	; (90001e7c <HAL_RCC_GetSysClockFreq+0x58>)
90001e50:	fba1 0100 	umull	r0, r1, r1, r0
90001e54:	f7fe fa2c 	bl	900002b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
90001e58:	4b06      	ldr	r3, [pc, #24]	; (90001e74 <HAL_RCC_GetSysClockFreq+0x50>)
90001e5a:	685b      	ldr	r3, [r3, #4]
90001e5c:	f3c3 4301 	ubfx	r3, r3, #16, #2
90001e60:	3301      	adds	r3, #1
90001e62:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
90001e64:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
90001e68:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
90001e6a:	4803      	ldr	r0, [pc, #12]	; (90001e78 <HAL_RCC_GetSysClockFreq+0x54>)
90001e6c:	e7fc      	b.n	90001e68 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
90001e6e:	4803      	ldr	r0, [pc, #12]	; (90001e7c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
90001e70:	e7fa      	b.n	90001e68 <HAL_RCC_GetSysClockFreq+0x44>
90001e72:	bf00      	nop
90001e74:	40023800 	.word	0x40023800
90001e78:	017d7840 	.word	0x017d7840
90001e7c:	00f42400 	.word	0x00f42400

90001e80 <HAL_RCC_ClockConfig>:
{
90001e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90001e84:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
90001e86:	4604      	mov	r4, r0
90001e88:	b910      	cbnz	r0, 90001e90 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
90001e8a:	2001      	movs	r0, #1
}
90001e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
90001e90:	4a46      	ldr	r2, [pc, #280]	; (90001fac <HAL_RCC_ClockConfig+0x12c>)
90001e92:	6813      	ldr	r3, [r2, #0]
90001e94:	f003 030f 	and.w	r3, r3, #15
90001e98:	428b      	cmp	r3, r1
90001e9a:	d328      	bcc.n	90001eee <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90001e9c:	6822      	ldr	r2, [r4, #0]
90001e9e:	0797      	lsls	r7, r2, #30
90001ea0:	d430      	bmi.n	90001f04 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
90001ea2:	07d0      	lsls	r0, r2, #31
90001ea4:	d444      	bmi.n	90001f30 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
90001ea6:	4a41      	ldr	r2, [pc, #260]	; (90001fac <HAL_RCC_ClockConfig+0x12c>)
90001ea8:	6813      	ldr	r3, [r2, #0]
90001eaa:	f003 030f 	and.w	r3, r3, #15
90001eae:	42ab      	cmp	r3, r5
90001eb0:	d867      	bhi.n	90001f82 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90001eb2:	6822      	ldr	r2, [r4, #0]
90001eb4:	0751      	lsls	r1, r2, #29
90001eb6:	d470      	bmi.n	90001f9a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90001eb8:	0713      	lsls	r3, r2, #28
90001eba:	d507      	bpl.n	90001ecc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
90001ebc:	4a3c      	ldr	r2, [pc, #240]	; (90001fb0 <HAL_RCC_ClockConfig+0x130>)
90001ebe:	6921      	ldr	r1, [r4, #16]
90001ec0:	6893      	ldr	r3, [r2, #8]
90001ec2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
90001ec6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
90001eca:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
90001ecc:	f7ff ffaa 	bl	90001e24 <HAL_RCC_GetSysClockFreq>
90001ed0:	4b37      	ldr	r3, [pc, #220]	; (90001fb0 <HAL_RCC_ClockConfig+0x130>)
90001ed2:	4a38      	ldr	r2, [pc, #224]	; (90001fb4 <HAL_RCC_ClockConfig+0x134>)
90001ed4:	689b      	ldr	r3, [r3, #8]
90001ed6:	f3c3 1303 	ubfx	r3, r3, #4, #4
90001eda:	5cd3      	ldrb	r3, [r2, r3]
90001edc:	40d8      	lsrs	r0, r3
90001ede:	4b36      	ldr	r3, [pc, #216]	; (90001fb8 <HAL_RCC_ClockConfig+0x138>)
90001ee0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
90001ee2:	4b36      	ldr	r3, [pc, #216]	; (90001fbc <HAL_RCC_ClockConfig+0x13c>)
90001ee4:	6818      	ldr	r0, [r3, #0]
90001ee6:	f7fe ffd5 	bl	90000e94 <HAL_InitTick>
  return HAL_OK;
90001eea:	2000      	movs	r0, #0
90001eec:	e7ce      	b.n	90001e8c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
90001eee:	6813      	ldr	r3, [r2, #0]
90001ef0:	f023 030f 	bic.w	r3, r3, #15
90001ef4:	430b      	orrs	r3, r1
90001ef6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90001ef8:	6813      	ldr	r3, [r2, #0]
90001efa:	f003 030f 	and.w	r3, r3, #15
90001efe:	428b      	cmp	r3, r1
90001f00:	d1c3      	bne.n	90001e8a <HAL_RCC_ClockConfig+0xa>
90001f02:	e7cb      	b.n	90001e9c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90001f04:	f012 0f04 	tst.w	r2, #4
90001f08:	4b29      	ldr	r3, [pc, #164]	; (90001fb0 <HAL_RCC_ClockConfig+0x130>)
90001f0a:	d003      	beq.n	90001f14 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
90001f0c:	6899      	ldr	r1, [r3, #8]
90001f0e:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
90001f12:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90001f14:	0716      	lsls	r6, r2, #28
90001f16:	d503      	bpl.n	90001f20 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
90001f18:	6899      	ldr	r1, [r3, #8]
90001f1a:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
90001f1e:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90001f20:	4923      	ldr	r1, [pc, #140]	; (90001fb0 <HAL_RCC_ClockConfig+0x130>)
90001f22:	68a0      	ldr	r0, [r4, #8]
90001f24:	688b      	ldr	r3, [r1, #8]
90001f26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
90001f2a:	4303      	orrs	r3, r0
90001f2c:	608b      	str	r3, [r1, #8]
90001f2e:	e7b8      	b.n	90001ea2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90001f30:	6861      	ldr	r1, [r4, #4]
90001f32:	4b1f      	ldr	r3, [pc, #124]	; (90001fb0 <HAL_RCC_ClockConfig+0x130>)
90001f34:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90001f36:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90001f38:	d11b      	bne.n	90001f72 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90001f3a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90001f3e:	d0a4      	beq.n	90001e8a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
90001f40:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
90001f42:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90001f46:	4f1a      	ldr	r7, [pc, #104]	; (90001fb0 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
90001f48:	f022 0203 	bic.w	r2, r2, #3
90001f4c:	430a      	orrs	r2, r1
90001f4e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
90001f50:	f7fe ffce 	bl	90000ef0 <HAL_GetTick>
90001f54:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90001f56:	68bb      	ldr	r3, [r7, #8]
90001f58:	6862      	ldr	r2, [r4, #4]
90001f5a:	f003 030c 	and.w	r3, r3, #12
90001f5e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
90001f62:	d0a0      	beq.n	90001ea6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
90001f64:	f7fe ffc4 	bl	90000ef0 <HAL_GetTick>
90001f68:	1b80      	subs	r0, r0, r6
90001f6a:	4540      	cmp	r0, r8
90001f6c:	d9f3      	bls.n	90001f56 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
90001f6e:	2003      	movs	r0, #3
90001f70:	e78c      	b.n	90001e8c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
90001f72:	2902      	cmp	r1, #2
90001f74:	d102      	bne.n	90001f7c <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90001f76:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
90001f7a:	e7e0      	b.n	90001f3e <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90001f7c:	f012 0f02 	tst.w	r2, #2
90001f80:	e7dd      	b.n	90001f3e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
90001f82:	6813      	ldr	r3, [r2, #0]
90001f84:	f023 030f 	bic.w	r3, r3, #15
90001f88:	432b      	orrs	r3, r5
90001f8a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90001f8c:	6813      	ldr	r3, [r2, #0]
90001f8e:	f003 030f 	and.w	r3, r3, #15
90001f92:	42ab      	cmp	r3, r5
90001f94:	f47f af79 	bne.w	90001e8a <HAL_RCC_ClockConfig+0xa>
90001f98:	e78b      	b.n	90001eb2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
90001f9a:	4905      	ldr	r1, [pc, #20]	; (90001fb0 <HAL_RCC_ClockConfig+0x130>)
90001f9c:	68e0      	ldr	r0, [r4, #12]
90001f9e:	688b      	ldr	r3, [r1, #8]
90001fa0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
90001fa4:	4303      	orrs	r3, r0
90001fa6:	608b      	str	r3, [r1, #8]
90001fa8:	e786      	b.n	90001eb8 <HAL_RCC_ClockConfig+0x38>
90001faa:	bf00      	nop
90001fac:	40023c00 	.word	0x40023c00
90001fb0:	40023800 	.word	0x40023800
90001fb4:	90007988 	.word	0x90007988
90001fb8:	2000002c 	.word	0x2000002c
90001fbc:	20000034 	.word	0x20000034

90001fc0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
90001fc0:	6803      	ldr	r3, [r0, #0]
{
90001fc2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
90001fc6:	f013 0601 	ands.w	r6, r3, #1
{
90001fca:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
90001fcc:	d00b      	beq.n	90001fe6 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
90001fce:	4aab      	ldr	r2, [pc, #684]	; (9000227c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90001fd0:	6891      	ldr	r1, [r2, #8]
90001fd2:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
90001fd6:	6091      	str	r1, [r2, #8]
90001fd8:	6b46      	ldr	r6, [r0, #52]	; 0x34
90001fda:	6891      	ldr	r1, [r2, #8]
90001fdc:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
90001fde:	fab6 f686 	clz	r6, r6
90001fe2:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
90001fe4:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
90001fe6:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
90001fea:	d012      	beq.n	90002012 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90001fec:	49a3      	ldr	r1, [pc, #652]	; (9000227c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90001fee:	6be5      	ldr	r5, [r4, #60]	; 0x3c
90001ff0:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
90001ff4:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90001ff8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
90001ffc:	bf08      	it	eq
90001ffe:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90002000:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
90002004:	bf16      	itet	ne
90002006:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
9000200a:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
9000200c:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
9000200e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
90002012:	02d8      	lsls	r0, r3, #11
90002014:	d510      	bpl.n	90002038 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
90002016:	4899      	ldr	r0, [pc, #612]	; (9000227c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002018:	6c21      	ldr	r1, [r4, #64]	; 0x40
9000201a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
9000201e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
90002022:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
90002026:	ea42 0201 	orr.w	r2, r2, r1
9000202a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
9000202e:	f000 8186 	beq.w	9000233e <HAL_RCCEx_PeriphCLKConfig+0x37e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
90002032:	2900      	cmp	r1, #0
90002034:	bf08      	it	eq
90002036:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
90002038:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
9000203c:	bf18      	it	ne
9000203e:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
90002040:	0699      	lsls	r1, r3, #26
90002042:	d531      	bpl.n	900020a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
90002044:	4b8d      	ldr	r3, [pc, #564]	; (9000227c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
90002046:	4f8e      	ldr	r7, [pc, #568]	; (90002280 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
    __HAL_RCC_PWR_CLK_ENABLE();
90002048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
9000204a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
9000204e:	641a      	str	r2, [r3, #64]	; 0x40
90002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90002052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90002056:	9301      	str	r3, [sp, #4]
90002058:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
9000205a:	683b      	ldr	r3, [r7, #0]
9000205c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90002060:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90002062:	f7fe ff45 	bl	90000ef0 <HAL_GetTick>
90002066:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
90002068:	683b      	ldr	r3, [r7, #0]
9000206a:	05da      	lsls	r2, r3, #23
9000206c:	f140 8169 	bpl.w	90002342 <HAL_RCCEx_PeriphCLKConfig+0x382>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
90002070:	4f82      	ldr	r7, [pc, #520]	; (9000227c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002072:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
90002074:	f413 7340 	ands.w	r3, r3, #768	; 0x300
90002078:	f040 816e 	bne.w	90002358 <HAL_RCCEx_PeriphCLKConfig+0x398>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000207c:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000207e:	f403 7240 	and.w	r2, r3, #768	; 0x300
90002082:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
90002086:	4a7d      	ldr	r2, [pc, #500]	; (9000227c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002088:	f040 818c 	bne.w	900023a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
9000208c:	6891      	ldr	r1, [r2, #8]
9000208e:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
90002092:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
90002096:	f420 7040 	bic.w	r0, r0, #768	; 0x300
9000209a:	4301      	orrs	r1, r0
9000209c:	6091      	str	r1, [r2, #8]
9000209e:	f3c3 030b 	ubfx	r3, r3, #0, #12
900020a2:	6f11      	ldr	r1, [r2, #112]	; 0x70
900020a4:	430b      	orrs	r3, r1
900020a6:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
900020a8:	6823      	ldr	r3, [r4, #0]
900020aa:	06d9      	lsls	r1, r3, #27
900020ac:	d50c      	bpl.n	900020c8 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
900020ae:	4a73      	ldr	r2, [pc, #460]	; (9000227c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
900020b0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
900020b4:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
900020b8:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
900020bc:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
900020c0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
900020c2:	4301      	orrs	r1, r0
900020c4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
900020c8:	045a      	lsls	r2, r3, #17
900020ca:	d508      	bpl.n	900020de <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
900020cc:	496b      	ldr	r1, [pc, #428]	; (9000227c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
900020ce:	6e60      	ldr	r0, [r4, #100]	; 0x64
900020d0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
900020d4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
900020d8:	4302      	orrs	r2, r0
900020da:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
900020de:	041f      	lsls	r7, r3, #16
900020e0:	d508      	bpl.n	900020f4 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
900020e2:	4966      	ldr	r1, [pc, #408]	; (9000227c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
900020e4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
900020e6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
900020ea:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
900020ee:	4302      	orrs	r2, r0
900020f0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
900020f4:	03d8      	lsls	r0, r3, #15
900020f6:	d508      	bpl.n	9000210a <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
900020f8:	4960      	ldr	r1, [pc, #384]	; (9000227c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
900020fa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
900020fc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002100:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
90002104:	4302      	orrs	r2, r0
90002106:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000210a:	0399      	lsls	r1, r3, #14
9000210c:	d508      	bpl.n	90002120 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000210e:	495b      	ldr	r1, [pc, #364]	; (9000227c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002110:	6f20      	ldr	r0, [r4, #112]	; 0x70
90002112:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002116:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
9000211a:	4302      	orrs	r2, r0
9000211c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
90002120:	065a      	lsls	r2, r3, #25
90002122:	d508      	bpl.n	90002136 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
90002124:	4955      	ldr	r1, [pc, #340]	; (9000227c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002126:	6c60      	ldr	r0, [r4, #68]	; 0x44
90002128:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
9000212c:	f022 0203 	bic.w	r2, r2, #3
90002130:	4302      	orrs	r2, r0
90002132:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
90002136:	061f      	lsls	r7, r3, #24
90002138:	d508      	bpl.n	9000214c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
9000213a:	4950      	ldr	r1, [pc, #320]	; (9000227c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
9000213c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
9000213e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002142:	f022 020c 	bic.w	r2, r2, #12
90002146:	4302      	orrs	r2, r0
90002148:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
9000214c:	05d8      	lsls	r0, r3, #23
9000214e:	d508      	bpl.n	90002162 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
90002150:	494a      	ldr	r1, [pc, #296]	; (9000227c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002152:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
90002154:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002158:	f022 0230 	bic.w	r2, r2, #48	; 0x30
9000215c:	4302      	orrs	r2, r0
9000215e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
90002162:	0599      	lsls	r1, r3, #22
90002164:	d508      	bpl.n	90002178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
90002166:	4945      	ldr	r1, [pc, #276]	; (9000227c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002168:	6d20      	ldr	r0, [r4, #80]	; 0x50
9000216a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
9000216e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
90002172:	4302      	orrs	r2, r0
90002174:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
90002178:	055a      	lsls	r2, r3, #21
9000217a:	d508      	bpl.n	9000218e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
9000217c:	493f      	ldr	r1, [pc, #252]	; (9000227c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
9000217e:	6d60      	ldr	r0, [r4, #84]	; 0x54
90002180:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002184:	f422 7240 	bic.w	r2, r2, #768	; 0x300
90002188:	4302      	orrs	r2, r0
9000218a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
9000218e:	051f      	lsls	r7, r3, #20
90002190:	d508      	bpl.n	900021a4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
90002192:	493a      	ldr	r1, [pc, #232]	; (9000227c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002194:	6da0      	ldr	r0, [r4, #88]	; 0x58
90002196:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
9000219a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
9000219e:	4302      	orrs	r2, r0
900021a0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
900021a4:	04d8      	lsls	r0, r3, #19
900021a6:	d508      	bpl.n	900021ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
900021a8:	4934      	ldr	r1, [pc, #208]	; (9000227c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
900021aa:	6de0      	ldr	r0, [r4, #92]	; 0x5c
900021ac:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
900021b0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
900021b4:	4302      	orrs	r2, r0
900021b6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
900021ba:	0499      	lsls	r1, r3, #18
900021bc:	d508      	bpl.n	900021d0 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
900021be:	492f      	ldr	r1, [pc, #188]	; (9000227c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
900021c0:	6e20      	ldr	r0, [r4, #96]	; 0x60
900021c2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
900021c6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
900021ca:	4302      	orrs	r2, r0
900021cc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
900021d0:	025a      	lsls	r2, r3, #9
900021d2:	d508      	bpl.n	900021e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
900021d4:	4929      	ldr	r1, [pc, #164]	; (9000227c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
900021d6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
900021d8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
900021dc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
900021e0:	4302      	orrs	r2, r0
900021e2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
900021e6:	029f      	lsls	r7, r3, #10
900021e8:	d50c      	bpl.n	90002204 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
900021ea:	4824      	ldr	r0, [pc, #144]	; (9000227c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
900021ec:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
900021ee:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
900021f2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
900021f6:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
900021fa:	bf08      	it	eq
900021fc:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
900021fe:	430a      	orrs	r2, r1
90002200:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
90002204:	f013 0f08 	tst.w	r3, #8
90002208:	bf18      	it	ne
9000220a:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000220c:	0358      	lsls	r0, r3, #13
9000220e:	d508      	bpl.n	90002222 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
90002210:	491a      	ldr	r1, [pc, #104]	; (9000227c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002212:	6f60      	ldr	r0, [r4, #116]	; 0x74
90002214:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002218:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
9000221c:	4302      	orrs	r2, r0
9000221e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
90002222:	0219      	lsls	r1, r3, #8
90002224:	d509      	bpl.n	9000223a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
90002226:	4915      	ldr	r1, [pc, #84]	; (9000227c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002228:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
9000222c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002230:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
90002234:	4302      	orrs	r2, r0
90002236:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
9000223a:	2e01      	cmp	r6, #1
9000223c:	f000 80b6 	beq.w	900023ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
90002240:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
90002244:	f000 80b2 	beq.w	900023ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
90002248:	2d01      	cmp	r5, #1
9000224a:	d176      	bne.n	9000233a <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
9000224c:	4d0b      	ldr	r5, [pc, #44]	; (9000227c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
9000224e:	682b      	ldr	r3, [r5, #0]
90002250:	462e      	mov	r6, r5
90002252:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
90002256:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90002258:	f7fe fe4a 	bl	90000ef0 <HAL_GetTick>
9000225c:	4607      	mov	r7, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
9000225e:	682b      	ldr	r3, [r5, #0]
90002260:	009b      	lsls	r3, r3, #2
90002262:	f100 8127 	bmi.w	900024b4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
90002266:	6822      	ldr	r2, [r4, #0]
90002268:	0315      	lsls	r5, r2, #12
9000226a:	d501      	bpl.n	90002270 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
9000226c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000226e:	b14b      	cbz	r3, 90002284 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
90002270:	02d0      	lsls	r0, r2, #11
90002272:	d522      	bpl.n	900022ba <HAL_RCCEx_PeriphCLKConfig+0x2fa>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
90002274:	6c23      	ldr	r3, [r4, #64]	; 0x40
90002276:	bb03      	cbnz	r3, 900022ba <HAL_RCCEx_PeriphCLKConfig+0x2fa>
90002278:	e004      	b.n	90002284 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
9000227a:	bf00      	nop
9000227c:	40023800 	.word	0x40023800
90002280:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
90002284:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
90002288:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
9000228c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90002290:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
90002294:	430b      	orrs	r3, r1
90002296:	6961      	ldr	r1, [r4, #20]
90002298:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
9000229c:	69a1      	ldr	r1, [r4, #24]
9000229e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
900022a2:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
900022a6:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
900022aa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
900022ac:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
900022b0:	3901      	subs	r1, #1
900022b2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
900022b6:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
900022ba:	0291      	lsls	r1, r2, #10
900022bc:	d515      	bpl.n	900022ea <HAL_RCCEx_PeriphCLKConfig+0x32a>
900022be:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
900022c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
900022c4:	d111      	bne.n	900022ea <HAL_RCCEx_PeriphCLKConfig+0x32a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
900022c6:	4982      	ldr	r1, [pc, #520]	; (900024d0 <HAL_RCCEx_PeriphCLKConfig+0x510>)
900022c8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
900022cc:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
900022d0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
900022d4:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
900022d8:	4303      	orrs	r3, r0
900022da:	6960      	ldr	r0, [r4, #20]
900022dc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
900022e0:	6a20      	ldr	r0, [r4, #32]
900022e2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
900022e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
900022ea:	0712      	lsls	r2, r2, #28
900022ec:	d519      	bpl.n	90002322 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
900022ee:	4a78      	ldr	r2, [pc, #480]	; (900024d0 <HAL_RCCEx_PeriphCLKConfig+0x510>)
900022f0:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
900022f4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
900022f8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
900022fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90002300:	430b      	orrs	r3, r1
90002302:	6961      	ldr	r1, [r4, #20]
90002304:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
90002308:	69e1      	ldr	r1, [r4, #28]
9000230a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
9000230e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
90002312:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
90002316:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
90002318:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
9000231c:	430b      	orrs	r3, r1
9000231e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
90002322:	4c6b      	ldr	r4, [pc, #428]	; (900024d0 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90002324:	6823      	ldr	r3, [r4, #0]
90002326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
9000232a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000232c:	f7fe fde0 	bl	90000ef0 <HAL_GetTick>
90002330:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
90002332:	6823      	ldr	r3, [r4, #0]
90002334:	009b      	lsls	r3, r3, #2
90002336:	f140 80c4 	bpl.w	900024c2 <HAL_RCCEx_PeriphCLKConfig+0x502>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
9000233a:	2000      	movs	r0, #0
9000233c:	e009      	b.n	90002352 <HAL_RCCEx_PeriphCLKConfig+0x392>
      plli2sused = 1;
9000233e:	2601      	movs	r6, #1
90002340:	e67a      	b.n	90002038 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90002342:	f7fe fdd5 	bl	90000ef0 <HAL_GetTick>
90002346:	eba0 0008 	sub.w	r0, r0, r8
9000234a:	2864      	cmp	r0, #100	; 0x64
9000234c:	f67f ae8c 	bls.w	90002068 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
90002350:	2003      	movs	r0, #3
}
90002352:	b003      	add	sp, #12
90002354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
90002358:	6b22      	ldr	r2, [r4, #48]	; 0x30
9000235a:	f402 7240 	and.w	r2, r2, #768	; 0x300
9000235e:	4293      	cmp	r3, r2
90002360:	f43f ae8c 	beq.w	9000207c <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
90002364:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
90002366:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
90002368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
9000236c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
90002370:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
90002372:	6f3a      	ldr	r2, [r7, #112]	; 0x70
90002374:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
90002378:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
9000237a:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
9000237c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
9000237e:	07db      	lsls	r3, r3, #31
90002380:	f57f ae7c 	bpl.w	9000207c <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
90002384:	f7fe fdb4 	bl	90000ef0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
90002388:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
9000238c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
9000238e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
90002390:	0798      	lsls	r0, r3, #30
90002392:	f53f ae73 	bmi.w	9000207c <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
90002396:	f7fe fdab 	bl	90000ef0 <HAL_GetTick>
9000239a:	eba0 0008 	sub.w	r0, r0, r8
9000239e:	4548      	cmp	r0, r9
900023a0:	d9f5      	bls.n	9000238e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
900023a2:	e7d5      	b.n	90002350 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
900023a4:	6891      	ldr	r1, [r2, #8]
900023a6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
900023aa:	e677      	b.n	9000209c <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
900023ac:	4e48      	ldr	r6, [pc, #288]	; (900024d0 <HAL_RCCEx_PeriphCLKConfig+0x510>)
900023ae:	6833      	ldr	r3, [r6, #0]
900023b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
900023b4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
900023b6:	f7fe fd9b 	bl	90000ef0 <HAL_GetTick>
900023ba:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
900023bc:	6833      	ldr	r3, [r6, #0]
900023be:	011a      	lsls	r2, r3, #4
900023c0:	d472      	bmi.n	900024a8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
900023c2:	6822      	ldr	r2, [r4, #0]
900023c4:	07d3      	lsls	r3, r2, #31
900023c6:	d512      	bpl.n	900023ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
900023c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
900023ca:	b983      	cbnz	r3, 900023ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
900023cc:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
900023d0:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
900023d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
900023d8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
900023dc:	430b      	orrs	r3, r1
900023de:	6861      	ldr	r1, [r4, #4]
900023e0:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
900023e4:	68a1      	ldr	r1, [r4, #8]
900023e6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
900023ea:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
900023ee:	0317      	lsls	r7, r2, #12
900023f0:	d503      	bpl.n	900023fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
900023f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
900023f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
900023f8:	d005      	beq.n	90002406 <HAL_RCCEx_PeriphCLKConfig+0x446>
900023fa:	02d6      	lsls	r6, r2, #11
900023fc:	d51e      	bpl.n	9000243c <HAL_RCCEx_PeriphCLKConfig+0x47c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
900023fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
90002400:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90002404:	d11a      	bne.n	9000243c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
90002406:	4932      	ldr	r1, [pc, #200]	; (900024d0 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90002408:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
9000240c:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
90002410:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90002414:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
90002418:	4303      	orrs	r3, r0
9000241a:	6860      	ldr	r0, [r4, #4]
9000241c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
90002420:	68e0      	ldr	r0, [r4, #12]
90002422:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
90002426:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
9000242a:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
9000242e:	6a63      	ldr	r3, [r4, #36]	; 0x24
90002430:	f020 001f 	bic.w	r0, r0, #31
90002434:	3b01      	subs	r3, #1
90002436:	4303      	orrs	r3, r0
90002438:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000243c:	01d0      	lsls	r0, r2, #7
9000243e:	d511      	bpl.n	90002464 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
90002440:	4923      	ldr	r1, [pc, #140]	; (900024d0 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90002442:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
90002446:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
9000244a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
9000244e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
90002452:	4303      	orrs	r3, r0
90002454:	6860      	ldr	r0, [r4, #4]
90002456:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
9000245a:	6920      	ldr	r0, [r4, #16]
9000245c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
90002460:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
90002464:	0191      	lsls	r1, r2, #6
90002466:	d50d      	bpl.n	90002484 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
90002468:	6923      	ldr	r3, [r4, #16]
9000246a:	6862      	ldr	r2, [r4, #4]
9000246c:	041b      	lsls	r3, r3, #16
9000246e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
90002472:	68e2      	ldr	r2, [r4, #12]
90002474:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
90002478:	68a2      	ldr	r2, [r4, #8]
9000247a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
9000247e:	4a14      	ldr	r2, [pc, #80]	; (900024d0 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90002480:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
90002484:	4e12      	ldr	r6, [pc, #72]	; (900024d0 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90002486:	6833      	ldr	r3, [r6, #0]
90002488:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
9000248c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
9000248e:	f7fe fd2f 	bl	90000ef0 <HAL_GetTick>
90002492:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
90002494:	6833      	ldr	r3, [r6, #0]
90002496:	011a      	lsls	r2, r3, #4
90002498:	f53f aed6 	bmi.w	90002248 <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
9000249c:	f7fe fd28 	bl	90000ef0 <HAL_GetTick>
900024a0:	1bc0      	subs	r0, r0, r7
900024a2:	2864      	cmp	r0, #100	; 0x64
900024a4:	d9f6      	bls.n	90002494 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
900024a6:	e753      	b.n	90002350 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
900024a8:	f7fe fd22 	bl	90000ef0 <HAL_GetTick>
900024ac:	1bc0      	subs	r0, r0, r7
900024ae:	2864      	cmp	r0, #100	; 0x64
900024b0:	d984      	bls.n	900023bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
900024b2:	e74d      	b.n	90002350 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
900024b4:	f7fe fd1c 	bl	90000ef0 <HAL_GetTick>
900024b8:	1bc0      	subs	r0, r0, r7
900024ba:	2864      	cmp	r0, #100	; 0x64
900024bc:	f67f aecf 	bls.w	9000225e <HAL_RCCEx_PeriphCLKConfig+0x29e>
900024c0:	e746      	b.n	90002350 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
900024c2:	f7fe fd15 	bl	90000ef0 <HAL_GetTick>
900024c6:	1b40      	subs	r0, r0, r5
900024c8:	2864      	cmp	r0, #100	; 0x64
900024ca:	f67f af32 	bls.w	90002332 <HAL_RCCEx_PeriphCLKConfig+0x372>
900024ce:	e73f      	b.n	90002350 <HAL_RCCEx_PeriphCLKConfig+0x390>
900024d0:	40023800 	.word	0x40023800

900024d4 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
900024d4:	4770      	bx	lr

900024d6 <HAL_SDRAM_Init>:
{   
900024d6:	b538      	push	{r3, r4, r5, lr}
900024d8:	460d      	mov	r5, r1
  if(hsdram == NULL)
900024da:	4604      	mov	r4, r0
900024dc:	b1c8      	cbz	r0, 90002512 <HAL_SDRAM_Init+0x3c>
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
900024de:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
900024e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
900024e6:	b91b      	cbnz	r3, 900024f0 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
900024e8:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
900024ec:	f7ff fff2 	bl	900024d4 <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
900024f0:	2302      	movs	r3, #2
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
900024f2:	1d21      	adds	r1, r4, #4
900024f4:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
900024f6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
900024fa:	f000 f835 	bl	90002568 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
900024fe:	6862      	ldr	r2, [r4, #4]
90002500:	4629      	mov	r1, r5
90002502:	6820      	ldr	r0, [r4, #0]
90002504:	f000 f866 	bl	900025d4 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
90002508:	2301      	movs	r3, #1
  return HAL_OK;
9000250a:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
9000250c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
90002510:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
90002512:	2001      	movs	r0, #1
90002514:	e7fc      	b.n	90002510 <HAL_SDRAM_Init+0x3a>

90002516 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
90002516:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
90002518:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
9000251c:	4604      	mov	r4, r0
9000251e:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
90002520:	2b02      	cmp	r3, #2
90002522:	b2d8      	uxtb	r0, r3
90002524:	d00d      	beq.n	90002542 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90002526:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
90002528:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
9000252a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000252e:	f000 f894 	bl	9000265a <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
90002532:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
90002534:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
90002536:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
90002538:	bf0c      	ite	eq
9000253a:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
9000253c:	2301      	movne	r3, #1
9000253e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
90002542:	bd38      	pop	{r3, r4, r5, pc}

90002544 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
90002544:	b510      	push	{r4, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
90002546:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
9000254a:	4604      	mov	r4, r0
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
9000254c:	2b02      	cmp	r3, #2
9000254e:	b2d8      	uxtb	r0, r3
90002550:	d009      	beq.n	90002566 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90002552:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
90002554:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90002556:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
9000255a:	f000 f891 	bl	90002680 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
9000255e:	2301      	movs	r3, #1
  
  return HAL_OK;   
90002560:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
90002562:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
90002566:	bd10      	pop	{r4, pc}

90002568 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
90002568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000256c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
9000256e:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
90002572:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
90002576:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
9000257a:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
9000257e:	6809      	ldr	r1, [r1, #0]
90002580:	4323      	orrs	r3, r4
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
90002582:	6804      	ldr	r4, [r0, #0]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
90002584:	2901      	cmp	r1, #1
90002586:	4912      	ldr	r1, [pc, #72]	; (900025d0 <FMC_SDRAM_Init+0x68>)
90002588:	d00f      	beq.n	900025aa <FMC_SDRAM_Init+0x42>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
9000258a:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
9000258c:	4021      	ands	r1, r4
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
9000258e:	432a      	orrs	r2, r5
90002590:	ea42 0308 	orr.w	r3, r2, r8
90002594:	ea43 030e 	orr.w	r3, r3, lr
90002598:	ea43 030c 	orr.w	r3, r3, ip
9000259c:	433b      	orrs	r3, r7
9000259e:	4333      	orrs	r3, r6
900025a0:	430b      	orrs	r3, r1
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
900025a2:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
900025a4:	2000      	movs	r0, #0
900025a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
900025aa:	4313      	orrs	r3, r2
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
900025ac:	6842      	ldr	r2, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
900025ae:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
900025b2:	4011      	ands	r1, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
900025b4:	ea45 0208 	orr.w	r2, r5, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
900025b8:	4323      	orrs	r3, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
900025ba:	ea42 020e 	orr.w	r2, r2, lr
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
900025be:	6003      	str	r3, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
900025c0:	ea42 020c 	orr.w	r2, r2, ip
900025c4:	433a      	orrs	r2, r7
900025c6:	4332      	orrs	r2, r6
900025c8:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
900025ca:	6042      	str	r2, [r0, #4]
900025cc:	e7ea      	b.n	900025a4 <FMC_SDRAM_Init+0x3c>
900025ce:	bf00      	nop
900025d0:	ffff8000 	.word	0xffff8000

900025d4 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
900025d4:	68cb      	ldr	r3, [r1, #12]
900025d6:	2a01      	cmp	r2, #1
{
900025d8:	b5f0      	push	{r4, r5, r6, r7, lr}
900025da:	680c      	ldr	r4, [r1, #0]
900025dc:	f103 37ff 	add.w	r7, r3, #4294967295
900025e0:	694b      	ldr	r3, [r1, #20]
900025e2:	688e      	ldr	r6, [r1, #8]
900025e4:	f104 3cff 	add.w	ip, r4, #4294967295
900025e8:	690d      	ldr	r5, [r1, #16]
900025ea:	f103 33ff 	add.w	r3, r3, #4294967295
900025ee:	684c      	ldr	r4, [r1, #4]
900025f0:	f106 36ff 	add.w	r6, r6, #4294967295
900025f4:	6989      	ldr	r1, [r1, #24]
900025f6:	ea4f 5303 	mov.w	r3, r3, lsl #20
900025fa:	f104 34ff 	add.w	r4, r4, #4294967295
900025fe:	f105 35ff 	add.w	r5, r5, #4294967295
90002602:	f101 31ff 	add.w	r1, r1, #4294967295
90002606:	ea4f 2606 	mov.w	r6, r6, lsl #8
9000260a:	ea4f 1404 	mov.w	r4, r4, lsl #4
9000260e:	ea4f 4505 	mov.w	r5, r5, lsl #16
90002612:	ea4f 6101 	mov.w	r1, r1, lsl #24
90002616:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  if (Bank != FMC_SDRAM_BANK2) 
9000261a:	d00c      	beq.n	90002636 <FMC_SDRAM_Timing_Init+0x62>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
9000261c:	ea43 030c 	orr.w	r3, r3, ip
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
90002620:	6882      	ldr	r2, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90002622:	4323      	orrs	r3, r4
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
90002624:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90002628:	4333      	orrs	r3, r6
9000262a:	432b      	orrs	r3, r5
9000262c:	430b      	orrs	r3, r1
9000262e:	4313      	orrs	r3, r2
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
90002630:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
90002632:	2000      	movs	r0, #0
90002634:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
90002636:	6887      	ldr	r7, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90002638:	4334      	orrs	r4, r6
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
9000263a:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
9000263e:	ea44 020c 	orr.w	r2, r4, ip
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
90002642:	f427 4770 	bic.w	r7, r7, #61440	; 0xf000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90002646:	432a      	orrs	r2, r5
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
90002648:	433b      	orrs	r3, r7
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
9000264a:	68c7      	ldr	r7, [r0, #12]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
9000264c:	430a      	orrs	r2, r1
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
9000264e:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
90002652:	6083      	str	r3, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90002654:	433a      	orrs	r2, r7
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
90002656:	60c2      	str	r2, [r0, #12]
90002658:	e7eb      	b.n	90002632 <FMC_SDRAM_Timing_Init+0x5e>

9000265a <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
9000265a:	e9d1 3200 	ldrd	r3, r2, [r1]
{
9000265e:	b513      	push	{r0, r1, r4, lr}
  tmpr = (uint32_t)((Command->CommandMode)                  |\
90002660:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
90002662:	68ca      	ldr	r2, [r1, #12]
  __IO uint32_t tmpr = 0;
90002664:	2400      	movs	r4, #0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
90002666:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
9000266a:	688a      	ldr	r2, [r1, #8]
  __IO uint32_t tmpr = 0;
9000266c:	9401      	str	r4, [sp, #4]
                    (((Command->AutoRefreshNumber)-1) << 5) |\
9000266e:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
90002670:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
90002674:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
90002676:	9b01      	ldr	r3, [sp, #4]
90002678:	6103      	str	r3, [r0, #16]
  
  return HAL_OK;  
}
9000267a:	4620      	mov	r0, r4
9000267c:	b002      	add	sp, #8
9000267e:	bd10      	pop	{r4, pc}

90002680 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
90002680:	6943      	ldr	r3, [r0, #20]
90002682:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
90002686:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
90002688:	2000      	movs	r0, #0
9000268a:	4770      	bx	lr

9000268c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
9000268c:	f8df d034 	ldr.w	sp, [pc, #52]	; 900026c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
90002690:	2100      	movs	r1, #0
  b  LoopCopyDataInit
90002692:	e003      	b.n	9000269c <LoopCopyDataInit>

90002694 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
90002694:	4b0c      	ldr	r3, [pc, #48]	; (900026c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
90002696:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
90002698:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
9000269a:	3104      	adds	r1, #4

9000269c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
9000269c:	480b      	ldr	r0, [pc, #44]	; (900026cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
9000269e:	4b0c      	ldr	r3, [pc, #48]	; (900026d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
900026a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
900026a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
900026a4:	d3f6      	bcc.n	90002694 <CopyDataInit>
  ldr  r2, =_sbss
900026a6:	4a0b      	ldr	r2, [pc, #44]	; (900026d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
900026a8:	e002      	b.n	900026b0 <LoopFillZerobss>

900026aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
900026aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
900026ac:	f842 3b04 	str.w	r3, [r2], #4

900026b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
900026b0:	4b09      	ldr	r3, [pc, #36]	; (900026d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
900026b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
900026b4:	d3f9      	bcc.n	900026aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
900026b6:	f7fe fbc7 	bl	90000e48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
900026ba:	f000 faf3 	bl	90002ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
900026be:	f000 f871 	bl	900027a4 <main>
  bx  lr    
900026c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
900026c4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
900026c8:	90007b88 	.word	0x90007b88
  ldr  r0, =_sdata
900026cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
900026d0:	2000009c 	.word	0x2000009c
  ldr  r2, =_sbss
900026d4:	2000009c 	.word	0x2000009c
  ldr  r3, = _ebss
900026d8:	20005224 	.word	0x20005224

900026dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
900026dc:	e7fe      	b.n	900026dc <ADC_IRQHandler>

900026de <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
900026de:	b570      	push	{r4, r5, r6, lr}
900026e0:	460e      	mov	r6, r1
900026e2:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
900026e4:	2500      	movs	r5, #0
900026e6:	42a5      	cmp	r5, r4
900026e8:	db01      	blt.n	900026ee <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
900026ea:	4620      	mov	r0, r4
900026ec:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
900026ee:	f3af 8000 	nop.w
900026f2:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
900026f4:	3501      	adds	r5, #1
900026f6:	e7f6      	b.n	900026e6 <_read+0x8>

900026f8 <_write>:

int _write(int file, char *ptr, int len)
{
900026f8:	b570      	push	{r4, r5, r6, lr}
900026fa:	460e      	mov	r6, r1
900026fc:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
900026fe:	2500      	movs	r5, #0
90002700:	42a5      	cmp	r5, r4
90002702:	db01      	blt.n	90002708 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
90002704:	4620      	mov	r0, r4
90002706:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
90002708:	5d70      	ldrb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
9000270a:	3501      	adds	r5, #1
		__io_putchar(*ptr++);
9000270c:	f000 fa2c 	bl	90002b68 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90002710:	e7f6      	b.n	90002700 <_write+0x8>
	...

90002714 <_sbrk>:

caddr_t _sbrk(int incr)
{
90002714:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
90002716:	4b0a      	ldr	r3, [pc, #40]	; (90002740 <_sbrk+0x2c>)
{
90002718:	4602      	mov	r2, r0
	if (heap_end == 0)
9000271a:	6819      	ldr	r1, [r3, #0]
9000271c:	b909      	cbnz	r1, 90002722 <_sbrk+0xe>
		heap_end = &end;
9000271e:	4909      	ldr	r1, [pc, #36]	; (90002744 <_sbrk+0x30>)
90002720:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
90002722:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
90002724:	4669      	mov	r1, sp
90002726:	4402      	add	r2, r0
90002728:	428a      	cmp	r2, r1
9000272a:	d906      	bls.n	9000273a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
9000272c:	f000 fab4 	bl	90002c98 <__errno>
90002730:	230c      	movs	r3, #12
90002732:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
90002734:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
90002738:	bd08      	pop	{r3, pc}
	heap_end += incr;
9000273a:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
9000273c:	e7fc      	b.n	90002738 <_sbrk+0x24>
9000273e:	bf00      	nop
90002740:	200004ac 	.word	0x200004ac
90002744:	20005228 	.word	0x20005228

90002748 <_close>:

int _close(int file)
{
	return -1;
}
90002748:	f04f 30ff 	mov.w	r0, #4294967295
9000274c:	4770      	bx	lr

9000274e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
9000274e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
90002752:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
90002754:	604b      	str	r3, [r1, #4]
}
90002756:	4770      	bx	lr

90002758 <_isatty>:

int _isatty(int file)
{
	return 1;
}
90002758:	2001      	movs	r0, #1
9000275a:	4770      	bx	lr

9000275c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
9000275c:	2000      	movs	r0, #0
9000275e:	4770      	bx	lr

90002760 <fce>:

uint32_t fce(void) {
  uint32_t acc, n;
  acc = 0;

  for (n = 0; n < NUM_SAMPLES; n++) {
90002760:	2100      	movs	r1, #0
uint32_t fce(void) {
90002762:	b570      	push	{r4, r5, r6, lr}
  acc = 0;
90002764:	4608      	mov	r0, r1
    acc += ((3 * (array1[n] & 0x0F) + 65) * (25 * (array2[n + 1] & 0x0F) + 71)) ;
90002766:	4e0d      	ldr	r6, [pc, #52]	; (9000279c <fce+0x3c>)
90002768:	4d0d      	ldr	r5, [pc, #52]	; (900027a0 <fce+0x40>)
9000276a:	2419      	movs	r4, #25
9000276c:	f856 3021 	ldr.w	r3, [r6, r1, lsl #2]
90002770:	3101      	adds	r1, #1
90002772:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
90002776:	f003 030f 	and.w	r3, r3, #15
  for (n = 0; n < NUM_SAMPLES; n++) {
9000277a:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
    acc += ((3 * (array1[n] & 0x0F) + 65) * (25 * (array2[n + 1] & 0x0F) + 71)) ;
9000277e:	f002 020f 	and.w	r2, r2, #15
90002782:	eb03 0343 	add.w	r3, r3, r3, lsl #1
90002786:	fb04 f202 	mul.w	r2, r4, r2
9000278a:	f103 0341 	add.w	r3, r3, #65	; 0x41
9000278e:	f102 0247 	add.w	r2, r2, #71	; 0x47
90002792:	fb02 0003 	mla	r0, r2, r3, r0
  for (n = 0; n < NUM_SAMPLES; n++) {
90002796:	d1e9      	bne.n	9000276c <fce+0xc>
  }

  return acc;
}
90002798:	bd70      	pop	{r4, r5, r6, pc}
9000279a:	bf00      	nop
9000279c:	20000da0 	.word	0x20000da0
900027a0:	200005a0 	.word	0x200005a0

900027a4 <main>:
int main(void) {
900027a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_InitTick(TICK_INT_PRIORITY);
900027a8:	200f      	movs	r0, #15
int main(void) {
900027aa:	b094      	sub	sp, #80	; 0x50
  HAL_InitTick(TICK_INT_PRIORITY);
900027ac:	f7fe fb72 	bl	90000e94 <HAL_InitTick>
  for (n = 0; n < NUM_SAMPLES; n++) {
900027b0:	2400      	movs	r4, #0
    array1[n] = n;
900027b2:	4a6b      	ldr	r2, [pc, #428]	; (90002960 <main+0x1bc>)
    array2[n] = n;
900027b4:	4b6b      	ldr	r3, [pc, #428]	; (90002964 <main+0x1c0>)
    array1[n] = n;
900027b6:	f842 4024 	str.w	r4, [r2, r4, lsl #2]
    array2[n] = n;
900027ba:	f843 4024 	str.w	r4, [r3, r4, lsl #2]
  for (n = 0; n < NUM_SAMPLES; n++) {
900027be:	3401      	adds	r4, #1
900027c0:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
900027c4:	d1f7      	bne.n	900027b6 <main+0x12>
  result = 0;
900027c6:	f04f 0800 	mov.w	r8, #0
900027ca:	4d67      	ldr	r5, [pc, #412]	; (90002968 <main+0x1c4>)
  /* Disable the MPU */
  HAL_MPU_Disable();
  /* Configure the MPU attributes as WT for SRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0xC0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
900027cc:	f04f 4a40 	mov.w	sl, #3221225472	; 0xc0000000
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
900027d0:	f04f 0901 	mov.w	r9, #1
  result = 0;
900027d4:	f8c5 8000 	str.w	r8, [r5]
  HAL_MPU_Disable();
900027d8:	f7fe fbf8 	bl	90000fcc <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
900027dc:	4b63      	ldr	r3, [pc, #396]	; (9000296c <main+0x1c8>)
  // these 3 parameters configure Cache properties for this region - write through
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
#endif
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900027de:	a808      	add	r0, sp, #32
  TPI->ACPR = (HAL_RCC_GetSysClockFreq() / 2000000) - 1; // make the SWO working whatever settings in the system frequency - output is always 2MHz
}


void printConfig(void) {
  TPI->ACPR = (HAL_RCC_GetSysClockFreq() / 2000000) - 1; // make the SWO working whatever settings in the system frequency - output is always 2MHz
900027e0:	4f63      	ldr	r7, [pc, #396]	; (90002970 <main+0x1cc>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
900027e2:	f8ad 9020 	strh.w	r9, [sp, #32]
  TPI->ACPR = (HAL_RCC_GetSysClockFreq() / 2000000) - 1; // make the SWO working whatever settings in the system frequency - output is always 2MHz
900027e6:	4e63      	ldr	r6, [pc, #396]	; (90002974 <main+0x1d0>)
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
900027e8:	e9cd a309 	strd	sl, r3, [sp, #36]	; 0x24
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
900027ec:	f04f 1301 	mov.w	r3, #65537	; 0x10001
900027f0:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900027f2:	f7fe fc0d 	bl	90001010 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
900027f6:	2004      	movs	r0, #4
900027f8:	f7fe fbf8 	bl	90000fec <HAL_MPU_Enable>
  TPI->ACPR = (HAL_RCC_GetSysClockFreq() / 2000000) - 1; // make the SWO working whatever settings in the system frequency - output is always 2MHz
900027fc:	f7ff fb12 	bl	90001e24 <HAL_RCC_GetSysClockFreq>
90002800:	fbb0 f0f7 	udiv	r0, r0, r7
90002804:	3801      	subs	r0, #1
90002806:	6130      	str	r0, [r6, #16]
  // LCD initialization
  BSP_LCD_Init();
90002808:	f7fe f980 	bl	90000b0c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
9000280c:	4651      	mov	r1, sl
9000280e:	4640      	mov	r0, r8
90002810:	f7fd ff12 	bl	90000638 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
90002814:	4640      	mov	r0, r8
90002816:	f7fd ff47 	bl	900006a8 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOff();
9000281a:	f7fe f8a9 	bl	90000970 <BSP_LCD_DisplayOff>
  LCD_LOG_Init();
9000281e:	f000 f921 	bl	90002a64 <LCD_LOG_Init>
  LCD_LOG_SetHeader((uint8_t *)"Instruction Cache example - larger code");
90002822:	4855      	ldr	r0, [pc, #340]	; (90002978 <main+0x1d4>)
90002824:	f000 f928 	bl	90002a78 <LCD_LOG_SetHeader>
  printf("Running from address:   0x%08X \n", (uint32_t)main);
90002828:	4954      	ldr	r1, [pc, #336]	; (9000297c <main+0x1d8>)
9000282a:	4855      	ldr	r0, [pc, #340]	; (90002980 <main+0x1dc>)
9000282c:	f000 fa66 	bl	90002cfc <iprintf>
  printf("Data array1 at address: 0x%08X \n", (uint32_t)&array1);
90002830:	494b      	ldr	r1, [pc, #300]	; (90002960 <main+0x1bc>)
90002832:	4854      	ldr	r0, [pc, #336]	; (90002984 <main+0x1e0>)
90002834:	f000 fa62 	bl	90002cfc <iprintf>
  printf("Data array2 at address: 0x%08X \n", (uint32_t)&array2);
90002838:	494a      	ldr	r1, [pc, #296]	; (90002964 <main+0x1c0>)
9000283a:	4853      	ldr	r0, [pc, #332]	; (90002988 <main+0x1e4>)
9000283c:	f000 fa5e 	bl	90002cfc <iprintf>
  //printf("Compiler IAR, ver: %d \n", __VER__);
  printf("and Core is M7 | \n");
90002840:	4852      	ldr	r0, [pc, #328]	; (9000298c <main+0x1e8>)
90002842:	f000 fae1 	bl	90002e08 <puts>
  printf(" CPU cycles spent for sum of %d values \n", NUM_SAMPLES);
90002846:	4621      	mov	r1, r4
90002848:	4851      	ldr	r0, [pc, #324]	; (90002990 <main+0x1ec>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
9000284a:	2402      	movs	r4, #2
  printf(" CPU cycles spent for sum of %d values \n", NUM_SAMPLES);
9000284c:	f000 fa56 	bl	90002cfc <iprintf>
  HAL_SYSTICK_Config(0xFFFFFF);
90002850:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
90002854:	f7fe fba4 	bl	90000fa0 <HAL_SYSTICK_Config>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
90002858:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLN = 400;
9000285c:	2119      	movs	r1, #25
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
9000285e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
90002860:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90002862:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90002866:	f8cd 9020 	str.w	r9, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
9000286a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
9000286e:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90002870:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 400;
90002874:	f44f 73c8 	mov.w	r3, #400	; 0x190
90002878:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
9000287c:	2308      	movs	r3, #8
9000287e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
90002880:	f7ff f912 	bl	90001aa8 <HAL_RCC_OscConfig>
90002884:	b100      	cbz	r0, 90002888 <main+0xe4>
  * @param  None
  * @retval None
  */
static void Error_Handler(void) {
  /* User may add here some code to deal with this error */
  while (1) {
90002886:	e7fe      	b.n	90002886 <main+0xe2>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
90002888:	f7ff f8d6 	bl	90001a38 <HAL_PWREx_EnableOverDrive>
9000288c:	b100      	cbz	r0, 90002890 <main+0xec>
  while (1) {
9000288e:	e7fe      	b.n	9000288e <main+0xea>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
90002890:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
90002892:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
90002896:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
90002898:	2106      	movs	r1, #6
9000289a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
9000289c:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
900028a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
900028a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
900028a8:	f7ff faea 	bl	90001e80 <HAL_RCC_ClockConfig>
900028ac:	4680      	mov	r8, r0
900028ae:	b100      	cbz	r0, 900028b2 <main+0x10e>
  while (1) {
900028b0:	e7fe      	b.n	900028b0 <main+0x10c>
  TPI->ACPR = (HAL_RCC_GetSysClockFreq() / 2000000) - 1; // make the SWO working whatever settings in the system frequency - output is always 2MHz
900028b2:	f7ff fab7 	bl	90001e24 <HAL_RCC_GetSysClockFreq>
900028b6:	fbb0 f3f7 	udiv	r3, r0, r7
900028ba:	3b01      	subs	r3, #1
900028bc:	6133      	str	r3, [r6, #16]
  __ASM volatile ("dsb 0xF":::"memory");
900028be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900028c2:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
900028c6:	4c33      	ldr	r4, [pc, #204]	; (90002994 <main+0x1f0>)
900028c8:	f8c4 8250 	str.w	r8, [r4, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
900028cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900028d0:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
900028d4:	6963      	ldr	r3, [r4, #20]
900028d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900028da:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
900028dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900028e0:	f3bf 8f6f 	isb	sy
  __HAL_FLASH_ART_ENABLE();
900028e4:	4e2c      	ldr	r6, [pc, #176]	; (90002998 <main+0x1f4>)
  TIM_MEASURE_START;
900028e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 900029bc <main+0x218>
  __HAL_FLASH_ART_ENABLE();
900028ea:	6833      	ldr	r3, [r6, #0]
  TIM_MEASURE_START;
900028ec:	4f2b      	ldr	r7, [pc, #172]	; (9000299c <main+0x1f8>)
  __HAL_FLASH_ART_ENABLE();
900028ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
900028f2:	6033      	str	r3, [r6, #0]
  TIM_MEASURE_START;
900028f4:	f8d8 3008 	ldr.w	r3, [r8, #8]
900028f8:	603b      	str	r3, [r7, #0]
  result = fce();
900028fa:	f7ff ff31 	bl	90002760 <fce>
  TIM_MEASURE_END;
900028fe:	4b28      	ldr	r3, [pc, #160]	; (900029a0 <main+0x1fc>)
  result = fce();
90002900:	6028      	str	r0, [r5, #0]
  TIM_MEASURE_END;
90002902:	f8d8 2008 	ldr.w	r2, [r8, #8]
  printf("WS: %2d, ART: %s, D_cache: %s, I_cache: %s\n", FLASH->ACR & 0xF, (FLASH->ACR & 0x200) ? "ON " : "OFF", ((SCB->CCR & 0x10000) ? "ON " : "OFF"), ((SCB->CCR & 0x20000) ? "ON " : "OFF"));
90002906:	4827      	ldr	r0, [pc, #156]	; (900029a4 <main+0x200>)
  TIM_MEASURE_END;
90002908:	601a      	str	r2, [r3, #0]
9000290a:	683b      	ldr	r3, [r7, #0]
9000290c:	4f26      	ldr	r7, [pc, #152]	; (900029a8 <main+0x204>)
9000290e:	1a9b      	subs	r3, r3, r2
90002910:	603b      	str	r3, [r7, #0]
  printf("WS: %2d, ART: %s, D_cache: %s, I_cache: %s\n", FLASH->ACR & 0xF, (FLASH->ACR & 0x200) ? "ON " : "OFF", ((SCB->CCR & 0x10000) ? "ON " : "OFF"), ((SCB->CCR & 0x20000) ? "ON " : "OFF"));
90002912:	6831      	ldr	r1, [r6, #0]
90002914:	6833      	ldr	r3, [r6, #0]
90002916:	4e25      	ldr	r6, [pc, #148]	; (900029ac <main+0x208>)
90002918:	f001 010f 	and.w	r1, r1, #15
9000291c:	f413 7f00 	tst.w	r3, #512	; 0x200
90002920:	6963      	ldr	r3, [r4, #20]
90002922:	6964      	ldr	r4, [r4, #20]
90002924:	bf14      	ite	ne
90002926:	4602      	movne	r2, r0
90002928:	4632      	moveq	r2, r6
9000292a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
9000292e:	bf14      	ite	ne
90002930:	4603      	movne	r3, r0
90002932:	4633      	moveq	r3, r6
90002934:	f414 3f00 	tst.w	r4, #131072	; 0x20000
90002938:	bf08      	it	eq
9000293a:	4630      	moveq	r0, r6
9000293c:	9000      	str	r0, [sp, #0]
9000293e:	481c      	ldr	r0, [pc, #112]	; (900029b0 <main+0x20c>)
90002940:	f000 f9dc 	bl	90002cfc <iprintf>
  printf(" System Clock: %9d, cycles: %d\n", HAL_RCC_GetSysClockFreq(), time_diff);
90002944:	f7ff fa6e 	bl	90001e24 <HAL_RCC_GetSysClockFreq>
90002948:	683a      	ldr	r2, [r7, #0]
9000294a:	4601      	mov	r1, r0
9000294c:	4819      	ldr	r0, [pc, #100]	; (900029b4 <main+0x210>)
9000294e:	f000 f9d5 	bl	90002cfc <iprintf>
  printf(" result of computation  : %d\n", result);
90002952:	6829      	ldr	r1, [r5, #0]
90002954:	4818      	ldr	r0, [pc, #96]	; (900029b8 <main+0x214>)
90002956:	f000 f9d1 	bl	90002cfc <iprintf>
  BSP_LCD_DisplayOn();
9000295a:	f7fd ffef 	bl	9000093c <BSP_LCD_DisplayOn>
  while (1);
9000295e:	e7fe      	b.n	9000295e <main+0x1ba>
90002960:	20000da0 	.word	0x20000da0
90002964:	200005a0 	.word	0x200005a0
90002968:	200015a8 	.word	0x200015a8
9000296c:	03000011 	.word	0x03000011
90002970:	001e8480 	.word	0x001e8480
90002974:	e0040000 	.word	0xe0040000
90002978:	900079b0 	.word	0x900079b0
9000297c:	900027a5 	.word	0x900027a5
90002980:	900079d8 	.word	0x900079d8
90002984:	900079f9 	.word	0x900079f9
90002988:	90007a1a 	.word	0x90007a1a
9000298c:	90007a3b 	.word	0x90007a3b
90002990:	90007a4d 	.word	0x90007a4d
90002994:	e000ed00 	.word	0xe000ed00
90002998:	40023c00 	.word	0x40023c00
9000299c:	200015a0 	.word	0x200015a0
900029a0:	200015a4 	.word	0x200015a4
900029a4:	900079a8 	.word	0x900079a8
900029a8:	2000059c 	.word	0x2000059c
900029ac:	900079ac 	.word	0x900079ac
900029b0:	90007a76 	.word	0x90007a76
900029b4:	90007aa2 	.word	0x90007aa2
900029b8:	90007ac2 	.word	0x90007ac2
900029bc:	e000e010 	.word	0xe000e010

900029c0 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
900029c0:	4770      	bx	lr

900029c2 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
900029c2:	e7fe      	b.n	900029c2 <HardFault_Handler>

900029c4 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
900029c4:	e7fe      	b.n	900029c4 <MemManage_Handler>

900029c6 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
900029c6:	e7fe      	b.n	900029c6 <BusFault_Handler>

900029c8 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
900029c8:	e7fe      	b.n	900029c8 <UsageFault_Handler>

900029ca <SVC_Handler>:
900029ca:	4770      	bx	lr

900029cc <DebugMon_Handler>:
900029cc:	4770      	bx	lr

900029ce <PendSV_Handler>:
900029ce:	4770      	bx	lr

900029d0 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
900029d0:	f7fe ba82 	b.w	90000ed8 <HAL_IncTick>

900029d4 <EXTI0_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(WAKEUP_BUTTON_PIN);
900029d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
900029d8:	f7fe befe 	b.w	900017d8 <HAL_GPIO_EXTI_IRQHandler>

900029dc <EXTI2_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI2_IRQHandler(void)
{
   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
900029dc:	2004      	movs	r0, #4
900029de:	f7fe befb 	b.w	900017d8 <HAL_GPIO_EXTI_IRQHandler>
	...

900029e4 <DMA2_Stream7_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
900029e4:	4b01      	ldr	r3, [pc, #4]	; (900029ec <DMA2_Stream7_IRQHandler+0x8>)
900029e6:	6f18      	ldr	r0, [r3, #112]	; 0x70
900029e8:	f7fe bbfa 	b.w	900011e0 <HAL_DMA_IRQHandler>
900029ec:	2000013c 	.word	0x2000013c

900029f0 <DMA2_Stream0_IRQHandler>:
  * @brief  Handles SDRAM DMA transfer interrupt request.
  * @retval None
  */
void BSP_SDRAM_DMA_IRQHandler(void)
{
  HAL_DMA_IRQHandler(sdramHandle.hdma); 
900029f0:	4b01      	ldr	r3, [pc, #4]	; (900029f8 <DMA2_Stream0_IRQHandler+0x8>)
900029f2:	6b18      	ldr	r0, [r3, #48]	; 0x30
900029f4:	f7fe bbf4 	b.w	900011e0 <HAL_DMA_IRQHandler>
900029f8:	20000564 	.word	0x20000564

900029fc <DMA2_Stream1_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Stream1_IRQHandler(void)
{
  BSP_CAMERA_DMA_IRQHandler();
900029fc:	e7fe      	b.n	900029fc <DMA2_Stream1_IRQHandler>
	...

90002a00 <LCD_LOG_DeInit>:
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
90002a00:	4b0c      	ldr	r3, [pc, #48]	; (90002a34 <LCD_LOG_DeInit+0x34>)
  LCD_CacheBuffer_yptr_bottom = 0;
  
  LCD_CacheBuffer_yptr_top_bak = 0;
  LCD_CacheBuffer_yptr_bottom_bak = 0;
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
90002a02:	2101      	movs	r1, #1
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
90002a04:	4a0c      	ldr	r2, [pc, #48]	; (90002a38 <LCD_LOG_DeInit+0x38>)
90002a06:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
90002a08:	2300      	movs	r3, #0
90002a0a:	4a0c      	ldr	r2, [pc, #48]	; (90002a3c <LCD_LOG_DeInit+0x3c>)
90002a0c:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_top = 0;
90002a0e:	4a0c      	ldr	r2, [pc, #48]	; (90002a40 <LCD_LOG_DeInit+0x40>)
90002a10:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_bottom = 0;
90002a12:	4a0c      	ldr	r2, [pc, #48]	; (90002a44 <LCD_LOG_DeInit+0x44>)
90002a14:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_top_bak = 0;
90002a16:	4a0c      	ldr	r2, [pc, #48]	; (90002a48 <LCD_LOG_DeInit+0x48>)
90002a18:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
90002a1a:	4a0c      	ldr	r2, [pc, #48]	; (90002a4c <LCD_LOG_DeInit+0x4c>)
90002a1c:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_invert= ENABLE;
90002a1e:	4a0c      	ldr	r2, [pc, #48]	; (90002a50 <LCD_LOG_DeInit+0x50>)
90002a20:	7011      	strb	r1, [r2, #0]
  LCD_ScrollActive = DISABLE;
90002a22:	4a0c      	ldr	r2, [pc, #48]	; (90002a54 <LCD_LOG_DeInit+0x54>)
90002a24:	7013      	strb	r3, [r2, #0]
  LCD_Lock = DISABLE;
90002a26:	4a0c      	ldr	r2, [pc, #48]	; (90002a58 <LCD_LOG_DeInit+0x58>)
90002a28:	7013      	strb	r3, [r2, #0]
  LCD_Scrolled = DISABLE;
90002a2a:	4a0c      	ldr	r2, [pc, #48]	; (90002a5c <LCD_LOG_DeInit+0x5c>)
90002a2c:	7013      	strb	r3, [r2, #0]
  LCD_ScrollBackStep = 0;
90002a2e:	4a0c      	ldr	r2, [pc, #48]	; (90002a60 <LCD_LOG_DeInit+0x60>)
90002a30:	8013      	strh	r3, [r2, #0]
}
90002a32:	4770      	bx	lr
90002a34:	20005210 	.word	0x20005210
90002a38:	ff000080 	.word	0xff000080
90002a3c:	200015b2 	.word	0x200015b2
90002a40:	200015b8 	.word	0x200015b8
90002a44:	200015b0 	.word	0x200015b0
90002a48:	200015ae 	.word	0x200015ae
90002a4c:	200015ac 	.word	0x200015ac
90002a50:	200015b4 	.word	0x200015b4
90002a54:	200015ba 	.word	0x200015ba
90002a58:	200015b5 	.word	0x200015b5
90002a5c:	200015b6 	.word	0x200015b6
90002a60:	20005214 	.word	0x20005214

90002a64 <LCD_LOG_Init>:
{
90002a64:	b508      	push	{r3, lr}
  LCD_LOG_DeInit();
90002a66:	f7ff ffcb 	bl	90002a00 <LCD_LOG_DeInit>
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
90002a6a:	f04f 30ff 	mov.w	r0, #4294967295
}
90002a6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
90002a72:	f7fd be47 	b.w	90000704 <BSP_LCD_Clear>
	...

90002a78 <LCD_LOG_SetHeader>:
  * @brief  Display the application header on the LCD screen 
  * @param  header: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
90002a78:	b570      	push	{r4, r5, r6, lr}
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
90002a7a:	4c16      	ldr	r4, [pc, #88]	; (90002ad4 <LCD_LOG_SetHeader+0x5c>)
{
90002a7c:	4605      	mov	r5, r0

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
90002a7e:	4e16      	ldr	r6, [pc, #88]	; (90002ad8 <LCD_LOG_SetHeader+0x60>)
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
90002a80:	4620      	mov	r0, r4
90002a82:	f7fd fe2b 	bl	900006dc <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
90002a86:	4630      	mov	r0, r6
90002a88:	f7fd fe14 	bl	900006b4 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), LCD_LOG_HEADER_FONT.Height * 3);
90002a8c:	f7fd fdc8 	bl	90000620 <BSP_LCD_GetXSize>
90002a90:	88e3      	ldrh	r3, [r4, #6]
90002a92:	2100      	movs	r1, #0
90002a94:	b282      	uxth	r2, r0
90002a96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
90002a9a:	4608      	mov	r0, r1
90002a9c:	b29b      	uxth	r3, r3
90002a9e:	f7fd ff29 	bl	900008f4 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
90002aa2:	f04f 30ff 	mov.w	r0, #4294967295
90002aa6:	f7fd fe05 	bl	900006b4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
90002aaa:	4630      	mov	r0, r6
90002aac:	f7fd fe0c 	bl	900006c8 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, LCD_LOG_HEADER_FONT.Height, header, CENTER_MODE);
90002ab0:	462a      	mov	r2, r5
90002ab2:	88e1      	ldrh	r1, [r4, #6]
90002ab4:	2301      	movs	r3, #1
90002ab6:	2000      	movs	r0, #0
90002ab8:	f7fd feb0 	bl	9000081c <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
90002abc:	f04f 30ff 	mov.w	r0, #4294967295
90002ac0:	f7fd fe02 	bl	900006c8 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
90002ac4:	4805      	ldr	r0, [pc, #20]	; (90002adc <LCD_LOG_SetHeader+0x64>)
90002ac6:	f7fd fdf5 	bl	900006b4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
90002aca:	4805      	ldr	r0, [pc, #20]	; (90002ae0 <LCD_LOG_SetHeader+0x68>)
}
90002acc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
90002ad0:	f7fd be04 	b.w	900006dc <BSP_LCD_SetFont>
90002ad4:	20000018 	.word	0x20000018
90002ad8:	ff0000ff 	.word	0xff0000ff
90002adc:	ff000080 	.word	0xff000080
90002ae0:	20000010 	.word	0x20000010

90002ae4 <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
90002ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t cnt = 0 ;
  uint16_t length = 0 ;
  uint16_t ptr = 0, index = 0;
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
90002ae8:	4d1c      	ldr	r5, [pc, #112]	; (90002b5c <LCD_LOG_UpdateDisplay+0x78>)
90002aea:	4a1d      	ldr	r2, [pc, #116]	; (90002b60 <LCD_LOG_UpdateDisplay+0x7c>)
90002aec:	882b      	ldrh	r3, [r5, #0]
90002aee:	8812      	ldrh	r2, [r2, #0]
90002af0:	2b0f      	cmp	r3, #15
90002af2:	4f1c      	ldr	r7, [pc, #112]	; (90002b64 <LCD_LOG_UpdateDisplay+0x80>)
90002af4:	d811      	bhi.n	90002b1a <LCD_LOG_UpdateDisplay+0x36>
90002af6:	4293      	cmp	r3, r2
90002af8:	d311      	bcc.n	90002b1e <LCD_LOG_UpdateDisplay+0x3a>
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
90002afa:	2484      	movs	r4, #132	; 0x84
90002afc:	fb04 7303 	mla	r3, r4, r3, r7
90002b00:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
90002b04:	f7fd fdd6 	bl	900006b4 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
90002b08:	8829      	ldrh	r1, [r5, #0]
90002b0a:	1d08      	adds	r0, r1, #4
90002b0c:	fb04 7101 	mla	r1, r4, r1, r7
90002b10:	b280      	uxth	r0, r0
                             (uint8_t *)(LCD_CacheBuffer[index].line));
      
    }
  }
  
}
90002b12:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
90002b16:	f7fd bed9 	b.w	900008cc <BSP_LCD_DisplayStringAtLine>
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
90002b1a:	4293      	cmp	r3, r2
90002b1c:	d201      	bcs.n	90002b22 <LCD_LOG_UpdateDisplay+0x3e>
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
90002b1e:	3375      	adds	r3, #117	; 0x75
90002b20:	b29b      	uxth	r3, r3
    ptr = length - YWINDOW_SIZE + 1;
90002b22:	3b10      	subs	r3, #16
90002b24:	2600      	movs	r6, #0
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
90002b26:	f04f 0875 	mov.w	r8, #117	; 0x75
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
90002b2a:	f04f 0984 	mov.w	r9, #132	; 0x84
    ptr = length - YWINDOW_SIZE + 1;
90002b2e:	b29c      	uxth	r4, r3
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
90002b30:	19a1      	adds	r1, r4, r6
90002b32:	fbb1 f5f8 	udiv	r5, r1, r8
90002b36:	fb08 1515 	mls	r5, r8, r5, r1
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
90002b3a:	fb09 7505 	mla	r5, r9, r5, r7
90002b3e:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
90002b42:	f7fd fdb7 	bl	900006b4 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
90002b46:	1d30      	adds	r0, r6, #4
90002b48:	3601      	adds	r6, #1
90002b4a:	4629      	mov	r1, r5
90002b4c:	b280      	uxth	r0, r0
90002b4e:	f7fd febd 	bl	900008cc <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
90002b52:	2e11      	cmp	r6, #17
90002b54:	d1ec      	bne.n	90002b30 <LCD_LOG_UpdateDisplay+0x4c>
}
90002b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90002b5a:	bf00      	nop
90002b5c:	200015b0 	.word	0x200015b0
90002b60:	200015b8 	.word	0x200015b8
90002b64:	200015bc 	.word	0x200015bc

90002b68 <__io_putchar>:
{
90002b68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90002b6c:	4605      	mov	r5, r0
  sFONT *cFont = BSP_LCD_GetFont();
90002b6e:	f7fd fdbf 	bl	900006f0 <BSP_LCD_GetFont>
  if(LCD_Lock == DISABLE)
90002b72:	4b3d      	ldr	r3, [pc, #244]	; (90002c68 <__io_putchar+0x100>)
  sFONT *cFont = BSP_LCD_GetFont();
90002b74:	4680      	mov	r8, r0
  if(LCD_Lock == DISABLE)
90002b76:	781b      	ldrb	r3, [r3, #0]
90002b78:	bb43      	cbnz	r3, 90002bcc <__io_putchar+0x64>
    if(LCD_ScrollActive == ENABLE)
90002b7a:	4a3c      	ldr	r2, [pc, #240]	; (90002c6c <__io_putchar+0x104>)
90002b7c:	4c3c      	ldr	r4, [pc, #240]	; (90002c70 <__io_putchar+0x108>)
90002b7e:	7811      	ldrb	r1, [r2, #0]
90002b80:	2901      	cmp	r1, #1
90002b82:	d10b      	bne.n	90002b9c <__io_putchar+0x34>
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
90002b84:	493b      	ldr	r1, [pc, #236]	; (90002c74 <__io_putchar+0x10c>)
      LCD_ScrollActive = DISABLE;
90002b86:	7013      	strb	r3, [r2, #0]
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
90002b88:	8809      	ldrh	r1, [r1, #0]
      LCD_Scrolled = DISABLE;
90002b8a:	4a3b      	ldr	r2, [pc, #236]	; (90002c78 <__io_putchar+0x110>)
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
90002b8c:	8021      	strh	r1, [r4, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
90002b8e:	493b      	ldr	r1, [pc, #236]	; (90002c7c <__io_putchar+0x114>)
      LCD_Scrolled = DISABLE;
90002b90:	7013      	strb	r3, [r2, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
90002b92:	8808      	ldrh	r0, [r1, #0]
      LCD_ScrollBackStep = 0;
90002b94:	4a3a      	ldr	r2, [pc, #232]	; (90002c80 <__io_putchar+0x118>)
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
90002b96:	493b      	ldr	r1, [pc, #236]	; (90002c84 <__io_putchar+0x11c>)
      LCD_ScrollBackStep = 0;
90002b98:	8013      	strh	r3, [r2, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
90002b9a:	8008      	strh	r0, [r1, #0]
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
90002b9c:	4f3a      	ldr	r7, [pc, #232]	; (90002c88 <__io_putchar+0x120>)
90002b9e:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 90002c94 <__io_putchar+0x12c>
90002ba2:	883e      	ldrh	r6, [r7, #0]
90002ba4:	f7fd fd3c 	bl	90000620 <BSP_LCD_GetXSize>
90002ba8:	f8b8 3004 	ldrh.w	r3, [r8, #4]
90002bac:	fbb0 f0f3 	udiv	r0, r0, r3
90002bb0:	4286      	cmp	r6, r0
90002bb2:	463e      	mov	r6, r7
90002bb4:	d20d      	bcs.n	90002bd2 <__io_putchar+0x6a>
90002bb6:	2d0a      	cmp	r5, #10
90002bb8:	d00b      	beq.n	90002bd2 <__io_putchar+0x6a>
90002bba:	883a      	ldrh	r2, [r7, #0]
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
90002bbc:	8823      	ldrh	r3, [r4, #0]
90002bbe:	1c51      	adds	r1, r2, #1
90002bc0:	8039      	strh	r1, [r7, #0]
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
90002bc2:	2184      	movs	r1, #132	; 0x84
90002bc4:	fb01 9903 	mla	r9, r1, r3, r9
90002bc8:	f809 5002 	strb.w	r5, [r9, r2]
}
90002bcc:	4628      	mov	r0, r5
90002bce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
90002bd2:	4f2c      	ldr	r7, [pc, #176]	; (90002c84 <__io_putchar+0x11c>)
90002bd4:	8822      	ldrh	r2, [r4, #0]
90002bd6:	883b      	ldrh	r3, [r7, #0]
90002bd8:	429a      	cmp	r2, r3
90002bda:	d809      	bhi.n	90002bf0 <__io_putchar+0x88>
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
90002bdc:	4a2b      	ldr	r2, [pc, #172]	; (90002c8c <__io_putchar+0x124>)
90002bde:	7811      	ldrb	r1, [r2, #0]
90002be0:	2900      	cmp	r1, #0
90002be2:	d134      	bne.n	90002c4e <__io_putchar+0xe6>
          LCD_CacheBuffer_yptr_top++;
90002be4:	3301      	adds	r3, #1
90002be6:	b29b      	uxth	r3, r3
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
90002be8:	2b75      	cmp	r3, #117	; 0x75
          LCD_CacheBuffer_yptr_top++;
90002bea:	bf14      	ite	ne
90002bec:	803b      	strhne	r3, [r7, #0]
            LCD_CacheBuffer_yptr_top = 0;  
90002bee:	8039      	strheq	r1, [r7, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
90002bf0:	f8b6 a000 	ldrh.w	sl, [r6]
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
90002bf4:	f04f 0b84 	mov.w	fp, #132	; 0x84
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
90002bf8:	f7fd fd12 	bl	90000620 <BSP_LCD_GetXSize>
90002bfc:	f8b8 2004 	ldrh.w	r2, [r8, #4]
90002c00:	2320      	movs	r3, #32
90002c02:	fbb0 f0f2 	udiv	r0, r0, r2
90002c06:	4550      	cmp	r0, sl
90002c08:	d824      	bhi.n	90002c54 <__io_putchar+0xec>
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
90002c0a:	8823      	ldrh	r3, [r4, #0]
90002c0c:	2284      	movs	r2, #132	; 0x84
      LCD_CacheBuffer_xptr = 0;
90002c0e:	f04f 0800 	mov.w	r8, #0
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
90002c12:	fb02 9303 	mla	r3, r2, r3, r9
90002c16:	4a1e      	ldr	r2, [pc, #120]	; (90002c90 <__io_putchar+0x128>)
      LCD_CacheBuffer_xptr = 0;
90002c18:	f8a6 8000 	strh.w	r8, [r6]
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
90002c1c:	6812      	ldr	r2, [r2, #0]
90002c1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      LCD_LOG_UpdateDisplay (); 
90002c22:	f7ff ff5f 	bl	90002ae4 <LCD_LOG_UpdateDisplay>
      LCD_CacheBuffer_yptr_bottom ++; 
90002c26:	8823      	ldrh	r3, [r4, #0]
90002c28:	3301      	adds	r3, #1
90002c2a:	b29b      	uxth	r3, r3
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
90002c2c:	2b75      	cmp	r3, #117	; 0x75
        LCD_CacheBuffer_yptr_top = 1;    
90002c2e:	bf05      	ittet	eq
90002c30:	2301      	moveq	r3, #1
        LCD_CacheBuffer_yptr_invert = ENABLE;
90002c32:	4a16      	ldreq	r2, [pc, #88]	; (90002c8c <__io_putchar+0x124>)
      LCD_CacheBuffer_yptr_bottom ++; 
90002c34:	8023      	strhne	r3, [r4, #0]
        LCD_CacheBuffer_yptr_bottom = 0;
90002c36:	f8a4 8000 	strheq.w	r8, [r4]
        LCD_CacheBuffer_yptr_top = 1;    
90002c3a:	bf04      	itt	eq
90002c3c:	803b      	strheq	r3, [r7, #0]
        LCD_CacheBuffer_yptr_invert = ENABLE;
90002c3e:	7013      	strbeq	r3, [r2, #0]
      if( ch != '\n')
90002c40:	2d0a      	cmp	r5, #10
90002c42:	d0c3      	beq.n	90002bcc <__io_putchar+0x64>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
90002c44:	8832      	ldrh	r2, [r6, #0]
90002c46:	8823      	ldrh	r3, [r4, #0]
90002c48:	1c51      	adds	r1, r2, #1
90002c4a:	8031      	strh	r1, [r6, #0]
90002c4c:	e7b9      	b.n	90002bc2 <__io_putchar+0x5a>
          LCD_CacheBuffer_yptr_invert= DISABLE;
90002c4e:	2300      	movs	r3, #0
90002c50:	7013      	strb	r3, [r2, #0]
90002c52:	e7cd      	b.n	90002bf0 <__io_putchar+0x88>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
90002c54:	8831      	ldrh	r1, [r6, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
90002c56:	f10a 0a01 	add.w	sl, sl, #1
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
90002c5a:	8822      	ldrh	r2, [r4, #0]
90002c5c:	1c48      	adds	r0, r1, #1
90002c5e:	fb0b 9202 	mla	r2, fp, r2, r9
90002c62:	8030      	strh	r0, [r6, #0]
90002c64:	5453      	strb	r3, [r2, r1]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
90002c66:	e7c7      	b.n	90002bf8 <__io_putchar+0x90>
90002c68:	200015b5 	.word	0x200015b5
90002c6c:	200015ba 	.word	0x200015ba
90002c70:	200015b0 	.word	0x200015b0
90002c74:	200015ac 	.word	0x200015ac
90002c78:	200015b6 	.word	0x200015b6
90002c7c:	200015ae 	.word	0x200015ae
90002c80:	20005214 	.word	0x20005214
90002c84:	200015b8 	.word	0x200015b8
90002c88:	200015b2 	.word	0x200015b2
90002c8c:	200015b4 	.word	0x200015b4
90002c90:	20005210 	.word	0x20005210
90002c94:	200015bc 	.word	0x200015bc

90002c98 <__errno>:
90002c98:	4b01      	ldr	r3, [pc, #4]	; (90002ca0 <__errno+0x8>)
90002c9a:	6818      	ldr	r0, [r3, #0]
90002c9c:	4770      	bx	lr
90002c9e:	bf00      	nop
90002ca0:	20000038 	.word	0x20000038

90002ca4 <__libc_init_array>:
90002ca4:	b570      	push	{r4, r5, r6, lr}
90002ca6:	4d0d      	ldr	r5, [pc, #52]	; (90002cdc <__libc_init_array+0x38>)
90002ca8:	4c0d      	ldr	r4, [pc, #52]	; (90002ce0 <__libc_init_array+0x3c>)
90002caa:	1b64      	subs	r4, r4, r5
90002cac:	10a4      	asrs	r4, r4, #2
90002cae:	2600      	movs	r6, #0
90002cb0:	42a6      	cmp	r6, r4
90002cb2:	d109      	bne.n	90002cc8 <__libc_init_array+0x24>
90002cb4:	4d0b      	ldr	r5, [pc, #44]	; (90002ce4 <__libc_init_array+0x40>)
90002cb6:	4c0c      	ldr	r4, [pc, #48]	; (90002ce8 <__libc_init_array+0x44>)
90002cb8:	f000 ffec 	bl	90003c94 <_init>
90002cbc:	1b64      	subs	r4, r4, r5
90002cbe:	10a4      	asrs	r4, r4, #2
90002cc0:	2600      	movs	r6, #0
90002cc2:	42a6      	cmp	r6, r4
90002cc4:	d105      	bne.n	90002cd2 <__libc_init_array+0x2e>
90002cc6:	bd70      	pop	{r4, r5, r6, pc}
90002cc8:	f855 3b04 	ldr.w	r3, [r5], #4
90002ccc:	4798      	blx	r3
90002cce:	3601      	adds	r6, #1
90002cd0:	e7ee      	b.n	90002cb0 <__libc_init_array+0xc>
90002cd2:	f855 3b04 	ldr.w	r3, [r5], #4
90002cd6:	4798      	blx	r3
90002cd8:	3601      	adds	r6, #1
90002cda:	e7f2      	b.n	90002cc2 <__libc_init_array+0x1e>
90002cdc:	90007b80 	.word	0x90007b80
90002ce0:	90007b80 	.word	0x90007b80
90002ce4:	90007b80 	.word	0x90007b80
90002ce8:	90007b84 	.word	0x90007b84

90002cec <memset>:
90002cec:	4402      	add	r2, r0
90002cee:	4603      	mov	r3, r0
90002cf0:	4293      	cmp	r3, r2
90002cf2:	d100      	bne.n	90002cf6 <memset+0xa>
90002cf4:	4770      	bx	lr
90002cf6:	f803 1b01 	strb.w	r1, [r3], #1
90002cfa:	e7f9      	b.n	90002cf0 <memset+0x4>

90002cfc <iprintf>:
90002cfc:	b40f      	push	{r0, r1, r2, r3}
90002cfe:	4b0a      	ldr	r3, [pc, #40]	; (90002d28 <iprintf+0x2c>)
90002d00:	b513      	push	{r0, r1, r4, lr}
90002d02:	681c      	ldr	r4, [r3, #0]
90002d04:	b124      	cbz	r4, 90002d10 <iprintf+0x14>
90002d06:	69a3      	ldr	r3, [r4, #24]
90002d08:	b913      	cbnz	r3, 90002d10 <iprintf+0x14>
90002d0a:	4620      	mov	r0, r4
90002d0c:	f000 fa5e 	bl	900031cc <__sinit>
90002d10:	ab05      	add	r3, sp, #20
90002d12:	9a04      	ldr	r2, [sp, #16]
90002d14:	68a1      	ldr	r1, [r4, #8]
90002d16:	9301      	str	r3, [sp, #4]
90002d18:	4620      	mov	r0, r4
90002d1a:	f000 fc2f 	bl	9000357c <_vfiprintf_r>
90002d1e:	b002      	add	sp, #8
90002d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90002d24:	b004      	add	sp, #16
90002d26:	4770      	bx	lr
90002d28:	20000038 	.word	0x20000038

90002d2c <_puts_r>:
90002d2c:	b570      	push	{r4, r5, r6, lr}
90002d2e:	460e      	mov	r6, r1
90002d30:	4605      	mov	r5, r0
90002d32:	b118      	cbz	r0, 90002d3c <_puts_r+0x10>
90002d34:	6983      	ldr	r3, [r0, #24]
90002d36:	b90b      	cbnz	r3, 90002d3c <_puts_r+0x10>
90002d38:	f000 fa48 	bl	900031cc <__sinit>
90002d3c:	69ab      	ldr	r3, [r5, #24]
90002d3e:	68ac      	ldr	r4, [r5, #8]
90002d40:	b913      	cbnz	r3, 90002d48 <_puts_r+0x1c>
90002d42:	4628      	mov	r0, r5
90002d44:	f000 fa42 	bl	900031cc <__sinit>
90002d48:	4b2c      	ldr	r3, [pc, #176]	; (90002dfc <_puts_r+0xd0>)
90002d4a:	429c      	cmp	r4, r3
90002d4c:	d120      	bne.n	90002d90 <_puts_r+0x64>
90002d4e:	686c      	ldr	r4, [r5, #4]
90002d50:	6e63      	ldr	r3, [r4, #100]	; 0x64
90002d52:	07db      	lsls	r3, r3, #31
90002d54:	d405      	bmi.n	90002d62 <_puts_r+0x36>
90002d56:	89a3      	ldrh	r3, [r4, #12]
90002d58:	0598      	lsls	r0, r3, #22
90002d5a:	d402      	bmi.n	90002d62 <_puts_r+0x36>
90002d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
90002d5e:	f000 fad3 	bl	90003308 <__retarget_lock_acquire_recursive>
90002d62:	89a3      	ldrh	r3, [r4, #12]
90002d64:	0719      	lsls	r1, r3, #28
90002d66:	d51d      	bpl.n	90002da4 <_puts_r+0x78>
90002d68:	6923      	ldr	r3, [r4, #16]
90002d6a:	b1db      	cbz	r3, 90002da4 <_puts_r+0x78>
90002d6c:	3e01      	subs	r6, #1
90002d6e:	68a3      	ldr	r3, [r4, #8]
90002d70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
90002d74:	3b01      	subs	r3, #1
90002d76:	60a3      	str	r3, [r4, #8]
90002d78:	bb39      	cbnz	r1, 90002dca <_puts_r+0x9e>
90002d7a:	2b00      	cmp	r3, #0
90002d7c:	da38      	bge.n	90002df0 <_puts_r+0xc4>
90002d7e:	4622      	mov	r2, r4
90002d80:	210a      	movs	r1, #10
90002d82:	4628      	mov	r0, r5
90002d84:	f000 f848 	bl	90002e18 <__swbuf_r>
90002d88:	3001      	adds	r0, #1
90002d8a:	d011      	beq.n	90002db0 <_puts_r+0x84>
90002d8c:	250a      	movs	r5, #10
90002d8e:	e011      	b.n	90002db4 <_puts_r+0x88>
90002d90:	4b1b      	ldr	r3, [pc, #108]	; (90002e00 <_puts_r+0xd4>)
90002d92:	429c      	cmp	r4, r3
90002d94:	d101      	bne.n	90002d9a <_puts_r+0x6e>
90002d96:	68ac      	ldr	r4, [r5, #8]
90002d98:	e7da      	b.n	90002d50 <_puts_r+0x24>
90002d9a:	4b1a      	ldr	r3, [pc, #104]	; (90002e04 <_puts_r+0xd8>)
90002d9c:	429c      	cmp	r4, r3
90002d9e:	bf08      	it	eq
90002da0:	68ec      	ldreq	r4, [r5, #12]
90002da2:	e7d5      	b.n	90002d50 <_puts_r+0x24>
90002da4:	4621      	mov	r1, r4
90002da6:	4628      	mov	r0, r5
90002da8:	f000 f888 	bl	90002ebc <__swsetup_r>
90002dac:	2800      	cmp	r0, #0
90002dae:	d0dd      	beq.n	90002d6c <_puts_r+0x40>
90002db0:	f04f 35ff 	mov.w	r5, #4294967295
90002db4:	6e63      	ldr	r3, [r4, #100]	; 0x64
90002db6:	07da      	lsls	r2, r3, #31
90002db8:	d405      	bmi.n	90002dc6 <_puts_r+0x9a>
90002dba:	89a3      	ldrh	r3, [r4, #12]
90002dbc:	059b      	lsls	r3, r3, #22
90002dbe:	d402      	bmi.n	90002dc6 <_puts_r+0x9a>
90002dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
90002dc2:	f000 faa2 	bl	9000330a <__retarget_lock_release_recursive>
90002dc6:	4628      	mov	r0, r5
90002dc8:	bd70      	pop	{r4, r5, r6, pc}
90002dca:	2b00      	cmp	r3, #0
90002dcc:	da04      	bge.n	90002dd8 <_puts_r+0xac>
90002dce:	69a2      	ldr	r2, [r4, #24]
90002dd0:	429a      	cmp	r2, r3
90002dd2:	dc06      	bgt.n	90002de2 <_puts_r+0xb6>
90002dd4:	290a      	cmp	r1, #10
90002dd6:	d004      	beq.n	90002de2 <_puts_r+0xb6>
90002dd8:	6823      	ldr	r3, [r4, #0]
90002dda:	1c5a      	adds	r2, r3, #1
90002ddc:	6022      	str	r2, [r4, #0]
90002dde:	7019      	strb	r1, [r3, #0]
90002de0:	e7c5      	b.n	90002d6e <_puts_r+0x42>
90002de2:	4622      	mov	r2, r4
90002de4:	4628      	mov	r0, r5
90002de6:	f000 f817 	bl	90002e18 <__swbuf_r>
90002dea:	3001      	adds	r0, #1
90002dec:	d1bf      	bne.n	90002d6e <_puts_r+0x42>
90002dee:	e7df      	b.n	90002db0 <_puts_r+0x84>
90002df0:	6823      	ldr	r3, [r4, #0]
90002df2:	250a      	movs	r5, #10
90002df4:	1c5a      	adds	r2, r3, #1
90002df6:	6022      	str	r2, [r4, #0]
90002df8:	701d      	strb	r5, [r3, #0]
90002dfa:	e7db      	b.n	90002db4 <_puts_r+0x88>
90002dfc:	90007b04 	.word	0x90007b04
90002e00:	90007b24 	.word	0x90007b24
90002e04:	90007ae4 	.word	0x90007ae4

90002e08 <puts>:
90002e08:	4b02      	ldr	r3, [pc, #8]	; (90002e14 <puts+0xc>)
90002e0a:	4601      	mov	r1, r0
90002e0c:	6818      	ldr	r0, [r3, #0]
90002e0e:	f7ff bf8d 	b.w	90002d2c <_puts_r>
90002e12:	bf00      	nop
90002e14:	20000038 	.word	0x20000038

90002e18 <__swbuf_r>:
90002e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90002e1a:	460e      	mov	r6, r1
90002e1c:	4614      	mov	r4, r2
90002e1e:	4605      	mov	r5, r0
90002e20:	b118      	cbz	r0, 90002e2a <__swbuf_r+0x12>
90002e22:	6983      	ldr	r3, [r0, #24]
90002e24:	b90b      	cbnz	r3, 90002e2a <__swbuf_r+0x12>
90002e26:	f000 f9d1 	bl	900031cc <__sinit>
90002e2a:	4b21      	ldr	r3, [pc, #132]	; (90002eb0 <__swbuf_r+0x98>)
90002e2c:	429c      	cmp	r4, r3
90002e2e:	d12b      	bne.n	90002e88 <__swbuf_r+0x70>
90002e30:	686c      	ldr	r4, [r5, #4]
90002e32:	69a3      	ldr	r3, [r4, #24]
90002e34:	60a3      	str	r3, [r4, #8]
90002e36:	89a3      	ldrh	r3, [r4, #12]
90002e38:	071a      	lsls	r2, r3, #28
90002e3a:	d52f      	bpl.n	90002e9c <__swbuf_r+0x84>
90002e3c:	6923      	ldr	r3, [r4, #16]
90002e3e:	b36b      	cbz	r3, 90002e9c <__swbuf_r+0x84>
90002e40:	6923      	ldr	r3, [r4, #16]
90002e42:	6820      	ldr	r0, [r4, #0]
90002e44:	1ac0      	subs	r0, r0, r3
90002e46:	6963      	ldr	r3, [r4, #20]
90002e48:	b2f6      	uxtb	r6, r6
90002e4a:	4283      	cmp	r3, r0
90002e4c:	4637      	mov	r7, r6
90002e4e:	dc04      	bgt.n	90002e5a <__swbuf_r+0x42>
90002e50:	4621      	mov	r1, r4
90002e52:	4628      	mov	r0, r5
90002e54:	f000 f926 	bl	900030a4 <_fflush_r>
90002e58:	bb30      	cbnz	r0, 90002ea8 <__swbuf_r+0x90>
90002e5a:	68a3      	ldr	r3, [r4, #8]
90002e5c:	3b01      	subs	r3, #1
90002e5e:	60a3      	str	r3, [r4, #8]
90002e60:	6823      	ldr	r3, [r4, #0]
90002e62:	1c5a      	adds	r2, r3, #1
90002e64:	6022      	str	r2, [r4, #0]
90002e66:	701e      	strb	r6, [r3, #0]
90002e68:	6963      	ldr	r3, [r4, #20]
90002e6a:	3001      	adds	r0, #1
90002e6c:	4283      	cmp	r3, r0
90002e6e:	d004      	beq.n	90002e7a <__swbuf_r+0x62>
90002e70:	89a3      	ldrh	r3, [r4, #12]
90002e72:	07db      	lsls	r3, r3, #31
90002e74:	d506      	bpl.n	90002e84 <__swbuf_r+0x6c>
90002e76:	2e0a      	cmp	r6, #10
90002e78:	d104      	bne.n	90002e84 <__swbuf_r+0x6c>
90002e7a:	4621      	mov	r1, r4
90002e7c:	4628      	mov	r0, r5
90002e7e:	f000 f911 	bl	900030a4 <_fflush_r>
90002e82:	b988      	cbnz	r0, 90002ea8 <__swbuf_r+0x90>
90002e84:	4638      	mov	r0, r7
90002e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90002e88:	4b0a      	ldr	r3, [pc, #40]	; (90002eb4 <__swbuf_r+0x9c>)
90002e8a:	429c      	cmp	r4, r3
90002e8c:	d101      	bne.n	90002e92 <__swbuf_r+0x7a>
90002e8e:	68ac      	ldr	r4, [r5, #8]
90002e90:	e7cf      	b.n	90002e32 <__swbuf_r+0x1a>
90002e92:	4b09      	ldr	r3, [pc, #36]	; (90002eb8 <__swbuf_r+0xa0>)
90002e94:	429c      	cmp	r4, r3
90002e96:	bf08      	it	eq
90002e98:	68ec      	ldreq	r4, [r5, #12]
90002e9a:	e7ca      	b.n	90002e32 <__swbuf_r+0x1a>
90002e9c:	4621      	mov	r1, r4
90002e9e:	4628      	mov	r0, r5
90002ea0:	f000 f80c 	bl	90002ebc <__swsetup_r>
90002ea4:	2800      	cmp	r0, #0
90002ea6:	d0cb      	beq.n	90002e40 <__swbuf_r+0x28>
90002ea8:	f04f 37ff 	mov.w	r7, #4294967295
90002eac:	e7ea      	b.n	90002e84 <__swbuf_r+0x6c>
90002eae:	bf00      	nop
90002eb0:	90007b04 	.word	0x90007b04
90002eb4:	90007b24 	.word	0x90007b24
90002eb8:	90007ae4 	.word	0x90007ae4

90002ebc <__swsetup_r>:
90002ebc:	4b32      	ldr	r3, [pc, #200]	; (90002f88 <__swsetup_r+0xcc>)
90002ebe:	b570      	push	{r4, r5, r6, lr}
90002ec0:	681d      	ldr	r5, [r3, #0]
90002ec2:	4606      	mov	r6, r0
90002ec4:	460c      	mov	r4, r1
90002ec6:	b125      	cbz	r5, 90002ed2 <__swsetup_r+0x16>
90002ec8:	69ab      	ldr	r3, [r5, #24]
90002eca:	b913      	cbnz	r3, 90002ed2 <__swsetup_r+0x16>
90002ecc:	4628      	mov	r0, r5
90002ece:	f000 f97d 	bl	900031cc <__sinit>
90002ed2:	4b2e      	ldr	r3, [pc, #184]	; (90002f8c <__swsetup_r+0xd0>)
90002ed4:	429c      	cmp	r4, r3
90002ed6:	d10f      	bne.n	90002ef8 <__swsetup_r+0x3c>
90002ed8:	686c      	ldr	r4, [r5, #4]
90002eda:	89a3      	ldrh	r3, [r4, #12]
90002edc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90002ee0:	0719      	lsls	r1, r3, #28
90002ee2:	d42c      	bmi.n	90002f3e <__swsetup_r+0x82>
90002ee4:	06dd      	lsls	r5, r3, #27
90002ee6:	d411      	bmi.n	90002f0c <__swsetup_r+0x50>
90002ee8:	2309      	movs	r3, #9
90002eea:	6033      	str	r3, [r6, #0]
90002eec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
90002ef0:	81a3      	strh	r3, [r4, #12]
90002ef2:	f04f 30ff 	mov.w	r0, #4294967295
90002ef6:	e03e      	b.n	90002f76 <__swsetup_r+0xba>
90002ef8:	4b25      	ldr	r3, [pc, #148]	; (90002f90 <__swsetup_r+0xd4>)
90002efa:	429c      	cmp	r4, r3
90002efc:	d101      	bne.n	90002f02 <__swsetup_r+0x46>
90002efe:	68ac      	ldr	r4, [r5, #8]
90002f00:	e7eb      	b.n	90002eda <__swsetup_r+0x1e>
90002f02:	4b24      	ldr	r3, [pc, #144]	; (90002f94 <__swsetup_r+0xd8>)
90002f04:	429c      	cmp	r4, r3
90002f06:	bf08      	it	eq
90002f08:	68ec      	ldreq	r4, [r5, #12]
90002f0a:	e7e6      	b.n	90002eda <__swsetup_r+0x1e>
90002f0c:	0758      	lsls	r0, r3, #29
90002f0e:	d512      	bpl.n	90002f36 <__swsetup_r+0x7a>
90002f10:	6b61      	ldr	r1, [r4, #52]	; 0x34
90002f12:	b141      	cbz	r1, 90002f26 <__swsetup_r+0x6a>
90002f14:	f104 0344 	add.w	r3, r4, #68	; 0x44
90002f18:	4299      	cmp	r1, r3
90002f1a:	d002      	beq.n	90002f22 <__swsetup_r+0x66>
90002f1c:	4630      	mov	r0, r6
90002f1e:	f000 fa59 	bl	900033d4 <_free_r>
90002f22:	2300      	movs	r3, #0
90002f24:	6363      	str	r3, [r4, #52]	; 0x34
90002f26:	89a3      	ldrh	r3, [r4, #12]
90002f28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
90002f2c:	81a3      	strh	r3, [r4, #12]
90002f2e:	2300      	movs	r3, #0
90002f30:	6063      	str	r3, [r4, #4]
90002f32:	6923      	ldr	r3, [r4, #16]
90002f34:	6023      	str	r3, [r4, #0]
90002f36:	89a3      	ldrh	r3, [r4, #12]
90002f38:	f043 0308 	orr.w	r3, r3, #8
90002f3c:	81a3      	strh	r3, [r4, #12]
90002f3e:	6923      	ldr	r3, [r4, #16]
90002f40:	b94b      	cbnz	r3, 90002f56 <__swsetup_r+0x9a>
90002f42:	89a3      	ldrh	r3, [r4, #12]
90002f44:	f403 7320 	and.w	r3, r3, #640	; 0x280
90002f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90002f4c:	d003      	beq.n	90002f56 <__swsetup_r+0x9a>
90002f4e:	4621      	mov	r1, r4
90002f50:	4630      	mov	r0, r6
90002f52:	f000 f9ff 	bl	90003354 <__smakebuf_r>
90002f56:	89a0      	ldrh	r0, [r4, #12]
90002f58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90002f5c:	f010 0301 	ands.w	r3, r0, #1
90002f60:	d00a      	beq.n	90002f78 <__swsetup_r+0xbc>
90002f62:	2300      	movs	r3, #0
90002f64:	60a3      	str	r3, [r4, #8]
90002f66:	6963      	ldr	r3, [r4, #20]
90002f68:	425b      	negs	r3, r3
90002f6a:	61a3      	str	r3, [r4, #24]
90002f6c:	6923      	ldr	r3, [r4, #16]
90002f6e:	b943      	cbnz	r3, 90002f82 <__swsetup_r+0xc6>
90002f70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
90002f74:	d1ba      	bne.n	90002eec <__swsetup_r+0x30>
90002f76:	bd70      	pop	{r4, r5, r6, pc}
90002f78:	0781      	lsls	r1, r0, #30
90002f7a:	bf58      	it	pl
90002f7c:	6963      	ldrpl	r3, [r4, #20]
90002f7e:	60a3      	str	r3, [r4, #8]
90002f80:	e7f4      	b.n	90002f6c <__swsetup_r+0xb0>
90002f82:	2000      	movs	r0, #0
90002f84:	e7f7      	b.n	90002f76 <__swsetup_r+0xba>
90002f86:	bf00      	nop
90002f88:	20000038 	.word	0x20000038
90002f8c:	90007b04 	.word	0x90007b04
90002f90:	90007b24 	.word	0x90007b24
90002f94:	90007ae4 	.word	0x90007ae4

90002f98 <__sflush_r>:
90002f98:	898a      	ldrh	r2, [r1, #12]
90002f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90002f9e:	4605      	mov	r5, r0
90002fa0:	0710      	lsls	r0, r2, #28
90002fa2:	460c      	mov	r4, r1
90002fa4:	d458      	bmi.n	90003058 <__sflush_r+0xc0>
90002fa6:	684b      	ldr	r3, [r1, #4]
90002fa8:	2b00      	cmp	r3, #0
90002faa:	dc05      	bgt.n	90002fb8 <__sflush_r+0x20>
90002fac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
90002fae:	2b00      	cmp	r3, #0
90002fb0:	dc02      	bgt.n	90002fb8 <__sflush_r+0x20>
90002fb2:	2000      	movs	r0, #0
90002fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90002fb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90002fba:	2e00      	cmp	r6, #0
90002fbc:	d0f9      	beq.n	90002fb2 <__sflush_r+0x1a>
90002fbe:	2300      	movs	r3, #0
90002fc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
90002fc4:	682f      	ldr	r7, [r5, #0]
90002fc6:	602b      	str	r3, [r5, #0]
90002fc8:	d032      	beq.n	90003030 <__sflush_r+0x98>
90002fca:	6d60      	ldr	r0, [r4, #84]	; 0x54
90002fcc:	89a3      	ldrh	r3, [r4, #12]
90002fce:	075a      	lsls	r2, r3, #29
90002fd0:	d505      	bpl.n	90002fde <__sflush_r+0x46>
90002fd2:	6863      	ldr	r3, [r4, #4]
90002fd4:	1ac0      	subs	r0, r0, r3
90002fd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
90002fd8:	b10b      	cbz	r3, 90002fde <__sflush_r+0x46>
90002fda:	6c23      	ldr	r3, [r4, #64]	; 0x40
90002fdc:	1ac0      	subs	r0, r0, r3
90002fde:	2300      	movs	r3, #0
90002fe0:	4602      	mov	r2, r0
90002fe2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90002fe4:	6a21      	ldr	r1, [r4, #32]
90002fe6:	4628      	mov	r0, r5
90002fe8:	47b0      	blx	r6
90002fea:	1c43      	adds	r3, r0, #1
90002fec:	89a3      	ldrh	r3, [r4, #12]
90002fee:	d106      	bne.n	90002ffe <__sflush_r+0x66>
90002ff0:	6829      	ldr	r1, [r5, #0]
90002ff2:	291d      	cmp	r1, #29
90002ff4:	d82c      	bhi.n	90003050 <__sflush_r+0xb8>
90002ff6:	4a2a      	ldr	r2, [pc, #168]	; (900030a0 <__sflush_r+0x108>)
90002ff8:	40ca      	lsrs	r2, r1
90002ffa:	07d6      	lsls	r6, r2, #31
90002ffc:	d528      	bpl.n	90003050 <__sflush_r+0xb8>
90002ffe:	2200      	movs	r2, #0
90003000:	6062      	str	r2, [r4, #4]
90003002:	04d9      	lsls	r1, r3, #19
90003004:	6922      	ldr	r2, [r4, #16]
90003006:	6022      	str	r2, [r4, #0]
90003008:	d504      	bpl.n	90003014 <__sflush_r+0x7c>
9000300a:	1c42      	adds	r2, r0, #1
9000300c:	d101      	bne.n	90003012 <__sflush_r+0x7a>
9000300e:	682b      	ldr	r3, [r5, #0]
90003010:	b903      	cbnz	r3, 90003014 <__sflush_r+0x7c>
90003012:	6560      	str	r0, [r4, #84]	; 0x54
90003014:	6b61      	ldr	r1, [r4, #52]	; 0x34
90003016:	602f      	str	r7, [r5, #0]
90003018:	2900      	cmp	r1, #0
9000301a:	d0ca      	beq.n	90002fb2 <__sflush_r+0x1a>
9000301c:	f104 0344 	add.w	r3, r4, #68	; 0x44
90003020:	4299      	cmp	r1, r3
90003022:	d002      	beq.n	9000302a <__sflush_r+0x92>
90003024:	4628      	mov	r0, r5
90003026:	f000 f9d5 	bl	900033d4 <_free_r>
9000302a:	2000      	movs	r0, #0
9000302c:	6360      	str	r0, [r4, #52]	; 0x34
9000302e:	e7c1      	b.n	90002fb4 <__sflush_r+0x1c>
90003030:	6a21      	ldr	r1, [r4, #32]
90003032:	2301      	movs	r3, #1
90003034:	4628      	mov	r0, r5
90003036:	47b0      	blx	r6
90003038:	1c41      	adds	r1, r0, #1
9000303a:	d1c7      	bne.n	90002fcc <__sflush_r+0x34>
9000303c:	682b      	ldr	r3, [r5, #0]
9000303e:	2b00      	cmp	r3, #0
90003040:	d0c4      	beq.n	90002fcc <__sflush_r+0x34>
90003042:	2b1d      	cmp	r3, #29
90003044:	d001      	beq.n	9000304a <__sflush_r+0xb2>
90003046:	2b16      	cmp	r3, #22
90003048:	d101      	bne.n	9000304e <__sflush_r+0xb6>
9000304a:	602f      	str	r7, [r5, #0]
9000304c:	e7b1      	b.n	90002fb2 <__sflush_r+0x1a>
9000304e:	89a3      	ldrh	r3, [r4, #12]
90003050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90003054:	81a3      	strh	r3, [r4, #12]
90003056:	e7ad      	b.n	90002fb4 <__sflush_r+0x1c>
90003058:	690f      	ldr	r7, [r1, #16]
9000305a:	2f00      	cmp	r7, #0
9000305c:	d0a9      	beq.n	90002fb2 <__sflush_r+0x1a>
9000305e:	0793      	lsls	r3, r2, #30
90003060:	680e      	ldr	r6, [r1, #0]
90003062:	bf08      	it	eq
90003064:	694b      	ldreq	r3, [r1, #20]
90003066:	600f      	str	r7, [r1, #0]
90003068:	bf18      	it	ne
9000306a:	2300      	movne	r3, #0
9000306c:	eba6 0807 	sub.w	r8, r6, r7
90003070:	608b      	str	r3, [r1, #8]
90003072:	f1b8 0f00 	cmp.w	r8, #0
90003076:	dd9c      	ble.n	90002fb2 <__sflush_r+0x1a>
90003078:	6a21      	ldr	r1, [r4, #32]
9000307a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
9000307c:	4643      	mov	r3, r8
9000307e:	463a      	mov	r2, r7
90003080:	4628      	mov	r0, r5
90003082:	47b0      	blx	r6
90003084:	2800      	cmp	r0, #0
90003086:	dc06      	bgt.n	90003096 <__sflush_r+0xfe>
90003088:	89a3      	ldrh	r3, [r4, #12]
9000308a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000308e:	81a3      	strh	r3, [r4, #12]
90003090:	f04f 30ff 	mov.w	r0, #4294967295
90003094:	e78e      	b.n	90002fb4 <__sflush_r+0x1c>
90003096:	4407      	add	r7, r0
90003098:	eba8 0800 	sub.w	r8, r8, r0
9000309c:	e7e9      	b.n	90003072 <__sflush_r+0xda>
9000309e:	bf00      	nop
900030a0:	20400001 	.word	0x20400001

900030a4 <_fflush_r>:
900030a4:	b538      	push	{r3, r4, r5, lr}
900030a6:	690b      	ldr	r3, [r1, #16]
900030a8:	4605      	mov	r5, r0
900030aa:	460c      	mov	r4, r1
900030ac:	b913      	cbnz	r3, 900030b4 <_fflush_r+0x10>
900030ae:	2500      	movs	r5, #0
900030b0:	4628      	mov	r0, r5
900030b2:	bd38      	pop	{r3, r4, r5, pc}
900030b4:	b118      	cbz	r0, 900030be <_fflush_r+0x1a>
900030b6:	6983      	ldr	r3, [r0, #24]
900030b8:	b90b      	cbnz	r3, 900030be <_fflush_r+0x1a>
900030ba:	f000 f887 	bl	900031cc <__sinit>
900030be:	4b14      	ldr	r3, [pc, #80]	; (90003110 <_fflush_r+0x6c>)
900030c0:	429c      	cmp	r4, r3
900030c2:	d11b      	bne.n	900030fc <_fflush_r+0x58>
900030c4:	686c      	ldr	r4, [r5, #4]
900030c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
900030ca:	2b00      	cmp	r3, #0
900030cc:	d0ef      	beq.n	900030ae <_fflush_r+0xa>
900030ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
900030d0:	07d0      	lsls	r0, r2, #31
900030d2:	d404      	bmi.n	900030de <_fflush_r+0x3a>
900030d4:	0599      	lsls	r1, r3, #22
900030d6:	d402      	bmi.n	900030de <_fflush_r+0x3a>
900030d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
900030da:	f000 f915 	bl	90003308 <__retarget_lock_acquire_recursive>
900030de:	4628      	mov	r0, r5
900030e0:	4621      	mov	r1, r4
900030e2:	f7ff ff59 	bl	90002f98 <__sflush_r>
900030e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
900030e8:	07da      	lsls	r2, r3, #31
900030ea:	4605      	mov	r5, r0
900030ec:	d4e0      	bmi.n	900030b0 <_fflush_r+0xc>
900030ee:	89a3      	ldrh	r3, [r4, #12]
900030f0:	059b      	lsls	r3, r3, #22
900030f2:	d4dd      	bmi.n	900030b0 <_fflush_r+0xc>
900030f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
900030f6:	f000 f908 	bl	9000330a <__retarget_lock_release_recursive>
900030fa:	e7d9      	b.n	900030b0 <_fflush_r+0xc>
900030fc:	4b05      	ldr	r3, [pc, #20]	; (90003114 <_fflush_r+0x70>)
900030fe:	429c      	cmp	r4, r3
90003100:	d101      	bne.n	90003106 <_fflush_r+0x62>
90003102:	68ac      	ldr	r4, [r5, #8]
90003104:	e7df      	b.n	900030c6 <_fflush_r+0x22>
90003106:	4b04      	ldr	r3, [pc, #16]	; (90003118 <_fflush_r+0x74>)
90003108:	429c      	cmp	r4, r3
9000310a:	bf08      	it	eq
9000310c:	68ec      	ldreq	r4, [r5, #12]
9000310e:	e7da      	b.n	900030c6 <_fflush_r+0x22>
90003110:	90007b04 	.word	0x90007b04
90003114:	90007b24 	.word	0x90007b24
90003118:	90007ae4 	.word	0x90007ae4

9000311c <std>:
9000311c:	2300      	movs	r3, #0
9000311e:	b510      	push	{r4, lr}
90003120:	4604      	mov	r4, r0
90003122:	e9c0 3300 	strd	r3, r3, [r0]
90003126:	e9c0 3304 	strd	r3, r3, [r0, #16]
9000312a:	6083      	str	r3, [r0, #8]
9000312c:	8181      	strh	r1, [r0, #12]
9000312e:	6643      	str	r3, [r0, #100]	; 0x64
90003130:	81c2      	strh	r2, [r0, #14]
90003132:	6183      	str	r3, [r0, #24]
90003134:	4619      	mov	r1, r3
90003136:	2208      	movs	r2, #8
90003138:	305c      	adds	r0, #92	; 0x5c
9000313a:	f7ff fdd7 	bl	90002cec <memset>
9000313e:	4b05      	ldr	r3, [pc, #20]	; (90003154 <std+0x38>)
90003140:	6263      	str	r3, [r4, #36]	; 0x24
90003142:	4b05      	ldr	r3, [pc, #20]	; (90003158 <std+0x3c>)
90003144:	62a3      	str	r3, [r4, #40]	; 0x28
90003146:	4b05      	ldr	r3, [pc, #20]	; (9000315c <std+0x40>)
90003148:	62e3      	str	r3, [r4, #44]	; 0x2c
9000314a:	4b05      	ldr	r3, [pc, #20]	; (90003160 <std+0x44>)
9000314c:	6224      	str	r4, [r4, #32]
9000314e:	6323      	str	r3, [r4, #48]	; 0x30
90003150:	bd10      	pop	{r4, pc}
90003152:	bf00      	nop
90003154:	90003b25 	.word	0x90003b25
90003158:	90003b47 	.word	0x90003b47
9000315c:	90003b7f 	.word	0x90003b7f
90003160:	90003ba3 	.word	0x90003ba3

90003164 <_cleanup_r>:
90003164:	4901      	ldr	r1, [pc, #4]	; (9000316c <_cleanup_r+0x8>)
90003166:	f000 b8af 	b.w	900032c8 <_fwalk_reent>
9000316a:	bf00      	nop
9000316c:	900030a5 	.word	0x900030a5

90003170 <__sfmoreglue>:
90003170:	b570      	push	{r4, r5, r6, lr}
90003172:	1e4a      	subs	r2, r1, #1
90003174:	2568      	movs	r5, #104	; 0x68
90003176:	4355      	muls	r5, r2
90003178:	460e      	mov	r6, r1
9000317a:	f105 0174 	add.w	r1, r5, #116	; 0x74
9000317e:	f000 f979 	bl	90003474 <_malloc_r>
90003182:	4604      	mov	r4, r0
90003184:	b140      	cbz	r0, 90003198 <__sfmoreglue+0x28>
90003186:	2100      	movs	r1, #0
90003188:	e9c0 1600 	strd	r1, r6, [r0]
9000318c:	300c      	adds	r0, #12
9000318e:	60a0      	str	r0, [r4, #8]
90003190:	f105 0268 	add.w	r2, r5, #104	; 0x68
90003194:	f7ff fdaa 	bl	90002cec <memset>
90003198:	4620      	mov	r0, r4
9000319a:	bd70      	pop	{r4, r5, r6, pc}

9000319c <__sfp_lock_acquire>:
9000319c:	4801      	ldr	r0, [pc, #4]	; (900031a4 <__sfp_lock_acquire+0x8>)
9000319e:	f000 b8b3 	b.w	90003308 <__retarget_lock_acquire_recursive>
900031a2:	bf00      	nop
900031a4:	2000521e 	.word	0x2000521e

900031a8 <__sfp_lock_release>:
900031a8:	4801      	ldr	r0, [pc, #4]	; (900031b0 <__sfp_lock_release+0x8>)
900031aa:	f000 b8ae 	b.w	9000330a <__retarget_lock_release_recursive>
900031ae:	bf00      	nop
900031b0:	2000521e 	.word	0x2000521e

900031b4 <__sinit_lock_acquire>:
900031b4:	4801      	ldr	r0, [pc, #4]	; (900031bc <__sinit_lock_acquire+0x8>)
900031b6:	f000 b8a7 	b.w	90003308 <__retarget_lock_acquire_recursive>
900031ba:	bf00      	nop
900031bc:	20005219 	.word	0x20005219

900031c0 <__sinit_lock_release>:
900031c0:	4801      	ldr	r0, [pc, #4]	; (900031c8 <__sinit_lock_release+0x8>)
900031c2:	f000 b8a2 	b.w	9000330a <__retarget_lock_release_recursive>
900031c6:	bf00      	nop
900031c8:	20005219 	.word	0x20005219

900031cc <__sinit>:
900031cc:	b510      	push	{r4, lr}
900031ce:	4604      	mov	r4, r0
900031d0:	f7ff fff0 	bl	900031b4 <__sinit_lock_acquire>
900031d4:	69a3      	ldr	r3, [r4, #24]
900031d6:	b11b      	cbz	r3, 900031e0 <__sinit+0x14>
900031d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900031dc:	f7ff bff0 	b.w	900031c0 <__sinit_lock_release>
900031e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
900031e4:	6523      	str	r3, [r4, #80]	; 0x50
900031e6:	4b13      	ldr	r3, [pc, #76]	; (90003234 <__sinit+0x68>)
900031e8:	4a13      	ldr	r2, [pc, #76]	; (90003238 <__sinit+0x6c>)
900031ea:	681b      	ldr	r3, [r3, #0]
900031ec:	62a2      	str	r2, [r4, #40]	; 0x28
900031ee:	42a3      	cmp	r3, r4
900031f0:	bf04      	itt	eq
900031f2:	2301      	moveq	r3, #1
900031f4:	61a3      	streq	r3, [r4, #24]
900031f6:	4620      	mov	r0, r4
900031f8:	f000 f820 	bl	9000323c <__sfp>
900031fc:	6060      	str	r0, [r4, #4]
900031fe:	4620      	mov	r0, r4
90003200:	f000 f81c 	bl	9000323c <__sfp>
90003204:	60a0      	str	r0, [r4, #8]
90003206:	4620      	mov	r0, r4
90003208:	f000 f818 	bl	9000323c <__sfp>
9000320c:	2200      	movs	r2, #0
9000320e:	60e0      	str	r0, [r4, #12]
90003210:	2104      	movs	r1, #4
90003212:	6860      	ldr	r0, [r4, #4]
90003214:	f7ff ff82 	bl	9000311c <std>
90003218:	68a0      	ldr	r0, [r4, #8]
9000321a:	2201      	movs	r2, #1
9000321c:	2109      	movs	r1, #9
9000321e:	f7ff ff7d 	bl	9000311c <std>
90003222:	68e0      	ldr	r0, [r4, #12]
90003224:	2202      	movs	r2, #2
90003226:	2112      	movs	r1, #18
90003228:	f7ff ff78 	bl	9000311c <std>
9000322c:	2301      	movs	r3, #1
9000322e:	61a3      	str	r3, [r4, #24]
90003230:	e7d2      	b.n	900031d8 <__sinit+0xc>
90003232:	bf00      	nop
90003234:	90007ae0 	.word	0x90007ae0
90003238:	90003165 	.word	0x90003165

9000323c <__sfp>:
9000323c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000323e:	4607      	mov	r7, r0
90003240:	f7ff ffac 	bl	9000319c <__sfp_lock_acquire>
90003244:	4b1e      	ldr	r3, [pc, #120]	; (900032c0 <__sfp+0x84>)
90003246:	681e      	ldr	r6, [r3, #0]
90003248:	69b3      	ldr	r3, [r6, #24]
9000324a:	b913      	cbnz	r3, 90003252 <__sfp+0x16>
9000324c:	4630      	mov	r0, r6
9000324e:	f7ff ffbd 	bl	900031cc <__sinit>
90003252:	3648      	adds	r6, #72	; 0x48
90003254:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
90003258:	3b01      	subs	r3, #1
9000325a:	d503      	bpl.n	90003264 <__sfp+0x28>
9000325c:	6833      	ldr	r3, [r6, #0]
9000325e:	b30b      	cbz	r3, 900032a4 <__sfp+0x68>
90003260:	6836      	ldr	r6, [r6, #0]
90003262:	e7f7      	b.n	90003254 <__sfp+0x18>
90003264:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
90003268:	b9d5      	cbnz	r5, 900032a0 <__sfp+0x64>
9000326a:	4b16      	ldr	r3, [pc, #88]	; (900032c4 <__sfp+0x88>)
9000326c:	60e3      	str	r3, [r4, #12]
9000326e:	f104 0058 	add.w	r0, r4, #88	; 0x58
90003272:	6665      	str	r5, [r4, #100]	; 0x64
90003274:	f000 f847 	bl	90003306 <__retarget_lock_init_recursive>
90003278:	f7ff ff96 	bl	900031a8 <__sfp_lock_release>
9000327c:	e9c4 5501 	strd	r5, r5, [r4, #4]
90003280:	e9c4 5504 	strd	r5, r5, [r4, #16]
90003284:	6025      	str	r5, [r4, #0]
90003286:	61a5      	str	r5, [r4, #24]
90003288:	2208      	movs	r2, #8
9000328a:	4629      	mov	r1, r5
9000328c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
90003290:	f7ff fd2c 	bl	90002cec <memset>
90003294:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
90003298:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
9000329c:	4620      	mov	r0, r4
9000329e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
900032a0:	3468      	adds	r4, #104	; 0x68
900032a2:	e7d9      	b.n	90003258 <__sfp+0x1c>
900032a4:	2104      	movs	r1, #4
900032a6:	4638      	mov	r0, r7
900032a8:	f7ff ff62 	bl	90003170 <__sfmoreglue>
900032ac:	4604      	mov	r4, r0
900032ae:	6030      	str	r0, [r6, #0]
900032b0:	2800      	cmp	r0, #0
900032b2:	d1d5      	bne.n	90003260 <__sfp+0x24>
900032b4:	f7ff ff78 	bl	900031a8 <__sfp_lock_release>
900032b8:	230c      	movs	r3, #12
900032ba:	603b      	str	r3, [r7, #0]
900032bc:	e7ee      	b.n	9000329c <__sfp+0x60>
900032be:	bf00      	nop
900032c0:	90007ae0 	.word	0x90007ae0
900032c4:	ffff0001 	.word	0xffff0001

900032c8 <_fwalk_reent>:
900032c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
900032cc:	4606      	mov	r6, r0
900032ce:	4688      	mov	r8, r1
900032d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
900032d4:	2700      	movs	r7, #0
900032d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
900032da:	f1b9 0901 	subs.w	r9, r9, #1
900032de:	d505      	bpl.n	900032ec <_fwalk_reent+0x24>
900032e0:	6824      	ldr	r4, [r4, #0]
900032e2:	2c00      	cmp	r4, #0
900032e4:	d1f7      	bne.n	900032d6 <_fwalk_reent+0xe>
900032e6:	4638      	mov	r0, r7
900032e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
900032ec:	89ab      	ldrh	r3, [r5, #12]
900032ee:	2b01      	cmp	r3, #1
900032f0:	d907      	bls.n	90003302 <_fwalk_reent+0x3a>
900032f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
900032f6:	3301      	adds	r3, #1
900032f8:	d003      	beq.n	90003302 <_fwalk_reent+0x3a>
900032fa:	4629      	mov	r1, r5
900032fc:	4630      	mov	r0, r6
900032fe:	47c0      	blx	r8
90003300:	4307      	orrs	r7, r0
90003302:	3568      	adds	r5, #104	; 0x68
90003304:	e7e9      	b.n	900032da <_fwalk_reent+0x12>

90003306 <__retarget_lock_init_recursive>:
90003306:	4770      	bx	lr

90003308 <__retarget_lock_acquire_recursive>:
90003308:	4770      	bx	lr

9000330a <__retarget_lock_release_recursive>:
9000330a:	4770      	bx	lr

9000330c <__swhatbuf_r>:
9000330c:	b570      	push	{r4, r5, r6, lr}
9000330e:	460e      	mov	r6, r1
90003310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90003314:	2900      	cmp	r1, #0
90003316:	b096      	sub	sp, #88	; 0x58
90003318:	4614      	mov	r4, r2
9000331a:	461d      	mov	r5, r3
9000331c:	da07      	bge.n	9000332e <__swhatbuf_r+0x22>
9000331e:	2300      	movs	r3, #0
90003320:	602b      	str	r3, [r5, #0]
90003322:	89b3      	ldrh	r3, [r6, #12]
90003324:	061a      	lsls	r2, r3, #24
90003326:	d410      	bmi.n	9000334a <__swhatbuf_r+0x3e>
90003328:	f44f 6380 	mov.w	r3, #1024	; 0x400
9000332c:	e00e      	b.n	9000334c <__swhatbuf_r+0x40>
9000332e:	466a      	mov	r2, sp
90003330:	f000 fc5e 	bl	90003bf0 <_fstat_r>
90003334:	2800      	cmp	r0, #0
90003336:	dbf2      	blt.n	9000331e <__swhatbuf_r+0x12>
90003338:	9a01      	ldr	r2, [sp, #4]
9000333a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
9000333e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
90003342:	425a      	negs	r2, r3
90003344:	415a      	adcs	r2, r3
90003346:	602a      	str	r2, [r5, #0]
90003348:	e7ee      	b.n	90003328 <__swhatbuf_r+0x1c>
9000334a:	2340      	movs	r3, #64	; 0x40
9000334c:	2000      	movs	r0, #0
9000334e:	6023      	str	r3, [r4, #0]
90003350:	b016      	add	sp, #88	; 0x58
90003352:	bd70      	pop	{r4, r5, r6, pc}

90003354 <__smakebuf_r>:
90003354:	898b      	ldrh	r3, [r1, #12]
90003356:	b573      	push	{r0, r1, r4, r5, r6, lr}
90003358:	079d      	lsls	r5, r3, #30
9000335a:	4606      	mov	r6, r0
9000335c:	460c      	mov	r4, r1
9000335e:	d507      	bpl.n	90003370 <__smakebuf_r+0x1c>
90003360:	f104 0347 	add.w	r3, r4, #71	; 0x47
90003364:	6023      	str	r3, [r4, #0]
90003366:	6123      	str	r3, [r4, #16]
90003368:	2301      	movs	r3, #1
9000336a:	6163      	str	r3, [r4, #20]
9000336c:	b002      	add	sp, #8
9000336e:	bd70      	pop	{r4, r5, r6, pc}
90003370:	ab01      	add	r3, sp, #4
90003372:	466a      	mov	r2, sp
90003374:	f7ff ffca 	bl	9000330c <__swhatbuf_r>
90003378:	9900      	ldr	r1, [sp, #0]
9000337a:	4605      	mov	r5, r0
9000337c:	4630      	mov	r0, r6
9000337e:	f000 f879 	bl	90003474 <_malloc_r>
90003382:	b948      	cbnz	r0, 90003398 <__smakebuf_r+0x44>
90003384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90003388:	059a      	lsls	r2, r3, #22
9000338a:	d4ef      	bmi.n	9000336c <__smakebuf_r+0x18>
9000338c:	f023 0303 	bic.w	r3, r3, #3
90003390:	f043 0302 	orr.w	r3, r3, #2
90003394:	81a3      	strh	r3, [r4, #12]
90003396:	e7e3      	b.n	90003360 <__smakebuf_r+0xc>
90003398:	4b0d      	ldr	r3, [pc, #52]	; (900033d0 <__smakebuf_r+0x7c>)
9000339a:	62b3      	str	r3, [r6, #40]	; 0x28
9000339c:	89a3      	ldrh	r3, [r4, #12]
9000339e:	6020      	str	r0, [r4, #0]
900033a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900033a4:	81a3      	strh	r3, [r4, #12]
900033a6:	9b00      	ldr	r3, [sp, #0]
900033a8:	6163      	str	r3, [r4, #20]
900033aa:	9b01      	ldr	r3, [sp, #4]
900033ac:	6120      	str	r0, [r4, #16]
900033ae:	b15b      	cbz	r3, 900033c8 <__smakebuf_r+0x74>
900033b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
900033b4:	4630      	mov	r0, r6
900033b6:	f000 fc2d 	bl	90003c14 <_isatty_r>
900033ba:	b128      	cbz	r0, 900033c8 <__smakebuf_r+0x74>
900033bc:	89a3      	ldrh	r3, [r4, #12]
900033be:	f023 0303 	bic.w	r3, r3, #3
900033c2:	f043 0301 	orr.w	r3, r3, #1
900033c6:	81a3      	strh	r3, [r4, #12]
900033c8:	89a0      	ldrh	r0, [r4, #12]
900033ca:	4305      	orrs	r5, r0
900033cc:	81a5      	strh	r5, [r4, #12]
900033ce:	e7cd      	b.n	9000336c <__smakebuf_r+0x18>
900033d0:	90003165 	.word	0x90003165

900033d4 <_free_r>:
900033d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
900033d6:	2900      	cmp	r1, #0
900033d8:	d048      	beq.n	9000346c <_free_r+0x98>
900033da:	f851 3c04 	ldr.w	r3, [r1, #-4]
900033de:	9001      	str	r0, [sp, #4]
900033e0:	2b00      	cmp	r3, #0
900033e2:	f1a1 0404 	sub.w	r4, r1, #4
900033e6:	bfb8      	it	lt
900033e8:	18e4      	addlt	r4, r4, r3
900033ea:	f000 fc35 	bl	90003c58 <__malloc_lock>
900033ee:	4a20      	ldr	r2, [pc, #128]	; (90003470 <_free_r+0x9c>)
900033f0:	9801      	ldr	r0, [sp, #4]
900033f2:	6813      	ldr	r3, [r2, #0]
900033f4:	4615      	mov	r5, r2
900033f6:	b933      	cbnz	r3, 90003406 <_free_r+0x32>
900033f8:	6063      	str	r3, [r4, #4]
900033fa:	6014      	str	r4, [r2, #0]
900033fc:	b003      	add	sp, #12
900033fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
90003402:	f000 bc2f 	b.w	90003c64 <__malloc_unlock>
90003406:	42a3      	cmp	r3, r4
90003408:	d90b      	bls.n	90003422 <_free_r+0x4e>
9000340a:	6821      	ldr	r1, [r4, #0]
9000340c:	1862      	adds	r2, r4, r1
9000340e:	4293      	cmp	r3, r2
90003410:	bf04      	itt	eq
90003412:	681a      	ldreq	r2, [r3, #0]
90003414:	685b      	ldreq	r3, [r3, #4]
90003416:	6063      	str	r3, [r4, #4]
90003418:	bf04      	itt	eq
9000341a:	1852      	addeq	r2, r2, r1
9000341c:	6022      	streq	r2, [r4, #0]
9000341e:	602c      	str	r4, [r5, #0]
90003420:	e7ec      	b.n	900033fc <_free_r+0x28>
90003422:	461a      	mov	r2, r3
90003424:	685b      	ldr	r3, [r3, #4]
90003426:	b10b      	cbz	r3, 9000342c <_free_r+0x58>
90003428:	42a3      	cmp	r3, r4
9000342a:	d9fa      	bls.n	90003422 <_free_r+0x4e>
9000342c:	6811      	ldr	r1, [r2, #0]
9000342e:	1855      	adds	r5, r2, r1
90003430:	42a5      	cmp	r5, r4
90003432:	d10b      	bne.n	9000344c <_free_r+0x78>
90003434:	6824      	ldr	r4, [r4, #0]
90003436:	4421      	add	r1, r4
90003438:	1854      	adds	r4, r2, r1
9000343a:	42a3      	cmp	r3, r4
9000343c:	6011      	str	r1, [r2, #0]
9000343e:	d1dd      	bne.n	900033fc <_free_r+0x28>
90003440:	681c      	ldr	r4, [r3, #0]
90003442:	685b      	ldr	r3, [r3, #4]
90003444:	6053      	str	r3, [r2, #4]
90003446:	4421      	add	r1, r4
90003448:	6011      	str	r1, [r2, #0]
9000344a:	e7d7      	b.n	900033fc <_free_r+0x28>
9000344c:	d902      	bls.n	90003454 <_free_r+0x80>
9000344e:	230c      	movs	r3, #12
90003450:	6003      	str	r3, [r0, #0]
90003452:	e7d3      	b.n	900033fc <_free_r+0x28>
90003454:	6825      	ldr	r5, [r4, #0]
90003456:	1961      	adds	r1, r4, r5
90003458:	428b      	cmp	r3, r1
9000345a:	bf04      	itt	eq
9000345c:	6819      	ldreq	r1, [r3, #0]
9000345e:	685b      	ldreq	r3, [r3, #4]
90003460:	6063      	str	r3, [r4, #4]
90003462:	bf04      	itt	eq
90003464:	1949      	addeq	r1, r1, r5
90003466:	6021      	streq	r1, [r4, #0]
90003468:	6054      	str	r4, [r2, #4]
9000346a:	e7c7      	b.n	900033fc <_free_r+0x28>
9000346c:	b003      	add	sp, #12
9000346e:	bd30      	pop	{r4, r5, pc}
90003470:	200004b4 	.word	0x200004b4

90003474 <_malloc_r>:
90003474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90003476:	1ccd      	adds	r5, r1, #3
90003478:	f025 0503 	bic.w	r5, r5, #3
9000347c:	3508      	adds	r5, #8
9000347e:	2d0c      	cmp	r5, #12
90003480:	bf38      	it	cc
90003482:	250c      	movcc	r5, #12
90003484:	2d00      	cmp	r5, #0
90003486:	4606      	mov	r6, r0
90003488:	db01      	blt.n	9000348e <_malloc_r+0x1a>
9000348a:	42a9      	cmp	r1, r5
9000348c:	d903      	bls.n	90003496 <_malloc_r+0x22>
9000348e:	230c      	movs	r3, #12
90003490:	6033      	str	r3, [r6, #0]
90003492:	2000      	movs	r0, #0
90003494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90003496:	f000 fbdf 	bl	90003c58 <__malloc_lock>
9000349a:	4921      	ldr	r1, [pc, #132]	; (90003520 <_malloc_r+0xac>)
9000349c:	680a      	ldr	r2, [r1, #0]
9000349e:	4614      	mov	r4, r2
900034a0:	b99c      	cbnz	r4, 900034ca <_malloc_r+0x56>
900034a2:	4f20      	ldr	r7, [pc, #128]	; (90003524 <_malloc_r+0xb0>)
900034a4:	683b      	ldr	r3, [r7, #0]
900034a6:	b923      	cbnz	r3, 900034b2 <_malloc_r+0x3e>
900034a8:	4621      	mov	r1, r4
900034aa:	4630      	mov	r0, r6
900034ac:	f000 fb2a 	bl	90003b04 <_sbrk_r>
900034b0:	6038      	str	r0, [r7, #0]
900034b2:	4629      	mov	r1, r5
900034b4:	4630      	mov	r0, r6
900034b6:	f000 fb25 	bl	90003b04 <_sbrk_r>
900034ba:	1c43      	adds	r3, r0, #1
900034bc:	d123      	bne.n	90003506 <_malloc_r+0x92>
900034be:	230c      	movs	r3, #12
900034c0:	6033      	str	r3, [r6, #0]
900034c2:	4630      	mov	r0, r6
900034c4:	f000 fbce 	bl	90003c64 <__malloc_unlock>
900034c8:	e7e3      	b.n	90003492 <_malloc_r+0x1e>
900034ca:	6823      	ldr	r3, [r4, #0]
900034cc:	1b5b      	subs	r3, r3, r5
900034ce:	d417      	bmi.n	90003500 <_malloc_r+0x8c>
900034d0:	2b0b      	cmp	r3, #11
900034d2:	d903      	bls.n	900034dc <_malloc_r+0x68>
900034d4:	6023      	str	r3, [r4, #0]
900034d6:	441c      	add	r4, r3
900034d8:	6025      	str	r5, [r4, #0]
900034da:	e004      	b.n	900034e6 <_malloc_r+0x72>
900034dc:	6863      	ldr	r3, [r4, #4]
900034de:	42a2      	cmp	r2, r4
900034e0:	bf0c      	ite	eq
900034e2:	600b      	streq	r3, [r1, #0]
900034e4:	6053      	strne	r3, [r2, #4]
900034e6:	4630      	mov	r0, r6
900034e8:	f000 fbbc 	bl	90003c64 <__malloc_unlock>
900034ec:	f104 000b 	add.w	r0, r4, #11
900034f0:	1d23      	adds	r3, r4, #4
900034f2:	f020 0007 	bic.w	r0, r0, #7
900034f6:	1ac2      	subs	r2, r0, r3
900034f8:	d0cc      	beq.n	90003494 <_malloc_r+0x20>
900034fa:	1a1b      	subs	r3, r3, r0
900034fc:	50a3      	str	r3, [r4, r2]
900034fe:	e7c9      	b.n	90003494 <_malloc_r+0x20>
90003500:	4622      	mov	r2, r4
90003502:	6864      	ldr	r4, [r4, #4]
90003504:	e7cc      	b.n	900034a0 <_malloc_r+0x2c>
90003506:	1cc4      	adds	r4, r0, #3
90003508:	f024 0403 	bic.w	r4, r4, #3
9000350c:	42a0      	cmp	r0, r4
9000350e:	d0e3      	beq.n	900034d8 <_malloc_r+0x64>
90003510:	1a21      	subs	r1, r4, r0
90003512:	4630      	mov	r0, r6
90003514:	f000 faf6 	bl	90003b04 <_sbrk_r>
90003518:	3001      	adds	r0, #1
9000351a:	d1dd      	bne.n	900034d8 <_malloc_r+0x64>
9000351c:	e7cf      	b.n	900034be <_malloc_r+0x4a>
9000351e:	bf00      	nop
90003520:	200004b4 	.word	0x200004b4
90003524:	200004b8 	.word	0x200004b8

90003528 <__sfputc_r>:
90003528:	6893      	ldr	r3, [r2, #8]
9000352a:	3b01      	subs	r3, #1
9000352c:	2b00      	cmp	r3, #0
9000352e:	b410      	push	{r4}
90003530:	6093      	str	r3, [r2, #8]
90003532:	da08      	bge.n	90003546 <__sfputc_r+0x1e>
90003534:	6994      	ldr	r4, [r2, #24]
90003536:	42a3      	cmp	r3, r4
90003538:	db01      	blt.n	9000353e <__sfputc_r+0x16>
9000353a:	290a      	cmp	r1, #10
9000353c:	d103      	bne.n	90003546 <__sfputc_r+0x1e>
9000353e:	f85d 4b04 	ldr.w	r4, [sp], #4
90003542:	f7ff bc69 	b.w	90002e18 <__swbuf_r>
90003546:	6813      	ldr	r3, [r2, #0]
90003548:	1c58      	adds	r0, r3, #1
9000354a:	6010      	str	r0, [r2, #0]
9000354c:	7019      	strb	r1, [r3, #0]
9000354e:	4608      	mov	r0, r1
90003550:	f85d 4b04 	ldr.w	r4, [sp], #4
90003554:	4770      	bx	lr

90003556 <__sfputs_r>:
90003556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90003558:	4606      	mov	r6, r0
9000355a:	460f      	mov	r7, r1
9000355c:	4614      	mov	r4, r2
9000355e:	18d5      	adds	r5, r2, r3
90003560:	42ac      	cmp	r4, r5
90003562:	d101      	bne.n	90003568 <__sfputs_r+0x12>
90003564:	2000      	movs	r0, #0
90003566:	e007      	b.n	90003578 <__sfputs_r+0x22>
90003568:	f814 1b01 	ldrb.w	r1, [r4], #1
9000356c:	463a      	mov	r2, r7
9000356e:	4630      	mov	r0, r6
90003570:	f7ff ffda 	bl	90003528 <__sfputc_r>
90003574:	1c43      	adds	r3, r0, #1
90003576:	d1f3      	bne.n	90003560 <__sfputs_r+0xa>
90003578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

9000357c <_vfiprintf_r>:
9000357c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90003580:	460d      	mov	r5, r1
90003582:	b09d      	sub	sp, #116	; 0x74
90003584:	4614      	mov	r4, r2
90003586:	4698      	mov	r8, r3
90003588:	4606      	mov	r6, r0
9000358a:	b118      	cbz	r0, 90003594 <_vfiprintf_r+0x18>
9000358c:	6983      	ldr	r3, [r0, #24]
9000358e:	b90b      	cbnz	r3, 90003594 <_vfiprintf_r+0x18>
90003590:	f7ff fe1c 	bl	900031cc <__sinit>
90003594:	4b89      	ldr	r3, [pc, #548]	; (900037bc <_vfiprintf_r+0x240>)
90003596:	429d      	cmp	r5, r3
90003598:	d11b      	bne.n	900035d2 <_vfiprintf_r+0x56>
9000359a:	6875      	ldr	r5, [r6, #4]
9000359c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9000359e:	07d9      	lsls	r1, r3, #31
900035a0:	d405      	bmi.n	900035ae <_vfiprintf_r+0x32>
900035a2:	89ab      	ldrh	r3, [r5, #12]
900035a4:	059a      	lsls	r2, r3, #22
900035a6:	d402      	bmi.n	900035ae <_vfiprintf_r+0x32>
900035a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
900035aa:	f7ff fead 	bl	90003308 <__retarget_lock_acquire_recursive>
900035ae:	89ab      	ldrh	r3, [r5, #12]
900035b0:	071b      	lsls	r3, r3, #28
900035b2:	d501      	bpl.n	900035b8 <_vfiprintf_r+0x3c>
900035b4:	692b      	ldr	r3, [r5, #16]
900035b6:	b9eb      	cbnz	r3, 900035f4 <_vfiprintf_r+0x78>
900035b8:	4629      	mov	r1, r5
900035ba:	4630      	mov	r0, r6
900035bc:	f7ff fc7e 	bl	90002ebc <__swsetup_r>
900035c0:	b1c0      	cbz	r0, 900035f4 <_vfiprintf_r+0x78>
900035c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
900035c4:	07dc      	lsls	r4, r3, #31
900035c6:	d50e      	bpl.n	900035e6 <_vfiprintf_r+0x6a>
900035c8:	f04f 30ff 	mov.w	r0, #4294967295
900035cc:	b01d      	add	sp, #116	; 0x74
900035ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900035d2:	4b7b      	ldr	r3, [pc, #492]	; (900037c0 <_vfiprintf_r+0x244>)
900035d4:	429d      	cmp	r5, r3
900035d6:	d101      	bne.n	900035dc <_vfiprintf_r+0x60>
900035d8:	68b5      	ldr	r5, [r6, #8]
900035da:	e7df      	b.n	9000359c <_vfiprintf_r+0x20>
900035dc:	4b79      	ldr	r3, [pc, #484]	; (900037c4 <_vfiprintf_r+0x248>)
900035de:	429d      	cmp	r5, r3
900035e0:	bf08      	it	eq
900035e2:	68f5      	ldreq	r5, [r6, #12]
900035e4:	e7da      	b.n	9000359c <_vfiprintf_r+0x20>
900035e6:	89ab      	ldrh	r3, [r5, #12]
900035e8:	0598      	lsls	r0, r3, #22
900035ea:	d4ed      	bmi.n	900035c8 <_vfiprintf_r+0x4c>
900035ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
900035ee:	f7ff fe8c 	bl	9000330a <__retarget_lock_release_recursive>
900035f2:	e7e9      	b.n	900035c8 <_vfiprintf_r+0x4c>
900035f4:	2300      	movs	r3, #0
900035f6:	9309      	str	r3, [sp, #36]	; 0x24
900035f8:	2320      	movs	r3, #32
900035fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
900035fe:	f8cd 800c 	str.w	r8, [sp, #12]
90003602:	2330      	movs	r3, #48	; 0x30
90003604:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 900037c8 <_vfiprintf_r+0x24c>
90003608:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
9000360c:	f04f 0901 	mov.w	r9, #1
90003610:	4623      	mov	r3, r4
90003612:	469a      	mov	sl, r3
90003614:	f813 2b01 	ldrb.w	r2, [r3], #1
90003618:	b10a      	cbz	r2, 9000361e <_vfiprintf_r+0xa2>
9000361a:	2a25      	cmp	r2, #37	; 0x25
9000361c:	d1f9      	bne.n	90003612 <_vfiprintf_r+0x96>
9000361e:	ebba 0b04 	subs.w	fp, sl, r4
90003622:	d00b      	beq.n	9000363c <_vfiprintf_r+0xc0>
90003624:	465b      	mov	r3, fp
90003626:	4622      	mov	r2, r4
90003628:	4629      	mov	r1, r5
9000362a:	4630      	mov	r0, r6
9000362c:	f7ff ff93 	bl	90003556 <__sfputs_r>
90003630:	3001      	adds	r0, #1
90003632:	f000 80aa 	beq.w	9000378a <_vfiprintf_r+0x20e>
90003636:	9a09      	ldr	r2, [sp, #36]	; 0x24
90003638:	445a      	add	r2, fp
9000363a:	9209      	str	r2, [sp, #36]	; 0x24
9000363c:	f89a 3000 	ldrb.w	r3, [sl]
90003640:	2b00      	cmp	r3, #0
90003642:	f000 80a2 	beq.w	9000378a <_vfiprintf_r+0x20e>
90003646:	2300      	movs	r3, #0
90003648:	f04f 32ff 	mov.w	r2, #4294967295
9000364c:	e9cd 2305 	strd	r2, r3, [sp, #20]
90003650:	f10a 0a01 	add.w	sl, sl, #1
90003654:	9304      	str	r3, [sp, #16]
90003656:	9307      	str	r3, [sp, #28]
90003658:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
9000365c:	931a      	str	r3, [sp, #104]	; 0x68
9000365e:	4654      	mov	r4, sl
90003660:	2205      	movs	r2, #5
90003662:	f814 1b01 	ldrb.w	r1, [r4], #1
90003666:	4858      	ldr	r0, [pc, #352]	; (900037c8 <_vfiprintf_r+0x24c>)
90003668:	f7fc fdd2 	bl	90000210 <memchr>
9000366c:	9a04      	ldr	r2, [sp, #16]
9000366e:	b9d8      	cbnz	r0, 900036a8 <_vfiprintf_r+0x12c>
90003670:	06d1      	lsls	r1, r2, #27
90003672:	bf44      	itt	mi
90003674:	2320      	movmi	r3, #32
90003676:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9000367a:	0713      	lsls	r3, r2, #28
9000367c:	bf44      	itt	mi
9000367e:	232b      	movmi	r3, #43	; 0x2b
90003680:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90003684:	f89a 3000 	ldrb.w	r3, [sl]
90003688:	2b2a      	cmp	r3, #42	; 0x2a
9000368a:	d015      	beq.n	900036b8 <_vfiprintf_r+0x13c>
9000368c:	9a07      	ldr	r2, [sp, #28]
9000368e:	4654      	mov	r4, sl
90003690:	2000      	movs	r0, #0
90003692:	f04f 0c0a 	mov.w	ip, #10
90003696:	4621      	mov	r1, r4
90003698:	f811 3b01 	ldrb.w	r3, [r1], #1
9000369c:	3b30      	subs	r3, #48	; 0x30
9000369e:	2b09      	cmp	r3, #9
900036a0:	d94e      	bls.n	90003740 <_vfiprintf_r+0x1c4>
900036a2:	b1b0      	cbz	r0, 900036d2 <_vfiprintf_r+0x156>
900036a4:	9207      	str	r2, [sp, #28]
900036a6:	e014      	b.n	900036d2 <_vfiprintf_r+0x156>
900036a8:	eba0 0308 	sub.w	r3, r0, r8
900036ac:	fa09 f303 	lsl.w	r3, r9, r3
900036b0:	4313      	orrs	r3, r2
900036b2:	9304      	str	r3, [sp, #16]
900036b4:	46a2      	mov	sl, r4
900036b6:	e7d2      	b.n	9000365e <_vfiprintf_r+0xe2>
900036b8:	9b03      	ldr	r3, [sp, #12]
900036ba:	1d19      	adds	r1, r3, #4
900036bc:	681b      	ldr	r3, [r3, #0]
900036be:	9103      	str	r1, [sp, #12]
900036c0:	2b00      	cmp	r3, #0
900036c2:	bfbb      	ittet	lt
900036c4:	425b      	neglt	r3, r3
900036c6:	f042 0202 	orrlt.w	r2, r2, #2
900036ca:	9307      	strge	r3, [sp, #28]
900036cc:	9307      	strlt	r3, [sp, #28]
900036ce:	bfb8      	it	lt
900036d0:	9204      	strlt	r2, [sp, #16]
900036d2:	7823      	ldrb	r3, [r4, #0]
900036d4:	2b2e      	cmp	r3, #46	; 0x2e
900036d6:	d10c      	bne.n	900036f2 <_vfiprintf_r+0x176>
900036d8:	7863      	ldrb	r3, [r4, #1]
900036da:	2b2a      	cmp	r3, #42	; 0x2a
900036dc:	d135      	bne.n	9000374a <_vfiprintf_r+0x1ce>
900036de:	9b03      	ldr	r3, [sp, #12]
900036e0:	1d1a      	adds	r2, r3, #4
900036e2:	681b      	ldr	r3, [r3, #0]
900036e4:	9203      	str	r2, [sp, #12]
900036e6:	2b00      	cmp	r3, #0
900036e8:	bfb8      	it	lt
900036ea:	f04f 33ff 	movlt.w	r3, #4294967295
900036ee:	3402      	adds	r4, #2
900036f0:	9305      	str	r3, [sp, #20]
900036f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 900037d8 <_vfiprintf_r+0x25c>
900036f6:	7821      	ldrb	r1, [r4, #0]
900036f8:	2203      	movs	r2, #3
900036fa:	4650      	mov	r0, sl
900036fc:	f7fc fd88 	bl	90000210 <memchr>
90003700:	b140      	cbz	r0, 90003714 <_vfiprintf_r+0x198>
90003702:	2340      	movs	r3, #64	; 0x40
90003704:	eba0 000a 	sub.w	r0, r0, sl
90003708:	fa03 f000 	lsl.w	r0, r3, r0
9000370c:	9b04      	ldr	r3, [sp, #16]
9000370e:	4303      	orrs	r3, r0
90003710:	3401      	adds	r4, #1
90003712:	9304      	str	r3, [sp, #16]
90003714:	f814 1b01 	ldrb.w	r1, [r4], #1
90003718:	482c      	ldr	r0, [pc, #176]	; (900037cc <_vfiprintf_r+0x250>)
9000371a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
9000371e:	2206      	movs	r2, #6
90003720:	f7fc fd76 	bl	90000210 <memchr>
90003724:	2800      	cmp	r0, #0
90003726:	d03f      	beq.n	900037a8 <_vfiprintf_r+0x22c>
90003728:	4b29      	ldr	r3, [pc, #164]	; (900037d0 <_vfiprintf_r+0x254>)
9000372a:	bb1b      	cbnz	r3, 90003774 <_vfiprintf_r+0x1f8>
9000372c:	9b03      	ldr	r3, [sp, #12]
9000372e:	3307      	adds	r3, #7
90003730:	f023 0307 	bic.w	r3, r3, #7
90003734:	3308      	adds	r3, #8
90003736:	9303      	str	r3, [sp, #12]
90003738:	9b09      	ldr	r3, [sp, #36]	; 0x24
9000373a:	443b      	add	r3, r7
9000373c:	9309      	str	r3, [sp, #36]	; 0x24
9000373e:	e767      	b.n	90003610 <_vfiprintf_r+0x94>
90003740:	fb0c 3202 	mla	r2, ip, r2, r3
90003744:	460c      	mov	r4, r1
90003746:	2001      	movs	r0, #1
90003748:	e7a5      	b.n	90003696 <_vfiprintf_r+0x11a>
9000374a:	2300      	movs	r3, #0
9000374c:	3401      	adds	r4, #1
9000374e:	9305      	str	r3, [sp, #20]
90003750:	4619      	mov	r1, r3
90003752:	f04f 0c0a 	mov.w	ip, #10
90003756:	4620      	mov	r0, r4
90003758:	f810 2b01 	ldrb.w	r2, [r0], #1
9000375c:	3a30      	subs	r2, #48	; 0x30
9000375e:	2a09      	cmp	r2, #9
90003760:	d903      	bls.n	9000376a <_vfiprintf_r+0x1ee>
90003762:	2b00      	cmp	r3, #0
90003764:	d0c5      	beq.n	900036f2 <_vfiprintf_r+0x176>
90003766:	9105      	str	r1, [sp, #20]
90003768:	e7c3      	b.n	900036f2 <_vfiprintf_r+0x176>
9000376a:	fb0c 2101 	mla	r1, ip, r1, r2
9000376e:	4604      	mov	r4, r0
90003770:	2301      	movs	r3, #1
90003772:	e7f0      	b.n	90003756 <_vfiprintf_r+0x1da>
90003774:	ab03      	add	r3, sp, #12
90003776:	9300      	str	r3, [sp, #0]
90003778:	462a      	mov	r2, r5
9000377a:	4b16      	ldr	r3, [pc, #88]	; (900037d4 <_vfiprintf_r+0x258>)
9000377c:	a904      	add	r1, sp, #16
9000377e:	4630      	mov	r0, r6
90003780:	f3af 8000 	nop.w
90003784:	4607      	mov	r7, r0
90003786:	1c78      	adds	r0, r7, #1
90003788:	d1d6      	bne.n	90003738 <_vfiprintf_r+0x1bc>
9000378a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9000378c:	07d9      	lsls	r1, r3, #31
9000378e:	d405      	bmi.n	9000379c <_vfiprintf_r+0x220>
90003790:	89ab      	ldrh	r3, [r5, #12]
90003792:	059a      	lsls	r2, r3, #22
90003794:	d402      	bmi.n	9000379c <_vfiprintf_r+0x220>
90003796:	6da8      	ldr	r0, [r5, #88]	; 0x58
90003798:	f7ff fdb7 	bl	9000330a <__retarget_lock_release_recursive>
9000379c:	89ab      	ldrh	r3, [r5, #12]
9000379e:	065b      	lsls	r3, r3, #25
900037a0:	f53f af12 	bmi.w	900035c8 <_vfiprintf_r+0x4c>
900037a4:	9809      	ldr	r0, [sp, #36]	; 0x24
900037a6:	e711      	b.n	900035cc <_vfiprintf_r+0x50>
900037a8:	ab03      	add	r3, sp, #12
900037aa:	9300      	str	r3, [sp, #0]
900037ac:	462a      	mov	r2, r5
900037ae:	4b09      	ldr	r3, [pc, #36]	; (900037d4 <_vfiprintf_r+0x258>)
900037b0:	a904      	add	r1, sp, #16
900037b2:	4630      	mov	r0, r6
900037b4:	f000 f880 	bl	900038b8 <_printf_i>
900037b8:	e7e4      	b.n	90003784 <_vfiprintf_r+0x208>
900037ba:	bf00      	nop
900037bc:	90007b04 	.word	0x90007b04
900037c0:	90007b24 	.word	0x90007b24
900037c4:	90007ae4 	.word	0x90007ae4
900037c8:	90007b44 	.word	0x90007b44
900037cc:	90007b4e 	.word	0x90007b4e
900037d0:	00000000 	.word	0x00000000
900037d4:	90003557 	.word	0x90003557
900037d8:	90007b4a 	.word	0x90007b4a

900037dc <_printf_common>:
900037dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900037e0:	4616      	mov	r6, r2
900037e2:	4699      	mov	r9, r3
900037e4:	688a      	ldr	r2, [r1, #8]
900037e6:	690b      	ldr	r3, [r1, #16]
900037e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
900037ec:	4293      	cmp	r3, r2
900037ee:	bfb8      	it	lt
900037f0:	4613      	movlt	r3, r2
900037f2:	6033      	str	r3, [r6, #0]
900037f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
900037f8:	4607      	mov	r7, r0
900037fa:	460c      	mov	r4, r1
900037fc:	b10a      	cbz	r2, 90003802 <_printf_common+0x26>
900037fe:	3301      	adds	r3, #1
90003800:	6033      	str	r3, [r6, #0]
90003802:	6823      	ldr	r3, [r4, #0]
90003804:	0699      	lsls	r1, r3, #26
90003806:	bf42      	ittt	mi
90003808:	6833      	ldrmi	r3, [r6, #0]
9000380a:	3302      	addmi	r3, #2
9000380c:	6033      	strmi	r3, [r6, #0]
9000380e:	6825      	ldr	r5, [r4, #0]
90003810:	f015 0506 	ands.w	r5, r5, #6
90003814:	d106      	bne.n	90003824 <_printf_common+0x48>
90003816:	f104 0a19 	add.w	sl, r4, #25
9000381a:	68e3      	ldr	r3, [r4, #12]
9000381c:	6832      	ldr	r2, [r6, #0]
9000381e:	1a9b      	subs	r3, r3, r2
90003820:	42ab      	cmp	r3, r5
90003822:	dc26      	bgt.n	90003872 <_printf_common+0x96>
90003824:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
90003828:	1e13      	subs	r3, r2, #0
9000382a:	6822      	ldr	r2, [r4, #0]
9000382c:	bf18      	it	ne
9000382e:	2301      	movne	r3, #1
90003830:	0692      	lsls	r2, r2, #26
90003832:	d42b      	bmi.n	9000388c <_printf_common+0xb0>
90003834:	f104 0243 	add.w	r2, r4, #67	; 0x43
90003838:	4649      	mov	r1, r9
9000383a:	4638      	mov	r0, r7
9000383c:	47c0      	blx	r8
9000383e:	3001      	adds	r0, #1
90003840:	d01e      	beq.n	90003880 <_printf_common+0xa4>
90003842:	6823      	ldr	r3, [r4, #0]
90003844:	68e5      	ldr	r5, [r4, #12]
90003846:	6832      	ldr	r2, [r6, #0]
90003848:	f003 0306 	and.w	r3, r3, #6
9000384c:	2b04      	cmp	r3, #4
9000384e:	bf08      	it	eq
90003850:	1aad      	subeq	r5, r5, r2
90003852:	68a3      	ldr	r3, [r4, #8]
90003854:	6922      	ldr	r2, [r4, #16]
90003856:	bf0c      	ite	eq
90003858:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
9000385c:	2500      	movne	r5, #0
9000385e:	4293      	cmp	r3, r2
90003860:	bfc4      	itt	gt
90003862:	1a9b      	subgt	r3, r3, r2
90003864:	18ed      	addgt	r5, r5, r3
90003866:	2600      	movs	r6, #0
90003868:	341a      	adds	r4, #26
9000386a:	42b5      	cmp	r5, r6
9000386c:	d11a      	bne.n	900038a4 <_printf_common+0xc8>
9000386e:	2000      	movs	r0, #0
90003870:	e008      	b.n	90003884 <_printf_common+0xa8>
90003872:	2301      	movs	r3, #1
90003874:	4652      	mov	r2, sl
90003876:	4649      	mov	r1, r9
90003878:	4638      	mov	r0, r7
9000387a:	47c0      	blx	r8
9000387c:	3001      	adds	r0, #1
9000387e:	d103      	bne.n	90003888 <_printf_common+0xac>
90003880:	f04f 30ff 	mov.w	r0, #4294967295
90003884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90003888:	3501      	adds	r5, #1
9000388a:	e7c6      	b.n	9000381a <_printf_common+0x3e>
9000388c:	18e1      	adds	r1, r4, r3
9000388e:	1c5a      	adds	r2, r3, #1
90003890:	2030      	movs	r0, #48	; 0x30
90003892:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
90003896:	4422      	add	r2, r4
90003898:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
9000389c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
900038a0:	3302      	adds	r3, #2
900038a2:	e7c7      	b.n	90003834 <_printf_common+0x58>
900038a4:	2301      	movs	r3, #1
900038a6:	4622      	mov	r2, r4
900038a8:	4649      	mov	r1, r9
900038aa:	4638      	mov	r0, r7
900038ac:	47c0      	blx	r8
900038ae:	3001      	adds	r0, #1
900038b0:	d0e6      	beq.n	90003880 <_printf_common+0xa4>
900038b2:	3601      	adds	r6, #1
900038b4:	e7d9      	b.n	9000386a <_printf_common+0x8e>
	...

900038b8 <_printf_i>:
900038b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
900038bc:	460c      	mov	r4, r1
900038be:	4691      	mov	r9, r2
900038c0:	7e27      	ldrb	r7, [r4, #24]
900038c2:	990c      	ldr	r1, [sp, #48]	; 0x30
900038c4:	2f78      	cmp	r7, #120	; 0x78
900038c6:	4680      	mov	r8, r0
900038c8:	469a      	mov	sl, r3
900038ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
900038ce:	d807      	bhi.n	900038e0 <_printf_i+0x28>
900038d0:	2f62      	cmp	r7, #98	; 0x62
900038d2:	d80a      	bhi.n	900038ea <_printf_i+0x32>
900038d4:	2f00      	cmp	r7, #0
900038d6:	f000 80d8 	beq.w	90003a8a <_printf_i+0x1d2>
900038da:	2f58      	cmp	r7, #88	; 0x58
900038dc:	f000 80a3 	beq.w	90003a26 <_printf_i+0x16e>
900038e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
900038e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
900038e8:	e03a      	b.n	90003960 <_printf_i+0xa8>
900038ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
900038ee:	2b15      	cmp	r3, #21
900038f0:	d8f6      	bhi.n	900038e0 <_printf_i+0x28>
900038f2:	a001      	add	r0, pc, #4	; (adr r0, 900038f8 <_printf_i+0x40>)
900038f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
900038f8:	90003951 	.word	0x90003951
900038fc:	90003965 	.word	0x90003965
90003900:	900038e1 	.word	0x900038e1
90003904:	900038e1 	.word	0x900038e1
90003908:	900038e1 	.word	0x900038e1
9000390c:	900038e1 	.word	0x900038e1
90003910:	90003965 	.word	0x90003965
90003914:	900038e1 	.word	0x900038e1
90003918:	900038e1 	.word	0x900038e1
9000391c:	900038e1 	.word	0x900038e1
90003920:	900038e1 	.word	0x900038e1
90003924:	90003a71 	.word	0x90003a71
90003928:	90003995 	.word	0x90003995
9000392c:	90003a53 	.word	0x90003a53
90003930:	900038e1 	.word	0x900038e1
90003934:	900038e1 	.word	0x900038e1
90003938:	90003a93 	.word	0x90003a93
9000393c:	900038e1 	.word	0x900038e1
90003940:	90003995 	.word	0x90003995
90003944:	900038e1 	.word	0x900038e1
90003948:	900038e1 	.word	0x900038e1
9000394c:	90003a5b 	.word	0x90003a5b
90003950:	680b      	ldr	r3, [r1, #0]
90003952:	1d1a      	adds	r2, r3, #4
90003954:	681b      	ldr	r3, [r3, #0]
90003956:	600a      	str	r2, [r1, #0]
90003958:	f104 0642 	add.w	r6, r4, #66	; 0x42
9000395c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
90003960:	2301      	movs	r3, #1
90003962:	e0a3      	b.n	90003aac <_printf_i+0x1f4>
90003964:	6825      	ldr	r5, [r4, #0]
90003966:	6808      	ldr	r0, [r1, #0]
90003968:	062e      	lsls	r6, r5, #24
9000396a:	f100 0304 	add.w	r3, r0, #4
9000396e:	d50a      	bpl.n	90003986 <_printf_i+0xce>
90003970:	6805      	ldr	r5, [r0, #0]
90003972:	600b      	str	r3, [r1, #0]
90003974:	2d00      	cmp	r5, #0
90003976:	da03      	bge.n	90003980 <_printf_i+0xc8>
90003978:	232d      	movs	r3, #45	; 0x2d
9000397a:	426d      	negs	r5, r5
9000397c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90003980:	485e      	ldr	r0, [pc, #376]	; (90003afc <_printf_i+0x244>)
90003982:	230a      	movs	r3, #10
90003984:	e019      	b.n	900039ba <_printf_i+0x102>
90003986:	f015 0f40 	tst.w	r5, #64	; 0x40
9000398a:	6805      	ldr	r5, [r0, #0]
9000398c:	600b      	str	r3, [r1, #0]
9000398e:	bf18      	it	ne
90003990:	b22d      	sxthne	r5, r5
90003992:	e7ef      	b.n	90003974 <_printf_i+0xbc>
90003994:	680b      	ldr	r3, [r1, #0]
90003996:	6825      	ldr	r5, [r4, #0]
90003998:	1d18      	adds	r0, r3, #4
9000399a:	6008      	str	r0, [r1, #0]
9000399c:	0628      	lsls	r0, r5, #24
9000399e:	d501      	bpl.n	900039a4 <_printf_i+0xec>
900039a0:	681d      	ldr	r5, [r3, #0]
900039a2:	e002      	b.n	900039aa <_printf_i+0xf2>
900039a4:	0669      	lsls	r1, r5, #25
900039a6:	d5fb      	bpl.n	900039a0 <_printf_i+0xe8>
900039a8:	881d      	ldrh	r5, [r3, #0]
900039aa:	4854      	ldr	r0, [pc, #336]	; (90003afc <_printf_i+0x244>)
900039ac:	2f6f      	cmp	r7, #111	; 0x6f
900039ae:	bf0c      	ite	eq
900039b0:	2308      	moveq	r3, #8
900039b2:	230a      	movne	r3, #10
900039b4:	2100      	movs	r1, #0
900039b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
900039ba:	6866      	ldr	r6, [r4, #4]
900039bc:	60a6      	str	r6, [r4, #8]
900039be:	2e00      	cmp	r6, #0
900039c0:	bfa2      	ittt	ge
900039c2:	6821      	ldrge	r1, [r4, #0]
900039c4:	f021 0104 	bicge.w	r1, r1, #4
900039c8:	6021      	strge	r1, [r4, #0]
900039ca:	b90d      	cbnz	r5, 900039d0 <_printf_i+0x118>
900039cc:	2e00      	cmp	r6, #0
900039ce:	d04d      	beq.n	90003a6c <_printf_i+0x1b4>
900039d0:	4616      	mov	r6, r2
900039d2:	fbb5 f1f3 	udiv	r1, r5, r3
900039d6:	fb03 5711 	mls	r7, r3, r1, r5
900039da:	5dc7      	ldrb	r7, [r0, r7]
900039dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
900039e0:	462f      	mov	r7, r5
900039e2:	42bb      	cmp	r3, r7
900039e4:	460d      	mov	r5, r1
900039e6:	d9f4      	bls.n	900039d2 <_printf_i+0x11a>
900039e8:	2b08      	cmp	r3, #8
900039ea:	d10b      	bne.n	90003a04 <_printf_i+0x14c>
900039ec:	6823      	ldr	r3, [r4, #0]
900039ee:	07df      	lsls	r7, r3, #31
900039f0:	d508      	bpl.n	90003a04 <_printf_i+0x14c>
900039f2:	6923      	ldr	r3, [r4, #16]
900039f4:	6861      	ldr	r1, [r4, #4]
900039f6:	4299      	cmp	r1, r3
900039f8:	bfde      	ittt	le
900039fa:	2330      	movle	r3, #48	; 0x30
900039fc:	f806 3c01 	strble.w	r3, [r6, #-1]
90003a00:	f106 36ff 	addle.w	r6, r6, #4294967295
90003a04:	1b92      	subs	r2, r2, r6
90003a06:	6122      	str	r2, [r4, #16]
90003a08:	f8cd a000 	str.w	sl, [sp]
90003a0c:	464b      	mov	r3, r9
90003a0e:	aa03      	add	r2, sp, #12
90003a10:	4621      	mov	r1, r4
90003a12:	4640      	mov	r0, r8
90003a14:	f7ff fee2 	bl	900037dc <_printf_common>
90003a18:	3001      	adds	r0, #1
90003a1a:	d14c      	bne.n	90003ab6 <_printf_i+0x1fe>
90003a1c:	f04f 30ff 	mov.w	r0, #4294967295
90003a20:	b004      	add	sp, #16
90003a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90003a26:	4835      	ldr	r0, [pc, #212]	; (90003afc <_printf_i+0x244>)
90003a28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
90003a2c:	6823      	ldr	r3, [r4, #0]
90003a2e:	680e      	ldr	r6, [r1, #0]
90003a30:	061f      	lsls	r7, r3, #24
90003a32:	f856 5b04 	ldr.w	r5, [r6], #4
90003a36:	600e      	str	r6, [r1, #0]
90003a38:	d514      	bpl.n	90003a64 <_printf_i+0x1ac>
90003a3a:	07d9      	lsls	r1, r3, #31
90003a3c:	bf44      	itt	mi
90003a3e:	f043 0320 	orrmi.w	r3, r3, #32
90003a42:	6023      	strmi	r3, [r4, #0]
90003a44:	b91d      	cbnz	r5, 90003a4e <_printf_i+0x196>
90003a46:	6823      	ldr	r3, [r4, #0]
90003a48:	f023 0320 	bic.w	r3, r3, #32
90003a4c:	6023      	str	r3, [r4, #0]
90003a4e:	2310      	movs	r3, #16
90003a50:	e7b0      	b.n	900039b4 <_printf_i+0xfc>
90003a52:	6823      	ldr	r3, [r4, #0]
90003a54:	f043 0320 	orr.w	r3, r3, #32
90003a58:	6023      	str	r3, [r4, #0]
90003a5a:	2378      	movs	r3, #120	; 0x78
90003a5c:	4828      	ldr	r0, [pc, #160]	; (90003b00 <_printf_i+0x248>)
90003a5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
90003a62:	e7e3      	b.n	90003a2c <_printf_i+0x174>
90003a64:	065e      	lsls	r6, r3, #25
90003a66:	bf48      	it	mi
90003a68:	b2ad      	uxthmi	r5, r5
90003a6a:	e7e6      	b.n	90003a3a <_printf_i+0x182>
90003a6c:	4616      	mov	r6, r2
90003a6e:	e7bb      	b.n	900039e8 <_printf_i+0x130>
90003a70:	680b      	ldr	r3, [r1, #0]
90003a72:	6826      	ldr	r6, [r4, #0]
90003a74:	6960      	ldr	r0, [r4, #20]
90003a76:	1d1d      	adds	r5, r3, #4
90003a78:	600d      	str	r5, [r1, #0]
90003a7a:	0635      	lsls	r5, r6, #24
90003a7c:	681b      	ldr	r3, [r3, #0]
90003a7e:	d501      	bpl.n	90003a84 <_printf_i+0x1cc>
90003a80:	6018      	str	r0, [r3, #0]
90003a82:	e002      	b.n	90003a8a <_printf_i+0x1d2>
90003a84:	0671      	lsls	r1, r6, #25
90003a86:	d5fb      	bpl.n	90003a80 <_printf_i+0x1c8>
90003a88:	8018      	strh	r0, [r3, #0]
90003a8a:	2300      	movs	r3, #0
90003a8c:	6123      	str	r3, [r4, #16]
90003a8e:	4616      	mov	r6, r2
90003a90:	e7ba      	b.n	90003a08 <_printf_i+0x150>
90003a92:	680b      	ldr	r3, [r1, #0]
90003a94:	1d1a      	adds	r2, r3, #4
90003a96:	600a      	str	r2, [r1, #0]
90003a98:	681e      	ldr	r6, [r3, #0]
90003a9a:	6862      	ldr	r2, [r4, #4]
90003a9c:	2100      	movs	r1, #0
90003a9e:	4630      	mov	r0, r6
90003aa0:	f7fc fbb6 	bl	90000210 <memchr>
90003aa4:	b108      	cbz	r0, 90003aaa <_printf_i+0x1f2>
90003aa6:	1b80      	subs	r0, r0, r6
90003aa8:	6060      	str	r0, [r4, #4]
90003aaa:	6863      	ldr	r3, [r4, #4]
90003aac:	6123      	str	r3, [r4, #16]
90003aae:	2300      	movs	r3, #0
90003ab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90003ab4:	e7a8      	b.n	90003a08 <_printf_i+0x150>
90003ab6:	6923      	ldr	r3, [r4, #16]
90003ab8:	4632      	mov	r2, r6
90003aba:	4649      	mov	r1, r9
90003abc:	4640      	mov	r0, r8
90003abe:	47d0      	blx	sl
90003ac0:	3001      	adds	r0, #1
90003ac2:	d0ab      	beq.n	90003a1c <_printf_i+0x164>
90003ac4:	6823      	ldr	r3, [r4, #0]
90003ac6:	079b      	lsls	r3, r3, #30
90003ac8:	d413      	bmi.n	90003af2 <_printf_i+0x23a>
90003aca:	68e0      	ldr	r0, [r4, #12]
90003acc:	9b03      	ldr	r3, [sp, #12]
90003ace:	4298      	cmp	r0, r3
90003ad0:	bfb8      	it	lt
90003ad2:	4618      	movlt	r0, r3
90003ad4:	e7a4      	b.n	90003a20 <_printf_i+0x168>
90003ad6:	2301      	movs	r3, #1
90003ad8:	4632      	mov	r2, r6
90003ada:	4649      	mov	r1, r9
90003adc:	4640      	mov	r0, r8
90003ade:	47d0      	blx	sl
90003ae0:	3001      	adds	r0, #1
90003ae2:	d09b      	beq.n	90003a1c <_printf_i+0x164>
90003ae4:	3501      	adds	r5, #1
90003ae6:	68e3      	ldr	r3, [r4, #12]
90003ae8:	9903      	ldr	r1, [sp, #12]
90003aea:	1a5b      	subs	r3, r3, r1
90003aec:	42ab      	cmp	r3, r5
90003aee:	dcf2      	bgt.n	90003ad6 <_printf_i+0x21e>
90003af0:	e7eb      	b.n	90003aca <_printf_i+0x212>
90003af2:	2500      	movs	r5, #0
90003af4:	f104 0619 	add.w	r6, r4, #25
90003af8:	e7f5      	b.n	90003ae6 <_printf_i+0x22e>
90003afa:	bf00      	nop
90003afc:	90007b55 	.word	0x90007b55
90003b00:	90007b66 	.word	0x90007b66

90003b04 <_sbrk_r>:
90003b04:	b538      	push	{r3, r4, r5, lr}
90003b06:	4d06      	ldr	r5, [pc, #24]	; (90003b20 <_sbrk_r+0x1c>)
90003b08:	2300      	movs	r3, #0
90003b0a:	4604      	mov	r4, r0
90003b0c:	4608      	mov	r0, r1
90003b0e:	602b      	str	r3, [r5, #0]
90003b10:	f7fe fe00 	bl	90002714 <_sbrk>
90003b14:	1c43      	adds	r3, r0, #1
90003b16:	d102      	bne.n	90003b1e <_sbrk_r+0x1a>
90003b18:	682b      	ldr	r3, [r5, #0]
90003b1a:	b103      	cbz	r3, 90003b1e <_sbrk_r+0x1a>
90003b1c:	6023      	str	r3, [r4, #0]
90003b1e:	bd38      	pop	{r3, r4, r5, pc}
90003b20:	20005220 	.word	0x20005220

90003b24 <__sread>:
90003b24:	b510      	push	{r4, lr}
90003b26:	460c      	mov	r4, r1
90003b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90003b2c:	f000 f8a0 	bl	90003c70 <_read_r>
90003b30:	2800      	cmp	r0, #0
90003b32:	bfab      	itete	ge
90003b34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
90003b36:	89a3      	ldrhlt	r3, [r4, #12]
90003b38:	181b      	addge	r3, r3, r0
90003b3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
90003b3e:	bfac      	ite	ge
90003b40:	6563      	strge	r3, [r4, #84]	; 0x54
90003b42:	81a3      	strhlt	r3, [r4, #12]
90003b44:	bd10      	pop	{r4, pc}

90003b46 <__swrite>:
90003b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90003b4a:	461f      	mov	r7, r3
90003b4c:	898b      	ldrh	r3, [r1, #12]
90003b4e:	05db      	lsls	r3, r3, #23
90003b50:	4605      	mov	r5, r0
90003b52:	460c      	mov	r4, r1
90003b54:	4616      	mov	r6, r2
90003b56:	d505      	bpl.n	90003b64 <__swrite+0x1e>
90003b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90003b5c:	2302      	movs	r3, #2
90003b5e:	2200      	movs	r2, #0
90003b60:	f000 f868 	bl	90003c34 <_lseek_r>
90003b64:	89a3      	ldrh	r3, [r4, #12]
90003b66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
90003b6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90003b6e:	81a3      	strh	r3, [r4, #12]
90003b70:	4632      	mov	r2, r6
90003b72:	463b      	mov	r3, r7
90003b74:	4628      	mov	r0, r5
90003b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90003b7a:	f000 b817 	b.w	90003bac <_write_r>

90003b7e <__sseek>:
90003b7e:	b510      	push	{r4, lr}
90003b80:	460c      	mov	r4, r1
90003b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90003b86:	f000 f855 	bl	90003c34 <_lseek_r>
90003b8a:	1c43      	adds	r3, r0, #1
90003b8c:	89a3      	ldrh	r3, [r4, #12]
90003b8e:	bf15      	itete	ne
90003b90:	6560      	strne	r0, [r4, #84]	; 0x54
90003b92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
90003b96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
90003b9a:	81a3      	strheq	r3, [r4, #12]
90003b9c:	bf18      	it	ne
90003b9e:	81a3      	strhne	r3, [r4, #12]
90003ba0:	bd10      	pop	{r4, pc}

90003ba2 <__sclose>:
90003ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90003ba6:	f000 b813 	b.w	90003bd0 <_close_r>
	...

90003bac <_write_r>:
90003bac:	b538      	push	{r3, r4, r5, lr}
90003bae:	4d07      	ldr	r5, [pc, #28]	; (90003bcc <_write_r+0x20>)
90003bb0:	4604      	mov	r4, r0
90003bb2:	4608      	mov	r0, r1
90003bb4:	4611      	mov	r1, r2
90003bb6:	2200      	movs	r2, #0
90003bb8:	602a      	str	r2, [r5, #0]
90003bba:	461a      	mov	r2, r3
90003bbc:	f7fe fd9c 	bl	900026f8 <_write>
90003bc0:	1c43      	adds	r3, r0, #1
90003bc2:	d102      	bne.n	90003bca <_write_r+0x1e>
90003bc4:	682b      	ldr	r3, [r5, #0]
90003bc6:	b103      	cbz	r3, 90003bca <_write_r+0x1e>
90003bc8:	6023      	str	r3, [r4, #0]
90003bca:	bd38      	pop	{r3, r4, r5, pc}
90003bcc:	20005220 	.word	0x20005220

90003bd0 <_close_r>:
90003bd0:	b538      	push	{r3, r4, r5, lr}
90003bd2:	4d06      	ldr	r5, [pc, #24]	; (90003bec <_close_r+0x1c>)
90003bd4:	2300      	movs	r3, #0
90003bd6:	4604      	mov	r4, r0
90003bd8:	4608      	mov	r0, r1
90003bda:	602b      	str	r3, [r5, #0]
90003bdc:	f7fe fdb4 	bl	90002748 <_close>
90003be0:	1c43      	adds	r3, r0, #1
90003be2:	d102      	bne.n	90003bea <_close_r+0x1a>
90003be4:	682b      	ldr	r3, [r5, #0]
90003be6:	b103      	cbz	r3, 90003bea <_close_r+0x1a>
90003be8:	6023      	str	r3, [r4, #0]
90003bea:	bd38      	pop	{r3, r4, r5, pc}
90003bec:	20005220 	.word	0x20005220

90003bf0 <_fstat_r>:
90003bf0:	b538      	push	{r3, r4, r5, lr}
90003bf2:	4d07      	ldr	r5, [pc, #28]	; (90003c10 <_fstat_r+0x20>)
90003bf4:	2300      	movs	r3, #0
90003bf6:	4604      	mov	r4, r0
90003bf8:	4608      	mov	r0, r1
90003bfa:	4611      	mov	r1, r2
90003bfc:	602b      	str	r3, [r5, #0]
90003bfe:	f7fe fda6 	bl	9000274e <_fstat>
90003c02:	1c43      	adds	r3, r0, #1
90003c04:	d102      	bne.n	90003c0c <_fstat_r+0x1c>
90003c06:	682b      	ldr	r3, [r5, #0]
90003c08:	b103      	cbz	r3, 90003c0c <_fstat_r+0x1c>
90003c0a:	6023      	str	r3, [r4, #0]
90003c0c:	bd38      	pop	{r3, r4, r5, pc}
90003c0e:	bf00      	nop
90003c10:	20005220 	.word	0x20005220

90003c14 <_isatty_r>:
90003c14:	b538      	push	{r3, r4, r5, lr}
90003c16:	4d06      	ldr	r5, [pc, #24]	; (90003c30 <_isatty_r+0x1c>)
90003c18:	2300      	movs	r3, #0
90003c1a:	4604      	mov	r4, r0
90003c1c:	4608      	mov	r0, r1
90003c1e:	602b      	str	r3, [r5, #0]
90003c20:	f7fe fd9a 	bl	90002758 <_isatty>
90003c24:	1c43      	adds	r3, r0, #1
90003c26:	d102      	bne.n	90003c2e <_isatty_r+0x1a>
90003c28:	682b      	ldr	r3, [r5, #0]
90003c2a:	b103      	cbz	r3, 90003c2e <_isatty_r+0x1a>
90003c2c:	6023      	str	r3, [r4, #0]
90003c2e:	bd38      	pop	{r3, r4, r5, pc}
90003c30:	20005220 	.word	0x20005220

90003c34 <_lseek_r>:
90003c34:	b538      	push	{r3, r4, r5, lr}
90003c36:	4d07      	ldr	r5, [pc, #28]	; (90003c54 <_lseek_r+0x20>)
90003c38:	4604      	mov	r4, r0
90003c3a:	4608      	mov	r0, r1
90003c3c:	4611      	mov	r1, r2
90003c3e:	2200      	movs	r2, #0
90003c40:	602a      	str	r2, [r5, #0]
90003c42:	461a      	mov	r2, r3
90003c44:	f7fe fd8a 	bl	9000275c <_lseek>
90003c48:	1c43      	adds	r3, r0, #1
90003c4a:	d102      	bne.n	90003c52 <_lseek_r+0x1e>
90003c4c:	682b      	ldr	r3, [r5, #0]
90003c4e:	b103      	cbz	r3, 90003c52 <_lseek_r+0x1e>
90003c50:	6023      	str	r3, [r4, #0]
90003c52:	bd38      	pop	{r3, r4, r5, pc}
90003c54:	20005220 	.word	0x20005220

90003c58 <__malloc_lock>:
90003c58:	4801      	ldr	r0, [pc, #4]	; (90003c60 <__malloc_lock+0x8>)
90003c5a:	f7ff bb55 	b.w	90003308 <__retarget_lock_acquire_recursive>
90003c5e:	bf00      	nop
90003c60:	2000521a 	.word	0x2000521a

90003c64 <__malloc_unlock>:
90003c64:	4801      	ldr	r0, [pc, #4]	; (90003c6c <__malloc_unlock+0x8>)
90003c66:	f7ff bb50 	b.w	9000330a <__retarget_lock_release_recursive>
90003c6a:	bf00      	nop
90003c6c:	2000521a 	.word	0x2000521a

90003c70 <_read_r>:
90003c70:	b538      	push	{r3, r4, r5, lr}
90003c72:	4d07      	ldr	r5, [pc, #28]	; (90003c90 <_read_r+0x20>)
90003c74:	4604      	mov	r4, r0
90003c76:	4608      	mov	r0, r1
90003c78:	4611      	mov	r1, r2
90003c7a:	2200      	movs	r2, #0
90003c7c:	602a      	str	r2, [r5, #0]
90003c7e:	461a      	mov	r2, r3
90003c80:	f7fe fd2d 	bl	900026de <_read>
90003c84:	1c43      	adds	r3, r0, #1
90003c86:	d102      	bne.n	90003c8e <_read_r+0x1e>
90003c88:	682b      	ldr	r3, [r5, #0]
90003c8a:	b103      	cbz	r3, 90003c8e <_read_r+0x1e>
90003c8c:	6023      	str	r3, [r4, #0]
90003c8e:	bd38      	pop	{r3, r4, r5, pc}
90003c90:	20005220 	.word	0x20005220

90003c94 <_init>:
90003c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90003c96:	bf00      	nop
90003c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
90003c9a:	bc08      	pop	{r3}
90003c9c:	469e      	mov	lr, r3
90003c9e:	4770      	bx	lr

90003ca0 <_fini>:
90003ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90003ca2:	bf00      	nop
90003ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
90003ca6:	bc08      	pop	{r3}
90003ca8:	469e      	mov	lr, r3
90003caa:	4770      	bx	lr
