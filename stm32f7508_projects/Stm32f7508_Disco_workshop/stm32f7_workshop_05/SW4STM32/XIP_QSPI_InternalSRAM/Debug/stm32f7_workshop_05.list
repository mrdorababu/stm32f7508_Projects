
stm32f7_workshop_05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  90000000  90000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054cc  900001d0  900001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004320  9000569c  9000569c  0001569c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  900099bc  900099bc  000199bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  900099c4  900099c4  000199c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  900099c8  900099c8  000199c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a8  20000000  900099cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000041cc  200000a8  90009a74  000200a8  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  20004274  90009a74  00024274  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002163a  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004bfe  00000000  00000000  00041712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00010468  00000000  00000000  00046310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001118  00000000  00000000  00056778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001740  00000000  00000000  00057890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000643d  00000000  00000000  00058fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001c56d  00000000  00000000  0005f40d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0010a328  00000000  00000000  0007b97a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00185ca2  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003bf4  00000000  00000000  00185cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900001d0 <__do_global_dtors_aux>:
900001d0:	b510      	push	{r4, lr}
900001d2:	4c05      	ldr	r4, [pc, #20]	; (900001e8 <__do_global_dtors_aux+0x18>)
900001d4:	7823      	ldrb	r3, [r4, #0]
900001d6:	b933      	cbnz	r3, 900001e6 <__do_global_dtors_aux+0x16>
900001d8:	4b04      	ldr	r3, [pc, #16]	; (900001ec <__do_global_dtors_aux+0x1c>)
900001da:	b113      	cbz	r3, 900001e2 <__do_global_dtors_aux+0x12>
900001dc:	4804      	ldr	r0, [pc, #16]	; (900001f0 <__do_global_dtors_aux+0x20>)
900001de:	f3af 8000 	nop.w
900001e2:	2301      	movs	r3, #1
900001e4:	7023      	strb	r3, [r4, #0]
900001e6:	bd10      	pop	{r4, pc}
900001e8:	200000a8 	.word	0x200000a8
900001ec:	00000000 	.word	0x00000000
900001f0:	90005684 	.word	0x90005684

900001f4 <frame_dummy>:
900001f4:	b508      	push	{r3, lr}
900001f6:	4b03      	ldr	r3, [pc, #12]	; (90000204 <frame_dummy+0x10>)
900001f8:	b11b      	cbz	r3, 90000202 <frame_dummy+0xe>
900001fa:	4903      	ldr	r1, [pc, #12]	; (90000208 <frame_dummy+0x14>)
900001fc:	4803      	ldr	r0, [pc, #12]	; (9000020c <frame_dummy+0x18>)
900001fe:	f3af 8000 	nop.w
90000202:	bd08      	pop	{r3, pc}
90000204:	00000000 	.word	0x00000000
90000208:	200000ac 	.word	0x200000ac
9000020c:	90005684 	.word	0x90005684

90000210 <memchr>:
90000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
90000214:	2a10      	cmp	r2, #16
90000216:	db2b      	blt.n	90000270 <memchr+0x60>
90000218:	f010 0f07 	tst.w	r0, #7
9000021c:	d008      	beq.n	90000230 <memchr+0x20>
9000021e:	f810 3b01 	ldrb.w	r3, [r0], #1
90000222:	3a01      	subs	r2, #1
90000224:	428b      	cmp	r3, r1
90000226:	d02d      	beq.n	90000284 <memchr+0x74>
90000228:	f010 0f07 	tst.w	r0, #7
9000022c:	b342      	cbz	r2, 90000280 <memchr+0x70>
9000022e:	d1f6      	bne.n	9000021e <memchr+0xe>
90000230:	b4f0      	push	{r4, r5, r6, r7}
90000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000023a:	f022 0407 	bic.w	r4, r2, #7
9000023e:	f07f 0700 	mvns.w	r7, #0
90000242:	2300      	movs	r3, #0
90000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000248:	3c08      	subs	r4, #8
9000024a:	ea85 0501 	eor.w	r5, r5, r1
9000024e:	ea86 0601 	eor.w	r6, r6, r1
90000252:	fa85 f547 	uadd8	r5, r5, r7
90000256:	faa3 f587 	sel	r5, r3, r7
9000025a:	fa86 f647 	uadd8	r6, r6, r7
9000025e:	faa5 f687 	sel	r6, r5, r7
90000262:	b98e      	cbnz	r6, 90000288 <memchr+0x78>
90000264:	d1ee      	bne.n	90000244 <memchr+0x34>
90000266:	bcf0      	pop	{r4, r5, r6, r7}
90000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
9000026c:	f002 0207 	and.w	r2, r2, #7
90000270:	b132      	cbz	r2, 90000280 <memchr+0x70>
90000272:	f810 3b01 	ldrb.w	r3, [r0], #1
90000276:	3a01      	subs	r2, #1
90000278:	ea83 0301 	eor.w	r3, r3, r1
9000027c:	b113      	cbz	r3, 90000284 <memchr+0x74>
9000027e:	d1f8      	bne.n	90000272 <memchr+0x62>
90000280:	2000      	movs	r0, #0
90000282:	4770      	bx	lr
90000284:	3801      	subs	r0, #1
90000286:	4770      	bx	lr
90000288:	2d00      	cmp	r5, #0
9000028a:	bf06      	itte	eq
9000028c:	4635      	moveq	r5, r6
9000028e:	3803      	subeq	r0, #3
90000290:	3807      	subne	r0, #7
90000292:	f015 0f01 	tst.w	r5, #1
90000296:	d107      	bne.n	900002a8 <memchr+0x98>
90000298:	3001      	adds	r0, #1
9000029a:	f415 7f80 	tst.w	r5, #256	; 0x100
9000029e:	bf02      	ittt	eq
900002a0:	3001      	addeq	r0, #1
900002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
900002a6:	3001      	addeq	r0, #1
900002a8:	bcf0      	pop	{r4, r5, r6, r7}
900002aa:	3801      	subs	r0, #1
900002ac:	4770      	bx	lr
900002ae:	bf00      	nop

900002b0 <__aeabi_drsub>:
900002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
900002b4:	e002      	b.n	900002bc <__adddf3>
900002b6:	bf00      	nop

900002b8 <__aeabi_dsub>:
900002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

900002bc <__adddf3>:
900002bc:	b530      	push	{r4, r5, lr}
900002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
900002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
900002c6:	ea94 0f05 	teq	r4, r5
900002ca:	bf08      	it	eq
900002cc:	ea90 0f02 	teqeq	r0, r2
900002d0:	bf1f      	itttt	ne
900002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
900002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
900002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
900002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
900002e2:	f000 80e2 	beq.w	900004aa <__adddf3+0x1ee>
900002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
900002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
900002ee:	bfb8      	it	lt
900002f0:	426d      	neglt	r5, r5
900002f2:	dd0c      	ble.n	9000030e <__adddf3+0x52>
900002f4:	442c      	add	r4, r5
900002f6:	ea80 0202 	eor.w	r2, r0, r2
900002fa:	ea81 0303 	eor.w	r3, r1, r3
900002fe:	ea82 0000 	eor.w	r0, r2, r0
90000302:	ea83 0101 	eor.w	r1, r3, r1
90000306:	ea80 0202 	eor.w	r2, r0, r2
9000030a:	ea81 0303 	eor.w	r3, r1, r3
9000030e:	2d36      	cmp	r5, #54	; 0x36
90000310:	bf88      	it	hi
90000312:	bd30      	pophi	{r4, r5, pc}
90000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
90000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
9000031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
90000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
90000324:	d002      	beq.n	9000032c <__adddf3+0x70>
90000326:	4240      	negs	r0, r0
90000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
9000032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
90000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
90000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
90000338:	d002      	beq.n	90000340 <__adddf3+0x84>
9000033a:	4252      	negs	r2, r2
9000033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
90000340:	ea94 0f05 	teq	r4, r5
90000344:	f000 80a7 	beq.w	90000496 <__adddf3+0x1da>
90000348:	f1a4 0401 	sub.w	r4, r4, #1
9000034c:	f1d5 0e20 	rsbs	lr, r5, #32
90000350:	db0d      	blt.n	9000036e <__adddf3+0xb2>
90000352:	fa02 fc0e 	lsl.w	ip, r2, lr
90000356:	fa22 f205 	lsr.w	r2, r2, r5
9000035a:	1880      	adds	r0, r0, r2
9000035c:	f141 0100 	adc.w	r1, r1, #0
90000360:	fa03 f20e 	lsl.w	r2, r3, lr
90000364:	1880      	adds	r0, r0, r2
90000366:	fa43 f305 	asr.w	r3, r3, r5
9000036a:	4159      	adcs	r1, r3
9000036c:	e00e      	b.n	9000038c <__adddf3+0xd0>
9000036e:	f1a5 0520 	sub.w	r5, r5, #32
90000372:	f10e 0e20 	add.w	lr, lr, #32
90000376:	2a01      	cmp	r2, #1
90000378:	fa03 fc0e 	lsl.w	ip, r3, lr
9000037c:	bf28      	it	cs
9000037e:	f04c 0c02 	orrcs.w	ip, ip, #2
90000382:	fa43 f305 	asr.w	r3, r3, r5
90000386:	18c0      	adds	r0, r0, r3
90000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
9000038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
90000390:	d507      	bpl.n	900003a2 <__adddf3+0xe6>
90000392:	f04f 0e00 	mov.w	lr, #0
90000396:	f1dc 0c00 	rsbs	ip, ip, #0
9000039a:	eb7e 0000 	sbcs.w	r0, lr, r0
9000039e:	eb6e 0101 	sbc.w	r1, lr, r1
900003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
900003a6:	d31b      	bcc.n	900003e0 <__adddf3+0x124>
900003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
900003ac:	d30c      	bcc.n	900003c8 <__adddf3+0x10c>
900003ae:	0849      	lsrs	r1, r1, #1
900003b0:	ea5f 0030 	movs.w	r0, r0, rrx
900003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
900003b8:	f104 0401 	add.w	r4, r4, #1
900003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
900003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
900003c4:	f080 809a 	bcs.w	900004fc <__adddf3+0x240>
900003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
900003cc:	bf08      	it	eq
900003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
900003d2:	f150 0000 	adcs.w	r0, r0, #0
900003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
900003da:	ea41 0105 	orr.w	r1, r1, r5
900003de:	bd30      	pop	{r4, r5, pc}
900003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
900003e4:	4140      	adcs	r0, r0
900003e6:	eb41 0101 	adc.w	r1, r1, r1
900003ea:	3c01      	subs	r4, #1
900003ec:	bf28      	it	cs
900003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
900003f2:	d2e9      	bcs.n	900003c8 <__adddf3+0x10c>
900003f4:	f091 0f00 	teq	r1, #0
900003f8:	bf04      	itt	eq
900003fa:	4601      	moveq	r1, r0
900003fc:	2000      	moveq	r0, #0
900003fe:	fab1 f381 	clz	r3, r1
90000402:	bf08      	it	eq
90000404:	3320      	addeq	r3, #32
90000406:	f1a3 030b 	sub.w	r3, r3, #11
9000040a:	f1b3 0220 	subs.w	r2, r3, #32
9000040e:	da0c      	bge.n	9000042a <__adddf3+0x16e>
90000410:	320c      	adds	r2, #12
90000412:	dd08      	ble.n	90000426 <__adddf3+0x16a>
90000414:	f102 0c14 	add.w	ip, r2, #20
90000418:	f1c2 020c 	rsb	r2, r2, #12
9000041c:	fa01 f00c 	lsl.w	r0, r1, ip
90000420:	fa21 f102 	lsr.w	r1, r1, r2
90000424:	e00c      	b.n	90000440 <__adddf3+0x184>
90000426:	f102 0214 	add.w	r2, r2, #20
9000042a:	bfd8      	it	le
9000042c:	f1c2 0c20 	rsble	ip, r2, #32
90000430:	fa01 f102 	lsl.w	r1, r1, r2
90000434:	fa20 fc0c 	lsr.w	ip, r0, ip
90000438:	bfdc      	itt	le
9000043a:	ea41 010c 	orrle.w	r1, r1, ip
9000043e:	4090      	lslle	r0, r2
90000440:	1ae4      	subs	r4, r4, r3
90000442:	bfa2      	ittt	ge
90000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
90000448:	4329      	orrge	r1, r5
9000044a:	bd30      	popge	{r4, r5, pc}
9000044c:	ea6f 0404 	mvn.w	r4, r4
90000450:	3c1f      	subs	r4, #31
90000452:	da1c      	bge.n	9000048e <__adddf3+0x1d2>
90000454:	340c      	adds	r4, #12
90000456:	dc0e      	bgt.n	90000476 <__adddf3+0x1ba>
90000458:	f104 0414 	add.w	r4, r4, #20
9000045c:	f1c4 0220 	rsb	r2, r4, #32
90000460:	fa20 f004 	lsr.w	r0, r0, r4
90000464:	fa01 f302 	lsl.w	r3, r1, r2
90000468:	ea40 0003 	orr.w	r0, r0, r3
9000046c:	fa21 f304 	lsr.w	r3, r1, r4
90000470:	ea45 0103 	orr.w	r1, r5, r3
90000474:	bd30      	pop	{r4, r5, pc}
90000476:	f1c4 040c 	rsb	r4, r4, #12
9000047a:	f1c4 0220 	rsb	r2, r4, #32
9000047e:	fa20 f002 	lsr.w	r0, r0, r2
90000482:	fa01 f304 	lsl.w	r3, r1, r4
90000486:	ea40 0003 	orr.w	r0, r0, r3
9000048a:	4629      	mov	r1, r5
9000048c:	bd30      	pop	{r4, r5, pc}
9000048e:	fa21 f004 	lsr.w	r0, r1, r4
90000492:	4629      	mov	r1, r5
90000494:	bd30      	pop	{r4, r5, pc}
90000496:	f094 0f00 	teq	r4, #0
9000049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
9000049e:	bf06      	itte	eq
900004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
900004a4:	3401      	addeq	r4, #1
900004a6:	3d01      	subne	r5, #1
900004a8:	e74e      	b.n	90000348 <__adddf3+0x8c>
900004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
900004ae:	bf18      	it	ne
900004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
900004b4:	d029      	beq.n	9000050a <__adddf3+0x24e>
900004b6:	ea94 0f05 	teq	r4, r5
900004ba:	bf08      	it	eq
900004bc:	ea90 0f02 	teqeq	r0, r2
900004c0:	d005      	beq.n	900004ce <__adddf3+0x212>
900004c2:	ea54 0c00 	orrs.w	ip, r4, r0
900004c6:	bf04      	itt	eq
900004c8:	4619      	moveq	r1, r3
900004ca:	4610      	moveq	r0, r2
900004cc:	bd30      	pop	{r4, r5, pc}
900004ce:	ea91 0f03 	teq	r1, r3
900004d2:	bf1e      	ittt	ne
900004d4:	2100      	movne	r1, #0
900004d6:	2000      	movne	r0, #0
900004d8:	bd30      	popne	{r4, r5, pc}
900004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
900004de:	d105      	bne.n	900004ec <__adddf3+0x230>
900004e0:	0040      	lsls	r0, r0, #1
900004e2:	4149      	adcs	r1, r1
900004e4:	bf28      	it	cs
900004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
900004ea:	bd30      	pop	{r4, r5, pc}
900004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
900004f0:	bf3c      	itt	cc
900004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
900004f6:	bd30      	popcc	{r4, r5, pc}
900004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
900004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
90000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
90000504:	f04f 0000 	mov.w	r0, #0
90000508:	bd30      	pop	{r4, r5, pc}
9000050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
9000050e:	bf1a      	itte	ne
90000510:	4619      	movne	r1, r3
90000512:	4610      	movne	r0, r2
90000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
90000518:	bf1c      	itt	ne
9000051a:	460b      	movne	r3, r1
9000051c:	4602      	movne	r2, r0
9000051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
90000522:	bf06      	itte	eq
90000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
90000528:	ea91 0f03 	teqeq	r1, r3
9000052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
90000530:	bd30      	pop	{r4, r5, pc}
90000532:	bf00      	nop

90000534 <__aeabi_ui2d>:
90000534:	f090 0f00 	teq	r0, #0
90000538:	bf04      	itt	eq
9000053a:	2100      	moveq	r1, #0
9000053c:	4770      	bxeq	lr
9000053e:	b530      	push	{r4, r5, lr}
90000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
90000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
90000548:	f04f 0500 	mov.w	r5, #0
9000054c:	f04f 0100 	mov.w	r1, #0
90000550:	e750      	b.n	900003f4 <__adddf3+0x138>
90000552:	bf00      	nop

90000554 <__aeabi_i2d>:
90000554:	f090 0f00 	teq	r0, #0
90000558:	bf04      	itt	eq
9000055a:	2100      	moveq	r1, #0
9000055c:	4770      	bxeq	lr
9000055e:	b530      	push	{r4, r5, lr}
90000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
90000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
90000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
9000056c:	bf48      	it	mi
9000056e:	4240      	negmi	r0, r0
90000570:	f04f 0100 	mov.w	r1, #0
90000574:	e73e      	b.n	900003f4 <__adddf3+0x138>
90000576:	bf00      	nop

90000578 <__aeabi_f2d>:
90000578:	0042      	lsls	r2, r0, #1
9000057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
9000057e:	ea4f 0131 	mov.w	r1, r1, rrx
90000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
90000586:	bf1f      	itttt	ne
90000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
9000058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
90000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
90000594:	4770      	bxne	lr
90000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
9000059a:	bf08      	it	eq
9000059c:	4770      	bxeq	lr
9000059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
900005a2:	bf04      	itt	eq
900005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
900005a8:	4770      	bxeq	lr
900005aa:	b530      	push	{r4, r5, lr}
900005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
900005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
900005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
900005b8:	e71c      	b.n	900003f4 <__adddf3+0x138>
900005ba:	bf00      	nop

900005bc <__aeabi_ul2d>:
900005bc:	ea50 0201 	orrs.w	r2, r0, r1
900005c0:	bf08      	it	eq
900005c2:	4770      	bxeq	lr
900005c4:	b530      	push	{r4, r5, lr}
900005c6:	f04f 0500 	mov.w	r5, #0
900005ca:	e00a      	b.n	900005e2 <__aeabi_l2d+0x16>

900005cc <__aeabi_l2d>:
900005cc:	ea50 0201 	orrs.w	r2, r0, r1
900005d0:	bf08      	it	eq
900005d2:	4770      	bxeq	lr
900005d4:	b530      	push	{r4, r5, lr}
900005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
900005da:	d502      	bpl.n	900005e2 <__aeabi_l2d+0x16>
900005dc:	4240      	negs	r0, r0
900005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
900005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
900005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
900005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
900005ee:	f43f aed8 	beq.w	900003a2 <__adddf3+0xe6>
900005f2:	f04f 0203 	mov.w	r2, #3
900005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
900005fa:	bf18      	it	ne
900005fc:	3203      	addne	r2, #3
900005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
90000602:	bf18      	it	ne
90000604:	3203      	addne	r2, #3
90000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
9000060a:	f1c2 0320 	rsb	r3, r2, #32
9000060e:	fa00 fc03 	lsl.w	ip, r0, r3
90000612:	fa20 f002 	lsr.w	r0, r0, r2
90000616:	fa01 fe03 	lsl.w	lr, r1, r3
9000061a:	ea40 000e 	orr.w	r0, r0, lr
9000061e:	fa21 f102 	lsr.w	r1, r1, r2
90000622:	4414      	add	r4, r2
90000624:	e6bd      	b.n	900003a2 <__adddf3+0xe6>
90000626:	bf00      	nop

90000628 <__aeabi_dmul>:
90000628:	b570      	push	{r4, r5, r6, lr}
9000062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
9000062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
90000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
90000636:	bf1d      	ittte	ne
90000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
9000063c:	ea94 0f0c 	teqne	r4, ip
90000640:	ea95 0f0c 	teqne	r5, ip
90000644:	f000 f8de 	bleq	90000804 <__aeabi_dmul+0x1dc>
90000648:	442c      	add	r4, r5
9000064a:	ea81 0603 	eor.w	r6, r1, r3
9000064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
90000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
90000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
9000065a:	bf18      	it	ne
9000065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
90000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
90000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
90000668:	d038      	beq.n	900006dc <__aeabi_dmul+0xb4>
9000066a:	fba0 ce02 	umull	ip, lr, r0, r2
9000066e:	f04f 0500 	mov.w	r5, #0
90000672:	fbe1 e502 	umlal	lr, r5, r1, r2
90000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
9000067a:	fbe0 e503 	umlal	lr, r5, r0, r3
9000067e:	f04f 0600 	mov.w	r6, #0
90000682:	fbe1 5603 	umlal	r5, r6, r1, r3
90000686:	f09c 0f00 	teq	ip, #0
9000068a:	bf18      	it	ne
9000068c:	f04e 0e01 	orrne.w	lr, lr, #1
90000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
90000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
90000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
9000069c:	d204      	bcs.n	900006a8 <__aeabi_dmul+0x80>
9000069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
900006a2:	416d      	adcs	r5, r5
900006a4:	eb46 0606 	adc.w	r6, r6, r6
900006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
900006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
900006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
900006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
900006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
900006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
900006c0:	bf88      	it	hi
900006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
900006c6:	d81e      	bhi.n	90000706 <__aeabi_dmul+0xde>
900006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
900006cc:	bf08      	it	eq
900006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
900006d2:	f150 0000 	adcs.w	r0, r0, #0
900006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
900006da:	bd70      	pop	{r4, r5, r6, pc}
900006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
900006e0:	ea46 0101 	orr.w	r1, r6, r1
900006e4:	ea40 0002 	orr.w	r0, r0, r2
900006e8:	ea81 0103 	eor.w	r1, r1, r3
900006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
900006f0:	bfc2      	ittt	gt
900006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
900006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
900006fa:	bd70      	popgt	{r4, r5, r6, pc}
900006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
90000700:	f04f 0e00 	mov.w	lr, #0
90000704:	3c01      	subs	r4, #1
90000706:	f300 80ab 	bgt.w	90000860 <__aeabi_dmul+0x238>
9000070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
9000070e:	bfde      	ittt	le
90000710:	2000      	movle	r0, #0
90000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
90000716:	bd70      	pople	{r4, r5, r6, pc}
90000718:	f1c4 0400 	rsb	r4, r4, #0
9000071c:	3c20      	subs	r4, #32
9000071e:	da35      	bge.n	9000078c <__aeabi_dmul+0x164>
90000720:	340c      	adds	r4, #12
90000722:	dc1b      	bgt.n	9000075c <__aeabi_dmul+0x134>
90000724:	f104 0414 	add.w	r4, r4, #20
90000728:	f1c4 0520 	rsb	r5, r4, #32
9000072c:	fa00 f305 	lsl.w	r3, r0, r5
90000730:	fa20 f004 	lsr.w	r0, r0, r4
90000734:	fa01 f205 	lsl.w	r2, r1, r5
90000738:	ea40 0002 	orr.w	r0, r0, r2
9000073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
90000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
90000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
90000748:	fa21 f604 	lsr.w	r6, r1, r4
9000074c:	eb42 0106 	adc.w	r1, r2, r6
90000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
90000754:	bf08      	it	eq
90000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
9000075a:	bd70      	pop	{r4, r5, r6, pc}
9000075c:	f1c4 040c 	rsb	r4, r4, #12
90000760:	f1c4 0520 	rsb	r5, r4, #32
90000764:	fa00 f304 	lsl.w	r3, r0, r4
90000768:	fa20 f005 	lsr.w	r0, r0, r5
9000076c:	fa01 f204 	lsl.w	r2, r1, r4
90000770:	ea40 0002 	orr.w	r0, r0, r2
90000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
90000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
9000077c:	f141 0100 	adc.w	r1, r1, #0
90000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
90000784:	bf08      	it	eq
90000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
9000078a:	bd70      	pop	{r4, r5, r6, pc}
9000078c:	f1c4 0520 	rsb	r5, r4, #32
90000790:	fa00 f205 	lsl.w	r2, r0, r5
90000794:	ea4e 0e02 	orr.w	lr, lr, r2
90000798:	fa20 f304 	lsr.w	r3, r0, r4
9000079c:	fa01 f205 	lsl.w	r2, r1, r5
900007a0:	ea43 0302 	orr.w	r3, r3, r2
900007a4:	fa21 f004 	lsr.w	r0, r1, r4
900007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
900007ac:	fa21 f204 	lsr.w	r2, r1, r4
900007b0:	ea20 0002 	bic.w	r0, r0, r2
900007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
900007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
900007bc:	bf08      	it	eq
900007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
900007c2:	bd70      	pop	{r4, r5, r6, pc}
900007c4:	f094 0f00 	teq	r4, #0
900007c8:	d10f      	bne.n	900007ea <__aeabi_dmul+0x1c2>
900007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
900007ce:	0040      	lsls	r0, r0, #1
900007d0:	eb41 0101 	adc.w	r1, r1, r1
900007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
900007d8:	bf08      	it	eq
900007da:	3c01      	subeq	r4, #1
900007dc:	d0f7      	beq.n	900007ce <__aeabi_dmul+0x1a6>
900007de:	ea41 0106 	orr.w	r1, r1, r6
900007e2:	f095 0f00 	teq	r5, #0
900007e6:	bf18      	it	ne
900007e8:	4770      	bxne	lr
900007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
900007ee:	0052      	lsls	r2, r2, #1
900007f0:	eb43 0303 	adc.w	r3, r3, r3
900007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
900007f8:	bf08      	it	eq
900007fa:	3d01      	subeq	r5, #1
900007fc:	d0f7      	beq.n	900007ee <__aeabi_dmul+0x1c6>
900007fe:	ea43 0306 	orr.w	r3, r3, r6
90000802:	4770      	bx	lr
90000804:	ea94 0f0c 	teq	r4, ip
90000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
9000080c:	bf18      	it	ne
9000080e:	ea95 0f0c 	teqne	r5, ip
90000812:	d00c      	beq.n	9000082e <__aeabi_dmul+0x206>
90000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
90000818:	bf18      	it	ne
9000081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
9000081e:	d1d1      	bne.n	900007c4 <__aeabi_dmul+0x19c>
90000820:	ea81 0103 	eor.w	r1, r1, r3
90000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
90000828:	f04f 0000 	mov.w	r0, #0
9000082c:	bd70      	pop	{r4, r5, r6, pc}
9000082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
90000832:	bf06      	itte	eq
90000834:	4610      	moveq	r0, r2
90000836:	4619      	moveq	r1, r3
90000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
9000083c:	d019      	beq.n	90000872 <__aeabi_dmul+0x24a>
9000083e:	ea94 0f0c 	teq	r4, ip
90000842:	d102      	bne.n	9000084a <__aeabi_dmul+0x222>
90000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
90000848:	d113      	bne.n	90000872 <__aeabi_dmul+0x24a>
9000084a:	ea95 0f0c 	teq	r5, ip
9000084e:	d105      	bne.n	9000085c <__aeabi_dmul+0x234>
90000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
90000854:	bf1c      	itt	ne
90000856:	4610      	movne	r0, r2
90000858:	4619      	movne	r1, r3
9000085a:	d10a      	bne.n	90000872 <__aeabi_dmul+0x24a>
9000085c:	ea81 0103 	eor.w	r1, r1, r3
90000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
90000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
90000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
9000086c:	f04f 0000 	mov.w	r0, #0
90000870:	bd70      	pop	{r4, r5, r6, pc}
90000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
90000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
9000087a:	bd70      	pop	{r4, r5, r6, pc}

9000087c <__aeabi_ddiv>:
9000087c:	b570      	push	{r4, r5, r6, lr}
9000087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
90000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
90000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
9000088a:	bf1d      	ittte	ne
9000088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
90000890:	ea94 0f0c 	teqne	r4, ip
90000894:	ea95 0f0c 	teqne	r5, ip
90000898:	f000 f8a7 	bleq	900009ea <__aeabi_ddiv+0x16e>
9000089c:	eba4 0405 	sub.w	r4, r4, r5
900008a0:	ea81 0e03 	eor.w	lr, r1, r3
900008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
900008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
900008ac:	f000 8088 	beq.w	900009c0 <__aeabi_ddiv+0x144>
900008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
900008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
900008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
900008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
900008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
900008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
900008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
900008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
900008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
900008d4:	429d      	cmp	r5, r3
900008d6:	bf08      	it	eq
900008d8:	4296      	cmpeq	r6, r2
900008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
900008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
900008e2:	d202      	bcs.n	900008ea <__aeabi_ddiv+0x6e>
900008e4:	085b      	lsrs	r3, r3, #1
900008e6:	ea4f 0232 	mov.w	r2, r2, rrx
900008ea:	1ab6      	subs	r6, r6, r2
900008ec:	eb65 0503 	sbc.w	r5, r5, r3
900008f0:	085b      	lsrs	r3, r3, #1
900008f2:	ea4f 0232 	mov.w	r2, r2, rrx
900008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
900008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
900008fe:	ebb6 0e02 	subs.w	lr, r6, r2
90000902:	eb75 0e03 	sbcs.w	lr, r5, r3
90000906:	bf22      	ittt	cs
90000908:	1ab6      	subcs	r6, r6, r2
9000090a:	4675      	movcs	r5, lr
9000090c:	ea40 000c 	orrcs.w	r0, r0, ip
90000910:	085b      	lsrs	r3, r3, #1
90000912:	ea4f 0232 	mov.w	r2, r2, rrx
90000916:	ebb6 0e02 	subs.w	lr, r6, r2
9000091a:	eb75 0e03 	sbcs.w	lr, r5, r3
9000091e:	bf22      	ittt	cs
90000920:	1ab6      	subcs	r6, r6, r2
90000922:	4675      	movcs	r5, lr
90000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
90000928:	085b      	lsrs	r3, r3, #1
9000092a:	ea4f 0232 	mov.w	r2, r2, rrx
9000092e:	ebb6 0e02 	subs.w	lr, r6, r2
90000932:	eb75 0e03 	sbcs.w	lr, r5, r3
90000936:	bf22      	ittt	cs
90000938:	1ab6      	subcs	r6, r6, r2
9000093a:	4675      	movcs	r5, lr
9000093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
90000940:	085b      	lsrs	r3, r3, #1
90000942:	ea4f 0232 	mov.w	r2, r2, rrx
90000946:	ebb6 0e02 	subs.w	lr, r6, r2
9000094a:	eb75 0e03 	sbcs.w	lr, r5, r3
9000094e:	bf22      	ittt	cs
90000950:	1ab6      	subcs	r6, r6, r2
90000952:	4675      	movcs	r5, lr
90000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
90000958:	ea55 0e06 	orrs.w	lr, r5, r6
9000095c:	d018      	beq.n	90000990 <__aeabi_ddiv+0x114>
9000095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
90000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
90000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
9000096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
9000096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
90000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
90000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
9000097a:	d1c0      	bne.n	900008fe <__aeabi_ddiv+0x82>
9000097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
90000980:	d10b      	bne.n	9000099a <__aeabi_ddiv+0x11e>
90000982:	ea41 0100 	orr.w	r1, r1, r0
90000986:	f04f 0000 	mov.w	r0, #0
9000098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
9000098e:	e7b6      	b.n	900008fe <__aeabi_ddiv+0x82>
90000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
90000994:	bf04      	itt	eq
90000996:	4301      	orreq	r1, r0
90000998:	2000      	moveq	r0, #0
9000099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
9000099e:	bf88      	it	hi
900009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
900009a4:	f63f aeaf 	bhi.w	90000706 <__aeabi_dmul+0xde>
900009a8:	ebb5 0c03 	subs.w	ip, r5, r3
900009ac:	bf04      	itt	eq
900009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
900009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
900009b6:	f150 0000 	adcs.w	r0, r0, #0
900009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
900009be:	bd70      	pop	{r4, r5, r6, pc}
900009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
900009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
900009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
900009cc:	bfc2      	ittt	gt
900009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
900009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
900009d6:	bd70      	popgt	{r4, r5, r6, pc}
900009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
900009dc:	f04f 0e00 	mov.w	lr, #0
900009e0:	3c01      	subs	r4, #1
900009e2:	e690      	b.n	90000706 <__aeabi_dmul+0xde>
900009e4:	ea45 0e06 	orr.w	lr, r5, r6
900009e8:	e68d      	b.n	90000706 <__aeabi_dmul+0xde>
900009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
900009ee:	ea94 0f0c 	teq	r4, ip
900009f2:	bf08      	it	eq
900009f4:	ea95 0f0c 	teqeq	r5, ip
900009f8:	f43f af3b 	beq.w	90000872 <__aeabi_dmul+0x24a>
900009fc:	ea94 0f0c 	teq	r4, ip
90000a00:	d10a      	bne.n	90000a18 <__aeabi_ddiv+0x19c>
90000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
90000a06:	f47f af34 	bne.w	90000872 <__aeabi_dmul+0x24a>
90000a0a:	ea95 0f0c 	teq	r5, ip
90000a0e:	f47f af25 	bne.w	9000085c <__aeabi_dmul+0x234>
90000a12:	4610      	mov	r0, r2
90000a14:	4619      	mov	r1, r3
90000a16:	e72c      	b.n	90000872 <__aeabi_dmul+0x24a>
90000a18:	ea95 0f0c 	teq	r5, ip
90000a1c:	d106      	bne.n	90000a2c <__aeabi_ddiv+0x1b0>
90000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
90000a22:	f43f aefd 	beq.w	90000820 <__aeabi_dmul+0x1f8>
90000a26:	4610      	mov	r0, r2
90000a28:	4619      	mov	r1, r3
90000a2a:	e722      	b.n	90000872 <__aeabi_dmul+0x24a>
90000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
90000a30:	bf18      	it	ne
90000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
90000a36:	f47f aec5 	bne.w	900007c4 <__aeabi_dmul+0x19c>
90000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
90000a3e:	f47f af0d 	bne.w	9000085c <__aeabi_dmul+0x234>
90000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
90000a46:	f47f aeeb 	bne.w	90000820 <__aeabi_dmul+0x1f8>
90000a4a:	e712      	b.n	90000872 <__aeabi_dmul+0x24a>

90000a4c <__gedf2>:
90000a4c:	f04f 3cff 	mov.w	ip, #4294967295
90000a50:	e006      	b.n	90000a60 <__cmpdf2+0x4>
90000a52:	bf00      	nop

90000a54 <__ledf2>:
90000a54:	f04f 0c01 	mov.w	ip, #1
90000a58:	e002      	b.n	90000a60 <__cmpdf2+0x4>
90000a5a:	bf00      	nop

90000a5c <__cmpdf2>:
90000a5c:	f04f 0c01 	mov.w	ip, #1
90000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
90000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
90000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
90000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
90000a70:	bf18      	it	ne
90000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
90000a76:	d01b      	beq.n	90000ab0 <__cmpdf2+0x54>
90000a78:	b001      	add	sp, #4
90000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
90000a7e:	bf0c      	ite	eq
90000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
90000a84:	ea91 0f03 	teqne	r1, r3
90000a88:	bf02      	ittt	eq
90000a8a:	ea90 0f02 	teqeq	r0, r2
90000a8e:	2000      	moveq	r0, #0
90000a90:	4770      	bxeq	lr
90000a92:	f110 0f00 	cmn.w	r0, #0
90000a96:	ea91 0f03 	teq	r1, r3
90000a9a:	bf58      	it	pl
90000a9c:	4299      	cmppl	r1, r3
90000a9e:	bf08      	it	eq
90000aa0:	4290      	cmpeq	r0, r2
90000aa2:	bf2c      	ite	cs
90000aa4:	17d8      	asrcs	r0, r3, #31
90000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
90000aaa:	f040 0001 	orr.w	r0, r0, #1
90000aae:	4770      	bx	lr
90000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
90000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
90000ab8:	d102      	bne.n	90000ac0 <__cmpdf2+0x64>
90000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
90000abe:	d107      	bne.n	90000ad0 <__cmpdf2+0x74>
90000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
90000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
90000ac8:	d1d6      	bne.n	90000a78 <__cmpdf2+0x1c>
90000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
90000ace:	d0d3      	beq.n	90000a78 <__cmpdf2+0x1c>
90000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
90000ad4:	4770      	bx	lr
90000ad6:	bf00      	nop

90000ad8 <__aeabi_cdrcmple>:
90000ad8:	4684      	mov	ip, r0
90000ada:	4610      	mov	r0, r2
90000adc:	4662      	mov	r2, ip
90000ade:	468c      	mov	ip, r1
90000ae0:	4619      	mov	r1, r3
90000ae2:	4663      	mov	r3, ip
90000ae4:	e000      	b.n	90000ae8 <__aeabi_cdcmpeq>
90000ae6:	bf00      	nop

90000ae8 <__aeabi_cdcmpeq>:
90000ae8:	b501      	push	{r0, lr}
90000aea:	f7ff ffb7 	bl	90000a5c <__cmpdf2>
90000aee:	2800      	cmp	r0, #0
90000af0:	bf48      	it	mi
90000af2:	f110 0f00 	cmnmi.w	r0, #0
90000af6:	bd01      	pop	{r0, pc}

90000af8 <__aeabi_dcmpeq>:
90000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
90000afc:	f7ff fff4 	bl	90000ae8 <__aeabi_cdcmpeq>
90000b00:	bf0c      	ite	eq
90000b02:	2001      	moveq	r0, #1
90000b04:	2000      	movne	r0, #0
90000b06:	f85d fb08 	ldr.w	pc, [sp], #8
90000b0a:	bf00      	nop

90000b0c <__aeabi_dcmplt>:
90000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
90000b10:	f7ff ffea 	bl	90000ae8 <__aeabi_cdcmpeq>
90000b14:	bf34      	ite	cc
90000b16:	2001      	movcc	r0, #1
90000b18:	2000      	movcs	r0, #0
90000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
90000b1e:	bf00      	nop

90000b20 <__aeabi_dcmple>:
90000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
90000b24:	f7ff ffe0 	bl	90000ae8 <__aeabi_cdcmpeq>
90000b28:	bf94      	ite	ls
90000b2a:	2001      	movls	r0, #1
90000b2c:	2000      	movhi	r0, #0
90000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
90000b32:	bf00      	nop

90000b34 <__aeabi_dcmpge>:
90000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
90000b38:	f7ff ffce 	bl	90000ad8 <__aeabi_cdrcmple>
90000b3c:	bf94      	ite	ls
90000b3e:	2001      	movls	r0, #1
90000b40:	2000      	movhi	r0, #0
90000b42:	f85d fb08 	ldr.w	pc, [sp], #8
90000b46:	bf00      	nop

90000b48 <__aeabi_dcmpgt>:
90000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
90000b4c:	f7ff ffc4 	bl	90000ad8 <__aeabi_cdrcmple>
90000b50:	bf34      	ite	cc
90000b52:	2001      	movcc	r0, #1
90000b54:	2000      	movcs	r0, #0
90000b56:	f85d fb08 	ldr.w	pc, [sp], #8
90000b5a:	bf00      	nop

90000b5c <__aeabi_d2uiz>:
90000b5c:	004a      	lsls	r2, r1, #1
90000b5e:	d211      	bcs.n	90000b84 <__aeabi_d2uiz+0x28>
90000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
90000b64:	d211      	bcs.n	90000b8a <__aeabi_d2uiz+0x2e>
90000b66:	d50d      	bpl.n	90000b84 <__aeabi_d2uiz+0x28>
90000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
90000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
90000b70:	d40e      	bmi.n	90000b90 <__aeabi_d2uiz+0x34>
90000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
90000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
90000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
90000b7e:	fa23 f002 	lsr.w	r0, r3, r2
90000b82:	4770      	bx	lr
90000b84:	f04f 0000 	mov.w	r0, #0
90000b88:	4770      	bx	lr
90000b8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
90000b8e:	d102      	bne.n	90000b96 <__aeabi_d2uiz+0x3a>
90000b90:	f04f 30ff 	mov.w	r0, #4294967295
90000b94:	4770      	bx	lr
90000b96:	f04f 0000 	mov.w	r0, #0
90000b9a:	4770      	bx	lr

90000b9c <__aeabi_uldivmod>:
90000b9c:	b953      	cbnz	r3, 90000bb4 <__aeabi_uldivmod+0x18>
90000b9e:	b94a      	cbnz	r2, 90000bb4 <__aeabi_uldivmod+0x18>
90000ba0:	2900      	cmp	r1, #0
90000ba2:	bf08      	it	eq
90000ba4:	2800      	cmpeq	r0, #0
90000ba6:	bf1c      	itt	ne
90000ba8:	f04f 31ff 	movne.w	r1, #4294967295
90000bac:	f04f 30ff 	movne.w	r0, #4294967295
90000bb0:	f000 b96e 	b.w	90000e90 <__aeabi_idiv0>
90000bb4:	f1ad 0c08 	sub.w	ip, sp, #8
90000bb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
90000bbc:	f000 f806 	bl	90000bcc <__udivmoddi4>
90000bc0:	f8dd e004 	ldr.w	lr, [sp, #4]
90000bc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
90000bc8:	b004      	add	sp, #16
90000bca:	4770      	bx	lr

90000bcc <__udivmoddi4>:
90000bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90000bd0:	9d08      	ldr	r5, [sp, #32]
90000bd2:	4604      	mov	r4, r0
90000bd4:	468c      	mov	ip, r1
90000bd6:	2b00      	cmp	r3, #0
90000bd8:	f040 8083 	bne.w	90000ce2 <__udivmoddi4+0x116>
90000bdc:	428a      	cmp	r2, r1
90000bde:	4617      	mov	r7, r2
90000be0:	d947      	bls.n	90000c72 <__udivmoddi4+0xa6>
90000be2:	fab2 f282 	clz	r2, r2
90000be6:	b142      	cbz	r2, 90000bfa <__udivmoddi4+0x2e>
90000be8:	f1c2 0020 	rsb	r0, r2, #32
90000bec:	fa24 f000 	lsr.w	r0, r4, r0
90000bf0:	4091      	lsls	r1, r2
90000bf2:	4097      	lsls	r7, r2
90000bf4:	ea40 0c01 	orr.w	ip, r0, r1
90000bf8:	4094      	lsls	r4, r2
90000bfa:	ea4f 4817 	mov.w	r8, r7, lsr #16
90000bfe:	0c23      	lsrs	r3, r4, #16
90000c00:	fbbc f6f8 	udiv	r6, ip, r8
90000c04:	fa1f fe87 	uxth.w	lr, r7
90000c08:	fb08 c116 	mls	r1, r8, r6, ip
90000c0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
90000c10:	fb06 f10e 	mul.w	r1, r6, lr
90000c14:	4299      	cmp	r1, r3
90000c16:	d909      	bls.n	90000c2c <__udivmoddi4+0x60>
90000c18:	18fb      	adds	r3, r7, r3
90000c1a:	f106 30ff 	add.w	r0, r6, #4294967295
90000c1e:	f080 8119 	bcs.w	90000e54 <__udivmoddi4+0x288>
90000c22:	4299      	cmp	r1, r3
90000c24:	f240 8116 	bls.w	90000e54 <__udivmoddi4+0x288>
90000c28:	3e02      	subs	r6, #2
90000c2a:	443b      	add	r3, r7
90000c2c:	1a5b      	subs	r3, r3, r1
90000c2e:	b2a4      	uxth	r4, r4
90000c30:	fbb3 f0f8 	udiv	r0, r3, r8
90000c34:	fb08 3310 	mls	r3, r8, r0, r3
90000c38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
90000c3c:	fb00 fe0e 	mul.w	lr, r0, lr
90000c40:	45a6      	cmp	lr, r4
90000c42:	d909      	bls.n	90000c58 <__udivmoddi4+0x8c>
90000c44:	193c      	adds	r4, r7, r4
90000c46:	f100 33ff 	add.w	r3, r0, #4294967295
90000c4a:	f080 8105 	bcs.w	90000e58 <__udivmoddi4+0x28c>
90000c4e:	45a6      	cmp	lr, r4
90000c50:	f240 8102 	bls.w	90000e58 <__udivmoddi4+0x28c>
90000c54:	3802      	subs	r0, #2
90000c56:	443c      	add	r4, r7
90000c58:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
90000c5c:	eba4 040e 	sub.w	r4, r4, lr
90000c60:	2600      	movs	r6, #0
90000c62:	b11d      	cbz	r5, 90000c6c <__udivmoddi4+0xa0>
90000c64:	40d4      	lsrs	r4, r2
90000c66:	2300      	movs	r3, #0
90000c68:	e9c5 4300 	strd	r4, r3, [r5]
90000c6c:	4631      	mov	r1, r6
90000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000c72:	b902      	cbnz	r2, 90000c76 <__udivmoddi4+0xaa>
90000c74:	deff      	udf	#255	; 0xff
90000c76:	fab2 f282 	clz	r2, r2
90000c7a:	2a00      	cmp	r2, #0
90000c7c:	d150      	bne.n	90000d20 <__udivmoddi4+0x154>
90000c7e:	1bcb      	subs	r3, r1, r7
90000c80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
90000c84:	fa1f f887 	uxth.w	r8, r7
90000c88:	2601      	movs	r6, #1
90000c8a:	fbb3 fcfe 	udiv	ip, r3, lr
90000c8e:	0c21      	lsrs	r1, r4, #16
90000c90:	fb0e 331c 	mls	r3, lr, ip, r3
90000c94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
90000c98:	fb08 f30c 	mul.w	r3, r8, ip
90000c9c:	428b      	cmp	r3, r1
90000c9e:	d907      	bls.n	90000cb0 <__udivmoddi4+0xe4>
90000ca0:	1879      	adds	r1, r7, r1
90000ca2:	f10c 30ff 	add.w	r0, ip, #4294967295
90000ca6:	d202      	bcs.n	90000cae <__udivmoddi4+0xe2>
90000ca8:	428b      	cmp	r3, r1
90000caa:	f200 80e9 	bhi.w	90000e80 <__udivmoddi4+0x2b4>
90000cae:	4684      	mov	ip, r0
90000cb0:	1ac9      	subs	r1, r1, r3
90000cb2:	b2a3      	uxth	r3, r4
90000cb4:	fbb1 f0fe 	udiv	r0, r1, lr
90000cb8:	fb0e 1110 	mls	r1, lr, r0, r1
90000cbc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
90000cc0:	fb08 f800 	mul.w	r8, r8, r0
90000cc4:	45a0      	cmp	r8, r4
90000cc6:	d907      	bls.n	90000cd8 <__udivmoddi4+0x10c>
90000cc8:	193c      	adds	r4, r7, r4
90000cca:	f100 33ff 	add.w	r3, r0, #4294967295
90000cce:	d202      	bcs.n	90000cd6 <__udivmoddi4+0x10a>
90000cd0:	45a0      	cmp	r8, r4
90000cd2:	f200 80d9 	bhi.w	90000e88 <__udivmoddi4+0x2bc>
90000cd6:	4618      	mov	r0, r3
90000cd8:	eba4 0408 	sub.w	r4, r4, r8
90000cdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
90000ce0:	e7bf      	b.n	90000c62 <__udivmoddi4+0x96>
90000ce2:	428b      	cmp	r3, r1
90000ce4:	d909      	bls.n	90000cfa <__udivmoddi4+0x12e>
90000ce6:	2d00      	cmp	r5, #0
90000ce8:	f000 80b1 	beq.w	90000e4e <__udivmoddi4+0x282>
90000cec:	2600      	movs	r6, #0
90000cee:	e9c5 0100 	strd	r0, r1, [r5]
90000cf2:	4630      	mov	r0, r6
90000cf4:	4631      	mov	r1, r6
90000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000cfa:	fab3 f683 	clz	r6, r3
90000cfe:	2e00      	cmp	r6, #0
90000d00:	d14a      	bne.n	90000d98 <__udivmoddi4+0x1cc>
90000d02:	428b      	cmp	r3, r1
90000d04:	d302      	bcc.n	90000d0c <__udivmoddi4+0x140>
90000d06:	4282      	cmp	r2, r0
90000d08:	f200 80b8 	bhi.w	90000e7c <__udivmoddi4+0x2b0>
90000d0c:	1a84      	subs	r4, r0, r2
90000d0e:	eb61 0103 	sbc.w	r1, r1, r3
90000d12:	2001      	movs	r0, #1
90000d14:	468c      	mov	ip, r1
90000d16:	2d00      	cmp	r5, #0
90000d18:	d0a8      	beq.n	90000c6c <__udivmoddi4+0xa0>
90000d1a:	e9c5 4c00 	strd	r4, ip, [r5]
90000d1e:	e7a5      	b.n	90000c6c <__udivmoddi4+0xa0>
90000d20:	f1c2 0320 	rsb	r3, r2, #32
90000d24:	fa20 f603 	lsr.w	r6, r0, r3
90000d28:	4097      	lsls	r7, r2
90000d2a:	fa01 f002 	lsl.w	r0, r1, r2
90000d2e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
90000d32:	40d9      	lsrs	r1, r3
90000d34:	4330      	orrs	r0, r6
90000d36:	0c03      	lsrs	r3, r0, #16
90000d38:	fbb1 f6fe 	udiv	r6, r1, lr
90000d3c:	fa1f f887 	uxth.w	r8, r7
90000d40:	fb0e 1116 	mls	r1, lr, r6, r1
90000d44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
90000d48:	fb06 f108 	mul.w	r1, r6, r8
90000d4c:	4299      	cmp	r1, r3
90000d4e:	fa04 f402 	lsl.w	r4, r4, r2
90000d52:	d909      	bls.n	90000d68 <__udivmoddi4+0x19c>
90000d54:	18fb      	adds	r3, r7, r3
90000d56:	f106 3cff 	add.w	ip, r6, #4294967295
90000d5a:	f080 808d 	bcs.w	90000e78 <__udivmoddi4+0x2ac>
90000d5e:	4299      	cmp	r1, r3
90000d60:	f240 808a 	bls.w	90000e78 <__udivmoddi4+0x2ac>
90000d64:	3e02      	subs	r6, #2
90000d66:	443b      	add	r3, r7
90000d68:	1a5b      	subs	r3, r3, r1
90000d6a:	b281      	uxth	r1, r0
90000d6c:	fbb3 f0fe 	udiv	r0, r3, lr
90000d70:	fb0e 3310 	mls	r3, lr, r0, r3
90000d74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
90000d78:	fb00 f308 	mul.w	r3, r0, r8
90000d7c:	428b      	cmp	r3, r1
90000d7e:	d907      	bls.n	90000d90 <__udivmoddi4+0x1c4>
90000d80:	1879      	adds	r1, r7, r1
90000d82:	f100 3cff 	add.w	ip, r0, #4294967295
90000d86:	d273      	bcs.n	90000e70 <__udivmoddi4+0x2a4>
90000d88:	428b      	cmp	r3, r1
90000d8a:	d971      	bls.n	90000e70 <__udivmoddi4+0x2a4>
90000d8c:	3802      	subs	r0, #2
90000d8e:	4439      	add	r1, r7
90000d90:	1acb      	subs	r3, r1, r3
90000d92:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
90000d96:	e778      	b.n	90000c8a <__udivmoddi4+0xbe>
90000d98:	f1c6 0c20 	rsb	ip, r6, #32
90000d9c:	fa03 f406 	lsl.w	r4, r3, r6
90000da0:	fa22 f30c 	lsr.w	r3, r2, ip
90000da4:	431c      	orrs	r4, r3
90000da6:	fa20 f70c 	lsr.w	r7, r0, ip
90000daa:	fa01 f306 	lsl.w	r3, r1, r6
90000dae:	ea4f 4e14 	mov.w	lr, r4, lsr #16
90000db2:	fa21 f10c 	lsr.w	r1, r1, ip
90000db6:	431f      	orrs	r7, r3
90000db8:	0c3b      	lsrs	r3, r7, #16
90000dba:	fbb1 f9fe 	udiv	r9, r1, lr
90000dbe:	fa1f f884 	uxth.w	r8, r4
90000dc2:	fb0e 1119 	mls	r1, lr, r9, r1
90000dc6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
90000dca:	fb09 fa08 	mul.w	sl, r9, r8
90000dce:	458a      	cmp	sl, r1
90000dd0:	fa02 f206 	lsl.w	r2, r2, r6
90000dd4:	fa00 f306 	lsl.w	r3, r0, r6
90000dd8:	d908      	bls.n	90000dec <__udivmoddi4+0x220>
90000dda:	1861      	adds	r1, r4, r1
90000ddc:	f109 30ff 	add.w	r0, r9, #4294967295
90000de0:	d248      	bcs.n	90000e74 <__udivmoddi4+0x2a8>
90000de2:	458a      	cmp	sl, r1
90000de4:	d946      	bls.n	90000e74 <__udivmoddi4+0x2a8>
90000de6:	f1a9 0902 	sub.w	r9, r9, #2
90000dea:	4421      	add	r1, r4
90000dec:	eba1 010a 	sub.w	r1, r1, sl
90000df0:	b2bf      	uxth	r7, r7
90000df2:	fbb1 f0fe 	udiv	r0, r1, lr
90000df6:	fb0e 1110 	mls	r1, lr, r0, r1
90000dfa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
90000dfe:	fb00 f808 	mul.w	r8, r0, r8
90000e02:	45b8      	cmp	r8, r7
90000e04:	d907      	bls.n	90000e16 <__udivmoddi4+0x24a>
90000e06:	19e7      	adds	r7, r4, r7
90000e08:	f100 31ff 	add.w	r1, r0, #4294967295
90000e0c:	d22e      	bcs.n	90000e6c <__udivmoddi4+0x2a0>
90000e0e:	45b8      	cmp	r8, r7
90000e10:	d92c      	bls.n	90000e6c <__udivmoddi4+0x2a0>
90000e12:	3802      	subs	r0, #2
90000e14:	4427      	add	r7, r4
90000e16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
90000e1a:	eba7 0708 	sub.w	r7, r7, r8
90000e1e:	fba0 8902 	umull	r8, r9, r0, r2
90000e22:	454f      	cmp	r7, r9
90000e24:	46c6      	mov	lr, r8
90000e26:	4649      	mov	r1, r9
90000e28:	d31a      	bcc.n	90000e60 <__udivmoddi4+0x294>
90000e2a:	d017      	beq.n	90000e5c <__udivmoddi4+0x290>
90000e2c:	b15d      	cbz	r5, 90000e46 <__udivmoddi4+0x27a>
90000e2e:	ebb3 020e 	subs.w	r2, r3, lr
90000e32:	eb67 0701 	sbc.w	r7, r7, r1
90000e36:	fa07 fc0c 	lsl.w	ip, r7, ip
90000e3a:	40f2      	lsrs	r2, r6
90000e3c:	ea4c 0202 	orr.w	r2, ip, r2
90000e40:	40f7      	lsrs	r7, r6
90000e42:	e9c5 2700 	strd	r2, r7, [r5]
90000e46:	2600      	movs	r6, #0
90000e48:	4631      	mov	r1, r6
90000e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000e4e:	462e      	mov	r6, r5
90000e50:	4628      	mov	r0, r5
90000e52:	e70b      	b.n	90000c6c <__udivmoddi4+0xa0>
90000e54:	4606      	mov	r6, r0
90000e56:	e6e9      	b.n	90000c2c <__udivmoddi4+0x60>
90000e58:	4618      	mov	r0, r3
90000e5a:	e6fd      	b.n	90000c58 <__udivmoddi4+0x8c>
90000e5c:	4543      	cmp	r3, r8
90000e5e:	d2e5      	bcs.n	90000e2c <__udivmoddi4+0x260>
90000e60:	ebb8 0e02 	subs.w	lr, r8, r2
90000e64:	eb69 0104 	sbc.w	r1, r9, r4
90000e68:	3801      	subs	r0, #1
90000e6a:	e7df      	b.n	90000e2c <__udivmoddi4+0x260>
90000e6c:	4608      	mov	r0, r1
90000e6e:	e7d2      	b.n	90000e16 <__udivmoddi4+0x24a>
90000e70:	4660      	mov	r0, ip
90000e72:	e78d      	b.n	90000d90 <__udivmoddi4+0x1c4>
90000e74:	4681      	mov	r9, r0
90000e76:	e7b9      	b.n	90000dec <__udivmoddi4+0x220>
90000e78:	4666      	mov	r6, ip
90000e7a:	e775      	b.n	90000d68 <__udivmoddi4+0x19c>
90000e7c:	4630      	mov	r0, r6
90000e7e:	e74a      	b.n	90000d16 <__udivmoddi4+0x14a>
90000e80:	f1ac 0c02 	sub.w	ip, ip, #2
90000e84:	4439      	add	r1, r7
90000e86:	e713      	b.n	90000cb0 <__udivmoddi4+0xe4>
90000e88:	3802      	subs	r0, #2
90000e8a:	443c      	add	r4, r7
90000e8c:	e724      	b.n	90000cd8 <__udivmoddi4+0x10c>
90000e8e:	bf00      	nop

90000e90 <__aeabi_idiv0>:
90000e90:	4770      	bx	lr
90000e92:	bf00      	nop

90000e94 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
90000e94:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
90000e98:	4c19      	ldr	r4, [pc, #100]	; (90000f00 <LL_FillBuffer+0x6c>)
{
90000e9a:	4698      	mov	r8, r3
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
90000e9c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
{
90000ea0:	460e      	mov	r6, r1
90000ea2:	4617      	mov	r7, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90000ea4:	2134      	movs	r1, #52	; 0x34
90000ea6:	4a17      	ldr	r2, [pc, #92]	; (90000f04 <LL_FillBuffer+0x70>)
{
90000ea8:	4681      	mov	r9, r0
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
90000eaa:	6063      	str	r3, [r4, #4]
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
90000eac:	4620      	mov	r0, r4
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90000eae:	6c23      	ldr	r3, [r4, #64]	; 0x40
{
90000eb0:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90000eb4:	fb01 2303 	mla	r3, r1, r3, r2
90000eb8:	6c9d      	ldr	r5, [r3, #72]	; 0x48
  hDma2dHandler.Init.OutputOffset = OffLine;      
90000eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
90000ebc:	2d02      	cmp	r5, #2
  hDma2dHandler.Init.OutputOffset = OffLine;      
90000ebe:	60e3      	str	r3, [r4, #12]
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
90000ec0:	bf18      	it	ne
90000ec2:	2500      	movne	r5, #0
  hDma2dHandler.Instance = DMA2D;
90000ec4:	4b10      	ldr	r3, [pc, #64]	; (90000f08 <LL_FillBuffer+0x74>)
90000ec6:	60a5      	str	r5, [r4, #8]
90000ec8:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
90000eca:	f000 ff2a 	bl	90001d22 <HAL_DMA2D_Init>
90000ece:	b9a0      	cbnz	r0, 90000efa <LL_FillBuffer+0x66>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
90000ed0:	4649      	mov	r1, r9
90000ed2:	4620      	mov	r0, r4
90000ed4:	f000 ffec 	bl	90001eb0 <HAL_DMA2D_ConfigLayer>
90000ed8:	b978      	cbnz	r0, 90000efa <LL_FillBuffer+0x66>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
90000eda:	463b      	mov	r3, r7
90000edc:	4632      	mov	r2, r6
90000ede:	4651      	mov	r1, sl
90000ee0:	4620      	mov	r0, r4
90000ee2:	f8cd 8000 	str.w	r8, [sp]
90000ee6:	f000 ff48 	bl	90001d7a <HAL_DMA2D_Start>
90000eea:	b930      	cbnz	r0, 90000efa <LL_FillBuffer+0x66>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
90000eec:	210a      	movs	r1, #10
90000eee:	4620      	mov	r0, r4
      }
    }
  } 
}
90000ef0:	b002      	add	sp, #8
90000ef2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
90000ef6:	f000 bf5a 	b.w	90001dae <HAL_DMA2D_PollForTransfer>
}
90000efa:	b002      	add	sp, #8
90000efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000f00:	200002ec 	.word	0x200002ec
90000f04:	200004dc 	.word	0x200004dc
90000f08:	4002b000 	.word	0x4002b000

90000f0c <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90000f0c:	4b03      	ldr	r3, [pc, #12]	; (90000f1c <BSP_LCD_GetXSize+0x10>)
90000f0e:	2134      	movs	r1, #52	; 0x34
90000f10:	4a03      	ldr	r2, [pc, #12]	; (90000f20 <BSP_LCD_GetXSize+0x14>)
90000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90000f14:	fb01 2303 	mla	r3, r1, r3, r2
}
90000f18:	6e18      	ldr	r0, [r3, #96]	; 0x60
90000f1a:	4770      	bx	lr
90000f1c:	200002ec 	.word	0x200002ec
90000f20:	200004dc 	.word	0x200004dc

90000f24 <BSP_LCD_LayerDefaultInit>:
{     
90000f24:	b570      	push	{r4, r5, r6, lr}
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90000f26:	4d18      	ldr	r5, [pc, #96]	; (90000f88 <BSP_LCD_LayerDefaultInit+0x64>)
{     
90000f28:	4604      	mov	r4, r0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90000f2a:	2634      	movs	r6, #52	; 0x34
90000f2c:	4817      	ldr	r0, [pc, #92]	; (90000f8c <BSP_LCD_LayerDefaultInit+0x68>)
90000f2e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
{     
90000f30:	b08e      	sub	sp, #56	; 0x38
  layer_cfg.WindowX0 = 0;
90000f32:	2300      	movs	r3, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90000f34:	fb06 0202 	mla	r2, r6, r2, r0
  layer_cfg.FBStartAdress = FB_Address;
90000f38:	910a      	str	r1, [sp, #40]	; 0x28
  layer_cfg.Alpha = 255;
90000f3a:	21ff      	movs	r1, #255	; 0xff
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90000f3c:	6e16      	ldr	r6, [r2, #96]	; 0x60
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
90000f3e:	6e52      	ldr	r2, [r2, #100]	; 0x64
  layer_cfg.WindowX0 = 0;
90000f40:	9301      	str	r3, [sp, #4]
  layer_cfg.Backcolor.Blue = 0;
90000f42:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Red = 0;
90000f46:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
90000f4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  layer_cfg.Alpha0 = 0;
90000f4e:	e9cd 1306 	strd	r1, r3, [sp, #24]
  layer_cfg.WindowY0 = 0;
90000f52:	e9cd 6302 	strd	r6, r3, [sp, #8]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
90000f56:	f44f 61c0 	mov.w	r1, #1536	; 0x600
90000f5a:	2307      	movs	r3, #7
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
90000f5c:	e9cd 620b 	strd	r6, r2, [sp, #44]	; 0x2c
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
90000f60:	e9cd 1308 	strd	r1, r3, [sp, #32]
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
90000f64:	4622      	mov	r2, r4
90000f66:	a901      	add	r1, sp, #4
90000f68:	f001 f9d6 	bl	90002318 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
90000f6c:	200c      	movs	r0, #12
90000f6e:	f04f 33ff 	mov.w	r3, #4294967295
90000f72:	fb00 5004 	mla	r0, r0, r4, r5
90000f76:	6483      	str	r3, [r0, #72]	; 0x48
  DrawProp[LayerIndex].pFont     = &Font24;
90000f78:	4b05      	ldr	r3, [pc, #20]	; (90000f90 <BSP_LCD_LayerDefaultInit+0x6c>)
90000f7a:	64c3      	str	r3, [r0, #76]	; 0x4c
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
90000f7c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
90000f80:	6443      	str	r3, [r0, #68]	; 0x44
}
90000f82:	b00e      	add	sp, #56	; 0x38
90000f84:	bd70      	pop	{r4, r5, r6, pc}
90000f86:	bf00      	nop
90000f88:	200002ec 	.word	0x200002ec
90000f8c:	200004dc 	.word	0x200004dc
90000f90:	20000000 	.word	0x20000000

90000f94 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
90000f94:	4b01      	ldr	r3, [pc, #4]	; (90000f9c <BSP_LCD_SelectLayer+0x8>)
90000f96:	6418      	str	r0, [r3, #64]	; 0x40
} 
90000f98:	4770      	bx	lr
90000f9a:	bf00      	nop
90000f9c:	200002ec 	.word	0x200002ec

90000fa0 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
90000fa0:	4a03      	ldr	r2, [pc, #12]	; (90000fb0 <BSP_LCD_SetTextColor+0x10>)
90000fa2:	210c      	movs	r1, #12
90000fa4:	6c13      	ldr	r3, [r2, #64]	; 0x40
90000fa6:	fb01 2303 	mla	r3, r1, r3, r2
90000faa:	6458      	str	r0, [r3, #68]	; 0x44
}
90000fac:	4770      	bx	lr
90000fae:	bf00      	nop
90000fb0:	200002ec 	.word	0x200002ec

90000fb4 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
90000fb4:	4a03      	ldr	r2, [pc, #12]	; (90000fc4 <BSP_LCD_SetBackColor+0x10>)
90000fb6:	210c      	movs	r1, #12
90000fb8:	6c13      	ldr	r3, [r2, #64]	; 0x40
90000fba:	fb01 2303 	mla	r3, r1, r3, r2
90000fbe:	6498      	str	r0, [r3, #72]	; 0x48
}
90000fc0:	4770      	bx	lr
90000fc2:	bf00      	nop
90000fc4:	200002ec 	.word	0x200002ec

90000fc8 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
90000fc8:	4a03      	ldr	r2, [pc, #12]	; (90000fd8 <BSP_LCD_SetFont+0x10>)
90000fca:	210c      	movs	r1, #12
90000fcc:	6c13      	ldr	r3, [r2, #64]	; 0x40
90000fce:	fb01 2303 	mla	r3, r1, r3, r2
90000fd2:	64d8      	str	r0, [r3, #76]	; 0x4c
}
90000fd4:	4770      	bx	lr
90000fd6:	bf00      	nop
90000fd8:	200002ec 	.word	0x200002ec

90000fdc <BSP_LCD_GetFont>:
  return DrawProp[ActiveLayer].pFont;
90000fdc:	4a03      	ldr	r2, [pc, #12]	; (90000fec <BSP_LCD_GetFont+0x10>)
90000fde:	210c      	movs	r1, #12
90000fe0:	6c13      	ldr	r3, [r2, #64]	; 0x40
90000fe2:	fb01 2303 	mla	r3, r1, r3, r2
}
90000fe6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
90000fe8:	4770      	bx	lr
90000fea:	bf00      	nop
90000fec:	200002ec 	.word	0x200002ec

90000ff0 <BSP_LCD_Clear>:
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
90000ff0:	4b08      	ldr	r3, [pc, #32]	; (90001014 <BSP_LCD_Clear+0x24>)
{ 
90000ff2:	b513      	push	{r0, r1, r4, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
90000ff4:	6c1c      	ldr	r4, [r3, #64]	; 0x40
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
90000ff6:	2134      	movs	r1, #52	; 0x34
90000ff8:	4b07      	ldr	r3, [pc, #28]	; (90001018 <BSP_LCD_Clear+0x28>)
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
90000ffa:	9001      	str	r0, [sp, #4]
90000ffc:	4620      	mov	r0, r4
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
90000ffe:	fb01 3104 	mla	r1, r1, r4, r3
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
90001002:	2300      	movs	r3, #0
90001004:	9300      	str	r3, [sp, #0]
90001006:	e9d1 2318 	ldrd	r2, r3, [r1, #96]	; 0x60
9000100a:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
9000100c:	f7ff ff42 	bl	90000e94 <LL_FillBuffer>
}
90001010:	b002      	add	sp, #8
90001012:	bd10      	pop	{r4, pc}
90001014:	200002ec 	.word	0x200002ec
90001018:	200004dc 	.word	0x200004dc

9000101c <BSP_LCD_DrawPixel>:
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
9000101c:	4b0a      	ldr	r3, [pc, #40]	; (90001048 <BSP_LCD_DrawPixel+0x2c>)
{
9000101e:	b530      	push	{r4, r5, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90001022:	2534      	movs	r5, #52	; 0x34
90001024:	4c09      	ldr	r4, [pc, #36]	; (9000104c <BSP_LCD_DrawPixel+0x30>)
90001026:	fb05 4303 	mla	r3, r5, r3, r4
9000102a:	e9d3 4517 	ldrd	r4, r5, [r3, #92]	; 0x5c
9000102e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90001030:	fb05 0101 	mla	r1, r5, r1, r0
90001034:	2b02      	cmp	r3, #2
90001036:	d103      	bne.n	90001040 <BSP_LCD_DrawPixel+0x24>
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
90001038:	b292      	uxth	r2, r2
9000103a:	f824 2011 	strh.w	r2, [r4, r1, lsl #1]
}
9000103e:	bd30      	pop	{r4, r5, pc}
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
90001040:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
}
90001044:	e7fb      	b.n	9000103e <BSP_LCD_DrawPixel+0x22>
90001046:	bf00      	nop
90001048:	200002ec 	.word	0x200002ec
9000104c:	200004dc 	.word	0x200004dc

90001050 <BSP_LCD_DisplayChar>:
{
90001050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90001054:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
90001056:	f1a2 0520 	sub.w	r5, r2, #32
  for(i = 0; i < height; i++)
9000105a:	f04f 0800 	mov.w	r8, #0
{
9000105e:	e9cd 0100 	strd	r0, r1, [sp]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
90001062:	4828      	ldr	r0, [pc, #160]	; (90001104 <BSP_LCD_DisplayChar+0xb4>)
90001064:	210c      	movs	r1, #12
90001066:	f8d0 b040 	ldr.w	fp, [r0, #64]	; 0x40
9000106a:	fb01 010b 	mla	r1, r1, fp, r0
9000106e:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
90001070:	f8b1 9004 	ldrh.w	r9, [r1, #4]
90001074:	f8b1 a006 	ldrh.w	sl, [r1, #6]
90001078:	f109 0607 	add.w	r6, r9, #7
9000107c:	680a      	ldr	r2, [r1, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
9000107e:	fb0a f505 	mul.w	r5, sl, r5
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
90001082:	10f6      	asrs	r6, r6, #3
  offset =  8 *((width + 7)/8) -  width ;
90001084:	ebc9 00c6 	rsb	r0, r9, r6, lsl #3
  for(i = 0; i < height; i++)
90001088:	fb06 2505 	mla	r5, r6, r5, r2
      if(line & (1 << (width- j + offset- 1))) 
9000108c:	f109 32ff 	add.w	r2, r9, #4294967295
90001090:	fa52 f380 	uxtab	r3, r2, r0
90001094:	9302      	str	r3, [sp, #8]
90001096:	9b01      	ldr	r3, [sp, #4]
  for(i = 0; i < height; i++)
90001098:	45d0      	cmp	r8, sl
9000109a:	eb03 0108 	add.w	r1, r3, r8
9000109e:	b289      	uxth	r1, r1
900010a0:	d302      	bcc.n	900010a8 <BSP_LCD_DisplayChar+0x58>
}
900010a2:	b005      	add	sp, #20
900010a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
900010a8:	2e01      	cmp	r6, #1
900010aa:	782c      	ldrb	r4, [r5, #0]
900010ac:	d004      	beq.n	900010b8 <BSP_LCD_DisplayChar+0x68>
900010ae:	2e02      	cmp	r6, #2
900010b0:	d109      	bne.n	900010c6 <BSP_LCD_DisplayChar+0x76>
      line =  (pchar[0]<< 8) | pchar[1];      
900010b2:	882c      	ldrh	r4, [r5, #0]
900010b4:	ba64      	rev16	r4, r4
900010b6:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
900010b8:	2700      	movs	r7, #0
900010ba:	45b9      	cmp	r9, r7
900010bc:	d80a      	bhi.n	900010d4 <BSP_LCD_DisplayChar+0x84>
  for(i = 0; i < height; i++)
900010be:	f108 0801 	add.w	r8, r8, #1
900010c2:	4435      	add	r5, r6
900010c4:	e7e7      	b.n	90001096 <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
900010c6:	786a      	ldrb	r2, [r5, #1]
900010c8:	0424      	lsls	r4, r4, #16
900010ca:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
900010ce:	78aa      	ldrb	r2, [r5, #2]
900010d0:	4314      	orrs	r4, r2
      break;
900010d2:	e7f1      	b.n	900010b8 <BSP_LCD_DisplayChar+0x68>
      if(line & (1 << (width- j + offset- 1))) 
900010d4:	9b00      	ldr	r3, [sp, #0]
900010d6:	2201      	movs	r2, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
900010d8:	9103      	str	r1, [sp, #12]
900010da:	19d8      	adds	r0, r3, r7
      if(line & (1 << (width- j + offset- 1))) 
900010dc:	9b02      	ldr	r3, [sp, #8]
900010de:	eba3 0c07 	sub.w	ip, r3, r7
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
900010e2:	4b08      	ldr	r3, [pc, #32]	; (90001104 <BSP_LCD_DisplayChar+0xb4>)
900010e4:	b280      	uxth	r0, r0
    for (j = 0; j < width; j++)
900010e6:	3701      	adds	r7, #1
      if(line & (1 << (width- j + offset- 1))) 
900010e8:	fa02 f20c 	lsl.w	r2, r2, ip
900010ec:	4222      	tst	r2, r4
900010ee:	f04f 020c 	mov.w	r2, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
900010f2:	fb02 320b 	mla	r2, r2, fp, r3
900010f6:	bf14      	ite	ne
900010f8:	6c52      	ldrne	r2, [r2, #68]	; 0x44
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
900010fa:	6c92      	ldreq	r2, [r2, #72]	; 0x48
900010fc:	f7ff ff8e 	bl	9000101c <BSP_LCD_DrawPixel>
90001100:	9903      	ldr	r1, [sp, #12]
    for (j = 0; j < width; j++)
90001102:	e7da      	b.n	900010ba <BSP_LCD_DisplayChar+0x6a>
90001104:	200002ec 	.word	0x200002ec

90001108 <BSP_LCD_DisplayStringAt>:
{
90001108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000110c:	4605      	mov	r5, r0
9000110e:	468a      	mov	sl, r1
90001110:	4616      	mov	r6, r2
  while (*ptr++) size ++ ;
90001112:	4614      	mov	r4, r2
90001114:	f812 0b01 	ldrb.w	r0, [r2], #1
90001118:	2800      	cmp	r0, #0
9000111a:	d1fa      	bne.n	90001112 <BSP_LCD_DisplayStringAt+0xa>
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
9000111c:	4824      	ldr	r0, [pc, #144]	; (900011b0 <BSP_LCD_DisplayStringAt+0xa8>)
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
9000111e:	220c      	movs	r2, #12
  switch (Mode)
90001120:	2b01      	cmp	r3, #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90001122:	6c01      	ldr	r1, [r0, #64]	; 0x40
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
90001124:	fb02 0201 	mla	r2, r2, r1, r0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90001128:	f04f 0034 	mov.w	r0, #52	; 0x34
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
9000112c:	6cd7      	ldr	r7, [r2, #76]	; 0x4c
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
9000112e:	4a21      	ldr	r2, [pc, #132]	; (900011b4 <BSP_LCD_DisplayStringAt+0xac>)
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
90001130:	f8b7 e004 	ldrh.w	lr, [r7, #4]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90001134:	fb00 2001 	mla	r0, r0, r1, r2
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
90001138:	6e00      	ldr	r0, [r0, #96]	; 0x60
9000113a:	fbb0 f0fe 	udiv	r0, r0, lr
  switch (Mode)
9000113e:	d021      	beq.n	90001184 <BSP_LCD_DisplayStringAt+0x7c>
90001140:	2b02      	cmp	r3, #2
90001142:	d027      	beq.n	90001194 <BSP_LCD_DisplayStringAt+0x8c>
  if ((ref_column < 1) || (ref_column >= 0x8000))
90001144:	b22b      	sxth	r3, r5
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90001146:	f04f 0834 	mov.w	r8, #52	; 0x34
    ref_column = 1;
9000114a:	f04f 0900 	mov.w	r9, #0
9000114e:	2b00      	cmp	r3, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90001150:	fb08 2801 	mla	r8, r8, r1, r2
    ref_column = 1;
90001154:	bfd8      	it	le
90001156:	2501      	movle	r5, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
90001158:	88bc      	ldrh	r4, [r7, #4]
9000115a:	fa1f f389 	uxth.w	r3, r9
9000115e:	f8d8 0060 	ldr.w	r0, [r8, #96]	; 0x60
90001162:	f816 2009 	ldrb.w	r2, [r6, r9]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90001166:	f109 0901 	add.w	r9, r9, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
9000116a:	fb04 0313 	mls	r3, r4, r3, r0
9000116e:	b29b      	uxth	r3, r3
90001170:	42a3      	cmp	r3, r4
90001172:	bf34      	ite	cc
90001174:	2300      	movcc	r3, #0
90001176:	2301      	movcs	r3, #1
90001178:	2a00      	cmp	r2, #0
9000117a:	bf08      	it	eq
9000117c:	2300      	moveq	r3, #0
9000117e:	b97b      	cbnz	r3, 900011a0 <BSP_LCD_DisplayStringAt+0x98>
}
90001180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
90001184:	1b34      	subs	r4, r6, r4
90001186:	4404      	add	r4, r0
90001188:	fb0e f404 	mul.w	r4, lr, r4
9000118c:	eb05 0054 	add.w	r0, r5, r4, lsr #1
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
90001190:	b285      	uxth	r5, r0
      break;
90001192:	e7d7      	b.n	90001144 <BSP_LCD_DisplayStringAt+0x3c>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
90001194:	1b34      	subs	r4, r6, r4
90001196:	4404      	add	r4, r0
90001198:	fb14 f40e 	smulbb	r4, r4, lr
9000119c:	1b60      	subs	r0, r4, r5
9000119e:	e7f7      	b.n	90001190 <BSP_LCD_DisplayStringAt+0x88>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
900011a0:	4628      	mov	r0, r5
900011a2:	4651      	mov	r1, sl
900011a4:	f7ff ff54 	bl	90001050 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
900011a8:	88b8      	ldrh	r0, [r7, #4]
900011aa:	4428      	add	r0, r5
900011ac:	b285      	uxth	r5, r0
    i++;
900011ae:	e7d3      	b.n	90001158 <BSP_LCD_DisplayStringAt+0x50>
900011b0:	200002ec 	.word	0x200002ec
900011b4:	200004dc 	.word	0x200004dc

900011b8 <BSP_LCD_DisplayStringAtLine>:
{  
900011b8:	b410      	push	{r4}
  return DrawProp[ActiveLayer].pFont;
900011ba:	4c08      	ldr	r4, [pc, #32]	; (900011dc <BSP_LCD_DisplayStringAtLine+0x24>)
{  
900011bc:	460a      	mov	r2, r1
  return DrawProp[ActiveLayer].pFont;
900011be:	210c      	movs	r1, #12
900011c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
900011c2:	fb01 4303 	mla	r3, r1, r3, r4
}
900011c6:	f85d 4b04 	ldr.w	r4, [sp], #4
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
900011ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900011cc:	88db      	ldrh	r3, [r3, #6]
900011ce:	fb13 f000 	smulbb	r0, r3, r0
900011d2:	2303      	movs	r3, #3
900011d4:	b281      	uxth	r1, r0
900011d6:	2000      	movs	r0, #0
900011d8:	f7ff bf96 	b.w	90001108 <BSP_LCD_DisplayStringAt>
900011dc:	200002ec 	.word	0x200002ec

900011e0 <BSP_LCD_FillRect>:
{
900011e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
900011e2:	4d0f      	ldr	r5, [pc, #60]	; (90001220 <BSP_LCD_FillRect+0x40>)
900011e4:	240c      	movs	r4, #12
900011e6:	6c2f      	ldr	r7, [r5, #64]	; 0x40
900011e8:	fb04 5407 	mla	r4, r4, r7, r5
900011ec:	2534      	movs	r5, #52	; 0x34
900011ee:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900011f2:	4c0c      	ldr	r4, [pc, #48]	; (90001224 <BSP_LCD_FillRect+0x44>)
900011f4:	fb05 4507 	mla	r5, r5, r7, r4
900011f8:	e9d5 4617 	ldrd	r4, r6, [r5, #92]	; 0x5c
900011fc:	fb06 0101 	mla	r1, r6, r1, r0
90001200:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
90001202:	1ab6      	subs	r6, r6, r2
90001204:	f8cd c004 	str.w	ip, [sp, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90001208:	2802      	cmp	r0, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
9000120a:	4638      	mov	r0, r7
9000120c:	9600      	str	r6, [sp, #0]
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
9000120e:	bf0c      	ite	eq
90001210:	eb04 0141 	addeq.w	r1, r4, r1, lsl #1
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001214:	eb04 0181 	addne.w	r1, r4, r1, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
90001218:	f7ff fe3c 	bl	90000e94 <LL_FillBuffer>
}
9000121c:	b003      	add	sp, #12
9000121e:	bdf0      	pop	{r4, r5, r6, r7, pc}
90001220:	200002ec 	.word	0x200002ec
90001224:	200004dc 	.word	0x200004dc

90001228 <BSP_LCD_DisplayOn>:
{
90001228:	b508      	push	{r3, lr}
  __HAL_LTDC_ENABLE(&hLtdcHandler);
9000122a:	4b09      	ldr	r3, [pc, #36]	; (90001250 <BSP_LCD_DisplayOn+0x28>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
9000122c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
90001230:	4808      	ldr	r0, [pc, #32]	; (90001254 <BSP_LCD_DisplayOn+0x2c>)
  __HAL_LTDC_ENABLE(&hLtdcHandler);
90001232:	681a      	ldr	r2, [r3, #0]
90001234:	6993      	ldr	r3, [r2, #24]
90001236:	f043 0301 	orr.w	r3, r3, #1
9000123a:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
9000123c:	2201      	movs	r2, #1
9000123e:	f000 ff65 	bl	9000210c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
90001242:	2201      	movs	r2, #1
90001244:	2108      	movs	r1, #8
90001246:	4804      	ldr	r0, [pc, #16]	; (90001258 <BSP_LCD_DisplayOn+0x30>)
}
90001248:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
9000124c:	f000 bf5e 	b.w	9000210c <HAL_GPIO_WritePin>
90001250:	200004dc 	.word	0x200004dc
90001254:	40022000 	.word	0x40022000
90001258:	40022800 	.word	0x40022800

9000125c <BSP_LCD_DisplayOff>:
{
9000125c:	b508      	push	{r3, lr}
  __HAL_LTDC_DISABLE(&hLtdcHandler);
9000125e:	4b09      	ldr	r3, [pc, #36]	; (90001284 <BSP_LCD_DisplayOff+0x28>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_RESET);      /* De-assert LCD_DISP pin */
90001260:	f44f 5180 	mov.w	r1, #4096	; 0x1000
90001264:	4808      	ldr	r0, [pc, #32]	; (90001288 <BSP_LCD_DisplayOff+0x2c>)
  __HAL_LTDC_DISABLE(&hLtdcHandler);
90001266:	681a      	ldr	r2, [r3, #0]
90001268:	6993      	ldr	r3, [r2, #24]
9000126a:	f023 0301 	bic.w	r3, r3, #1
9000126e:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_RESET);      /* De-assert LCD_DISP pin */
90001270:	2200      	movs	r2, #0
90001272:	f000 ff4b 	bl	9000210c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_RESET);/* De-assert LCD_BL_CTRL pin */
90001276:	2200      	movs	r2, #0
90001278:	2108      	movs	r1, #8
9000127a:	4804      	ldr	r0, [pc, #16]	; (9000128c <BSP_LCD_DisplayOff+0x30>)
}
9000127c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_RESET);/* De-assert LCD_BL_CTRL pin */
90001280:	f000 bf44 	b.w	9000210c <HAL_GPIO_WritePin>
90001284:	200004dc 	.word	0x200004dc
90001288:	40022000 	.word	0x40022000
9000128c:	40022800 	.word	0x40022800

90001290 <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
90001290:	4b4b      	ldr	r3, [pc, #300]	; (900013c0 <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90001292:	484c      	ldr	r0, [pc, #304]	; (900013c4 <BSP_LCD_MspInit+0x134>)
  __HAL_RCC_LTDC_CLK_ENABLE();
90001294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
90001296:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
{
9000129a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
9000129c:	645a      	str	r2, [r3, #68]	; 0x44
{
9000129e:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
900012a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
900012a2:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
900012a4:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
900012a6:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_LTDC_CLK_ENABLE();
900012a8:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  gpio_init_structure.Pin       = GPIO_PIN_12;
900012ac:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
900012b0:	4e45      	ldr	r6, [pc, #276]	; (900013c8 <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
900012b2:	9200      	str	r2, [sp, #0]
900012b4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
900012b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900012b8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
900012bc:	631a      	str	r2, [r3, #48]	; 0x30
900012be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900012c0:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
900012c4:	9201      	str	r2, [sp, #4]
900012c6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
900012c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900012ca:	f042 0210 	orr.w	r2, r2, #16
900012ce:	631a      	str	r2, [r3, #48]	; 0x30
900012d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900012d2:	f002 0210 	and.w	r2, r2, #16
900012d6:	9202      	str	r2, [sp, #8]
900012d8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
900012da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900012dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
900012e0:	631a      	str	r2, [r3, #48]	; 0x30
900012e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900012e4:	f002 0240 	and.w	r2, r2, #64	; 0x40
900012e8:	9203      	str	r2, [sp, #12]
900012ea:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
900012ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900012ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
900012f2:	631a      	str	r2, [r3, #48]	; 0x30
900012f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900012f6:	f402 7280 	and.w	r2, r2, #256	; 0x100
900012fa:	9204      	str	r2, [sp, #16]
900012fc:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
900012fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
90001304:	631a      	str	r2, [r3, #48]	; 0x30
90001306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001308:	f402 7200 	and.w	r2, r2, #512	; 0x200
9000130c:	9205      	str	r2, [sp, #20]
9000130e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
90001310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001312:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
90001316:	631a      	str	r2, [r3, #48]	; 0x30
90001318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000131a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
9000131e:	9206      	str	r2, [sp, #24]
90001320:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
90001322:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001324:	f442 7280 	orr.w	r2, r2, #256	; 0x100
90001328:	631a      	str	r2, [r3, #48]	; 0x30
9000132a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000132c:	f402 7280 	and.w	r2, r2, #256	; 0x100
90001330:	9207      	str	r2, [sp, #28]
90001332:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
90001334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001336:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
9000133a:	631a      	str	r2, [r3, #48]	; 0x30
9000133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
9000133e:	950d      	str	r5, [sp, #52]	; 0x34
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
90001340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
90001344:	9308      	str	r3, [sp, #32]
90001346:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001348:	2310      	movs	r3, #16
9000134a:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
9000134e:	2300      	movs	r3, #0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
90001350:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90001354:	f000 fdf4 	bl	90001f40 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
90001358:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
9000135a:	a909      	add	r1, sp, #36	; 0x24
9000135c:	481b      	ldr	r0, [pc, #108]	; (900013cc <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
9000135e:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001360:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90001364:	f000 fdec 	bl	90001f40 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
90001368:	f44f 4366 	mov.w	r3, #58880	; 0xe600
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
9000136c:	a909      	add	r1, sp, #36	; 0x24
9000136e:	4630      	mov	r0, r6
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90001370:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001372:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90001376:	f000 fde3 	bl	90001f40 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
9000137a:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
9000137e:	a909      	add	r1, sp, #36	; 0x24
90001380:	4813      	ldr	r0, [pc, #76]	; (900013d0 <BSP_LCD_MspInit+0x140>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90001382:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001384:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
90001388:	f000 fdda 	bl	90001f40 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
9000138c:	23f7      	movs	r3, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
9000138e:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90001390:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
90001392:	2501      	movs	r5, #1
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001394:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
90001398:	4c0e      	ldr	r4, [pc, #56]	; (900013d4 <BSP_LCD_MspInit+0x144>)
9000139a:	4620      	mov	r0, r4
9000139c:	f000 fdd0 	bl	90001f40 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
900013a0:	a909      	add	r1, sp, #36	; 0x24
900013a2:	4630      	mov	r0, r6
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
900013a4:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
900013a6:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
900013a8:	f000 fdca 	bl	90001f40 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
900013ac:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
900013ae:	a909      	add	r1, sp, #36	; 0x24
900013b0:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
900013b2:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
900013b6:	f000 fdc3 	bl	90001f40 <HAL_GPIO_Init>
}
900013ba:	b00f      	add	sp, #60	; 0x3c
900013bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
900013be:	bf00      	nop
900013c0:	40023800 	.word	0x40023800
900013c4:	40021000 	.word	0x40021000
900013c8:	40022000 	.word	0x40022000
900013cc:	40021800 	.word	0x40021800
900013d0:	40022400 	.word	0x40022400
900013d4:	40022800 	.word	0x40022800

900013d8 <BSP_LCD_ClockConfig>:
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
900013d8:	4806      	ldr	r0, [pc, #24]	; (900013f4 <BSP_LCD_ClockConfig+0x1c>)
900013da:	2308      	movs	r3, #8
900013dc:	65c3      	str	r3, [r0, #92]	; 0x5c
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
900013de:	23c0      	movs	r3, #192	; 0xc0
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
900013e0:	305c      	adds	r0, #92	; 0x5c
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
900013e2:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
900013e4:	2305      	movs	r3, #5
900013e6:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
900013e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
900013ec:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
900013ee:	f001 ba87 	b.w	90002900 <HAL_RCCEx_PeriphCLKConfig>
900013f2:	bf00      	nop
900013f4:	200002ec 	.word	0x200002ec

900013f8 <BSP_LCD_Init>:
{    
900013f8:	b510      	push	{r4, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
900013fa:	2228      	movs	r2, #40	; 0x28
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
900013fc:	4c24      	ldr	r4, [pc, #144]	; (90001490 <BSP_LCD_Init+0x98>)
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
900013fe:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
90001400:	2135      	movs	r1, #53	; 0x35
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
90001402:	f240 101b 	movw	r0, #283	; 0x11b
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
90001406:	f240 1c1d 	movw	ip, #285	; 0x11d
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
9000140a:	e9c4 2305 	strd	r2, r3, [r4, #20]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
9000140e:	230b      	movs	r3, #11
90001410:	e9c4 1307 	strd	r1, r3, [r4, #28]
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
90001414:	f240 2315 	movw	r3, #533	; 0x215
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
90001418:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
9000141a:	e9c4 3009 	strd	r3, r0, [r4, #36]	; 0x24
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
9000141e:	f240 2335 	movw	r3, #565	; 0x235
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
90001422:	4620      	mov	r0, r4
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
90001424:	e9c4 3c0b 	strd	r3, ip, [r4, #44]	; 0x2c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
90001428:	f7ff ffd6 	bl	900013d8 <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
9000142c:	f44f 7ef0 	mov.w	lr, #480	; 0x1e0
90001430:	f44f 7388 	mov.w	r3, #272	; 0x110
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
90001434:	4620      	mov	r0, r4
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
90001436:	e9c4 e318 	strd	lr, r3, [r4, #96]	; 0x60
  hLtdcHandler.Init.Backcolor.Blue = 0;
9000143a:	2300      	movs	r3, #0
9000143c:	86a3      	strh	r3, [r4, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Red = 0;
9000143e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
90001442:	e9c4 3301 	strd	r3, r3, [r4, #4]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90001446:	e9c4 3303 	strd	r3, r3, [r4, #12]
  hLtdcHandler.Instance = LTDC;
9000144a:	4b12      	ldr	r3, [pc, #72]	; (90001494 <BSP_LCD_Init+0x9c>)
9000144c:	6023      	str	r3, [r4, #0]
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
9000144e:	f000 ff90 	bl	90002372 <HAL_LTDC_GetState>
90001452:	4601      	mov	r1, r0
90001454:	b910      	cbnz	r0, 9000145c <BSP_LCD_Init+0x64>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
90001456:	4620      	mov	r0, r4
90001458:	f7ff ff1a 	bl	90001290 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
9000145c:	480c      	ldr	r0, [pc, #48]	; (90001490 <BSP_LCD_Init+0x98>)
9000145e:	f000 feef 	bl	90002240 <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
90001462:	2201      	movs	r2, #1
90001464:	f44f 5180 	mov.w	r1, #4096	; 0x1000
90001468:	480b      	ldr	r0, [pc, #44]	; (90001498 <BSP_LCD_Init+0xa0>)
9000146a:	f000 fe4f 	bl	9000210c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
9000146e:	2201      	movs	r2, #1
90001470:	2108      	movs	r1, #8
90001472:	480a      	ldr	r0, [pc, #40]	; (9000149c <BSP_LCD_Init+0xa4>)
90001474:	f000 fe4a 	bl	9000210c <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
90001478:	f000 f91e 	bl	900016b8 <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = fonts;
9000147c:	4a08      	ldr	r2, [pc, #32]	; (900014a0 <BSP_LCD_Init+0xa8>)
9000147e:	210c      	movs	r1, #12
}
90001480:	2000      	movs	r0, #0
  DrawProp[ActiveLayer].pFont = fonts;
90001482:	6c13      	ldr	r3, [r2, #64]	; 0x40
90001484:	fb01 2303 	mla	r3, r1, r3, r2
90001488:	4a06      	ldr	r2, [pc, #24]	; (900014a4 <BSP_LCD_Init+0xac>)
9000148a:	64da      	str	r2, [r3, #76]	; 0x4c
}
9000148c:	bd10      	pop	{r4, pc}
9000148e:	bf00      	nop
90001490:	200004dc 	.word	0x200004dc
90001494:	40016800 	.word	0x40016800
90001498:	40022000 	.word	0x40022000
9000149c:	40022800 	.word	0x40022800
900014a0:	200002ec 	.word	0x200002ec
900014a4:	20000000 	.word	0x20000000

900014a8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
900014a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
900014ac:	4c21      	ldr	r4, [pc, #132]	; (90001534 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
900014ae:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
900014b0:	4d21      	ldr	r5, [pc, #132]	; (90001538 <BSP_SDRAM_Initialization_sequence+0x90>)
  __IO uint32_t tmpmrd = 0;
900014b2:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
900014b6:	2710      	movs	r7, #16
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
900014b8:	4621      	mov	r1, r4
{
900014ba:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
900014bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
900014c0:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
900014c2:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
900014c6:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
900014ca:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
900014ce:	f001 fcc2 	bl	90002e56 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
900014d2:	4630      	mov	r0, r6
900014d4:	f000 f9a0 	bl	90001818 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
900014d8:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
900014da:	4621      	mov	r1, r4
900014dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
900014e0:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
900014e2:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
900014e6:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
900014ea:	f001 fcb4 	bl	90002e56 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
900014ee:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
900014f0:	4621      	mov	r1, r4
900014f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
900014f6:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
900014f8:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
900014fc:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
900014fe:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90001502:	f001 fca8 	bl	90002e56 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
90001506:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
9000150a:	4621      	mov	r1, r4
9000150c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
90001510:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
90001512:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90001514:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
90001516:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90001518:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
9000151c:	9b01      	ldr	r3, [sp, #4]
9000151e:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90001520:	f001 fc99 	bl	90002e56 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
90001524:	4649      	mov	r1, r9
90001526:	4628      	mov	r0, r5
}
90001528:	b003      	add	sp, #12
9000152a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
9000152e:	f001 bca9 	b.w	90002e84 <HAL_SDRAM_ProgramRefreshRate>
90001532:	bf00      	nop
90001534:	200003cc 	.word	0x200003cc
90001538:	20000584 	.word	0x20000584

9000153c <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
9000153c:	4b55      	ldr	r3, [pc, #340]	; (90001694 <BSP_SDRAM_MspInit+0x158>)
9000153e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90001540:	f042 0201 	orr.w	r2, r2, #1
{  
90001544:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
90001546:	639a      	str	r2, [r3, #56]	; 0x38
{  
90001548:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
9000154a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{  
9000154c:	4606      	mov	r6, r0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
9000154e:	a909      	add	r1, sp, #36	; 0x24
90001550:	4851      	ldr	r0, [pc, #324]	; (90001698 <BSP_SDRAM_MspInit+0x15c>)
  __HAL_RCC_FMC_CLK_ENABLE();
90001552:	f002 0201 	and.w	r2, r2, #1
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
90001556:	2400      	movs	r4, #0
  __HAL_RCC_FMC_CLK_ENABLE();
90001558:	9201      	str	r2, [sp, #4]
9000155a:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
9000155c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000155e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
90001562:	631a      	str	r2, [r3, #48]	; 0x30
90001564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001566:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
9000156a:	9202      	str	r2, [sp, #8]
9000156c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
9000156e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001570:	f042 0204 	orr.w	r2, r2, #4
90001574:	631a      	str	r2, [r3, #48]	; 0x30
90001576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001578:	f002 0204 	and.w	r2, r2, #4
9000157c:	9203      	str	r2, [sp, #12]
9000157e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
90001580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001582:	f042 0208 	orr.w	r2, r2, #8
90001586:	631a      	str	r2, [r3, #48]	; 0x30
90001588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000158a:	f002 0208 	and.w	r2, r2, #8
9000158e:	9204      	str	r2, [sp, #16]
90001590:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90001592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001594:	f042 0210 	orr.w	r2, r2, #16
90001598:	631a      	str	r2, [r3, #48]	; 0x30
9000159a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000159c:	f002 0210 	and.w	r2, r2, #16
900015a0:	9205      	str	r2, [sp, #20]
900015a2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
900015a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900015a6:	f042 0220 	orr.w	r2, r2, #32
900015aa:	631a      	str	r2, [r3, #48]	; 0x30
900015ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900015ae:	f002 0220 	and.w	r2, r2, #32
900015b2:	9206      	str	r2, [sp, #24]
900015b4:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
900015b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900015b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
900015bc:	631a      	str	r2, [r3, #48]	; 0x30
900015be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900015c0:	f002 0240 	and.w	r2, r2, #64	; 0x40
900015c4:	9207      	str	r2, [sp, #28]
900015c6:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
900015c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900015ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
900015ce:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
900015d0:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
900015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900015d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
900015d8:	9308      	str	r3, [sp, #32]
900015da:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
900015dc:	2302      	movs	r3, #2
900015de:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
900015e2:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
900015e4:	230c      	movs	r3, #12
900015e6:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
900015e8:	2308      	movs	r3, #8
900015ea:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
900015ec:	f000 fca8 	bl	90001f40 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
900015f0:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
900015f4:	a909      	add	r1, sp, #36	; 0x24
900015f6:	4829      	ldr	r0, [pc, #164]	; (9000169c <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
900015f8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
900015fa:	f000 fca1 	bl	90001f40 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
900015fe:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90001602:	a909      	add	r1, sp, #36	; 0x24
90001604:	4826      	ldr	r0, [pc, #152]	; (900016a0 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90001606:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90001608:	f000 fc9a 	bl	90001f40 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
9000160c:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90001610:	a909      	add	r1, sp, #36	; 0x24
90001612:	4824      	ldr	r0, [pc, #144]	; (900016a4 <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90001614:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90001616:	f000 fc93 	bl	90001f40 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
9000161a:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
9000161e:	a909      	add	r1, sp, #36	; 0x24
90001620:	4821      	ldr	r0, [pc, #132]	; (900016a8 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
90001622:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90001624:	f000 fc8c 	bl	90001f40 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
90001628:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
9000162a:	a909      	add	r1, sp, #36	; 0x24
9000162c:	481f      	ldr	r0, [pc, #124]	; (900016ac <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
9000162e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
90001630:	f000 fc86 	bl	90001f40 <HAL_GPIO_Init>
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
90001634:	4b1e      	ldr	r3, [pc, #120]	; (900016b0 <BSP_SDRAM_MspInit+0x174>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
90001636:	2280      	movs	r2, #128	; 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
90001638:	f44f 7100 	mov.w	r1, #512	; 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
9000163c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
90001640:	461d      	mov	r5, r3
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
90001642:	641c      	str	r4, [r3, #64]	; 0x40
  dma_handle.Init.Mode                = DMA_NORMAL;
90001644:	62dc      	str	r4, [r3, #44]	; 0x2c
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
90001646:	e9c3 4205 	strd	r4, r2, [r3, #20]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
9000164a:	f44f 6280 	mov.w	r2, #1024	; 0x400
9000164e:	e9c3 1207 	strd	r1, r2, [r3, #28]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
90001652:	f44f 4280 	mov.w	r2, #16384	; 0x4000
90001656:	e9c3 0209 	strd	r0, r2, [r3, #36]	; 0x24
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
9000165a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
9000165e:	e9c3 240c 	strd	r2, r4, [r3, #48]	; 0x30
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
90001662:	2203      	movs	r2, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
90001664:	e9c3 240e 	strd	r2, r4, [r3, #56]	; 0x38
  dma_handle.Instance = SDRAM_DMAx_STREAM;
90001668:	4a12      	ldr	r2, [pc, #72]	; (900016b4 <BSP_SDRAM_MspInit+0x178>)
9000166a:	f845 2f10 	str.w	r2, [r5, #16]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
9000166e:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
90001670:	6335      	str	r5, [r6, #48]	; 0x30
90001672:	649e      	str	r6, [r3, #72]	; 0x48
  HAL_DMA_DeInit(&dma_handle);
90001674:	f000 fa2a 	bl	90001acc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
90001678:	4628      	mov	r0, r5
9000167a:	f000 f9a7 	bl	900019cc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
9000167e:	4622      	mov	r2, r4
90001680:	210f      	movs	r1, #15
90001682:	2038      	movs	r0, #56	; 0x38
90001684:	f000 f8ec 	bl	90001860 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
90001688:	2038      	movs	r0, #56	; 0x38
9000168a:	f000 f91b 	bl	900018c4 <HAL_NVIC_EnableIRQ>
}
9000168e:	b00e      	add	sp, #56	; 0x38
90001690:	bd70      	pop	{r4, r5, r6, pc}
90001692:	bf00      	nop
90001694:	40023800 	.word	0x40023800
90001698:	40020800 	.word	0x40020800
9000169c:	40020c00 	.word	0x40020c00
900016a0:	40021000 	.word	0x40021000
900016a4:	40021400 	.word	0x40021400
900016a8:	40021800 	.word	0x40021800
900016ac:	40021c00 	.word	0x40021c00
900016b0:	200003cc 	.word	0x200003cc
900016b4:	40026410 	.word	0x40026410

900016b8 <BSP_SDRAM_Init>:
{ 
900016b8:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
900016ba:	4c1a      	ldr	r4, [pc, #104]	; (90001724 <BSP_SDRAM_Init+0x6c>)
  Timing.ExitSelfRefreshDelay = 7;
900016bc:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
900016be:	4b1a      	ldr	r3, [pc, #104]	; (90001728 <BSP_SDRAM_Init+0x70>)
  Timing.SelfRefreshTime      = 4;
900016c0:	2204      	movs	r2, #4
  Timing.LoadToActiveDelay    = 2;
900016c2:	4d1a      	ldr	r5, [pc, #104]	; (9000172c <BSP_SDRAM_Init+0x74>)
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
900016c4:	f44f 6000 	mov.w	r0, #2048	; 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
900016c8:	6023      	str	r3, [r4, #0]
  Timing.ExitSelfRefreshDelay = 7;
900016ca:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
900016cc:	60e2      	str	r2, [r4, #12]
  Timing.RCDDelay             = 2;
900016ce:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
  Timing.ExitSelfRefreshDelay = 7;
900016d2:	e9c5 311c 	strd	r3, r1, [r5, #112]	; 0x70
  Timing.RowCycleDelay        = 7;
900016d6:	e9c5 211e 	strd	r2, r1, [r5, #120]	; 0x78
  Timing.RPDelay              = 2;
900016da:	e9c5 3320 	strd	r3, r3, [r5, #128]	; 0x80
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
900016de:	2210      	movs	r2, #16
900016e0:	2340      	movs	r3, #64	; 0x40
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
900016e2:	2100      	movs	r1, #0
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
900016e4:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
900016e8:	f44f 7380 	mov.w	r3, #256	; 0x100
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
900016ec:	62a1      	str	r1, [r4, #40]	; 0x28
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
900016ee:	e9c4 3106 	strd	r3, r1, [r4, #24]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
900016f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
900016f6:	e9c4 0308 	strd	r0, r3, [r4, #32]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
900016fa:	4620      	mov	r0, r4
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
900016fc:	e9c4 1101 	strd	r1, r1, [r4, #4]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
90001700:	f7ff ff1c 	bl	9000153c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
90001704:	f105 0170 	add.w	r1, r5, #112	; 0x70
90001708:	4620      	mov	r0, r4
9000170a:	4c09      	ldr	r4, [pc, #36]	; (90001730 <BSP_SDRAM_Init+0x78>)
9000170c:	f001 fb83 	bl	90002e16 <HAL_SDRAM_Init>
90001710:	3800      	subs	r0, #0
90001712:	bf18      	it	ne
90001714:	2001      	movne	r0, #1
90001716:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
90001718:	f240 6003 	movw	r0, #1539	; 0x603
9000171c:	f7ff fec4 	bl	900014a8 <BSP_SDRAM_Initialization_sequence>
}
90001720:	7820      	ldrb	r0, [r4, #0]
90001722:	bd38      	pop	{r3, r4, r5, pc}
90001724:	20000584 	.word	0x20000584
90001728:	a0000140 	.word	0xa0000140
9000172c:	200003cc 	.word	0x200003cc
90001730:	20000028 	.word	0x20000028

90001734 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
90001734:	490f      	ldr	r1, [pc, #60]	; (90001774 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90001736:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
90001738:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
9000173c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
90001740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
90001744:	4b0c      	ldr	r3, [pc, #48]	; (90001778 <SystemInit+0x44>)
90001746:	681a      	ldr	r2, [r3, #0]
90001748:	f042 0201 	orr.w	r2, r2, #1
9000174c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
9000174e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
90001750:	681a      	ldr	r2, [r3, #0]
90001752:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
90001756:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
9000175a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
9000175c:	4a07      	ldr	r2, [pc, #28]	; (9000177c <SystemInit+0x48>)
9000175e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
90001760:	681a      	ldr	r2, [r3, #0]
90001762:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
90001766:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
90001768:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = APPLICATION_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation to APPLICATION_ADDRESS in preprocessor defines */
9000176a:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
9000176e:	608b      	str	r3, [r1, #8]
#endif
}
90001770:	4770      	bx	lr
90001772:	bf00      	nop
90001774:	e000ed00 	.word	0xe000ed00
90001778:	40023800 	.word	0x40023800
9000177c:	24003010 	.word	0x24003010

90001780 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
90001780:	4770      	bx	lr
	...

90001784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
90001784:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
90001786:	4e0e      	ldr	r6, [pc, #56]	; (900017c0 <HAL_InitTick+0x3c>)
{
90001788:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
9000178a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
9000178e:	4a0d      	ldr	r2, [pc, #52]	; (900017c4 <HAL_InitTick+0x40>)
90001790:	7830      	ldrb	r0, [r6, #0]
90001792:	fbb3 f3f0 	udiv	r3, r3, r0
90001796:	6810      	ldr	r0, [r2, #0]
90001798:	fbb0 f0f3 	udiv	r0, r0, r3
9000179c:	f000 f8a0 	bl	900018e0 <HAL_SYSTICK_Config>
900017a0:	4604      	mov	r4, r0
900017a2:	b950      	cbnz	r0, 900017ba <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
900017a4:	2d0f      	cmp	r5, #15
900017a6:	d808      	bhi.n	900017ba <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
900017a8:	4602      	mov	r2, r0
900017aa:	4629      	mov	r1, r5
900017ac:	f04f 30ff 	mov.w	r0, #4294967295
900017b0:	f000 f856 	bl	90001860 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
900017b4:	4620      	mov	r0, r4
900017b6:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
900017b8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
900017ba:	2001      	movs	r0, #1
900017bc:	e7fc      	b.n	900017b8 <HAL_InitTick+0x34>
900017be:	bf00      	nop
900017c0:	20000030 	.word	0x20000030
900017c4:	2000002c 	.word	0x2000002c

900017c8 <HAL_Init>:
{
900017c8:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
900017ca:	4b09      	ldr	r3, [pc, #36]	; (900017f0 <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
900017cc:	2003      	movs	r0, #3
   __HAL_FLASH_ART_ENABLE();
900017ce:	681a      	ldr	r2, [r3, #0]
900017d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
900017d4:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
900017d6:	681a      	ldr	r2, [r3, #0]
900017d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
900017dc:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
900017de:	f000 f82d 	bl	9000183c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
900017e2:	200f      	movs	r0, #15
900017e4:	f7ff ffce 	bl	90001784 <HAL_InitTick>
  HAL_MspInit();
900017e8:	f7ff ffca 	bl	90001780 <HAL_MspInit>
}
900017ec:	2000      	movs	r0, #0
900017ee:	bd08      	pop	{r3, pc}
900017f0:	40023c00 	.word	0x40023c00

900017f4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
900017f4:	4a03      	ldr	r2, [pc, #12]	; (90001804 <HAL_IncTick+0x10>)
900017f6:	4b04      	ldr	r3, [pc, #16]	; (90001808 <HAL_IncTick+0x14>)
900017f8:	6811      	ldr	r1, [r2, #0]
900017fa:	781b      	ldrb	r3, [r3, #0]
900017fc:	440b      	add	r3, r1
900017fe:	6013      	str	r3, [r2, #0]
}
90001800:	4770      	bx	lr
90001802:	bf00      	nop
90001804:	200005b8 	.word	0x200005b8
90001808:	20000030 	.word	0x20000030

9000180c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
9000180c:	4b01      	ldr	r3, [pc, #4]	; (90001814 <HAL_GetTick+0x8>)
9000180e:	6818      	ldr	r0, [r3, #0]
}
90001810:	4770      	bx	lr
90001812:	bf00      	nop
90001814:	200005b8 	.word	0x200005b8

90001818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
90001818:	b538      	push	{r3, r4, r5, lr}
9000181a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
9000181c:	f7ff fff6 	bl	9000180c <HAL_GetTick>
90001820:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
90001822:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
90001824:	bf1e      	ittt	ne
90001826:	4b04      	ldrne	r3, [pc, #16]	; (90001838 <HAL_Delay+0x20>)
90001828:	781b      	ldrbne	r3, [r3, #0]
9000182a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
9000182c:	f7ff ffee 	bl	9000180c <HAL_GetTick>
90001830:	1b43      	subs	r3, r0, r5
90001832:	42a3      	cmp	r3, r4
90001834:	d3fa      	bcc.n	9000182c <HAL_Delay+0x14>
  {
  }
}
90001836:	bd38      	pop	{r3, r4, r5, pc}
90001838:	20000030 	.word	0x20000030

9000183c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
9000183c:	4907      	ldr	r1, [pc, #28]	; (9000185c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
9000183e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90001840:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90001842:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90001846:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
9000184a:	0412      	lsls	r2, r2, #16
9000184c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
9000184e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
90001850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
90001854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
90001858:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
9000185a:	4770      	bx	lr
9000185c:	e000ed00 	.word	0xe000ed00

90001860 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90001860:	4b16      	ldr	r3, [pc, #88]	; (900018bc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
90001862:	b530      	push	{r4, r5, lr}
90001864:	68dc      	ldr	r4, [r3, #12]
90001866:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
9000186a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
9000186e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90001870:	2d04      	cmp	r5, #4
90001872:	bf28      	it	cs
90001874:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90001876:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90001878:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
9000187c:	bf8c      	ite	hi
9000187e:	3c03      	subhi	r4, #3
90001880:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90001882:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
90001886:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90001888:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
9000188c:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90001890:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90001894:	fa01 f104 	lsl.w	r1, r1, r4
90001898:	ea41 0302 	orr.w	r3, r1, r2
9000189c:	ea4f 1303 	mov.w	r3, r3, lsl #4
900018a0:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
900018a2:	db06      	blt.n	900018b2 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900018a4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
900018a8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
900018ac:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
900018b0:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900018b2:	f000 000f 	and.w	r0, r0, #15
900018b6:	4a02      	ldr	r2, [pc, #8]	; (900018c0 <HAL_NVIC_SetPriority+0x60>)
900018b8:	5413      	strb	r3, [r2, r0]
900018ba:	e7f9      	b.n	900018b0 <HAL_NVIC_SetPriority+0x50>
900018bc:	e000ed00 	.word	0xe000ed00
900018c0:	e000ed14 	.word	0xe000ed14

900018c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
900018c4:	2800      	cmp	r0, #0
900018c6:	db08      	blt.n	900018da <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
900018c8:	0942      	lsrs	r2, r0, #5
900018ca:	2301      	movs	r3, #1
900018cc:	f000 001f 	and.w	r0, r0, #31
900018d0:	fa03 f000 	lsl.w	r0, r3, r0
900018d4:	4b01      	ldr	r3, [pc, #4]	; (900018dc <HAL_NVIC_EnableIRQ+0x18>)
900018d6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
900018da:	4770      	bx	lr
900018dc:	e000e100 	.word	0xe000e100

900018e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
900018e0:	3801      	subs	r0, #1
900018e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
900018e6:	d20a      	bcs.n	900018fe <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
900018e8:	4b06      	ldr	r3, [pc, #24]	; (90001904 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900018ea:	21f0      	movs	r1, #240	; 0xf0
900018ec:	4a06      	ldr	r2, [pc, #24]	; (90001908 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
900018ee:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
900018f0:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900018f2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
900018f6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
900018f8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
900018fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
900018fc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
900018fe:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
90001900:	4770      	bx	lr
90001902:	bf00      	nop
90001904:	e000e010 	.word	0xe000e010
90001908:	e000ed00 	.word	0xe000ed00

9000190c <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
9000190c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90001910:	4a04      	ldr	r2, [pc, #16]	; (90001924 <HAL_MPU_Disable+0x18>)
90001912:	6a53      	ldr	r3, [r2, #36]	; 0x24
90001914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90001918:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
9000191a:	2200      	movs	r2, #0
9000191c:	4b02      	ldr	r3, [pc, #8]	; (90001928 <HAL_MPU_Disable+0x1c>)
9000191e:	605a      	str	r2, [r3, #4]
}
90001920:	4770      	bx	lr
90001922:	bf00      	nop
90001924:	e000ed00 	.word	0xe000ed00
90001928:	e000ed90 	.word	0xe000ed90

9000192c <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
9000192c:	4a06      	ldr	r2, [pc, #24]	; (90001948 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
9000192e:	f040 0001 	orr.w	r0, r0, #1
90001932:	4b06      	ldr	r3, [pc, #24]	; (9000194c <HAL_MPU_Enable+0x20>)
90001934:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
90001936:	6a53      	ldr	r3, [r2, #36]	; 0x24
90001938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000193c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
9000193e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001942:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
90001946:	4770      	bx	lr
90001948:	e000ed00 	.word	0xe000ed00
9000194c:	e000ed90 	.word	0xe000ed90

90001950 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
90001950:	7843      	ldrb	r3, [r0, #1]
90001952:	4a12      	ldr	r2, [pc, #72]	; (9000199c <HAL_MPU_ConfigRegion+0x4c>)
{
90001954:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
90001956:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
90001958:	7801      	ldrb	r1, [r0, #0]
9000195a:	b1d9      	cbz	r1, 90001994 <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
9000195c:	6843      	ldr	r3, [r0, #4]
9000195e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90001960:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90001962:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90001964:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90001966:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
9000196a:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
9000196c:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
9000196e:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90001972:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90001974:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90001978:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
9000197a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
9000197e:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90001980:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90001984:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90001986:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
9000198a:	7a01      	ldrb	r1, [r0, #8]
9000198c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90001990:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
90001992:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
90001994:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
90001996:	6111      	str	r1, [r2, #16]
}
90001998:	e7fb      	b.n	90001992 <HAL_MPU_ConfigRegion+0x42>
9000199a:	bf00      	nop
9000199c:	e000ed90 	.word	0xe000ed90

900019a0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
900019a0:	6803      	ldr	r3, [r0, #0]
{
900019a2:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
900019a4:	2018      	movs	r0, #24
900019a6:	b2d9      	uxtb	r1, r3
900019a8:	3910      	subs	r1, #16
900019aa:	fbb1 f0f0 	udiv	r0, r1, r0
{
900019ae:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
900019b0:	4c05      	ldr	r4, [pc, #20]	; (900019c8 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
900019b2:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
900019b4:	5c20      	ldrb	r0, [r4, r0]
900019b6:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
900019b8:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
900019bc:	f020 0003 	bic.w	r0, r0, #3
900019c0:	bf88      	it	hi
900019c2:	3004      	addhi	r0, #4
900019c4:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
900019c6:	bd10      	pop	{r4, pc}
900019c8:	90009390 	.word	0x90009390

900019cc <HAL_DMA_Init>:
{
900019cc:	b570      	push	{r4, r5, r6, lr}
900019ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
900019d0:	f7ff ff1c 	bl	9000180c <HAL_GetTick>
900019d4:	4605      	mov	r5, r0
  if(hdma == NULL)
900019d6:	2c00      	cmp	r4, #0
900019d8:	d073      	beq.n	90001ac2 <HAL_DMA_Init+0xf6>
  __HAL_UNLOCK(hdma);
900019da:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
900019dc:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
900019de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
900019e2:	2302      	movs	r3, #2
900019e4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
900019e8:	6813      	ldr	r3, [r2, #0]
900019ea:	f023 0301 	bic.w	r3, r3, #1
900019ee:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
900019f0:	6821      	ldr	r1, [r4, #0]
900019f2:	680b      	ldr	r3, [r1, #0]
900019f4:	07d8      	lsls	r0, r3, #31
900019f6:	d42f      	bmi.n	90001a58 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
900019f8:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
900019fa:	4d33      	ldr	r5, [pc, #204]	; (90001ac8 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
900019fc:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
900019fe:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
90001a00:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
90001a04:	4313      	orrs	r3, r2
90001a06:	68e2      	ldr	r2, [r4, #12]
90001a08:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
90001a0a:	6922      	ldr	r2, [r4, #16]
90001a0c:	4313      	orrs	r3, r2
90001a0e:	6962      	ldr	r2, [r4, #20]
90001a10:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
90001a12:	69e2      	ldr	r2, [r4, #28]
90001a14:	4303      	orrs	r3, r0
90001a16:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
90001a18:	6a22      	ldr	r2, [r4, #32]
90001a1a:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
90001a1c:	6a62      	ldr	r2, [r4, #36]	; 0x24
90001a1e:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
90001a20:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
90001a24:	bf02      	ittt	eq
90001a26:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
90001a2a:	4335      	orreq	r5, r6
90001a2c:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
90001a2e:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
90001a30:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
90001a32:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
90001a34:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
90001a38:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
90001a3c:	d133      	bne.n	90001aa6 <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
90001a3e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
90001a40:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
90001a42:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
90001a44:	b37d      	cbz	r5, 90001aa6 <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
90001a46:	b990      	cbnz	r0, 90001a6e <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
90001a48:	2a01      	cmp	r2, #1
90001a4a:	d021      	beq.n	90001a90 <HAL_DMA_Init+0xc4>
90001a4c:	f032 0202 	bics.w	r2, r2, #2
90001a50:	d129      	bne.n	90001aa6 <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
90001a52:	01ea      	lsls	r2, r5, #7
90001a54:	d527      	bpl.n	90001aa6 <HAL_DMA_Init+0xda>
90001a56:	e01e      	b.n	90001a96 <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
90001a58:	f7ff fed8 	bl	9000180c <HAL_GetTick>
90001a5c:	1b40      	subs	r0, r0, r5
90001a5e:	2805      	cmp	r0, #5
90001a60:	d9c6      	bls.n	900019f0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
90001a62:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
90001a64:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
90001a66:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
90001a68:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
90001a6c:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
90001a6e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
90001a72:	d114      	bne.n	90001a9e <HAL_DMA_Init+0xd2>
    switch (tmp)
90001a74:	2a03      	cmp	r2, #3
90001a76:	d816      	bhi.n	90001aa6 <HAL_DMA_Init+0xda>
90001a78:	a001      	add	r0, pc, #4	; (adr r0, 90001a80 <HAL_DMA_Init+0xb4>)
90001a7a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
90001a7e:	bf00      	nop
90001a80:	90001a97 	.word	0x90001a97
90001a84:	90001a53 	.word	0x90001a53
90001a88:	90001a97 	.word	0x90001a97
90001a8c:	90001a91 	.word	0x90001a91
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
90001a90:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
90001a94:	d107      	bne.n	90001aa6 <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
90001a96:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
90001a98:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
90001a9a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
90001a9c:	e7e4      	b.n	90001a68 <HAL_DMA_Init+0x9c>
    switch (tmp)
90001a9e:	2a02      	cmp	r2, #2
90001aa0:	d9f9      	bls.n	90001a96 <HAL_DMA_Init+0xca>
90001aa2:	2a03      	cmp	r2, #3
90001aa4:	d0d5      	beq.n	90001a52 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
90001aa6:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
90001aa8:	4620      	mov	r0, r4
90001aaa:	f7ff ff79 	bl	900019a0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
90001aae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
90001ab0:	233f      	movs	r3, #63	; 0x3f
90001ab2:	4093      	lsls	r3, r2
90001ab4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
90001ab6:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
90001ab8:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
90001aba:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
90001abc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
90001ac0:	e7d4      	b.n	90001a6c <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
90001ac2:	2001      	movs	r0, #1
90001ac4:	e7d2      	b.n	90001a6c <HAL_DMA_Init+0xa0>
90001ac6:	bf00      	nop
90001ac8:	f010803f 	.word	0xf010803f

90001acc <HAL_DMA_DeInit>:
{
90001acc:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
90001ace:	4605      	mov	r5, r0
90001ad0:	b320      	cbz	r0, 90001b1c <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
90001ad2:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
90001ad6:	2b02      	cmp	r3, #2
90001ad8:	b2dc      	uxtb	r4, r3
90001ada:	d01d      	beq.n	90001b18 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
90001adc:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
90001ade:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
90001ae0:	681a      	ldr	r2, [r3, #0]
90001ae2:	f022 0201 	bic.w	r2, r2, #1
90001ae6:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
90001ae8:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
90001aea:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
90001aec:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
90001aee:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
90001af0:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
90001af2:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
90001af4:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
90001af6:	f7ff ff53 	bl	900019a0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
90001afa:	6dea      	ldr	r2, [r5, #92]	; 0x5c
90001afc:	233f      	movs	r3, #63	; 0x3f
90001afe:	4093      	lsls	r3, r2
90001b00:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
90001b02:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
90001b04:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
90001b08:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
90001b0c:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
90001b10:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
90001b14:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
}
90001b18:	4620      	mov	r0, r4
90001b1a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
90001b1c:	2401      	movs	r4, #1
90001b1e:	e7fb      	b.n	90001b18 <HAL_DMA_DeInit+0x4c>

90001b20 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
90001b20:	2300      	movs	r3, #0
{
90001b22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
90001b24:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
90001b26:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
90001b28:	4b5b      	ldr	r3, [pc, #364]	; (90001c98 <HAL_DMA_IRQHandler+0x178>)
{
90001b2a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
90001b2c:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
90001b2e:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
90001b30:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
90001b32:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
90001b34:	409a      	lsls	r2, r3
90001b36:	4232      	tst	r2, r6
90001b38:	d00c      	beq.n	90001b54 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
90001b3a:	6801      	ldr	r1, [r0, #0]
90001b3c:	6808      	ldr	r0, [r1, #0]
90001b3e:	0740      	lsls	r0, r0, #29
90001b40:	d508      	bpl.n	90001b54 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
90001b42:	6808      	ldr	r0, [r1, #0]
90001b44:	f020 0004 	bic.w	r0, r0, #4
90001b48:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
90001b4a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
90001b4c:	6d62      	ldr	r2, [r4, #84]	; 0x54
90001b4e:	f042 0201 	orr.w	r2, r2, #1
90001b52:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
90001b54:	2201      	movs	r2, #1
90001b56:	409a      	lsls	r2, r3
90001b58:	4232      	tst	r2, r6
90001b5a:	d008      	beq.n	90001b6e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
90001b5c:	6821      	ldr	r1, [r4, #0]
90001b5e:	6949      	ldr	r1, [r1, #20]
90001b60:	0609      	lsls	r1, r1, #24
90001b62:	d504      	bpl.n	90001b6e <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
90001b64:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
90001b66:	6d62      	ldr	r2, [r4, #84]	; 0x54
90001b68:	f042 0202 	orr.w	r2, r2, #2
90001b6c:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
90001b6e:	2204      	movs	r2, #4
90001b70:	409a      	lsls	r2, r3
90001b72:	4232      	tst	r2, r6
90001b74:	d008      	beq.n	90001b88 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
90001b76:	6821      	ldr	r1, [r4, #0]
90001b78:	6809      	ldr	r1, [r1, #0]
90001b7a:	0788      	lsls	r0, r1, #30
90001b7c:	d504      	bpl.n	90001b88 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
90001b7e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
90001b80:	6d62      	ldr	r2, [r4, #84]	; 0x54
90001b82:	f042 0204 	orr.w	r2, r2, #4
90001b86:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
90001b88:	2210      	movs	r2, #16
90001b8a:	409a      	lsls	r2, r3
90001b8c:	4232      	tst	r2, r6
90001b8e:	d010      	beq.n	90001bb2 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
90001b90:	6823      	ldr	r3, [r4, #0]
90001b92:	6819      	ldr	r1, [r3, #0]
90001b94:	0709      	lsls	r1, r1, #28
90001b96:	d50c      	bpl.n	90001bb2 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
90001b98:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
90001b9a:	681a      	ldr	r2, [r3, #0]
90001b9c:	0350      	lsls	r0, r2, #13
90001b9e:	d537      	bpl.n	90001c10 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
90001ba0:	681b      	ldr	r3, [r3, #0]
90001ba2:	0319      	lsls	r1, r3, #12
90001ba4:	d401      	bmi.n	90001baa <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
90001ba6:	6c23      	ldr	r3, [r4, #64]	; 0x40
90001ba8:	e000      	b.n	90001bac <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
90001baa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
90001bac:	b10b      	cbz	r3, 90001bb2 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
90001bae:	4620      	mov	r0, r4
90001bb0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
90001bb2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
90001bb4:	2220      	movs	r2, #32
90001bb6:	408a      	lsls	r2, r1
90001bb8:	4232      	tst	r2, r6
90001bba:	d03a      	beq.n	90001c32 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
90001bbc:	6823      	ldr	r3, [r4, #0]
90001bbe:	6818      	ldr	r0, [r3, #0]
90001bc0:	06c6      	lsls	r6, r0, #27
90001bc2:	d536      	bpl.n	90001c32 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
90001bc4:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
90001bc6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
90001bca:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
90001bcc:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
90001bce:	d127      	bne.n	90001c20 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
90001bd0:	f022 0216 	bic.w	r2, r2, #22
90001bd4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
90001bd6:	695a      	ldr	r2, [r3, #20]
90001bd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
90001bdc:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
90001bde:	6c22      	ldr	r2, [r4, #64]	; 0x40
90001be0:	b90a      	cbnz	r2, 90001be6 <HAL_DMA_IRQHandler+0xc6>
90001be2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
90001be4:	b11a      	cbz	r2, 90001bee <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
90001be6:	681a      	ldr	r2, [r3, #0]
90001be8:	f022 0208 	bic.w	r2, r2, #8
90001bec:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
90001bee:	233f      	movs	r3, #63	; 0x3f
90001bf0:	408b      	lsls	r3, r1
90001bf2:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
90001bf4:	2300      	movs	r3, #0
90001bf6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
90001bfa:	2301      	movs	r3, #1
90001bfc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
90001c00:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
90001c02:	2b00      	cmp	r3, #0
90001c04:	d045      	beq.n	90001c92 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
90001c06:	4620      	mov	r0, r4
}
90001c08:	b003      	add	sp, #12
90001c0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
90001c0e:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
90001c10:	681a      	ldr	r2, [r3, #0]
90001c12:	05d2      	lsls	r2, r2, #23
90001c14:	d4c7      	bmi.n	90001ba6 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
90001c16:	681a      	ldr	r2, [r3, #0]
90001c18:	f022 0208 	bic.w	r2, r2, #8
90001c1c:	601a      	str	r2, [r3, #0]
90001c1e:	e7c2      	b.n	90001ba6 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
90001c20:	0350      	lsls	r0, r2, #13
90001c22:	d527      	bpl.n	90001c74 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
90001c24:	681b      	ldr	r3, [r3, #0]
90001c26:	0319      	lsls	r1, r3, #12
90001c28:	d431      	bmi.n	90001c8e <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
90001c2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
90001c2c:	b10b      	cbz	r3, 90001c32 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
90001c2e:	4620      	mov	r0, r4
90001c30:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
90001c32:	6d63      	ldr	r3, [r4, #84]	; 0x54
90001c34:	b36b      	cbz	r3, 90001c92 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
90001c36:	6d63      	ldr	r3, [r4, #84]	; 0x54
90001c38:	07da      	lsls	r2, r3, #31
90001c3a:	d519      	bpl.n	90001c70 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
90001c3c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
90001c40:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
90001c42:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
90001c46:	2305      	movs	r3, #5
90001c48:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
90001c4c:	6813      	ldr	r3, [r2, #0]
90001c4e:	f023 0301 	bic.w	r3, r3, #1
90001c52:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
90001c54:	9b01      	ldr	r3, [sp, #4]
90001c56:	3301      	adds	r3, #1
90001c58:	42bb      	cmp	r3, r7
90001c5a:	9301      	str	r3, [sp, #4]
90001c5c:	d802      	bhi.n	90001c64 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
90001c5e:	6813      	ldr	r3, [r2, #0]
90001c60:	07db      	lsls	r3, r3, #31
90001c62:	d4f7      	bmi.n	90001c54 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
90001c64:	2300      	movs	r3, #0
90001c66:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
90001c6a:	2301      	movs	r3, #1
90001c6c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
90001c70:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
90001c72:	e7c6      	b.n	90001c02 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
90001c74:	681a      	ldr	r2, [r3, #0]
90001c76:	f412 7280 	ands.w	r2, r2, #256	; 0x100
90001c7a:	d108      	bne.n	90001c8e <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
90001c7c:	6819      	ldr	r1, [r3, #0]
90001c7e:	f021 0110 	bic.w	r1, r1, #16
90001c82:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
90001c84:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
90001c86:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
90001c8a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
90001c8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90001c90:	e7cc      	b.n	90001c2c <HAL_DMA_IRQHandler+0x10c>
}
90001c92:	b003      	add	sp, #12
90001c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
90001c96:	bf00      	nop
90001c98:	2000002c 	.word	0x2000002c

90001c9c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
90001c9c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
90001c9e:	6804      	ldr	r4, [r0, #0]
90001ca0:	9d04      	ldr	r5, [sp, #16]
90001ca2:	6c66      	ldr	r6, [r4, #68]	; 0x44
90001ca4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
90001ca8:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
90001cac:	4333      	orrs	r3, r6
90001cae:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
90001cb0:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
90001cb2:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
90001cb4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
90001cb8:	d130      	bne.n	90001d1c <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
90001cba:	6886      	ldr	r6, [r0, #8]
90001cbc:	b11e      	cbz	r6, 90001cc6 <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
90001cbe:	2e01      	cmp	r6, #1
90001cc0:	d103      	bne.n	90001cca <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
90001cc2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U );
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
90001cc6:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
90001cc8:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
90001cca:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
90001ccc:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
90001cd0:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
90001cd4:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
90001cd6:	d107      	bne.n	90001ce8 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
90001cd8:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
90001cda:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
90001cdc:	02db      	lsls	r3, r3, #11
90001cde:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
90001ce2:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
90001ce6:	e7ee      	b.n	90001cc6 <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
90001ce8:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
90001cea:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
90001cee:	d10a      	bne.n	90001d06 <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
90001cf0:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
90001cf2:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
90001cf4:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
90001cf6:	0fd1      	lsrs	r1, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
90001cf8:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
90001cfc:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
90001d00:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
90001d04:	e7df      	b.n	90001cc6 <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
90001d06:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
90001d08:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
90001d0a:	0209      	lsls	r1, r1, #8
      tmp1 = (tmp1 >> 28U);
90001d0c:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
90001d0e:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
90001d12:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
90001d16:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
90001d1a:	e7d4      	b.n	90001cc6 <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
90001d1c:	60e1      	str	r1, [r4, #12]
}
90001d1e:	e7d3      	b.n	90001cc8 <DMA2D_SetConfig+0x2c>

90001d20 <HAL_DMA2D_MspInit>:
}
90001d20:	4770      	bx	lr

90001d22 <HAL_DMA2D_Init>:
{
90001d22:	b510      	push	{r4, lr}
  if(hdma2d == NULL)
90001d24:	4604      	mov	r4, r0
90001d26:	b330      	cbz	r0, 90001d76 <HAL_DMA2D_Init+0x54>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
90001d28:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
90001d2c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90001d30:	b91b      	cbnz	r3, 90001d3a <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
90001d32:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
90001d36:	f7ff fff3 	bl	90001d20 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
90001d3a:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90001d3c:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
90001d3e:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90001d40:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90001d42:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
90001d46:	6813      	ldr	r3, [r2, #0]
90001d48:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
90001d4c:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
90001d4e:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
90001d50:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
90001d52:	6b53      	ldr	r3, [r2, #52]	; 0x34
90001d54:	f023 0307 	bic.w	r3, r3, #7
90001d58:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90001d5a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
90001d5c:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90001d5e:	6c13      	ldr	r3, [r2, #64]	; 0x40
90001d60:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
90001d64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
90001d68:	430b      	orrs	r3, r1
90001d6a:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90001d6c:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90001d6e:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90001d70:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
90001d74:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
90001d76:	2001      	movs	r0, #1
90001d78:	e7fc      	b.n	90001d74 <HAL_DMA2D_Init+0x52>

90001d7a <HAL_DMA2D_Start>:
{
90001d7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
90001d7c:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
{
90001d80:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
90001d82:	2d01      	cmp	r5, #1
90001d84:	f04f 0502 	mov.w	r5, #2
90001d88:	d00f      	beq.n	90001daa <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90001d8a:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
90001d8e:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
90001d90:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
90001d92:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
90001d96:	9500      	str	r5, [sp, #0]
90001d98:	f7ff ff80 	bl	90001c9c <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
90001d9c:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
90001d9e:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
90001da0:	6813      	ldr	r3, [r2, #0]
90001da2:	4333      	orrs	r3, r6
90001da4:	6013      	str	r3, [r2, #0]
}
90001da6:	b002      	add	sp, #8
90001da8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
90001daa:	4628      	mov	r0, r5
90001dac:	e7fb      	b.n	90001da6 <HAL_DMA2D_Start+0x2c>

90001dae <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
90001dae:	2300      	movs	r3, #0
{
90001db0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
90001db2:	9301      	str	r3, [sp, #4]
{
90001db4:	4604      	mov	r4, r0
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
90001db6:	6803      	ldr	r3, [r0, #0]
{
90001db8:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
90001dba:	681b      	ldr	r3, [r3, #0]
90001dbc:	07db      	lsls	r3, r3, #31
90001dbe:	d417      	bmi.n	90001df0 <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
90001dc0:	6822      	ldr	r2, [r4, #0]
90001dc2:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
90001dc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
90001dc6:	4313      	orrs	r3, r2
  if (layer_start != 0U)
90001dc8:	069e      	lsls	r6, r3, #26
90001dca:	d506      	bpl.n	90001dda <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
90001dcc:	f7ff fd1e 	bl	9000180c <HAL_GetTick>
90001dd0:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
90001dd2:	6823      	ldr	r3, [r4, #0]
90001dd4:	685a      	ldr	r2, [r3, #4]
90001dd6:	06d2      	lsls	r2, r2, #27
90001dd8:	d543      	bpl.n	90001e62 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
90001dda:	6823      	ldr	r3, [r4, #0]
90001ddc:	2212      	movs	r2, #18
  __HAL_UNLOCK(hdma2d);
90001dde:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
90001de0:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
90001de2:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma2d);
90001de4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_READY;
90001de8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
90001dec:	b002      	add	sp, #8
90001dee:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
90001df0:	f7ff fd0c 	bl	9000180c <HAL_GetTick>
90001df4:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
90001df6:	6823      	ldr	r3, [r4, #0]
90001df8:	685a      	ldr	r2, [r3, #4]
90001dfa:	0792      	lsls	r2, r2, #30
90001dfc:	d4e0      	bmi.n	90001dc0 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
90001dfe:	685a      	ldr	r2, [r3, #4]
90001e00:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
90001e02:	9a01      	ldr	r2, [sp, #4]
90001e04:	f012 0f21 	tst.w	r2, #33	; 0x21
90001e08:	d017      	beq.n	90001e3a <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
90001e0a:	9a01      	ldr	r2, [sp, #4]
90001e0c:	0695      	lsls	r5, r2, #26
90001e0e:	d503      	bpl.n	90001e18 <HAL_DMA2D_PollForTransfer+0x6a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90001e10:	6be2      	ldr	r2, [r4, #60]	; 0x3c
90001e12:	f042 0202 	orr.w	r2, r2, #2
90001e16:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
90001e18:	9a01      	ldr	r2, [sp, #4]
90001e1a:	07d0      	lsls	r0, r2, #31
90001e1c:	d503      	bpl.n	90001e26 <HAL_DMA2D_PollForTransfer+0x78>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90001e1e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
90001e20:	f042 0201 	orr.w	r2, r2, #1
90001e24:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90001e26:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90001e28:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
90001e2a:	2304      	movs	r3, #4
        return HAL_ERROR;
90001e2c:	2001      	movs	r0, #1
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
90001e2e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
90001e32:	2300      	movs	r3, #0
90001e34:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
90001e38:	e7d8      	b.n	90001dec <HAL_DMA2D_PollForTransfer+0x3e>
      if(Timeout != HAL_MAX_DELAY)
90001e3a:	1c69      	adds	r1, r5, #1
90001e3c:	d0dc      	beq.n	90001df8 <HAL_DMA2D_PollForTransfer+0x4a>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
90001e3e:	f7ff fce5 	bl	9000180c <HAL_GetTick>
90001e42:	1b80      	subs	r0, r0, r6
90001e44:	42a8      	cmp	r0, r5
90001e46:	d801      	bhi.n	90001e4c <HAL_DMA2D_PollForTransfer+0x9e>
90001e48:	2d00      	cmp	r5, #0
90001e4a:	d1d4      	bne.n	90001df6 <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90001e4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
90001e4e:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90001e50:	f043 0320 	orr.w	r3, r3, #32
90001e54:	63e3      	str	r3, [r4, #60]	; 0x3c
          __HAL_UNLOCK(hdma2d);
90001e56:	2300      	movs	r3, #0
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
90001e58:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
90001e5c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
90001e60:	e7c4      	b.n	90001dec <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
90001e62:	685a      	ldr	r2, [r3, #4]
90001e64:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
90001e66:	9a01      	ldr	r2, [sp, #4]
90001e68:	f012 0f29 	tst.w	r2, #41	; 0x29
90001e6c:	d016      	beq.n	90001e9c <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
90001e6e:	9a01      	ldr	r2, [sp, #4]
90001e70:	0716      	lsls	r6, r2, #28
90001e72:	d503      	bpl.n	90001e7c <HAL_DMA2D_PollForTransfer+0xce>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
90001e74:	6be2      	ldr	r2, [r4, #60]	; 0x3c
90001e76:	f042 0204 	orr.w	r2, r2, #4
90001e7a:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
90001e7c:	9a01      	ldr	r2, [sp, #4]
90001e7e:	0695      	lsls	r5, r2, #26
90001e80:	d503      	bpl.n	90001e8a <HAL_DMA2D_PollForTransfer+0xdc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90001e82:	6be2      	ldr	r2, [r4, #60]	; 0x3c
90001e84:	f042 0202 	orr.w	r2, r2, #2
90001e88:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
90001e8a:	9a01      	ldr	r2, [sp, #4]
90001e8c:	07d0      	lsls	r0, r2, #31
90001e8e:	d503      	bpl.n	90001e98 <HAL_DMA2D_PollForTransfer+0xea>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90001e90:	6be2      	ldr	r2, [r4, #60]	; 0x3c
90001e92:	f042 0201 	orr.w	r2, r2, #1
90001e96:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90001e98:	2229      	movs	r2, #41	; 0x29
90001e9a:	e7c5      	b.n	90001e28 <HAL_DMA2D_PollForTransfer+0x7a>
      if(Timeout != HAL_MAX_DELAY)
90001e9c:	1c69      	adds	r1, r5, #1
90001e9e:	d099      	beq.n	90001dd4 <HAL_DMA2D_PollForTransfer+0x26>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
90001ea0:	f7ff fcb4 	bl	9000180c <HAL_GetTick>
90001ea4:	1b80      	subs	r0, r0, r6
90001ea6:	42a8      	cmp	r0, r5
90001ea8:	d8d0      	bhi.n	90001e4c <HAL_DMA2D_PollForTransfer+0x9e>
90001eaa:	2d00      	cmp	r5, #0
90001eac:	d191      	bne.n	90001dd2 <HAL_DMA2D_PollForTransfer+0x24>
90001eae:	e7cd      	b.n	90001e4c <HAL_DMA2D_PollForTransfer+0x9e>

90001eb0 <HAL_DMA2D_ConfigLayer>:
{
90001eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
90001eb2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
90001eb6:	2b01      	cmp	r3, #1
90001eb8:	f04f 0302 	mov.w	r3, #2
90001ebc:	d02b      	beq.n	90001f16 <HAL_DMA2D_ConfigLayer+0x66>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90001ebe:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
90001ec2:	2201      	movs	r2, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
90001ec4:	eb00 1301 	add.w	r3, r0, r1, lsl #4
90001ec8:	4f1c      	ldr	r7, [pc, #112]	; (90001f3c <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
90001eca:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
90001ece:	010e      	lsls	r6, r1, #4
90001ed0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
90001ed2:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
90001ed6:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90001eda:	3c09      	subs	r4, #9
90001edc:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90001ede:	bf96      	itet	ls
90001ee0:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
90001ee4:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90001ee8:	431a      	orrls	r2, r3
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
90001eea:	6803      	ldr	r3, [r0, #0]
90001eec:	b9a9      	cbnz	r1, 90001f1a <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90001eee:	6a59      	ldr	r1, [r3, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90001ef0:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90001ef2:	ea01 0107 	and.w	r1, r1, r7
90001ef6:	ea42 0201 	orr.w	r2, r2, r1
90001efa:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90001efc:	6982      	ldr	r2, [r0, #24]
90001efe:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90001f00:	d803      	bhi.n	90001f0a <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
90001f02:	6a42      	ldr	r2, [r0, #36]	; 0x24
90001f04:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
90001f08:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
90001f0a:	2301      	movs	r3, #1
90001f0c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
90001f10:	2300      	movs	r3, #0
90001f12:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
90001f16:	4618      	mov	r0, r3
}
90001f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90001f1a:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90001f1c:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90001f1e:	ea01 0107 	and.w	r1, r1, r7
90001f22:	ea42 0201 	orr.w	r2, r2, r1
90001f26:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90001f28:	eb00 0206 	add.w	r2, r0, r6
90001f2c:	6992      	ldr	r2, [r2, #24]
90001f2e:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90001f30:	d8eb      	bhi.n	90001f0a <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
90001f32:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
90001f36:	621d      	str	r5, [r3, #32]
90001f38:	e7e7      	b.n	90001f0a <HAL_DMA2D_ConfigLayer+0x5a>
90001f3a:	bf00      	nop
90001f3c:	00fcfff0 	.word	0x00fcfff0

90001f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
90001f40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
90001f44:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90001f46:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 90002104 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
90001f4a:	4a6c      	ldr	r2, [pc, #432]	; (900020fc <HAL_GPIO_Init+0x1bc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
90001f4c:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 90002108 <HAL_GPIO_Init+0x1c8>
    ioposition = ((uint32_t)0x01) << position;
90001f50:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
90001f52:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
90001f54:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
90001f56:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
90001f5a:	43ac      	bics	r4, r5
90001f5c:	f040 80b4 	bne.w	900020c8 <HAL_GPIO_Init+0x188>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
90001f60:	684c      	ldr	r4, [r1, #4]
90001f62:	ea4f 0e43 	mov.w	lr, r3, lsl #1
90001f66:	2503      	movs	r5, #3
90001f68:	f024 0c10 	bic.w	ip, r4, #16
90001f6c:	fa05 f50e 	lsl.w	r5, r5, lr
90001f70:	f10c 37ff 	add.w	r7, ip, #4294967295
90001f74:	43ed      	mvns	r5, r5
90001f76:	2f01      	cmp	r7, #1
90001f78:	d811      	bhi.n	90001f9e <HAL_GPIO_Init+0x5e>
        temp = GPIOx->OSPEEDR; 
90001f7a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
90001f7c:	ea07 0a05 	and.w	sl, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
90001f80:	68cf      	ldr	r7, [r1, #12]
90001f82:	fa07 f70e 	lsl.w	r7, r7, lr
90001f86:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
90001f8a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
90001f8c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
90001f8e:	ea27 0a06 	bic.w	sl, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
90001f92:	f3c4 1700 	ubfx	r7, r4, #4, #1
90001f96:	409f      	lsls	r7, r3
90001f98:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
90001f9c:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
90001f9e:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
90001fa0:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
90001fa4:	ea07 0a05 	and.w	sl, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
90001fa8:	688f      	ldr	r7, [r1, #8]
90001faa:	fa07 f70e 	lsl.w	r7, r7, lr
90001fae:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
90001fb2:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
90001fb4:	d116      	bne.n	90001fe4 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
90001fb6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
90001fba:	f003 0b07 	and.w	fp, r3, #7
90001fbe:	f04f 0c0f 	mov.w	ip, #15
90001fc2:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
90001fc6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
90001fca:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
90001fce:	fa0c fc0b 	lsl.w	ip, ip, fp
90001fd2:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
90001fd6:	690f      	ldr	r7, [r1, #16]
90001fd8:	fa07 f70b 	lsl.w	r7, r7, fp
90001fdc:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
90001fe0:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
90001fe4:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
90001fe6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
90001fe8:	f004 0703 	and.w	r7, r4, #3
90001fec:	fa07 fe0e 	lsl.w	lr, r7, lr
90001ff0:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->MODER = temp;
90001ff4:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
90001ff6:	00e5      	lsls	r5, r4, #3
90001ff8:	d566      	bpl.n	900020c8 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90001ffa:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
90001ffe:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
90002002:	f003 0c03 	and.w	ip, r3, #3
90002006:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
9000200a:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
9000200e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
90002012:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90002016:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
9000201a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
9000201e:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
90002022:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
90002026:	9501      	str	r5, [sp, #4]
90002028:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
9000202a:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
9000202e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
90002032:	ea2a 0e05 	bic.w	lr, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
90002036:	4d32      	ldr	r5, [pc, #200]	; (90002100 <HAL_GPIO_Init+0x1c0>)
90002038:	42a8      	cmp	r0, r5
9000203a:	d04c      	beq.n	900020d6 <HAL_GPIO_Init+0x196>
9000203c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90002040:	42a8      	cmp	r0, r5
90002042:	d04a      	beq.n	900020da <HAL_GPIO_Init+0x19a>
90002044:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90002048:	42a8      	cmp	r0, r5
9000204a:	d048      	beq.n	900020de <HAL_GPIO_Init+0x19e>
9000204c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90002050:	42a8      	cmp	r0, r5
90002052:	d046      	beq.n	900020e2 <HAL_GPIO_Init+0x1a2>
90002054:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90002058:	42a8      	cmp	r0, r5
9000205a:	d044      	beq.n	900020e6 <HAL_GPIO_Init+0x1a6>
9000205c:	4548      	cmp	r0, r9
9000205e:	d044      	beq.n	900020ea <HAL_GPIO_Init+0x1aa>
90002060:	f505 6500 	add.w	r5, r5, #2048	; 0x800
90002064:	42a8      	cmp	r0, r5
90002066:	d042      	beq.n	900020ee <HAL_GPIO_Init+0x1ae>
90002068:	f505 6580 	add.w	r5, r5, #1024	; 0x400
9000206c:	42a8      	cmp	r0, r5
9000206e:	d040      	beq.n	900020f2 <HAL_GPIO_Init+0x1b2>
90002070:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90002074:	42a8      	cmp	r0, r5
90002076:	d03e      	beq.n	900020f6 <HAL_GPIO_Init+0x1b6>
90002078:	f505 6580 	add.w	r5, r5, #1024	; 0x400
9000207c:	42a8      	cmp	r0, r5
9000207e:	bf0c      	ite	eq
90002080:	2509      	moveq	r5, #9
90002082:	250a      	movne	r5, #10
90002084:	fa05 f50c 	lsl.w	r5, r5, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
90002088:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
9000208c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
90002090:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
90002092:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
90002096:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
90002098:	bf0c      	ite	eq
9000209a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
9000209c:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
9000209e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
900020a2:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
900020a4:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
900020a6:	bf0c      	ite	eq
900020a8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
900020aa:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
900020ac:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
900020b0:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
900020b2:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
900020b4:	bf0c      	ite	eq
900020b6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
900020b8:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
900020ba:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
900020bc:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
900020be:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
900020c0:	bf54      	ite	pl
900020c2:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
900020c4:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
900020c6:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
900020c8:	3301      	adds	r3, #1
900020ca:	2b10      	cmp	r3, #16
900020cc:	f47f af40 	bne.w	90001f50 <HAL_GPIO_Init+0x10>
      }
    }
  }
}
900020d0:	b003      	add	sp, #12
900020d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
900020d6:	2500      	movs	r5, #0
900020d8:	e7d4      	b.n	90002084 <HAL_GPIO_Init+0x144>
900020da:	2501      	movs	r5, #1
900020dc:	e7d2      	b.n	90002084 <HAL_GPIO_Init+0x144>
900020de:	2502      	movs	r5, #2
900020e0:	e7d0      	b.n	90002084 <HAL_GPIO_Init+0x144>
900020e2:	2503      	movs	r5, #3
900020e4:	e7ce      	b.n	90002084 <HAL_GPIO_Init+0x144>
900020e6:	2504      	movs	r5, #4
900020e8:	e7cc      	b.n	90002084 <HAL_GPIO_Init+0x144>
900020ea:	2505      	movs	r5, #5
900020ec:	e7ca      	b.n	90002084 <HAL_GPIO_Init+0x144>
900020ee:	2506      	movs	r5, #6
900020f0:	e7c8      	b.n	90002084 <HAL_GPIO_Init+0x144>
900020f2:	2507      	movs	r5, #7
900020f4:	e7c6      	b.n	90002084 <HAL_GPIO_Init+0x144>
900020f6:	2508      	movs	r5, #8
900020f8:	e7c4      	b.n	90002084 <HAL_GPIO_Init+0x144>
900020fa:	bf00      	nop
900020fc:	40013c00 	.word	0x40013c00
90002100:	40020000 	.word	0x40020000
90002104:	40023800 	.word	0x40023800
90002108:	40021400 	.word	0x40021400

9000210c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
9000210c:	b10a      	cbz	r2, 90002112 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
9000210e:	6181      	str	r1, [r0, #24]
  }
}
90002110:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
90002112:	0409      	lsls	r1, r1, #16
90002114:	e7fb      	b.n	9000210e <HAL_GPIO_WritePin+0x2>

90002116 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
90002116:	4770      	bx	lr

90002118 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
90002118:	4a04      	ldr	r2, [pc, #16]	; (9000212c <HAL_GPIO_EXTI_IRQHandler+0x14>)
9000211a:	6951      	ldr	r1, [r2, #20]
9000211c:	4201      	tst	r1, r0
{
9000211e:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
90002120:	d002      	beq.n	90002128 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
90002122:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
90002124:	f7ff fff7 	bl	90002116 <HAL_GPIO_EXTI_Callback>
}
90002128:	bd08      	pop	{r3, pc}
9000212a:	bf00      	nop
9000212c:	40013c00 	.word	0x40013c00

90002130 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90002130:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90002132:	f8d1 c000 	ldr.w	ip, [r1]
{
90002136:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000213a:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000213c:	6804      	ldr	r4, [r0, #0]
9000213e:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90002140:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90002144:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90002146:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
90002148:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
9000214c:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90002150:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90002152:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90002156:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000215a:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000215c:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000215e:	68e0      	ldr	r0, [r4, #12]
90002160:	f3c0 400b 	ubfx	r0, r0, #16, #12
90002164:	4430      	add	r0, r6
90002166:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000216a:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000216c:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000216e:	68e0      	ldr	r0, [r4, #12]
90002170:	f3c0 000a 	ubfx	r0, r0, #0, #11
90002174:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
90002176:	6898      	ldr	r0, [r3, #8]
90002178:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
9000217c:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
9000217e:	6888      	ldr	r0, [r1, #8]
90002180:	68e6      	ldr	r6, [r4, #12]
90002182:	3001      	adds	r0, #1
90002184:	f3c6 060a 	ubfx	r6, r6, #0, #11
90002188:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
9000218a:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
9000218c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
90002190:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
90002192:	6918      	ldr	r0, [r3, #16]
90002194:	f020 0007 	bic.w	r0, r0, #7
90002198:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
9000219a:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
9000219c:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
9000219e:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
900021a2:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
900021a6:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
900021aa:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
900021ae:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
900021b2:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
900021b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
900021ba:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
900021bc:	6958      	ldr	r0, [r3, #20]
900021be:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
900021c2:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
900021c4:	6948      	ldr	r0, [r1, #20]
900021c6:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
900021c8:	69d8      	ldr	r0, [r3, #28]
900021ca:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
900021ce:	f020 0007 	bic.w	r0, r0, #7
900021d2:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
900021d4:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
900021d8:	4305      	orrs	r5, r0
900021da:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
900021dc:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
900021de:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
900021e0:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
900021e4:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
900021e6:	b31e      	cbz	r6, 90002230 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
900021e8:	2e01      	cmp	r6, #1
900021ea:	d023      	beq.n	90002234 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
900021ec:	1eb0      	subs	r0, r6, #2
900021ee:	2802      	cmp	r0, #2
900021f0:	d922      	bls.n	90002238 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
900021f2:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
900021f4:	bf0c      	ite	eq
900021f6:	2002      	moveq	r0, #2
900021f8:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
900021fa:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
900021fc:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
90002200:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
90002204:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
90002206:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90002208:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
9000220a:	4345      	muls	r5, r0
9000220c:	4378      	muls	r0, r7
9000220e:	3003      	adds	r0, #3
90002210:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
90002214:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
90002216:	6b18      	ldr	r0, [r3, #48]	; 0x30
90002218:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
9000221c:	f020 0007 	bic.w	r0, r0, #7
90002220:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90002222:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
90002224:	58a3      	ldr	r3, [r4, r2]
90002226:	f043 0301 	orr.w	r3, r3, #1
9000222a:	50a3      	str	r3, [r4, r2]
}
9000222c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
90002230:	2004      	movs	r0, #4
90002232:	e7e2      	b.n	900021fa <LTDC_SetConfig+0xca>
    tmp = 3U;
90002234:	2003      	movs	r0, #3
90002236:	e7e0      	b.n	900021fa <LTDC_SetConfig+0xca>
    tmp = 2U;
90002238:	2002      	movs	r0, #2
9000223a:	e7de      	b.n	900021fa <LTDC_SetConfig+0xca>

9000223c <HAL_LTDC_MspInit>:
}
9000223c:	4770      	bx	lr
	...

90002240 <HAL_LTDC_Init>:
{
90002240:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
90002242:	4604      	mov	r4, r0
90002244:	2800      	cmp	r0, #0
90002246:	d063      	beq.n	90002310 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
90002248:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
9000224c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90002250:	b91b      	cbnz	r3, 9000225a <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
90002252:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
90002256:	f7ff fff1 	bl	9000223c <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000225a:	2302      	movs	r3, #2
9000225c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90002260:	6823      	ldr	r3, [r4, #0]
90002262:	699a      	ldr	r2, [r3, #24]
90002264:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
90002268:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000226a:	6999      	ldr	r1, [r3, #24]
9000226c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
90002270:	4302      	orrs	r2, r0
90002272:	68e0      	ldr	r0, [r4, #12]
90002274:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90002276:	6920      	ldr	r0, [r4, #16]
90002278:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
9000227a:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000227c:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
9000227e:	4925      	ldr	r1, [pc, #148]	; (90002314 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90002280:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
90002282:	689a      	ldr	r2, [r3, #8]
90002284:	400a      	ands	r2, r1
90002286:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
90002288:	689a      	ldr	r2, [r3, #8]
9000228a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000228e:	69a0      	ldr	r0, [r4, #24]
90002290:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
90002292:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
90002294:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
90002296:	68da      	ldr	r2, [r3, #12]
90002298:	400a      	ands	r2, r1
9000229a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
9000229c:	68da      	ldr	r2, [r3, #12]
9000229e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
900022a2:	6a20      	ldr	r0, [r4, #32]
900022a4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
900022a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
900022a8:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
900022aa:	691a      	ldr	r2, [r3, #16]
900022ac:	400a      	ands	r2, r1
900022ae:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
900022b0:	691a      	ldr	r2, [r3, #16]
900022b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
900022b6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
900022b8:	4302      	orrs	r2, r0
900022ba:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
900022bc:	695a      	ldr	r2, [r3, #20]
900022be:	4011      	ands	r1, r2
900022c0:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
900022c2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
900022c4:	695a      	ldr	r2, [r3, #20]
900022c6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
900022ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
900022cc:	430a      	orrs	r2, r1
900022ce:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
900022d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
900022d2:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
900022d6:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
900022da:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
900022de:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
900022e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
900022e2:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
900022e6:	430a      	orrs	r2, r1
900022e8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
900022ec:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
900022f0:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
900022f2:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
900022f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900022f6:	f042 0206 	orr.w	r2, r2, #6
900022fa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
900022fc:	699a      	ldr	r2, [r3, #24]
900022fe:	f042 0201 	orr.w	r2, r2, #1
90002302:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
90002304:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
90002306:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
9000230a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
9000230e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
90002310:	2001      	movs	r0, #1
90002312:	e7fc      	b.n	9000230e <HAL_LTDC_Init+0xce>
90002314:	f000f800 	.word	0xf000f800

90002318 <HAL_LTDC_ConfigLayer>:
{
90002318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
9000231c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
90002320:	4606      	mov	r6, r0
90002322:	460f      	mov	r7, r1
90002324:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
90002326:	2b01      	cmp	r3, #1
90002328:	f04f 0002 	mov.w	r0, #2
9000232c:	d01f      	beq.n	9000236e <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000232e:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
90002330:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90002334:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
90002336:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000233a:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
9000233e:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90002342:	3438      	adds	r4, #56	; 0x38
90002344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90002346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90002348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
9000234a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
9000234c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
9000234e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90002350:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
90002352:	4630      	mov	r0, r6
90002354:	4662      	mov	r2, ip
90002356:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90002358:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
9000235a:	f7ff fee9 	bl	90002130 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
9000235e:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
90002360:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90002362:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
90002366:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
9000236a:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
9000236e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90002372 <HAL_LTDC_GetState>:
  return hltdc->State;
90002372:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
90002376:	4770      	bx	lr

90002378 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
90002378:	4b19      	ldr	r3, [pc, #100]	; (900023e0 <HAL_PWREx_EnableOverDrive+0x68>)
{
9000237a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
9000237c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
9000237e:	4c19      	ldr	r4, [pc, #100]	; (900023e4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
90002380:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
90002384:	641a      	str	r2, [r3, #64]	; 0x40
90002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90002388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
9000238c:	9301      	str	r3, [sp, #4]
9000238e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
90002390:	6823      	ldr	r3, [r4, #0]
90002392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90002396:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
90002398:	f7ff fa38 	bl	9000180c <HAL_GetTick>
9000239c:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
9000239e:	6863      	ldr	r3, [r4, #4]
900023a0:	03da      	lsls	r2, r3, #15
900023a2:	d50c      	bpl.n	900023be <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
900023a4:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
900023a6:	4d0f      	ldr	r5, [pc, #60]	; (900023e4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
900023a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900023ac:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
900023ae:	f7ff fa2d 	bl	9000180c <HAL_GetTick>
900023b2:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
900023b4:	686b      	ldr	r3, [r5, #4]
900023b6:	039b      	lsls	r3, r3, #14
900023b8:	d50a      	bpl.n	900023d0 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
900023ba:	2000      	movs	r0, #0
900023bc:	e006      	b.n	900023cc <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
900023be:	f7ff fa25 	bl	9000180c <HAL_GetTick>
900023c2:	1b40      	subs	r0, r0, r5
900023c4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
900023c8:	d9e9      	bls.n	9000239e <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
900023ca:	2003      	movs	r0, #3
}
900023cc:	b003      	add	sp, #12
900023ce:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
900023d0:	f7ff fa1c 	bl	9000180c <HAL_GetTick>
900023d4:	1b00      	subs	r0, r0, r4
900023d6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
900023da:	d9eb      	bls.n	900023b4 <HAL_PWREx_EnableOverDrive+0x3c>
900023dc:	e7f5      	b.n	900023ca <HAL_PWREx_EnableOverDrive+0x52>
900023de:	bf00      	nop
900023e0:	40023800 	.word	0x40023800
900023e4:	40007000 	.word	0x40007000

900023e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
900023e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
900023ec:	4604      	mov	r4, r0
900023ee:	b340      	cbz	r0, 90002442 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
900023f0:	6803      	ldr	r3, [r0, #0]
900023f2:	07d8      	lsls	r0, r3, #31
900023f4:	d410      	bmi.n	90002418 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
900023f6:	6823      	ldr	r3, [r4, #0]
900023f8:	0799      	lsls	r1, r3, #30
900023fa:	d464      	bmi.n	900024c6 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
900023fc:	6823      	ldr	r3, [r4, #0]
900023fe:	0719      	lsls	r1, r3, #28
90002400:	f100 80aa 	bmi.w	90002558 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
90002404:	6823      	ldr	r3, [r4, #0]
90002406:	075a      	lsls	r2, r3, #29
90002408:	f100 80cb 	bmi.w	900025a2 <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
9000240c:	69a2      	ldr	r2, [r4, #24]
9000240e:	2a00      	cmp	r2, #0
90002410:	f040 8134 	bne.w	9000267c <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
90002414:	2000      	movs	r0, #0
90002416:	e02b      	b.n	90002470 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
90002418:	4b96      	ldr	r3, [pc, #600]	; (90002674 <HAL_RCC_OscConfig+0x28c>)
9000241a:	689a      	ldr	r2, [r3, #8]
9000241c:	f002 020c 	and.w	r2, r2, #12
90002420:	2a04      	cmp	r2, #4
90002422:	d007      	beq.n	90002434 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
90002424:	689a      	ldr	r2, [r3, #8]
90002426:	f002 020c 	and.w	r2, r2, #12
9000242a:	2a08      	cmp	r2, #8
9000242c:	d10b      	bne.n	90002446 <HAL_RCC_OscConfig+0x5e>
9000242e:	685a      	ldr	r2, [r3, #4]
90002430:	0252      	lsls	r2, r2, #9
90002432:	d508      	bpl.n	90002446 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90002434:	4b8f      	ldr	r3, [pc, #572]	; (90002674 <HAL_RCC_OscConfig+0x28c>)
90002436:	681b      	ldr	r3, [r3, #0]
90002438:	039b      	lsls	r3, r3, #14
9000243a:	d5dc      	bpl.n	900023f6 <HAL_RCC_OscConfig+0xe>
9000243c:	6863      	ldr	r3, [r4, #4]
9000243e:	2b00      	cmp	r3, #0
90002440:	d1d9      	bne.n	900023f6 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
90002442:	2001      	movs	r0, #1
90002444:	e014      	b.n	90002470 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90002446:	6862      	ldr	r2, [r4, #4]
90002448:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
9000244c:	d113      	bne.n	90002476 <HAL_RCC_OscConfig+0x8e>
9000244e:	681a      	ldr	r2, [r3, #0]
90002450:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
90002454:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
90002456:	f7ff f9d9 	bl	9000180c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
9000245a:	4e86      	ldr	r6, [pc, #536]	; (90002674 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
9000245c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
9000245e:	6833      	ldr	r3, [r6, #0]
90002460:	039f      	lsls	r7, r3, #14
90002462:	d4c8      	bmi.n	900023f6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90002464:	f7ff f9d2 	bl	9000180c <HAL_GetTick>
90002468:	1b40      	subs	r0, r0, r5
9000246a:	2864      	cmp	r0, #100	; 0x64
9000246c:	d9f7      	bls.n	9000245e <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
9000246e:	2003      	movs	r0, #3
}
90002470:	b002      	add	sp, #8
90002472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90002476:	4d7f      	ldr	r5, [pc, #508]	; (90002674 <HAL_RCC_OscConfig+0x28c>)
90002478:	682b      	ldr	r3, [r5, #0]
9000247a:	b992      	cbnz	r2, 900024a2 <HAL_RCC_OscConfig+0xba>
9000247c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90002480:	602b      	str	r3, [r5, #0]
90002482:	682b      	ldr	r3, [r5, #0]
90002484:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90002488:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000248a:	f7ff f9bf 	bl	9000180c <HAL_GetTick>
9000248e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
90002490:	682b      	ldr	r3, [r5, #0]
90002492:	0398      	lsls	r0, r3, #14
90002494:	d5af      	bpl.n	900023f6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90002496:	f7ff f9b9 	bl	9000180c <HAL_GetTick>
9000249a:	1b80      	subs	r0, r0, r6
9000249c:	2864      	cmp	r0, #100	; 0x64
9000249e:	d9f7      	bls.n	90002490 <HAL_RCC_OscConfig+0xa8>
900024a0:	e7e5      	b.n	9000246e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
900024a2:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
900024a6:	d107      	bne.n	900024b8 <HAL_RCC_OscConfig+0xd0>
900024a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
900024ac:	602b      	str	r3, [r5, #0]
900024ae:	682b      	ldr	r3, [r5, #0]
900024b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900024b4:	602b      	str	r3, [r5, #0]
900024b6:	e7ce      	b.n	90002456 <HAL_RCC_OscConfig+0x6e>
900024b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
900024bc:	602b      	str	r3, [r5, #0]
900024be:	682b      	ldr	r3, [r5, #0]
900024c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
900024c4:	e7f6      	b.n	900024b4 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
900024c6:	4b6b      	ldr	r3, [pc, #428]	; (90002674 <HAL_RCC_OscConfig+0x28c>)
900024c8:	689a      	ldr	r2, [r3, #8]
900024ca:	f012 0f0c 	tst.w	r2, #12
900024ce:	d007      	beq.n	900024e0 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
900024d0:	689a      	ldr	r2, [r3, #8]
900024d2:	f002 020c 	and.w	r2, r2, #12
900024d6:	2a08      	cmp	r2, #8
900024d8:	d111      	bne.n	900024fe <HAL_RCC_OscConfig+0x116>
900024da:	685a      	ldr	r2, [r3, #4]
900024dc:	0251      	lsls	r1, r2, #9
900024de:	d40e      	bmi.n	900024fe <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
900024e0:	4b64      	ldr	r3, [pc, #400]	; (90002674 <HAL_RCC_OscConfig+0x28c>)
900024e2:	681a      	ldr	r2, [r3, #0]
900024e4:	0792      	lsls	r2, r2, #30
900024e6:	d502      	bpl.n	900024ee <HAL_RCC_OscConfig+0x106>
900024e8:	68e2      	ldr	r2, [r4, #12]
900024ea:	2a01      	cmp	r2, #1
900024ec:	d1a9      	bne.n	90002442 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
900024ee:	681a      	ldr	r2, [r3, #0]
900024f0:	6921      	ldr	r1, [r4, #16]
900024f2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
900024f6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
900024fa:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
900024fc:	e77e      	b.n	900023fc <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
900024fe:	68e2      	ldr	r2, [r4, #12]
90002500:	b1c2      	cbz	r2, 90002534 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
90002502:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90002504:	4d5b      	ldr	r5, [pc, #364]	; (90002674 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
90002506:	f042 0201 	orr.w	r2, r2, #1
9000250a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
9000250c:	f7ff f97e 	bl	9000180c <HAL_GetTick>
90002510:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90002512:	682b      	ldr	r3, [r5, #0]
90002514:	079f      	lsls	r7, r3, #30
90002516:	d507      	bpl.n	90002528 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90002518:	682b      	ldr	r3, [r5, #0]
9000251a:	6922      	ldr	r2, [r4, #16]
9000251c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
90002520:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
90002524:	602b      	str	r3, [r5, #0]
90002526:	e769      	b.n	900023fc <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90002528:	f7ff f970 	bl	9000180c <HAL_GetTick>
9000252c:	1b80      	subs	r0, r0, r6
9000252e:	2802      	cmp	r0, #2
90002530:	d9ef      	bls.n	90002512 <HAL_RCC_OscConfig+0x12a>
90002532:	e79c      	b.n	9000246e <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
90002534:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
90002536:	4e4f      	ldr	r6, [pc, #316]	; (90002674 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
90002538:	f022 0201 	bic.w	r2, r2, #1
9000253c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
9000253e:	f7ff f965 	bl	9000180c <HAL_GetTick>
90002542:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
90002544:	6833      	ldr	r3, [r6, #0]
90002546:	0798      	lsls	r0, r3, #30
90002548:	f57f af58 	bpl.w	900023fc <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000254c:	f7ff f95e 	bl	9000180c <HAL_GetTick>
90002550:	1b40      	subs	r0, r0, r5
90002552:	2802      	cmp	r0, #2
90002554:	d9f6      	bls.n	90002544 <HAL_RCC_OscConfig+0x15c>
90002556:	e78a      	b.n	9000246e <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
90002558:	6963      	ldr	r3, [r4, #20]
9000255a:	4d46      	ldr	r5, [pc, #280]	; (90002674 <HAL_RCC_OscConfig+0x28c>)
9000255c:	b183      	cbz	r3, 90002580 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
9000255e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
90002560:	f043 0301 	orr.w	r3, r3, #1
90002564:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
90002566:	f7ff f951 	bl	9000180c <HAL_GetTick>
9000256a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
9000256c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000256e:	079b      	lsls	r3, r3, #30
90002570:	f53f af48 	bmi.w	90002404 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90002574:	f7ff f94a 	bl	9000180c <HAL_GetTick>
90002578:	1b80      	subs	r0, r0, r6
9000257a:	2802      	cmp	r0, #2
9000257c:	d9f6      	bls.n	9000256c <HAL_RCC_OscConfig+0x184>
9000257e:	e776      	b.n	9000246e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
90002580:	6f6b      	ldr	r3, [r5, #116]	; 0x74
90002582:	f023 0301 	bic.w	r3, r3, #1
90002586:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
90002588:	f7ff f940 	bl	9000180c <HAL_GetTick>
9000258c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
9000258e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
90002590:	079f      	lsls	r7, r3, #30
90002592:	f57f af37 	bpl.w	90002404 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90002596:	f7ff f939 	bl	9000180c <HAL_GetTick>
9000259a:	1b80      	subs	r0, r0, r6
9000259c:	2802      	cmp	r0, #2
9000259e:	d9f6      	bls.n	9000258e <HAL_RCC_OscConfig+0x1a6>
900025a0:	e765      	b.n	9000246e <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
900025a2:	4b34      	ldr	r3, [pc, #208]	; (90002674 <HAL_RCC_OscConfig+0x28c>)
900025a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
900025a6:	00d0      	lsls	r0, r2, #3
900025a8:	d427      	bmi.n	900025fa <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
900025aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
900025ac:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
900025ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
900025b2:	641a      	str	r2, [r3, #64]	; 0x40
900025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
900025ba:	9301      	str	r3, [sp, #4]
900025bc:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
900025be:	4d2e      	ldr	r5, [pc, #184]	; (90002678 <HAL_RCC_OscConfig+0x290>)
900025c0:	682b      	ldr	r3, [r5, #0]
900025c2:	05d9      	lsls	r1, r3, #23
900025c4:	d51b      	bpl.n	900025fe <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
900025c6:	68a3      	ldr	r3, [r4, #8]
900025c8:	4d2a      	ldr	r5, [pc, #168]	; (90002674 <HAL_RCC_OscConfig+0x28c>)
900025ca:	2b01      	cmp	r3, #1
900025cc:	d127      	bne.n	9000261e <HAL_RCC_OscConfig+0x236>
900025ce:	6f2b      	ldr	r3, [r5, #112]	; 0x70
900025d0:	f043 0301 	orr.w	r3, r3, #1
900025d4:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
900025d6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
900025da:	f7ff f917 	bl	9000180c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
900025de:	4e25      	ldr	r6, [pc, #148]	; (90002674 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
900025e0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
900025e2:	6f33      	ldr	r3, [r6, #112]	; 0x70
900025e4:	079b      	lsls	r3, r3, #30
900025e6:	d53f      	bpl.n	90002668 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
900025e8:	2f00      	cmp	r7, #0
900025ea:	f43f af0f 	beq.w	9000240c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
900025ee:	4a21      	ldr	r2, [pc, #132]	; (90002674 <HAL_RCC_OscConfig+0x28c>)
900025f0:	6c13      	ldr	r3, [r2, #64]	; 0x40
900025f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
900025f6:	6413      	str	r3, [r2, #64]	; 0x40
900025f8:	e708      	b.n	9000240c <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
900025fa:	2700      	movs	r7, #0
900025fc:	e7df      	b.n	900025be <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
900025fe:	682b      	ldr	r3, [r5, #0]
90002600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90002604:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
90002606:	f7ff f901 	bl	9000180c <HAL_GetTick>
9000260a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
9000260c:	682b      	ldr	r3, [r5, #0]
9000260e:	05da      	lsls	r2, r3, #23
90002610:	d4d9      	bmi.n	900025c6 <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90002612:	f7ff f8fb 	bl	9000180c <HAL_GetTick>
90002616:	1b80      	subs	r0, r0, r6
90002618:	2864      	cmp	r0, #100	; 0x64
9000261a:	d9f7      	bls.n	9000260c <HAL_RCC_OscConfig+0x224>
9000261c:	e727      	b.n	9000246e <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000261e:	b9ab      	cbnz	r3, 9000264c <HAL_RCC_OscConfig+0x264>
90002620:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90002622:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90002626:	f023 0301 	bic.w	r3, r3, #1
9000262a:	672b      	str	r3, [r5, #112]	; 0x70
9000262c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000262e:	f023 0304 	bic.w	r3, r3, #4
90002632:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
90002634:	f7ff f8ea 	bl	9000180c <HAL_GetTick>
90002638:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
9000263a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000263c:	0798      	lsls	r0, r3, #30
9000263e:	d5d3      	bpl.n	900025e8 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90002640:	f7ff f8e4 	bl	9000180c <HAL_GetTick>
90002644:	1b80      	subs	r0, r0, r6
90002646:	4540      	cmp	r0, r8
90002648:	d9f7      	bls.n	9000263a <HAL_RCC_OscConfig+0x252>
9000264a:	e710      	b.n	9000246e <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000264c:	2b05      	cmp	r3, #5
9000264e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
90002650:	d103      	bne.n	9000265a <HAL_RCC_OscConfig+0x272>
90002652:	f043 0304 	orr.w	r3, r3, #4
90002656:	672b      	str	r3, [r5, #112]	; 0x70
90002658:	e7b9      	b.n	900025ce <HAL_RCC_OscConfig+0x1e6>
9000265a:	f023 0301 	bic.w	r3, r3, #1
9000265e:	672b      	str	r3, [r5, #112]	; 0x70
90002660:	6f2b      	ldr	r3, [r5, #112]	; 0x70
90002662:	f023 0304 	bic.w	r3, r3, #4
90002666:	e7b5      	b.n	900025d4 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90002668:	f7ff f8d0 	bl	9000180c <HAL_GetTick>
9000266c:	1b40      	subs	r0, r0, r5
9000266e:	4540      	cmp	r0, r8
90002670:	d9b7      	bls.n	900025e2 <HAL_RCC_OscConfig+0x1fa>
90002672:	e6fc      	b.n	9000246e <HAL_RCC_OscConfig+0x86>
90002674:	40023800 	.word	0x40023800
90002678:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
9000267c:	4d38      	ldr	r5, [pc, #224]	; (90002760 <HAL_RCC_OscConfig+0x378>)
9000267e:	68ab      	ldr	r3, [r5, #8]
90002680:	f003 030c 	and.w	r3, r3, #12
90002684:	2b08      	cmp	r3, #8
90002686:	d041      	beq.n	9000270c <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
90002688:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000268a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
9000268c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90002690:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90002692:	d12e      	bne.n	900026f2 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
90002694:	f7ff f8ba 	bl	9000180c <HAL_GetTick>
90002698:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
9000269a:	682b      	ldr	r3, [r5, #0]
9000269c:	0199      	lsls	r1, r3, #6
9000269e:	d422      	bmi.n	900026e6 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
900026a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
900026a2:	085b      	lsrs	r3, r3, #1
900026a4:	1e5a      	subs	r2, r3, #1
900026a6:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
900026aa:	430b      	orrs	r3, r1
900026ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
900026b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
900026b2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
900026b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
900026b8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
900026bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
900026c0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
900026c2:	682b      	ldr	r3, [r5, #0]
900026c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
900026c8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
900026ca:	f7ff f89f 	bl	9000180c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
900026ce:	4d24      	ldr	r5, [pc, #144]	; (90002760 <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
900026d0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
900026d2:	682b      	ldr	r3, [r5, #0]
900026d4:	019a      	lsls	r2, r3, #6
900026d6:	f53f ae9d 	bmi.w	90002414 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900026da:	f7ff f897 	bl	9000180c <HAL_GetTick>
900026de:	1b00      	subs	r0, r0, r4
900026e0:	2802      	cmp	r0, #2
900026e2:	d9f6      	bls.n	900026d2 <HAL_RCC_OscConfig+0x2ea>
900026e4:	e6c3      	b.n	9000246e <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900026e6:	f7ff f891 	bl	9000180c <HAL_GetTick>
900026ea:	1b80      	subs	r0, r0, r6
900026ec:	2802      	cmp	r0, #2
900026ee:	d9d4      	bls.n	9000269a <HAL_RCC_OscConfig+0x2b2>
900026f0:	e6bd      	b.n	9000246e <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
900026f2:	f7ff f88b 	bl	9000180c <HAL_GetTick>
900026f6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
900026f8:	682b      	ldr	r3, [r5, #0]
900026fa:	019b      	lsls	r3, r3, #6
900026fc:	f57f ae8a 	bpl.w	90002414 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90002700:	f7ff f884 	bl	9000180c <HAL_GetTick>
90002704:	1b00      	subs	r0, r0, r4
90002706:	2802      	cmp	r0, #2
90002708:	d9f6      	bls.n	900026f8 <HAL_RCC_OscConfig+0x310>
9000270a:	e6b0      	b.n	9000246e <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000270c:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
9000270e:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90002710:	f43f ae97 	beq.w	90002442 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90002714:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90002718:	69e1      	ldr	r1, [r4, #28]
9000271a:	428a      	cmp	r2, r1
9000271c:	f47f ae91 	bne.w	90002442 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
90002720:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90002724:	6a21      	ldr	r1, [r4, #32]
90002726:	428a      	cmp	r2, r1
90002728:	f47f ae8b 	bne.w	90002442 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
9000272c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
90002730:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
90002732:	401a      	ands	r2, r3
90002734:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
90002738:	f47f ae83 	bne.w	90002442 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
9000273c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000273e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
90002742:	0852      	lsrs	r2, r2, #1
90002744:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
90002746:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
9000274a:	f47f ae7a 	bne.w	90002442 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
9000274e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
90002752:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
90002754:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
90002758:	f43f ae5c 	beq.w	90002414 <HAL_RCC_OscConfig+0x2c>
9000275c:	e671      	b.n	90002442 <HAL_RCC_OscConfig+0x5a>
9000275e:	bf00      	nop
90002760:	40023800 	.word	0x40023800

90002764 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
90002764:	4913      	ldr	r1, [pc, #76]	; (900027b4 <HAL_RCC_GetSysClockFreq+0x50>)
{
90002766:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
90002768:	688b      	ldr	r3, [r1, #8]
9000276a:	f003 030c 	and.w	r3, r3, #12
9000276e:	2b04      	cmp	r3, #4
90002770:	d01b      	beq.n	900027aa <HAL_RCC_GetSysClockFreq+0x46>
90002772:	2b08      	cmp	r3, #8
90002774:	d11b      	bne.n	900027ae <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
90002776:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
90002778:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
9000277a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
9000277c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
90002780:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
90002784:	f3c1 1188 	ubfx	r1, r1, #6, #9
90002788:	bf1a      	itte	ne
9000278a:	480b      	ldrne	r0, [pc, #44]	; (900027b8 <HAL_RCC_GetSysClockFreq+0x54>)
9000278c:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
9000278e:	480b      	ldreq	r0, [pc, #44]	; (900027bc <HAL_RCC_GetSysClockFreq+0x58>)
90002790:	fba1 0100 	umull	r0, r1, r1, r0
90002794:	f7fe fa02 	bl	90000b9c <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
90002798:	4b06      	ldr	r3, [pc, #24]	; (900027b4 <HAL_RCC_GetSysClockFreq+0x50>)
9000279a:	685b      	ldr	r3, [r3, #4]
9000279c:	f3c3 4301 	ubfx	r3, r3, #16, #2
900027a0:	3301      	adds	r3, #1
900027a2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
900027a4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
900027a8:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
900027aa:	4803      	ldr	r0, [pc, #12]	; (900027b8 <HAL_RCC_GetSysClockFreq+0x54>)
900027ac:	e7fc      	b.n	900027a8 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
900027ae:	4803      	ldr	r0, [pc, #12]	; (900027bc <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
900027b0:	e7fa      	b.n	900027a8 <HAL_RCC_GetSysClockFreq+0x44>
900027b2:	bf00      	nop
900027b4:	40023800 	.word	0x40023800
900027b8:	017d7840 	.word	0x017d7840
900027bc:	00f42400 	.word	0x00f42400

900027c0 <HAL_RCC_ClockConfig>:
{
900027c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900027c4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
900027c6:	4604      	mov	r4, r0
900027c8:	b910      	cbnz	r0, 900027d0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
900027ca:	2001      	movs	r0, #1
}
900027cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
900027d0:	4a46      	ldr	r2, [pc, #280]	; (900028ec <HAL_RCC_ClockConfig+0x12c>)
900027d2:	6813      	ldr	r3, [r2, #0]
900027d4:	f003 030f 	and.w	r3, r3, #15
900027d8:	428b      	cmp	r3, r1
900027da:	d328      	bcc.n	9000282e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
900027dc:	6822      	ldr	r2, [r4, #0]
900027de:	0797      	lsls	r7, r2, #30
900027e0:	d430      	bmi.n	90002844 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
900027e2:	07d0      	lsls	r0, r2, #31
900027e4:	d444      	bmi.n	90002870 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
900027e6:	4a41      	ldr	r2, [pc, #260]	; (900028ec <HAL_RCC_ClockConfig+0x12c>)
900027e8:	6813      	ldr	r3, [r2, #0]
900027ea:	f003 030f 	and.w	r3, r3, #15
900027ee:	42ab      	cmp	r3, r5
900027f0:	d867      	bhi.n	900028c2 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
900027f2:	6822      	ldr	r2, [r4, #0]
900027f4:	0751      	lsls	r1, r2, #29
900027f6:	d470      	bmi.n	900028da <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
900027f8:	0713      	lsls	r3, r2, #28
900027fa:	d507      	bpl.n	9000280c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
900027fc:	4a3c      	ldr	r2, [pc, #240]	; (900028f0 <HAL_RCC_ClockConfig+0x130>)
900027fe:	6921      	ldr	r1, [r4, #16]
90002800:	6893      	ldr	r3, [r2, #8]
90002802:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
90002806:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
9000280a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
9000280c:	f7ff ffaa 	bl	90002764 <HAL_RCC_GetSysClockFreq>
90002810:	4b37      	ldr	r3, [pc, #220]	; (900028f0 <HAL_RCC_ClockConfig+0x130>)
90002812:	4a38      	ldr	r2, [pc, #224]	; (900028f4 <HAL_RCC_ClockConfig+0x134>)
90002814:	689b      	ldr	r3, [r3, #8]
90002816:	f3c3 1303 	ubfx	r3, r3, #4, #4
9000281a:	5cd3      	ldrb	r3, [r2, r3]
9000281c:	40d8      	lsrs	r0, r3
9000281e:	4b36      	ldr	r3, [pc, #216]	; (900028f8 <HAL_RCC_ClockConfig+0x138>)
90002820:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
90002822:	4b36      	ldr	r3, [pc, #216]	; (900028fc <HAL_RCC_ClockConfig+0x13c>)
90002824:	6818      	ldr	r0, [r3, #0]
90002826:	f7fe ffad 	bl	90001784 <HAL_InitTick>
  return HAL_OK;
9000282a:	2000      	movs	r0, #0
9000282c:	e7ce      	b.n	900027cc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
9000282e:	6813      	ldr	r3, [r2, #0]
90002830:	f023 030f 	bic.w	r3, r3, #15
90002834:	430b      	orrs	r3, r1
90002836:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90002838:	6813      	ldr	r3, [r2, #0]
9000283a:	f003 030f 	and.w	r3, r3, #15
9000283e:	428b      	cmp	r3, r1
90002840:	d1c3      	bne.n	900027ca <HAL_RCC_ClockConfig+0xa>
90002842:	e7cb      	b.n	900027dc <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90002844:	f012 0f04 	tst.w	r2, #4
90002848:	4b29      	ldr	r3, [pc, #164]	; (900028f0 <HAL_RCC_ClockConfig+0x130>)
9000284a:	d003      	beq.n	90002854 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
9000284c:	6899      	ldr	r1, [r3, #8]
9000284e:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
90002852:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90002854:	0716      	lsls	r6, r2, #28
90002856:	d503      	bpl.n	90002860 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
90002858:	6899      	ldr	r1, [r3, #8]
9000285a:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
9000285e:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90002860:	4923      	ldr	r1, [pc, #140]	; (900028f0 <HAL_RCC_ClockConfig+0x130>)
90002862:	68a0      	ldr	r0, [r4, #8]
90002864:	688b      	ldr	r3, [r1, #8]
90002866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
9000286a:	4303      	orrs	r3, r0
9000286c:	608b      	str	r3, [r1, #8]
9000286e:	e7b8      	b.n	900027e2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90002870:	6861      	ldr	r1, [r4, #4]
90002872:	4b1f      	ldr	r3, [pc, #124]	; (900028f0 <HAL_RCC_ClockConfig+0x130>)
90002874:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90002876:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90002878:	d11b      	bne.n	900028b2 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
9000287a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
9000287e:	d0a4      	beq.n	900027ca <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
90002880:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
90002882:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90002886:	4f1a      	ldr	r7, [pc, #104]	; (900028f0 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
90002888:	f022 0203 	bic.w	r2, r2, #3
9000288c:	430a      	orrs	r2, r1
9000288e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
90002890:	f7fe ffbc 	bl	9000180c <HAL_GetTick>
90002894:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90002896:	68bb      	ldr	r3, [r7, #8]
90002898:	6862      	ldr	r2, [r4, #4]
9000289a:	f003 030c 	and.w	r3, r3, #12
9000289e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
900028a2:	d0a0      	beq.n	900027e6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
900028a4:	f7fe ffb2 	bl	9000180c <HAL_GetTick>
900028a8:	1b80      	subs	r0, r0, r6
900028aa:	4540      	cmp	r0, r8
900028ac:	d9f3      	bls.n	90002896 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
900028ae:	2003      	movs	r0, #3
900028b0:	e78c      	b.n	900027cc <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
900028b2:	2902      	cmp	r1, #2
900028b4:	d102      	bne.n	900028bc <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
900028b6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
900028ba:	e7e0      	b.n	9000287e <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
900028bc:	f012 0f02 	tst.w	r2, #2
900028c0:	e7dd      	b.n	9000287e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
900028c2:	6813      	ldr	r3, [r2, #0]
900028c4:	f023 030f 	bic.w	r3, r3, #15
900028c8:	432b      	orrs	r3, r5
900028ca:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
900028cc:	6813      	ldr	r3, [r2, #0]
900028ce:	f003 030f 	and.w	r3, r3, #15
900028d2:	42ab      	cmp	r3, r5
900028d4:	f47f af79 	bne.w	900027ca <HAL_RCC_ClockConfig+0xa>
900028d8:	e78b      	b.n	900027f2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
900028da:	4905      	ldr	r1, [pc, #20]	; (900028f0 <HAL_RCC_ClockConfig+0x130>)
900028dc:	68e0      	ldr	r0, [r4, #12]
900028de:	688b      	ldr	r3, [r1, #8]
900028e0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
900028e4:	4303      	orrs	r3, r0
900028e6:	608b      	str	r3, [r1, #8]
900028e8:	e786      	b.n	900027f8 <HAL_RCC_ClockConfig+0x38>
900028ea:	bf00      	nop
900028ec:	40023c00 	.word	0x40023c00
900028f0:	40023800 	.word	0x40023800
900028f4:	90009378 	.word	0x90009378
900028f8:	2000002c 	.word	0x2000002c
900028fc:	20000034 	.word	0x20000034

90002900 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
90002900:	6803      	ldr	r3, [r0, #0]
{
90002902:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
90002906:	f013 0601 	ands.w	r6, r3, #1
{
9000290a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
9000290c:	d00b      	beq.n	90002926 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
9000290e:	4aab      	ldr	r2, [pc, #684]	; (90002bbc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002910:	6891      	ldr	r1, [r2, #8]
90002912:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
90002916:	6091      	str	r1, [r2, #8]
90002918:	6b46      	ldr	r6, [r0, #52]	; 0x34
9000291a:	6891      	ldr	r1, [r2, #8]
9000291c:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
9000291e:	fab6 f686 	clz	r6, r6
90002922:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
90002924:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
90002926:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
9000292a:	d012      	beq.n	90002952 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
9000292c:	49a3      	ldr	r1, [pc, #652]	; (90002bbc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
9000292e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
90002930:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
90002934:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90002938:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
9000293c:	bf08      	it	eq
9000293e:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90002940:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
90002944:	bf16      	itet	ne
90002946:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
9000294a:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
9000294c:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
9000294e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
90002952:	02d8      	lsls	r0, r3, #11
90002954:	d510      	bpl.n	90002978 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
90002956:	4899      	ldr	r0, [pc, #612]	; (90002bbc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002958:	6c21      	ldr	r1, [r4, #64]	; 0x40
9000295a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
9000295e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
90002962:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
90002966:	ea42 0201 	orr.w	r2, r2, r1
9000296a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
9000296e:	f000 8186 	beq.w	90002c7e <HAL_RCCEx_PeriphCLKConfig+0x37e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
90002972:	2900      	cmp	r1, #0
90002974:	bf08      	it	eq
90002976:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
90002978:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
9000297c:	bf18      	it	ne
9000297e:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
90002980:	0699      	lsls	r1, r3, #26
90002982:	d531      	bpl.n	900029e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
90002984:	4b8d      	ldr	r3, [pc, #564]	; (90002bbc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
90002986:	4f8e      	ldr	r7, [pc, #568]	; (90002bc0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
    __HAL_RCC_PWR_CLK_ENABLE();
90002988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
9000298a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
9000298e:	641a      	str	r2, [r3, #64]	; 0x40
90002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90002992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90002996:	9301      	str	r3, [sp, #4]
90002998:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
9000299a:	683b      	ldr	r3, [r7, #0]
9000299c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900029a0:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
900029a2:	f7fe ff33 	bl	9000180c <HAL_GetTick>
900029a6:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
900029a8:	683b      	ldr	r3, [r7, #0]
900029aa:	05da      	lsls	r2, r3, #23
900029ac:	f140 8169 	bpl.w	90002c82 <HAL_RCCEx_PeriphCLKConfig+0x382>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
900029b0:	4f82      	ldr	r7, [pc, #520]	; (90002bbc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
900029b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
900029b4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
900029b8:	f040 816e 	bne.w	90002c98 <HAL_RCCEx_PeriphCLKConfig+0x398>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
900029bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
900029be:	f403 7240 	and.w	r2, r3, #768	; 0x300
900029c2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
900029c6:	4a7d      	ldr	r2, [pc, #500]	; (90002bbc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
900029c8:	f040 818c 	bne.w	90002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
900029cc:	6891      	ldr	r1, [r2, #8]
900029ce:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
900029d2:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
900029d6:	f420 7040 	bic.w	r0, r0, #768	; 0x300
900029da:	4301      	orrs	r1, r0
900029dc:	6091      	str	r1, [r2, #8]
900029de:	f3c3 030b 	ubfx	r3, r3, #0, #12
900029e2:	6f11      	ldr	r1, [r2, #112]	; 0x70
900029e4:	430b      	orrs	r3, r1
900029e6:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
900029e8:	6823      	ldr	r3, [r4, #0]
900029ea:	06d9      	lsls	r1, r3, #27
900029ec:	d50c      	bpl.n	90002a08 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
900029ee:	4a73      	ldr	r2, [pc, #460]	; (90002bbc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
900029f0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
900029f4:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
900029f8:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
900029fc:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
90002a00:	6ba0      	ldr	r0, [r4, #56]	; 0x38
90002a02:	4301      	orrs	r1, r0
90002a04:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
90002a08:	045a      	lsls	r2, r3, #17
90002a0a:	d508      	bpl.n	90002a1e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
90002a0c:	496b      	ldr	r1, [pc, #428]	; (90002bbc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002a0e:	6e60      	ldr	r0, [r4, #100]	; 0x64
90002a10:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002a14:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
90002a18:	4302      	orrs	r2, r0
90002a1a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
90002a1e:	041f      	lsls	r7, r3, #16
90002a20:	d508      	bpl.n	90002a34 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
90002a22:	4966      	ldr	r1, [pc, #408]	; (90002bbc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002a24:	6ea0      	ldr	r0, [r4, #104]	; 0x68
90002a26:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002a2a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
90002a2e:	4302      	orrs	r2, r0
90002a30:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
90002a34:	03d8      	lsls	r0, r3, #15
90002a36:	d508      	bpl.n	90002a4a <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
90002a38:	4960      	ldr	r1, [pc, #384]	; (90002bbc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002a3a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
90002a3c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002a40:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
90002a44:	4302      	orrs	r2, r0
90002a46:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
90002a4a:	0399      	lsls	r1, r3, #14
90002a4c:	d508      	bpl.n	90002a60 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
90002a4e:	495b      	ldr	r1, [pc, #364]	; (90002bbc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002a50:	6f20      	ldr	r0, [r4, #112]	; 0x70
90002a52:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002a56:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
90002a5a:	4302      	orrs	r2, r0
90002a5c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
90002a60:	065a      	lsls	r2, r3, #25
90002a62:	d508      	bpl.n	90002a76 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
90002a64:	4955      	ldr	r1, [pc, #340]	; (90002bbc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002a66:	6c60      	ldr	r0, [r4, #68]	; 0x44
90002a68:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002a6c:	f022 0203 	bic.w	r2, r2, #3
90002a70:	4302      	orrs	r2, r0
90002a72:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
90002a76:	061f      	lsls	r7, r3, #24
90002a78:	d508      	bpl.n	90002a8c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
90002a7a:	4950      	ldr	r1, [pc, #320]	; (90002bbc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002a7c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
90002a7e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002a82:	f022 020c 	bic.w	r2, r2, #12
90002a86:	4302      	orrs	r2, r0
90002a88:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
90002a8c:	05d8      	lsls	r0, r3, #23
90002a8e:	d508      	bpl.n	90002aa2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
90002a90:	494a      	ldr	r1, [pc, #296]	; (90002bbc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002a92:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
90002a94:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002a98:	f022 0230 	bic.w	r2, r2, #48	; 0x30
90002a9c:	4302      	orrs	r2, r0
90002a9e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
90002aa2:	0599      	lsls	r1, r3, #22
90002aa4:	d508      	bpl.n	90002ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
90002aa6:	4945      	ldr	r1, [pc, #276]	; (90002bbc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002aa8:	6d20      	ldr	r0, [r4, #80]	; 0x50
90002aaa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002aae:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
90002ab2:	4302      	orrs	r2, r0
90002ab4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
90002ab8:	055a      	lsls	r2, r3, #21
90002aba:	d508      	bpl.n	90002ace <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
90002abc:	493f      	ldr	r1, [pc, #252]	; (90002bbc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002abe:	6d60      	ldr	r0, [r4, #84]	; 0x54
90002ac0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002ac4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
90002ac8:	4302      	orrs	r2, r0
90002aca:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
90002ace:	051f      	lsls	r7, r3, #20
90002ad0:	d508      	bpl.n	90002ae4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
90002ad2:	493a      	ldr	r1, [pc, #232]	; (90002bbc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
90002ad6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002ada:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
90002ade:	4302      	orrs	r2, r0
90002ae0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
90002ae4:	04d8      	lsls	r0, r3, #19
90002ae6:	d508      	bpl.n	90002afa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
90002ae8:	4934      	ldr	r1, [pc, #208]	; (90002bbc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002aea:	6de0      	ldr	r0, [r4, #92]	; 0x5c
90002aec:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002af0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
90002af4:	4302      	orrs	r2, r0
90002af6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
90002afa:	0499      	lsls	r1, r3, #18
90002afc:	d508      	bpl.n	90002b10 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
90002afe:	492f      	ldr	r1, [pc, #188]	; (90002bbc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002b00:	6e20      	ldr	r0, [r4, #96]	; 0x60
90002b02:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002b06:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
90002b0a:	4302      	orrs	r2, r0
90002b0c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
90002b10:	025a      	lsls	r2, r3, #9
90002b12:	d508      	bpl.n	90002b26 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
90002b14:	4929      	ldr	r1, [pc, #164]	; (90002bbc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002b16:	6fa0      	ldr	r0, [r4, #120]	; 0x78
90002b18:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002b1c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
90002b20:	4302      	orrs	r2, r0
90002b22:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
90002b26:	029f      	lsls	r7, r3, #10
90002b28:	d50c      	bpl.n	90002b44 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
90002b2a:	4824      	ldr	r0, [pc, #144]	; (90002bbc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002b2c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
90002b2e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
90002b32:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
90002b36:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
90002b3a:	bf08      	it	eq
90002b3c:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
90002b3e:	430a      	orrs	r2, r1
90002b40:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
90002b44:	f013 0f08 	tst.w	r3, #8
90002b48:	bf18      	it	ne
90002b4a:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
90002b4c:	0358      	lsls	r0, r3, #13
90002b4e:	d508      	bpl.n	90002b62 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
90002b50:	491a      	ldr	r1, [pc, #104]	; (90002bbc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002b52:	6f60      	ldr	r0, [r4, #116]	; 0x74
90002b54:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002b58:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
90002b5c:	4302      	orrs	r2, r0
90002b5e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
90002b62:	0219      	lsls	r1, r3, #8
90002b64:	d509      	bpl.n	90002b7a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
90002b66:	4915      	ldr	r1, [pc, #84]	; (90002bbc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002b68:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
90002b6c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90002b70:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
90002b74:	4302      	orrs	r2, r0
90002b76:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
90002b7a:	2e01      	cmp	r6, #1
90002b7c:	f000 80b6 	beq.w	90002cec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
90002b80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
90002b84:	f000 80b2 	beq.w	90002cec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
90002b88:	2d01      	cmp	r5, #1
90002b8a:	d176      	bne.n	90002c7a <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
90002b8c:	4d0b      	ldr	r5, [pc, #44]	; (90002bbc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
90002b8e:	682b      	ldr	r3, [r5, #0]
90002b90:	462e      	mov	r6, r5
90002b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
90002b96:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90002b98:	f7fe fe38 	bl	9000180c <HAL_GetTick>
90002b9c:	4607      	mov	r7, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
90002b9e:	682b      	ldr	r3, [r5, #0]
90002ba0:	009b      	lsls	r3, r3, #2
90002ba2:	f100 8127 	bmi.w	90002df4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
90002ba6:	6822      	ldr	r2, [r4, #0]
90002ba8:	0315      	lsls	r5, r2, #12
90002baa:	d501      	bpl.n	90002bb0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
90002bac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90002bae:	b14b      	cbz	r3, 90002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
90002bb0:	02d0      	lsls	r0, r2, #11
90002bb2:	d522      	bpl.n	90002bfa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
90002bb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
90002bb6:	bb03      	cbnz	r3, 90002bfa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
90002bb8:	e004      	b.n	90002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
90002bba:	bf00      	nop
90002bbc:	40023800 	.word	0x40023800
90002bc0:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
90002bc4:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
90002bc8:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
90002bcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90002bd0:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
90002bd4:	430b      	orrs	r3, r1
90002bd6:	6961      	ldr	r1, [r4, #20]
90002bd8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
90002bdc:	69a1      	ldr	r1, [r4, #24]
90002bde:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
90002be2:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
90002be6:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
90002bea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
90002bec:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
90002bf0:	3901      	subs	r1, #1
90002bf2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
90002bf6:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
90002bfa:	0291      	lsls	r1, r2, #10
90002bfc:	d515      	bpl.n	90002c2a <HAL_RCCEx_PeriphCLKConfig+0x32a>
90002bfe:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
90002c00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
90002c04:	d111      	bne.n	90002c2a <HAL_RCCEx_PeriphCLKConfig+0x32a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
90002c06:	4982      	ldr	r1, [pc, #520]	; (90002e10 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90002c08:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
90002c0c:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
90002c10:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
90002c14:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
90002c18:	4303      	orrs	r3, r0
90002c1a:	6960      	ldr	r0, [r4, #20]
90002c1c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
90002c20:	6a20      	ldr	r0, [r4, #32]
90002c22:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
90002c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
90002c2a:	0712      	lsls	r2, r2, #28
90002c2c:	d519      	bpl.n	90002c62 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
90002c2e:	4a78      	ldr	r2, [pc, #480]	; (90002e10 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90002c30:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
90002c34:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
90002c38:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
90002c3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90002c40:	430b      	orrs	r3, r1
90002c42:	6961      	ldr	r1, [r4, #20]
90002c44:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
90002c48:	69e1      	ldr	r1, [r4, #28]
90002c4a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
90002c4e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
90002c52:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
90002c56:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
90002c58:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
90002c5c:	430b      	orrs	r3, r1
90002c5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
90002c62:	4c6b      	ldr	r4, [pc, #428]	; (90002e10 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90002c64:	6823      	ldr	r3, [r4, #0]
90002c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90002c6a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90002c6c:	f7fe fdce 	bl	9000180c <HAL_GetTick>
90002c70:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
90002c72:	6823      	ldr	r3, [r4, #0]
90002c74:	009b      	lsls	r3, r3, #2
90002c76:	f140 80c4 	bpl.w	90002e02 <HAL_RCCEx_PeriphCLKConfig+0x502>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
90002c7a:	2000      	movs	r0, #0
90002c7c:	e009      	b.n	90002c92 <HAL_RCCEx_PeriphCLKConfig+0x392>
      plli2sused = 1;
90002c7e:	2601      	movs	r6, #1
90002c80:	e67a      	b.n	90002978 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90002c82:	f7fe fdc3 	bl	9000180c <HAL_GetTick>
90002c86:	eba0 0008 	sub.w	r0, r0, r8
90002c8a:	2864      	cmp	r0, #100	; 0x64
90002c8c:	f67f ae8c 	bls.w	900029a8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
90002c90:	2003      	movs	r0, #3
}
90002c92:	b003      	add	sp, #12
90002c94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
90002c98:	6b22      	ldr	r2, [r4, #48]	; 0x30
90002c9a:	f402 7240 	and.w	r2, r2, #768	; 0x300
90002c9e:	4293      	cmp	r3, r2
90002ca0:	f43f ae8c 	beq.w	900029bc <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
90002ca4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
90002ca6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
90002ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
90002cac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
90002cb0:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
90002cb2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
90002cb4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
90002cb8:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
90002cba:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
90002cbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
90002cbe:	07db      	lsls	r3, r3, #31
90002cc0:	f57f ae7c 	bpl.w	900029bc <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
90002cc4:	f7fe fda2 	bl	9000180c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
90002cc8:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
90002ccc:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90002cce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
90002cd0:	0798      	lsls	r0, r3, #30
90002cd2:	f53f ae73 	bmi.w	900029bc <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
90002cd6:	f7fe fd99 	bl	9000180c <HAL_GetTick>
90002cda:	eba0 0008 	sub.w	r0, r0, r8
90002cde:	4548      	cmp	r0, r9
90002ce0:	d9f5      	bls.n	90002cce <HAL_RCCEx_PeriphCLKConfig+0x3ce>
90002ce2:	e7d5      	b.n	90002c90 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
90002ce4:	6891      	ldr	r1, [r2, #8]
90002ce6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
90002cea:	e677      	b.n	900029dc <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
90002cec:	4e48      	ldr	r6, [pc, #288]	; (90002e10 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90002cee:	6833      	ldr	r3, [r6, #0]
90002cf0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
90002cf4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
90002cf6:	f7fe fd89 	bl	9000180c <HAL_GetTick>
90002cfa:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
90002cfc:	6833      	ldr	r3, [r6, #0]
90002cfe:	011a      	lsls	r2, r3, #4
90002d00:	d472      	bmi.n	90002de8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
90002d02:	6822      	ldr	r2, [r4, #0]
90002d04:	07d3      	lsls	r3, r2, #31
90002d06:	d512      	bpl.n	90002d2e <HAL_RCCEx_PeriphCLKConfig+0x42e>
90002d08:	6b63      	ldr	r3, [r4, #52]	; 0x34
90002d0a:	b983      	cbnz	r3, 90002d2e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
90002d0c:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
90002d10:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
90002d14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90002d18:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
90002d1c:	430b      	orrs	r3, r1
90002d1e:	6861      	ldr	r1, [r4, #4]
90002d20:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
90002d24:	68a1      	ldr	r1, [r4, #8]
90002d26:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
90002d2a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
90002d2e:	0317      	lsls	r7, r2, #12
90002d30:	d503      	bpl.n	90002d3a <HAL_RCCEx_PeriphCLKConfig+0x43a>
90002d32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90002d34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90002d38:	d005      	beq.n	90002d46 <HAL_RCCEx_PeriphCLKConfig+0x446>
90002d3a:	02d6      	lsls	r6, r2, #11
90002d3c:	d51e      	bpl.n	90002d7c <HAL_RCCEx_PeriphCLKConfig+0x47c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
90002d3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
90002d40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90002d44:	d11a      	bne.n	90002d7c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
90002d46:	4932      	ldr	r1, [pc, #200]	; (90002e10 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90002d48:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
90002d4c:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
90002d50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90002d54:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
90002d58:	4303      	orrs	r3, r0
90002d5a:	6860      	ldr	r0, [r4, #4]
90002d5c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
90002d60:	68e0      	ldr	r0, [r4, #12]
90002d62:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
90002d66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
90002d6a:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
90002d6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
90002d70:	f020 001f 	bic.w	r0, r0, #31
90002d74:	3b01      	subs	r3, #1
90002d76:	4303      	orrs	r3, r0
90002d78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
90002d7c:	01d0      	lsls	r0, r2, #7
90002d7e:	d511      	bpl.n	90002da4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
90002d80:	4923      	ldr	r1, [pc, #140]	; (90002e10 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90002d82:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
90002d86:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
90002d8a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
90002d8e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
90002d92:	4303      	orrs	r3, r0
90002d94:	6860      	ldr	r0, [r4, #4]
90002d96:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
90002d9a:	6920      	ldr	r0, [r4, #16]
90002d9c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
90002da0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
90002da4:	0191      	lsls	r1, r2, #6
90002da6:	d50d      	bpl.n	90002dc4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
90002da8:	6923      	ldr	r3, [r4, #16]
90002daa:	6862      	ldr	r2, [r4, #4]
90002dac:	041b      	lsls	r3, r3, #16
90002dae:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
90002db2:	68e2      	ldr	r2, [r4, #12]
90002db4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
90002db8:	68a2      	ldr	r2, [r4, #8]
90002dba:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
90002dbe:	4a14      	ldr	r2, [pc, #80]	; (90002e10 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90002dc0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
90002dc4:	4e12      	ldr	r6, [pc, #72]	; (90002e10 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90002dc6:	6833      	ldr	r3, [r6, #0]
90002dc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
90002dcc:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
90002dce:	f7fe fd1d 	bl	9000180c <HAL_GetTick>
90002dd2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
90002dd4:	6833      	ldr	r3, [r6, #0]
90002dd6:	011a      	lsls	r2, r3, #4
90002dd8:	f53f aed6 	bmi.w	90002b88 <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
90002ddc:	f7fe fd16 	bl	9000180c <HAL_GetTick>
90002de0:	1bc0      	subs	r0, r0, r7
90002de2:	2864      	cmp	r0, #100	; 0x64
90002de4:	d9f6      	bls.n	90002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
90002de6:	e753      	b.n	90002c90 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
90002de8:	f7fe fd10 	bl	9000180c <HAL_GetTick>
90002dec:	1bc0      	subs	r0, r0, r7
90002dee:	2864      	cmp	r0, #100	; 0x64
90002df0:	d984      	bls.n	90002cfc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
90002df2:	e74d      	b.n	90002c90 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
90002df4:	f7fe fd0a 	bl	9000180c <HAL_GetTick>
90002df8:	1bc0      	subs	r0, r0, r7
90002dfa:	2864      	cmp	r0, #100	; 0x64
90002dfc:	f67f aecf 	bls.w	90002b9e <HAL_RCCEx_PeriphCLKConfig+0x29e>
90002e00:	e746      	b.n	90002c90 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
90002e02:	f7fe fd03 	bl	9000180c <HAL_GetTick>
90002e06:	1b40      	subs	r0, r0, r5
90002e08:	2864      	cmp	r0, #100	; 0x64
90002e0a:	f67f af32 	bls.w	90002c72 <HAL_RCCEx_PeriphCLKConfig+0x372>
90002e0e:	e73f      	b.n	90002c90 <HAL_RCCEx_PeriphCLKConfig+0x390>
90002e10:	40023800 	.word	0x40023800

90002e14 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
90002e14:	4770      	bx	lr

90002e16 <HAL_SDRAM_Init>:
{   
90002e16:	b538      	push	{r3, r4, r5, lr}
90002e18:	460d      	mov	r5, r1
  if(hsdram == NULL)
90002e1a:	4604      	mov	r4, r0
90002e1c:	b1c8      	cbz	r0, 90002e52 <HAL_SDRAM_Init+0x3c>
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
90002e1e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
90002e22:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90002e26:	b91b      	cbnz	r3, 90002e30 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
90002e28:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
90002e2c:	f7ff fff2 	bl	90002e14 <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90002e30:	2302      	movs	r3, #2
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
90002e32:	1d21      	adds	r1, r4, #4
90002e34:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90002e36:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
90002e3a:	f000 f8cf 	bl	90002fdc <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
90002e3e:	6862      	ldr	r2, [r4, #4]
90002e40:	4629      	mov	r1, r5
90002e42:	6820      	ldr	r0, [r4, #0]
90002e44:	f000 f900 	bl	90003048 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
90002e48:	2301      	movs	r3, #1
  return HAL_OK;
90002e4a:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
90002e4c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
90002e50:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
90002e52:	2001      	movs	r0, #1
90002e54:	e7fc      	b.n	90002e50 <HAL_SDRAM_Init+0x3a>

90002e56 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
90002e56:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
90002e58:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
90002e5c:	4604      	mov	r4, r0
90002e5e:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
90002e60:	2b02      	cmp	r3, #2
90002e62:	b2d8      	uxtb	r0, r3
90002e64:	d00d      	beq.n	90002e82 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90002e66:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
90002e68:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90002e6a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
90002e6e:	f000 f92e 	bl	900030ce <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
90002e72:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
90002e74:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
90002e76:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
90002e78:	bf0c      	ite	eq
90002e7a:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
90002e7c:	2301      	movne	r3, #1
90002e7e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
90002e82:	bd38      	pop	{r3, r4, r5, pc}

90002e84 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
90002e84:	b510      	push	{r4, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
90002e86:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
90002e8a:	4604      	mov	r4, r0
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
90002e8c:	2b02      	cmp	r3, #2
90002e8e:	b2d8      	uxtb	r0, r3
90002e90:	d009      	beq.n	90002ea6 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90002e92:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
90002e94:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90002e96:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
90002e9a:	f000 f92b 	bl	900030f4 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
90002e9e:	2301      	movs	r3, #1
  
  return HAL_OK;   
90002ea0:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
90002ea2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
90002ea6:	bd10      	pop	{r4, pc}

90002ea8 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
90002ea8:	4770      	bx	lr
	...

90002eac <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
90002eac:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
90002eae:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
90002eb0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
90002eb4:	4b08      	ldr	r3, [pc, #32]	; (90002ed8 <HAL_TIM_Base_Start+0x2c>)
90002eb6:	6891      	ldr	r1, [r2, #8]
90002eb8:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
90002eba:	2b06      	cmp	r3, #6
90002ebc:	d006      	beq.n	90002ecc <HAL_TIM_Base_Start+0x20>
90002ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90002ec2:	d003      	beq.n	90002ecc <HAL_TIM_Base_Start+0x20>
  {
    __HAL_TIM_ENABLE(htim);
90002ec4:	6813      	ldr	r3, [r2, #0]
90002ec6:	f043 0301 	orr.w	r3, r3, #1
90002eca:	6013      	str	r3, [r2, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
90002ecc:	2301      	movs	r3, #1
90002ece:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
90002ed2:	2000      	movs	r0, #0
90002ed4:	4770      	bx	lr
90002ed6:	bf00      	nop
90002ed8:	00010007 	.word	0x00010007

90002edc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
90002edc:	4a30      	ldr	r2, [pc, #192]	; (90002fa0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
90002ede:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
90002ee0:	4290      	cmp	r0, r2
90002ee2:	d012      	beq.n	90002f0a <TIM_Base_SetConfig+0x2e>
90002ee4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
90002ee8:	d00f      	beq.n	90002f0a <TIM_Base_SetConfig+0x2e>
90002eea:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
90002eee:	4290      	cmp	r0, r2
90002ef0:	d00b      	beq.n	90002f0a <TIM_Base_SetConfig+0x2e>
90002ef2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
90002ef6:	4290      	cmp	r0, r2
90002ef8:	d007      	beq.n	90002f0a <TIM_Base_SetConfig+0x2e>
90002efa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
90002efe:	4290      	cmp	r0, r2
90002f00:	d003      	beq.n	90002f0a <TIM_Base_SetConfig+0x2e>
90002f02:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
90002f06:	4290      	cmp	r0, r2
90002f08:	d119      	bne.n	90002f3e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
90002f0a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
90002f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
90002f10:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
90002f12:	4a23      	ldr	r2, [pc, #140]	; (90002fa0 <TIM_Base_SetConfig+0xc4>)
90002f14:	4290      	cmp	r0, r2
90002f16:	d029      	beq.n	90002f6c <TIM_Base_SetConfig+0x90>
90002f18:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
90002f1c:	d026      	beq.n	90002f6c <TIM_Base_SetConfig+0x90>
90002f1e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
90002f22:	4290      	cmp	r0, r2
90002f24:	d022      	beq.n	90002f6c <TIM_Base_SetConfig+0x90>
90002f26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
90002f2a:	4290      	cmp	r0, r2
90002f2c:	d01e      	beq.n	90002f6c <TIM_Base_SetConfig+0x90>
90002f2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
90002f32:	4290      	cmp	r0, r2
90002f34:	d01a      	beq.n	90002f6c <TIM_Base_SetConfig+0x90>
90002f36:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
90002f3a:	4290      	cmp	r0, r2
90002f3c:	d016      	beq.n	90002f6c <TIM_Base_SetConfig+0x90>
90002f3e:	4a19      	ldr	r2, [pc, #100]	; (90002fa4 <TIM_Base_SetConfig+0xc8>)
90002f40:	4290      	cmp	r0, r2
90002f42:	d013      	beq.n	90002f6c <TIM_Base_SetConfig+0x90>
90002f44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
90002f48:	4290      	cmp	r0, r2
90002f4a:	d00f      	beq.n	90002f6c <TIM_Base_SetConfig+0x90>
90002f4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
90002f50:	4290      	cmp	r0, r2
90002f52:	d00b      	beq.n	90002f6c <TIM_Base_SetConfig+0x90>
90002f54:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
90002f58:	4290      	cmp	r0, r2
90002f5a:	d007      	beq.n	90002f6c <TIM_Base_SetConfig+0x90>
90002f5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
90002f60:	4290      	cmp	r0, r2
90002f62:	d003      	beq.n	90002f6c <TIM_Base_SetConfig+0x90>
90002f64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
90002f68:	4290      	cmp	r0, r2
90002f6a:	d103      	bne.n	90002f74 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
90002f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
90002f70:	68ca      	ldr	r2, [r1, #12]
90002f72:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
90002f74:	694a      	ldr	r2, [r1, #20]
90002f76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90002f7a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
90002f7c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
90002f7e:	688b      	ldr	r3, [r1, #8]
90002f80:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
90002f82:	680b      	ldr	r3, [r1, #0]
90002f84:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
90002f86:	4b06      	ldr	r3, [pc, #24]	; (90002fa0 <TIM_Base_SetConfig+0xc4>)
90002f88:	4298      	cmp	r0, r3
90002f8a:	d003      	beq.n	90002f94 <TIM_Base_SetConfig+0xb8>
90002f8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
90002f90:	4298      	cmp	r0, r3
90002f92:	d101      	bne.n	90002f98 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
90002f94:	690b      	ldr	r3, [r1, #16]
90002f96:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
90002f98:	2301      	movs	r3, #1
90002f9a:	6143      	str	r3, [r0, #20]
}
90002f9c:	4770      	bx	lr
90002f9e:	bf00      	nop
90002fa0:	40010000 	.word	0x40010000
90002fa4:	40014000 	.word	0x40014000

90002fa8 <HAL_TIM_Base_Init>:
{
90002fa8:	b510      	push	{r4, lr}
  if (htim == NULL)
90002faa:	4604      	mov	r4, r0
90002fac:	b1a0      	cbz	r0, 90002fd8 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
90002fae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
90002fb2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90002fb6:	b91b      	cbnz	r3, 90002fc0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
90002fb8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
90002fbc:	f7ff ff74 	bl	90002ea8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
90002fc0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
90002fc2:	6820      	ldr	r0, [r4, #0]
90002fc4:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
90002fc6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
90002fca:	f7ff ff87 	bl	90002edc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
90002fce:	2301      	movs	r3, #1
  return HAL_OK;
90002fd0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
90002fd2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
90002fd6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
90002fd8:	2001      	movs	r0, #1
90002fda:	e7fc      	b.n	90002fd6 <HAL_TIM_Base_Init+0x2e>

90002fdc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
90002fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90002fe0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
90002fe2:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
90002fe6:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
90002fea:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
90002fee:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
90002ff2:	6809      	ldr	r1, [r1, #0]
90002ff4:	4323      	orrs	r3, r4
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
90002ff6:	6804      	ldr	r4, [r0, #0]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
90002ff8:	2901      	cmp	r1, #1
90002ffa:	4912      	ldr	r1, [pc, #72]	; (90003044 <FMC_SDRAM_Init+0x68>)
90002ffc:	d00f      	beq.n	9000301e <FMC_SDRAM_Init+0x42>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
90002ffe:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
90003000:	4021      	ands	r1, r4
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
90003002:	432a      	orrs	r2, r5
90003004:	ea42 0308 	orr.w	r3, r2, r8
90003008:	ea43 030e 	orr.w	r3, r3, lr
9000300c:	ea43 030c 	orr.w	r3, r3, ip
90003010:	433b      	orrs	r3, r7
90003012:	4333      	orrs	r3, r6
90003014:	430b      	orrs	r3, r1
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
90003016:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
90003018:	2000      	movs	r0, #0
9000301a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
9000301e:	4313      	orrs	r3, r2
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
90003020:	6842      	ldr	r2, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
90003022:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
90003026:	4011      	ands	r1, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
90003028:	ea45 0208 	orr.w	r2, r5, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
9000302c:	4323      	orrs	r3, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
9000302e:	ea42 020e 	orr.w	r2, r2, lr
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
90003032:	6003      	str	r3, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
90003034:	ea42 020c 	orr.w	r2, r2, ip
90003038:	433a      	orrs	r2, r7
9000303a:	4332      	orrs	r2, r6
9000303c:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
9000303e:	6042      	str	r2, [r0, #4]
90003040:	e7ea      	b.n	90003018 <FMC_SDRAM_Init+0x3c>
90003042:	bf00      	nop
90003044:	ffff8000 	.word	0xffff8000

90003048 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
90003048:	68cb      	ldr	r3, [r1, #12]
9000304a:	2a01      	cmp	r2, #1
{
9000304c:	b5f0      	push	{r4, r5, r6, r7, lr}
9000304e:	680c      	ldr	r4, [r1, #0]
90003050:	f103 37ff 	add.w	r7, r3, #4294967295
90003054:	694b      	ldr	r3, [r1, #20]
90003056:	688e      	ldr	r6, [r1, #8]
90003058:	f104 3cff 	add.w	ip, r4, #4294967295
9000305c:	690d      	ldr	r5, [r1, #16]
9000305e:	f103 33ff 	add.w	r3, r3, #4294967295
90003062:	684c      	ldr	r4, [r1, #4]
90003064:	f106 36ff 	add.w	r6, r6, #4294967295
90003068:	6989      	ldr	r1, [r1, #24]
9000306a:	ea4f 5303 	mov.w	r3, r3, lsl #20
9000306e:	f104 34ff 	add.w	r4, r4, #4294967295
90003072:	f105 35ff 	add.w	r5, r5, #4294967295
90003076:	f101 31ff 	add.w	r1, r1, #4294967295
9000307a:	ea4f 2606 	mov.w	r6, r6, lsl #8
9000307e:	ea4f 1404 	mov.w	r4, r4, lsl #4
90003082:	ea4f 4505 	mov.w	r5, r5, lsl #16
90003086:	ea4f 6101 	mov.w	r1, r1, lsl #24
9000308a:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  if (Bank != FMC_SDRAM_BANK2) 
9000308e:	d00c      	beq.n	900030aa <FMC_SDRAM_Timing_Init+0x62>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90003090:	ea43 030c 	orr.w	r3, r3, ip
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
90003094:	6882      	ldr	r2, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90003096:	4323      	orrs	r3, r4
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
90003098:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
9000309c:	4333      	orrs	r3, r6
9000309e:	432b      	orrs	r3, r5
900030a0:	430b      	orrs	r3, r1
900030a2:	4313      	orrs	r3, r2
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
900030a4:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
900030a6:	2000      	movs	r0, #0
900030a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
900030aa:	6887      	ldr	r7, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
900030ac:	4334      	orrs	r4, r6
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
900030ae:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
900030b2:	ea44 020c 	orr.w	r2, r4, ip
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
900030b6:	f427 4770 	bic.w	r7, r7, #61440	; 0xf000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
900030ba:	432a      	orrs	r2, r5
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
900030bc:	433b      	orrs	r3, r7
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
900030be:	68c7      	ldr	r7, [r0, #12]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
900030c0:	430a      	orrs	r2, r1
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
900030c2:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
900030c6:	6083      	str	r3, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
900030c8:	433a      	orrs	r2, r7
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
900030ca:	60c2      	str	r2, [r0, #12]
900030cc:	e7eb      	b.n	900030a6 <FMC_SDRAM_Timing_Init+0x5e>

900030ce <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
900030ce:	e9d1 3200 	ldrd	r3, r2, [r1]
{
900030d2:	b513      	push	{r0, r1, r4, lr}
  tmpr = (uint32_t)((Command->CommandMode)                  |\
900030d4:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
900030d6:	68ca      	ldr	r2, [r1, #12]
  __IO uint32_t tmpr = 0;
900030d8:	2400      	movs	r4, #0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
900030da:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
900030de:	688a      	ldr	r2, [r1, #8]
  __IO uint32_t tmpr = 0;
900030e0:	9401      	str	r4, [sp, #4]
                    (((Command->AutoRefreshNumber)-1) << 5) |\
900030e2:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
900030e4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
900030e8:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
900030ea:	9b01      	ldr	r3, [sp, #4]
900030ec:	6103      	str	r3, [r0, #16]
  
  return HAL_OK;  
}
900030ee:	4620      	mov	r0, r4
900030f0:	b002      	add	sp, #8
900030f2:	bd10      	pop	{r4, pc}

900030f4 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
900030f4:	6943      	ldr	r3, [r0, #20]
900030f6:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
900030fa:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
900030fc:	2000      	movs	r0, #0
900030fe:	4770      	bx	lr

90003100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
90003100:	f8df d034 	ldr.w	sp, [pc, #52]	; 90003138 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
90003104:	2100      	movs	r1, #0
  b  LoopCopyDataInit
90003106:	e003      	b.n	90003110 <LoopCopyDataInit>

90003108 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
90003108:	4b0c      	ldr	r3, [pc, #48]	; (9000313c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
9000310a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
9000310c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
9000310e:	3104      	adds	r1, #4

90003110 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
90003110:	480b      	ldr	r0, [pc, #44]	; (90003140 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
90003112:	4b0c      	ldr	r3, [pc, #48]	; (90003144 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
90003114:	1842      	adds	r2, r0, r1
  cmp  r2, r3
90003116:	429a      	cmp	r2, r3
  bcc  CopyDataInit
90003118:	d3f6      	bcc.n	90003108 <CopyDataInit>
  ldr  r2, =_sbss
9000311a:	4a0b      	ldr	r2, [pc, #44]	; (90003148 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
9000311c:	e002      	b.n	90003124 <LoopFillZerobss>

9000311e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
9000311e:	2300      	movs	r3, #0
  str  r3, [r2], #4
90003120:	f842 3b04 	str.w	r3, [r2], #4

90003124 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
90003124:	4b09      	ldr	r3, [pc, #36]	; (9000314c <LoopFillZerobss+0x28>)
  cmp  r2, r3
90003126:	429a      	cmp	r2, r3
  bcc  FillZerobss
90003128:	d3f9      	bcc.n	9000311e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
9000312a:	f7fe fb03 	bl	90001734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
9000312e:	f001 fab1 	bl	90004694 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
90003132:	f000 f84f 	bl	900031d4 <main>
  bx  lr    
90003136:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
90003138:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
9000313c:	900099cc 	.word	0x900099cc
  ldr  r0, =_sdata
90003140:	20000000 	.word	0x20000000
  ldr  r3, =_edata
90003144:	200000a8 	.word	0x200000a8
  ldr  r2, =_sbss
90003148:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
9000314c:	20004274 	.word	0x20004274

90003150 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
90003150:	e7fe      	b.n	90003150 <ADC_IRQHandler>

90003152 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
90003152:	b570      	push	{r4, r5, r6, lr}
90003154:	460e      	mov	r6, r1
90003156:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90003158:	2500      	movs	r5, #0
9000315a:	42a5      	cmp	r5, r4
9000315c:	db01      	blt.n	90003162 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
9000315e:	4620      	mov	r0, r4
90003160:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
90003162:	f3af 8000 	nop.w
90003166:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90003168:	3501      	adds	r5, #1
9000316a:	e7f6      	b.n	9000315a <_read+0x8>

9000316c <_write>:

int _write(int file, char *ptr, int len)
{
9000316c:	b570      	push	{r4, r5, r6, lr}
9000316e:	460e      	mov	r6, r1
90003170:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90003172:	2500      	movs	r5, #0
90003174:	42a5      	cmp	r5, r4
90003176:	db01      	blt.n	9000317c <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
90003178:	4620      	mov	r0, r4
9000317a:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
9000317c:	5d70      	ldrb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
9000317e:	3501      	adds	r5, #1
		__io_putchar(*ptr++);
90003180:	f000 f9fa 	bl	90003578 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90003184:	e7f6      	b.n	90003174 <_write+0x8>
	...

90003188 <_sbrk>:

caddr_t _sbrk(int incr)
{
90003188:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
9000318a:	4b0a      	ldr	r3, [pc, #40]	; (900031b4 <_sbrk+0x2c>)
{
9000318c:	4602      	mov	r2, r0
	if (heap_end == 0)
9000318e:	6819      	ldr	r1, [r3, #0]
90003190:	b909      	cbnz	r1, 90003196 <_sbrk+0xe>
		heap_end = &end;
90003192:	4909      	ldr	r1, [pc, #36]	; (900031b8 <_sbrk+0x30>)
90003194:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
90003196:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
90003198:	4669      	mov	r1, sp
9000319a:	4402      	add	r2, r0
9000319c:	428a      	cmp	r2, r1
9000319e:	d906      	bls.n	900031ae <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
900031a0:	f001 fa72 	bl	90004688 <__errno>
900031a4:	230c      	movs	r3, #12
900031a6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
900031a8:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
900031ac:	bd08      	pop	{r3, pc}
	heap_end += incr;
900031ae:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
900031b0:	e7fc      	b.n	900031ac <_sbrk+0x24>
900031b2:	bf00      	nop
900031b4:	200004b8 	.word	0x200004b8
900031b8:	20004278 	.word	0x20004278

900031bc <_close>:

int _close(int file)
{
	return -1;
}
900031bc:	f04f 30ff 	mov.w	r0, #4294967295
900031c0:	4770      	bx	lr

900031c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
900031c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
900031c6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
900031c8:	604b      	str	r3, [r1, #4]
}
900031ca:	4770      	bx	lr

900031cc <_isatty>:

int _isatty(int file)
{
	return 1;
}
900031cc:	2001      	movs	r0, #1
900031ce:	4770      	bx	lr

900031d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
900031d0:	2000      	movs	r0, #0
900031d2:	4770      	bx	lr

900031d4 <main>:
/**
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void) {
900031d4:	b500      	push	{lr}
900031d6:	b095      	sub	sp, #84	; 0x54
static void SystemClock_Config(void) {
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
900031d8:	2601      	movs	r6, #1
  HAL_Init();
900031da:	f7fe faf5 	bl	900017c8 <HAL_Init>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
900031de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
900031e2:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 400;
900031e4:	2119      	movs	r1, #25
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
900031e6:	2500      	movs	r5, #0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 8;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
900031e8:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
900031ea:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
900031ec:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
900031ee:	e9cd 6308 	strd	r6, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
900031f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
900031f6:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 400;
900031fa:	f44f 73c8 	mov.w	r3, #400	; 0x190
900031fe:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
90003202:	2308      	movs	r3, #8
90003204:	9313      	str	r3, [sp, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
90003206:	f7ff f8ef 	bl	900023e8 <HAL_RCC_OscConfig>
  HAL_PWREx_EnableOverDrive();
9000320a:	f7ff f8b5 	bl	90002378 <HAL_PWREx_EnableOverDrive>
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
9000320e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
90003210:	f44f 50a0 	mov.w	r0, #5120	; 0x1400

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
90003214:	2106      	movs	r1, #6
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
90003216:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90003218:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
9000321c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90003220:	e9cd 0306 	strd	r0, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
90003224:	a803      	add	r0, sp, #12
90003226:	f7ff facb 	bl	900027c0 <HAL_RCC_ClockConfig>
9000322a:	4605      	mov	r5, r0
9000322c:	b100      	cbz	r0, 90003230 <main+0x5c>
  * @param  None
  * @retval None
  */
static void Error_Handler(void) {
  /* User may add here some code to deal with this error */
  while (1) {
9000322e:	e7fe      	b.n	9000322e <main+0x5a>
  HAL_MPU_Disable();
90003230:	f7fe fb6c 	bl	9000190c <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
90003234:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
90003238:	4b56      	ldr	r3, [pc, #344]	; (90003394 <main+0x1c0>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000323a:	a808      	add	r0, sp, #32
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
9000323c:	f8ad 6020 	strh.w	r6, [sp, #32]
  TimHandle.Instance = TIM2;
90003240:	4c55      	ldr	r4, [pc, #340]	; (90003398 <main+0x1c4>)
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
90003242:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
90003246:	4b55      	ldr	r3, [pc, #340]	; (9000339c <main+0x1c8>)
90003248:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000324a:	f7fe fb81 	bl	90001950 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
9000324e:	2004      	movs	r0, #4
90003250:	f7fe fb6c 	bl	9000192c <HAL_MPU_Enable>
  TimHandle.Instance = TIM2;
90003254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&TimHandle) != HAL_OK) {
90003258:	4620      	mov	r0, r4
  TimHandle.Instance = TIM2;
9000325a:	6023      	str	r3, [r4, #0]
  __HAL_RCC_TIM2_CLK_ENABLE();
9000325c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
90003260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
90003262:	f042 0201 	orr.w	r2, r2, #1
90003266:	641a      	str	r2, [r3, #64]	; 0x40
90003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  TimHandle.Init.Prescaler         = 0;
9000326a:	6065      	str	r5, [r4, #4]
  __HAL_RCC_TIM2_CLK_ENABLE();
9000326c:	f003 0301 	and.w	r3, r3, #1
  TimHandle.Init.ClockDivision     = 0;
90003270:	6125      	str	r5, [r4, #16]
  TimHandle.Init.CounterMode       = TIM_COUNTERMODE_UP;
90003272:	60a5      	str	r5, [r4, #8]
  __HAL_RCC_TIM2_CLK_ENABLE();
90003274:	9308      	str	r3, [sp, #32]
90003276:	9b08      	ldr	r3, [sp, #32]
  TimHandle.Init.Period            = 0xFFFFFFFF;
90003278:	f04f 33ff 	mov.w	r3, #4294967295
  TimHandle.Init.RepetitionCounter = 0;
9000327c:	6165      	str	r5, [r4, #20]
  TimHandle.Init.Period            = 0xFFFFFFFF;
9000327e:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&TimHandle) != HAL_OK) {
90003280:	f7ff fe92 	bl	90002fa8 <HAL_TIM_Base_Init>
90003284:	4605      	mov	r5, r0
90003286:	b100      	cbz	r0, 9000328a <main+0xb6>
  while (1) {
90003288:	e7fe      	b.n	90003288 <main+0xb4>
  HAL_TIM_Base_Start(&TimHandle);
9000328a:	4620      	mov	r0, r4
9000328c:	f7ff fe0e 	bl	90002eac <HAL_TIM_Base_Start>
  __ASM volatile ("dsb 0xF":::"memory");
90003290:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90003294:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
90003298:	4b41      	ldr	r3, [pc, #260]	; (900033a0 <main+0x1cc>)
9000329a:	f8c3 5250 	str.w	r5, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
9000329e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900032a2:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
900032a6:	695a      	ldr	r2, [r3, #20]
900032a8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
900032ac:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
900032ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900032b2:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
900032b6:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
900032ba:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
900032be:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900032c2:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
900032c6:	f3c2 00c9 	ubfx	r0, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
900032ca:	f3c2 324e 	ubfx	r2, r2, #13, #15
900032ce:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900032d0:	ea02 0604 	and.w	r6, r2, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
900032d4:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900032d6:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
900032da:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900032dc:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
      } while (ways-- != 0U);
900032e0:	d2f9      	bcs.n	900032d6 <main+0x102>
    } while(sets-- != 0U);
900032e2:	3a20      	subs	r2, #32
900032e4:	f112 0f20 	cmn.w	r2, #32
900032e8:	d1f2      	bne.n	900032d0 <main+0xfc>
900032ea:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
900032ee:	695a      	ldr	r2, [r3, #20]
900032f0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
900032f4:	615a      	str	r2, [r3, #20]
900032f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900032fa:	f3bf 8f6f 	isb	sy
  __HAL_FLASH_ART_ENABLE(); // enable the ART cache on ITCM flash
900032fe:	4c29      	ldr	r4, [pc, #164]	; (900033a4 <main+0x1d0>)
  printf("WS: %2d, ART: %s, D_cache: %s, I_cache: %s\n", FLASH->ACR & 0xF, (FLASH->ACR & 0x200) ? "ON " : "OFF", ((SCB->CCR & 0x10000) ? "ON " : "OFF"), ((SCB->CCR & 0x20000) ? "ON " : "OFF"));
90003300:	4d27      	ldr	r5, [pc, #156]	; (900033a0 <main+0x1cc>)
  __HAL_FLASH_ART_ENABLE(); // enable the ART cache on ITCM flash
90003302:	6823      	ldr	r3, [r4, #0]
90003304:	f443 7300 	orr.w	r3, r3, #512	; 0x200
90003308:	6023      	str	r3, [r4, #0]
  TPI->ACPR = (HAL_RCC_GetSysClockFreq() / 2000000) - 1; // make the SWO working whatever settings in the system frequency - output is always 2MHz
9000330a:	f7ff fa2b 	bl	90002764 <HAL_RCC_GetSysClockFreq>
9000330e:	4b26      	ldr	r3, [pc, #152]	; (900033a8 <main+0x1d4>)
90003310:	fbb0 f0f3 	udiv	r0, r0, r3
90003314:	4b25      	ldr	r3, [pc, #148]	; (900033ac <main+0x1d8>)
90003316:	3801      	subs	r0, #1
90003318:	6118      	str	r0, [r3, #16]
  BSP_LCD_Init();
9000331a:	f7fe f86d 	bl	900013f8 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
9000331e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
90003322:	2000      	movs	r0, #0
90003324:	f7fd fdfe 	bl	90000f24 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
90003328:	2000      	movs	r0, #0
9000332a:	f7fd fe33 	bl	90000f94 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOff();
9000332e:	f7fd ff95 	bl	9000125c <BSP_LCD_DisplayOff>
  LCD_LOG_Init();
90003332:	f000 f89f 	bl	90003474 <LCD_LOG_Init>
  LCD_LOG_SetHeader((uint8_t *)"Coremark benchmark");
90003336:	481e      	ldr	r0, [pc, #120]	; (900033b0 <main+0x1dc>)
90003338:	f000 f8a6 	bl	90003488 <LCD_LOG_SetHeader>
  printf("Data at address: 0x%08X \n", (uint32_t)&default_num_contexts);
9000333c:	491d      	ldr	r1, [pc, #116]	; (900033b4 <main+0x1e0>)
9000333e:	481e      	ldr	r0, [pc, #120]	; (900033b8 <main+0x1e4>)
90003340:	f001 f9d4 	bl	900046ec <iprintf>
  printf("WS: %2d, ART: %s, D_cache: %s, I_cache: %s\n", FLASH->ACR & 0xF, (FLASH->ACR & 0x200) ? "ON " : "OFF", ((SCB->CCR & 0x10000) ? "ON " : "OFF"), ((SCB->CCR & 0x20000) ? "ON " : "OFF"));
90003344:	6821      	ldr	r1, [r4, #0]
90003346:	6823      	ldr	r3, [r4, #0]
90003348:	481c      	ldr	r0, [pc, #112]	; (900033bc <main+0x1e8>)
9000334a:	f001 010f 	and.w	r1, r1, #15
9000334e:	f413 7f00 	tst.w	r3, #512	; 0x200
90003352:	4c1b      	ldr	r4, [pc, #108]	; (900033c0 <main+0x1ec>)
90003354:	696b      	ldr	r3, [r5, #20]
90003356:	bf14      	ite	ne
90003358:	4602      	movne	r2, r0
9000335a:	4622      	moveq	r2, r4
9000335c:	696d      	ldr	r5, [r5, #20]
9000335e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
90003362:	bf14      	ite	ne
90003364:	4603      	movne	r3, r0
90003366:	4623      	moveq	r3, r4
90003368:	f415 3f00 	tst.w	r5, #131072	; 0x20000
9000336c:	bf08      	it	eq
9000336e:	4620      	moveq	r0, r4
90003370:	9000      	str	r0, [sp, #0]
90003372:	4814      	ldr	r0, [pc, #80]	; (900033c4 <main+0x1f0>)
90003374:	f001 f9ba 	bl	900046ec <iprintf>
  printf("System Clock: %9d\n", HAL_RCC_GetSysClockFreq());
90003378:	f7ff f9f4 	bl	90002764 <HAL_RCC_GetSysClockFreq>
9000337c:	4601      	mov	r1, r0
9000337e:	4812      	ldr	r0, [pc, #72]	; (900033c8 <main+0x1f4>)
90003380:	f001 f9b4 	bl	900046ec <iprintf>
  printf("and Core is M7\n\r");
90003384:	4811      	ldr	r0, [pc, #68]	; (900033cc <main+0x1f8>)
90003386:	f001 f9b1 	bl	900046ec <iprintf>
  core_main();
9000338a:	f000 fb9b 	bl	90003ac4 <core_main>
  BSP_LCD_DisplayOn();
9000338e:	f7fd ff4b 	bl	90001228 <BSP_LCD_DisplayOn>
  while (1);
90003392:	e7fe      	b.n	90003392 <main+0x1be>
90003394:	0301000f 	.word	0x0301000f
90003398:	200005bc 	.word	0x200005bc
9000339c:	01010000 	.word	0x01010000
900033a0:	e000ed00 	.word	0xe000ed00
900033a4:	40023c00 	.word	0x40023c00
900033a8:	001e8480 	.word	0x001e8480
900033ac:	e0040000 	.word	0xe0040000
900033b0:	90009400 	.word	0x90009400
900033b4:	20000038 	.word	0x20000038
900033b8:	90009413 	.word	0x90009413
900033bc:	900093f8 	.word	0x900093f8
900033c0:	900093fc 	.word	0x900093fc
900033c4:	9000942d 	.word	0x9000942d
900033c8:	90009459 	.word	0x90009459
900033cc:	9000946c 	.word	0x9000946c

900033d0 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
900033d0:	4770      	bx	lr

900033d2 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
900033d2:	e7fe      	b.n	900033d2 <HardFault_Handler>

900033d4 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
900033d4:	e7fe      	b.n	900033d4 <MemManage_Handler>

900033d6 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
900033d6:	e7fe      	b.n	900033d6 <BusFault_Handler>

900033d8 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
900033d8:	e7fe      	b.n	900033d8 <UsageFault_Handler>

900033da <SVC_Handler>:
900033da:	4770      	bx	lr

900033dc <DebugMon_Handler>:
900033dc:	4770      	bx	lr

900033de <PendSV_Handler>:
900033de:	4770      	bx	lr

900033e0 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
900033e0:	f7fe ba08 	b.w	900017f4 <HAL_IncTick>

900033e4 <EXTI0_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(WAKEUP_BUTTON_PIN);
900033e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
900033e8:	f7fe be96 	b.w	90002118 <HAL_GPIO_EXTI_IRQHandler>

900033ec <EXTI2_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI2_IRQHandler(void)
{
   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
900033ec:	2004      	movs	r0, #4
900033ee:	f7fe be93 	b.w	90002118 <HAL_GPIO_EXTI_IRQHandler>
	...

900033f4 <DMA2_Stream7_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
900033f4:	4b01      	ldr	r3, [pc, #4]	; (900033fc <DMA2_Stream7_IRQHandler+0x8>)
900033f6:	6f18      	ldr	r0, [r3, #112]	; 0x70
900033f8:	f7fe bb92 	b.w	90001b20 <HAL_DMA_IRQHandler>
900033fc:	20000148 	.word	0x20000148

90003400 <DMA2_Stream0_IRQHandler>:
  * @brief  Handles SDRAM DMA transfer interrupt request.
  * @retval None
  */
void BSP_SDRAM_DMA_IRQHandler(void)
{
  HAL_DMA_IRQHandler(sdramHandle.hdma); 
90003400:	4b01      	ldr	r3, [pc, #4]	; (90003408 <DMA2_Stream0_IRQHandler+0x8>)
90003402:	6b18      	ldr	r0, [r3, #48]	; 0x30
90003404:	f7fe bb8c 	b.w	90001b20 <HAL_DMA_IRQHandler>
90003408:	20000584 	.word	0x20000584

9000340c <DMA2_Stream1_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Stream1_IRQHandler(void)
{
  BSP_CAMERA_DMA_IRQHandler();
9000340c:	e7fe      	b.n	9000340c <DMA2_Stream1_IRQHandler>
	...

90003410 <LCD_LOG_DeInit>:
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
90003410:	4b0c      	ldr	r3, [pc, #48]	; (90003444 <LCD_LOG_DeInit+0x34>)
  LCD_CacheBuffer_yptr_bottom = 0;
  
  LCD_CacheBuffer_yptr_top_bak = 0;
  LCD_CacheBuffer_yptr_bottom_bak = 0;
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
90003412:	2101      	movs	r1, #1
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
90003414:	4a0c      	ldr	r2, [pc, #48]	; (90003448 <LCD_LOG_DeInit+0x38>)
90003416:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
90003418:	2300      	movs	r3, #0
9000341a:	4a0c      	ldr	r2, [pc, #48]	; (9000344c <LCD_LOG_DeInit+0x3c>)
9000341c:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_top = 0;
9000341e:	4a0c      	ldr	r2, [pc, #48]	; (90003450 <LCD_LOG_DeInit+0x40>)
90003420:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_bottom = 0;
90003422:	4a0c      	ldr	r2, [pc, #48]	; (90003454 <LCD_LOG_DeInit+0x44>)
90003424:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_top_bak = 0;
90003426:	4a0c      	ldr	r2, [pc, #48]	; (90003458 <LCD_LOG_DeInit+0x48>)
90003428:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
9000342a:	4a0c      	ldr	r2, [pc, #48]	; (9000345c <LCD_LOG_DeInit+0x4c>)
9000342c:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_invert= ENABLE;
9000342e:	4a0c      	ldr	r2, [pc, #48]	; (90003460 <LCD_LOG_DeInit+0x50>)
90003430:	7011      	strb	r1, [r2, #0]
  LCD_ScrollActive = DISABLE;
90003432:	4a0c      	ldr	r2, [pc, #48]	; (90003464 <LCD_LOG_DeInit+0x54>)
90003434:	7013      	strb	r3, [r2, #0]
  LCD_Lock = DISABLE;
90003436:	4a0c      	ldr	r2, [pc, #48]	; (90003468 <LCD_LOG_DeInit+0x58>)
90003438:	7013      	strb	r3, [r2, #0]
  LCD_Scrolled = DISABLE;
9000343a:	4a0c      	ldr	r2, [pc, #48]	; (9000346c <LCD_LOG_DeInit+0x5c>)
9000343c:	7013      	strb	r3, [r2, #0]
  LCD_ScrollBackStep = 0;
9000343e:	4a0c      	ldr	r2, [pc, #48]	; (90003470 <LCD_LOG_DeInit+0x60>)
90003440:	8013      	strh	r3, [r2, #0]
}
90003442:	4770      	bx	lr
90003444:	20004260 	.word	0x20004260
90003448:	ff000080 	.word	0xff000080
9000344c:	20000602 	.word	0x20000602
90003450:	20000608 	.word	0x20000608
90003454:	20000600 	.word	0x20000600
90003458:	200005fe 	.word	0x200005fe
9000345c:	200005fc 	.word	0x200005fc
90003460:	20000604 	.word	0x20000604
90003464:	2000060a 	.word	0x2000060a
90003468:	20000605 	.word	0x20000605
9000346c:	20000606 	.word	0x20000606
90003470:	20004264 	.word	0x20004264

90003474 <LCD_LOG_Init>:
{
90003474:	b508      	push	{r3, lr}
  LCD_LOG_DeInit();
90003476:	f7ff ffcb 	bl	90003410 <LCD_LOG_DeInit>
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
9000347a:	f04f 30ff 	mov.w	r0, #4294967295
}
9000347e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
90003482:	f7fd bdb5 	b.w	90000ff0 <BSP_LCD_Clear>
	...

90003488 <LCD_LOG_SetHeader>:
  * @brief  Display the application header on the LCD screen 
  * @param  header: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
90003488:	b570      	push	{r4, r5, r6, lr}
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
9000348a:	4c16      	ldr	r4, [pc, #88]	; (900034e4 <LCD_LOG_SetHeader+0x5c>)
{
9000348c:	4605      	mov	r5, r0

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
9000348e:	4e16      	ldr	r6, [pc, #88]	; (900034e8 <LCD_LOG_SetHeader+0x60>)
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
90003490:	4620      	mov	r0, r4
90003492:	f7fd fd99 	bl	90000fc8 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
90003496:	4630      	mov	r0, r6
90003498:	f7fd fd82 	bl	90000fa0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), LCD_LOG_HEADER_FONT.Height * 3);
9000349c:	f7fd fd36 	bl	90000f0c <BSP_LCD_GetXSize>
900034a0:	88e3      	ldrh	r3, [r4, #6]
900034a2:	2100      	movs	r1, #0
900034a4:	b282      	uxth	r2, r0
900034a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
900034aa:	4608      	mov	r0, r1
900034ac:	b29b      	uxth	r3, r3
900034ae:	f7fd fe97 	bl	900011e0 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
900034b2:	f04f 30ff 	mov.w	r0, #4294967295
900034b6:	f7fd fd73 	bl	90000fa0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
900034ba:	4630      	mov	r0, r6
900034bc:	f7fd fd7a 	bl	90000fb4 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, LCD_LOG_HEADER_FONT.Height, header, CENTER_MODE);
900034c0:	462a      	mov	r2, r5
900034c2:	88e1      	ldrh	r1, [r4, #6]
900034c4:	2301      	movs	r3, #1
900034c6:	2000      	movs	r0, #0
900034c8:	f7fd fe1e 	bl	90001108 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
900034cc:	f04f 30ff 	mov.w	r0, #4294967295
900034d0:	f7fd fd70 	bl	90000fb4 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
900034d4:	4805      	ldr	r0, [pc, #20]	; (900034ec <LCD_LOG_SetHeader+0x64>)
900034d6:	f7fd fd63 	bl	90000fa0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
900034da:	4805      	ldr	r0, [pc, #20]	; (900034f0 <LCD_LOG_SetHeader+0x68>)
}
900034dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
900034e0:	f7fd bd72 	b.w	90000fc8 <BSP_LCD_SetFont>
900034e4:	20000018 	.word	0x20000018
900034e8:	ff0000ff 	.word	0xff0000ff
900034ec:	ff000080 	.word	0xff000080
900034f0:	20000010 	.word	0x20000010

900034f4 <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
900034f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t cnt = 0 ;
  uint16_t length = 0 ;
  uint16_t ptr = 0, index = 0;
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
900034f8:	4d1c      	ldr	r5, [pc, #112]	; (9000356c <LCD_LOG_UpdateDisplay+0x78>)
900034fa:	4a1d      	ldr	r2, [pc, #116]	; (90003570 <LCD_LOG_UpdateDisplay+0x7c>)
900034fc:	882b      	ldrh	r3, [r5, #0]
900034fe:	8812      	ldrh	r2, [r2, #0]
90003500:	2b0f      	cmp	r3, #15
90003502:	4f1c      	ldr	r7, [pc, #112]	; (90003574 <LCD_LOG_UpdateDisplay+0x80>)
90003504:	d811      	bhi.n	9000352a <LCD_LOG_UpdateDisplay+0x36>
90003506:	4293      	cmp	r3, r2
90003508:	d311      	bcc.n	9000352e <LCD_LOG_UpdateDisplay+0x3a>
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
9000350a:	2484      	movs	r4, #132	; 0x84
9000350c:	fb04 7303 	mla	r3, r4, r3, r7
90003510:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
90003514:	f7fd fd44 	bl	90000fa0 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
90003518:	8829      	ldrh	r1, [r5, #0]
9000351a:	1d08      	adds	r0, r1, #4
9000351c:	fb04 7101 	mla	r1, r4, r1, r7
90003520:	b280      	uxth	r0, r0
                             (uint8_t *)(LCD_CacheBuffer[index].line));
      
    }
  }
  
}
90003522:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
90003526:	f7fd be47 	b.w	900011b8 <BSP_LCD_DisplayStringAtLine>
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
9000352a:	4293      	cmp	r3, r2
9000352c:	d201      	bcs.n	90003532 <LCD_LOG_UpdateDisplay+0x3e>
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
9000352e:	3375      	adds	r3, #117	; 0x75
90003530:	b29b      	uxth	r3, r3
    ptr = length - YWINDOW_SIZE + 1;
90003532:	3b10      	subs	r3, #16
90003534:	2600      	movs	r6, #0
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
90003536:	f04f 0875 	mov.w	r8, #117	; 0x75
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
9000353a:	f04f 0984 	mov.w	r9, #132	; 0x84
    ptr = length - YWINDOW_SIZE + 1;
9000353e:	b29c      	uxth	r4, r3
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
90003540:	19a1      	adds	r1, r4, r6
90003542:	fbb1 f5f8 	udiv	r5, r1, r8
90003546:	fb08 1515 	mls	r5, r8, r5, r1
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
9000354a:	fb09 7505 	mla	r5, r9, r5, r7
9000354e:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
90003552:	f7fd fd25 	bl	90000fa0 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
90003556:	1d30      	adds	r0, r6, #4
90003558:	3601      	adds	r6, #1
9000355a:	4629      	mov	r1, r5
9000355c:	b280      	uxth	r0, r0
9000355e:	f7fd fe2b 	bl	900011b8 <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
90003562:	2e11      	cmp	r6, #17
90003564:	d1ec      	bne.n	90003540 <LCD_LOG_UpdateDisplay+0x4c>
}
90003566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000356a:	bf00      	nop
9000356c:	20000600 	.word	0x20000600
90003570:	20000608 	.word	0x20000608
90003574:	2000060c 	.word	0x2000060c

90003578 <__io_putchar>:
{
90003578:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000357c:	4605      	mov	r5, r0
  sFONT *cFont = BSP_LCD_GetFont();
9000357e:	f7fd fd2d 	bl	90000fdc <BSP_LCD_GetFont>
  if(LCD_Lock == DISABLE)
90003582:	4b3d      	ldr	r3, [pc, #244]	; (90003678 <__io_putchar+0x100>)
  sFONT *cFont = BSP_LCD_GetFont();
90003584:	4680      	mov	r8, r0
  if(LCD_Lock == DISABLE)
90003586:	781b      	ldrb	r3, [r3, #0]
90003588:	bb43      	cbnz	r3, 900035dc <__io_putchar+0x64>
    if(LCD_ScrollActive == ENABLE)
9000358a:	4a3c      	ldr	r2, [pc, #240]	; (9000367c <__io_putchar+0x104>)
9000358c:	4c3c      	ldr	r4, [pc, #240]	; (90003680 <__io_putchar+0x108>)
9000358e:	7811      	ldrb	r1, [r2, #0]
90003590:	2901      	cmp	r1, #1
90003592:	d10b      	bne.n	900035ac <__io_putchar+0x34>
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
90003594:	493b      	ldr	r1, [pc, #236]	; (90003684 <__io_putchar+0x10c>)
      LCD_ScrollActive = DISABLE;
90003596:	7013      	strb	r3, [r2, #0]
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
90003598:	8809      	ldrh	r1, [r1, #0]
      LCD_Scrolled = DISABLE;
9000359a:	4a3b      	ldr	r2, [pc, #236]	; (90003688 <__io_putchar+0x110>)
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
9000359c:	8021      	strh	r1, [r4, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
9000359e:	493b      	ldr	r1, [pc, #236]	; (9000368c <__io_putchar+0x114>)
      LCD_Scrolled = DISABLE;
900035a0:	7013      	strb	r3, [r2, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
900035a2:	8808      	ldrh	r0, [r1, #0]
      LCD_ScrollBackStep = 0;
900035a4:	4a3a      	ldr	r2, [pc, #232]	; (90003690 <__io_putchar+0x118>)
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
900035a6:	493b      	ldr	r1, [pc, #236]	; (90003694 <__io_putchar+0x11c>)
      LCD_ScrollBackStep = 0;
900035a8:	8013      	strh	r3, [r2, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
900035aa:	8008      	strh	r0, [r1, #0]
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
900035ac:	4f3a      	ldr	r7, [pc, #232]	; (90003698 <__io_putchar+0x120>)
900035ae:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 900036a4 <__io_putchar+0x12c>
900035b2:	883e      	ldrh	r6, [r7, #0]
900035b4:	f7fd fcaa 	bl	90000f0c <BSP_LCD_GetXSize>
900035b8:	f8b8 3004 	ldrh.w	r3, [r8, #4]
900035bc:	fbb0 f0f3 	udiv	r0, r0, r3
900035c0:	4286      	cmp	r6, r0
900035c2:	463e      	mov	r6, r7
900035c4:	d20d      	bcs.n	900035e2 <__io_putchar+0x6a>
900035c6:	2d0a      	cmp	r5, #10
900035c8:	d00b      	beq.n	900035e2 <__io_putchar+0x6a>
900035ca:	883a      	ldrh	r2, [r7, #0]
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
900035cc:	8823      	ldrh	r3, [r4, #0]
900035ce:	1c51      	adds	r1, r2, #1
900035d0:	8039      	strh	r1, [r7, #0]
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
900035d2:	2184      	movs	r1, #132	; 0x84
900035d4:	fb01 9903 	mla	r9, r1, r3, r9
900035d8:	f809 5002 	strb.w	r5, [r9, r2]
}
900035dc:	4628      	mov	r0, r5
900035de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
900035e2:	4f2c      	ldr	r7, [pc, #176]	; (90003694 <__io_putchar+0x11c>)
900035e4:	8822      	ldrh	r2, [r4, #0]
900035e6:	883b      	ldrh	r3, [r7, #0]
900035e8:	429a      	cmp	r2, r3
900035ea:	d809      	bhi.n	90003600 <__io_putchar+0x88>
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
900035ec:	4a2b      	ldr	r2, [pc, #172]	; (9000369c <__io_putchar+0x124>)
900035ee:	7811      	ldrb	r1, [r2, #0]
900035f0:	2900      	cmp	r1, #0
900035f2:	d134      	bne.n	9000365e <__io_putchar+0xe6>
          LCD_CacheBuffer_yptr_top++;
900035f4:	3301      	adds	r3, #1
900035f6:	b29b      	uxth	r3, r3
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
900035f8:	2b75      	cmp	r3, #117	; 0x75
          LCD_CacheBuffer_yptr_top++;
900035fa:	bf14      	ite	ne
900035fc:	803b      	strhne	r3, [r7, #0]
            LCD_CacheBuffer_yptr_top = 0;  
900035fe:	8039      	strheq	r1, [r7, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
90003600:	f8b6 a000 	ldrh.w	sl, [r6]
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
90003604:	f04f 0b84 	mov.w	fp, #132	; 0x84
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
90003608:	f7fd fc80 	bl	90000f0c <BSP_LCD_GetXSize>
9000360c:	f8b8 2004 	ldrh.w	r2, [r8, #4]
90003610:	2320      	movs	r3, #32
90003612:	fbb0 f0f2 	udiv	r0, r0, r2
90003616:	4550      	cmp	r0, sl
90003618:	d824      	bhi.n	90003664 <__io_putchar+0xec>
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
9000361a:	8823      	ldrh	r3, [r4, #0]
9000361c:	2284      	movs	r2, #132	; 0x84
      LCD_CacheBuffer_xptr = 0;
9000361e:	f04f 0800 	mov.w	r8, #0
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
90003622:	fb02 9303 	mla	r3, r2, r3, r9
90003626:	4a1e      	ldr	r2, [pc, #120]	; (900036a0 <__io_putchar+0x128>)
      LCD_CacheBuffer_xptr = 0;
90003628:	f8a6 8000 	strh.w	r8, [r6]
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
9000362c:	6812      	ldr	r2, [r2, #0]
9000362e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      LCD_LOG_UpdateDisplay (); 
90003632:	f7ff ff5f 	bl	900034f4 <LCD_LOG_UpdateDisplay>
      LCD_CacheBuffer_yptr_bottom ++; 
90003636:	8823      	ldrh	r3, [r4, #0]
90003638:	3301      	adds	r3, #1
9000363a:	b29b      	uxth	r3, r3
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
9000363c:	2b75      	cmp	r3, #117	; 0x75
        LCD_CacheBuffer_yptr_top = 1;    
9000363e:	bf05      	ittet	eq
90003640:	2301      	moveq	r3, #1
        LCD_CacheBuffer_yptr_invert = ENABLE;
90003642:	4a16      	ldreq	r2, [pc, #88]	; (9000369c <__io_putchar+0x124>)
      LCD_CacheBuffer_yptr_bottom ++; 
90003644:	8023      	strhne	r3, [r4, #0]
        LCD_CacheBuffer_yptr_bottom = 0;
90003646:	f8a4 8000 	strheq.w	r8, [r4]
        LCD_CacheBuffer_yptr_top = 1;    
9000364a:	bf04      	itt	eq
9000364c:	803b      	strheq	r3, [r7, #0]
        LCD_CacheBuffer_yptr_invert = ENABLE;
9000364e:	7013      	strbeq	r3, [r2, #0]
      if( ch != '\n')
90003650:	2d0a      	cmp	r5, #10
90003652:	d0c3      	beq.n	900035dc <__io_putchar+0x64>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
90003654:	8832      	ldrh	r2, [r6, #0]
90003656:	8823      	ldrh	r3, [r4, #0]
90003658:	1c51      	adds	r1, r2, #1
9000365a:	8031      	strh	r1, [r6, #0]
9000365c:	e7b9      	b.n	900035d2 <__io_putchar+0x5a>
          LCD_CacheBuffer_yptr_invert= DISABLE;
9000365e:	2300      	movs	r3, #0
90003660:	7013      	strb	r3, [r2, #0]
90003662:	e7cd      	b.n	90003600 <__io_putchar+0x88>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
90003664:	8831      	ldrh	r1, [r6, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
90003666:	f10a 0a01 	add.w	sl, sl, #1
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
9000366a:	8822      	ldrh	r2, [r4, #0]
9000366c:	1c48      	adds	r0, r1, #1
9000366e:	fb0b 9202 	mla	r2, fp, r2, r9
90003672:	8030      	strh	r0, [r6, #0]
90003674:	5453      	strb	r3, [r2, r1]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
90003676:	e7c7      	b.n	90003608 <__io_putchar+0x90>
90003678:	20000605 	.word	0x20000605
9000367c:	2000060a 	.word	0x2000060a
90003680:	20000600 	.word	0x20000600
90003684:	200005fc 	.word	0x200005fc
90003688:	20000606 	.word	0x20000606
9000368c:	200005fe 	.word	0x200005fe
90003690:	20004264 	.word	0x20004264
90003694:	20000608 	.word	0x20000608
90003698:	20000602 	.word	0x20000602
9000369c:	20000604 	.word	0x20000604
900036a0:	20004260 	.word	0x20004260
900036a4:	2000060c 	.word	0x2000060c

900036a8 <cmp_idx>:
	Compare the idx item in a list cell, and regen the data.

	Can be used by mergesort.
*/
ee_s32 cmp_idx(list_data *a, list_data *b, core_results *res) {
	if (res==NULL) {
900036a8:	b97a      	cbnz	r2, 900036ca <cmp_idx+0x22>
		a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
900036aa:	f9b0 3000 	ldrsh.w	r3, [r0]
900036ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
900036b2:	f3c3 2307 	ubfx	r3, r3, #8, #8
900036b6:	4313      	orrs	r3, r2
900036b8:	8003      	strh	r3, [r0, #0]
		b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
900036ba:	f9b1 3000 	ldrsh.w	r3, [r1]
900036be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
900036c2:	f3c3 2307 	ubfx	r3, r3, #8, #8
900036c6:	4313      	orrs	r3, r2
900036c8:	800b      	strh	r3, [r1, #0]
	}
	return a->idx - b->idx;
900036ca:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
900036ce:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
}
900036d2:	1ac0      	subs	r0, r0, r3
900036d4:	4770      	bx	lr

900036d6 <calc_func>:
ee_s16 calc_func(ee_s16 *pdata, core_results *res) {
900036d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	ee_s16 data=*pdata;
900036d8:	f9b0 5000 	ldrsh.w	r5, [r0]
ee_s16 calc_func(ee_s16 *pdata, core_results *res) {
900036dc:	4607      	mov	r7, r0
900036de:	460c      	mov	r4, r1
	if (optype) /* if cached, use cache */
900036e0:	062b      	lsls	r3, r5, #24
900036e2:	d503      	bpl.n	900036ec <calc_func+0x16>
		return (data & 0x007f);
900036e4:	f005 007f 	and.w	r0, r5, #127	; 0x7f
}
900036e8:	b003      	add	sp, #12
900036ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
900036ec:	f3c5 01c3 	ubfx	r1, r5, #3, #4
		switch (flag) {
900036f0:	f015 0307 	ands.w	r3, r5, #7
900036f4:	8f22      	ldrh	r2, [r4, #56]	; 0x38
		dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
900036f6:	ea41 1101 	orr.w	r1, r1, r1, lsl #4
		switch (flag) {
900036fa:	d010      	beq.n	9000371e <calc_func+0x48>
900036fc:	2b01      	cmp	r3, #1
900036fe:	d021      	beq.n	90003744 <calc_func+0x6e>
90003700:	462e      	mov	r6, r5
		res->crc=crcu16(retval,res->crc);
90003702:	8f21      	ldrh	r1, [r4, #56]	; 0x38
90003704:	b2b0      	uxth	r0, r6
90003706:	f000 ffa3 	bl	90004650 <crcu16>
		*pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
9000370a:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
		res->crc=crcu16(retval,res->crc);
9000370e:	8720      	strh	r0, [r4, #56]	; 0x38
		retval &= 0x007f; 
90003710:	f006 007f 	and.w	r0, r6, #127	; 0x7f
		*pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
90003714:	4305      	orrs	r5, r0
90003716:	f045 0580 	orr.w	r5, r5, #128	; 0x80
9000371a:	803d      	strh	r5, [r7, #0]
		return retval;
9000371c:	e7e4      	b.n	900036e8 <calc_func+0x12>
				retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
9000371e:	2922      	cmp	r1, #34	; 0x22
90003720:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
90003724:	9201      	str	r2, [sp, #4]
90003726:	bfb8      	it	lt
90003728:	2122      	movlt	r1, #34	; 0x22
9000372a:	f9b4 2000 	ldrsh.w	r2, [r4]
9000372e:	9100      	str	r1, [sp, #0]
90003730:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
90003734:	f000 feea 	bl	9000450c <core_bench_state>
				if (res->crcstate==0)
90003738:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
				retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
9000373a:	b206      	sxth	r6, r0
				if (res->crcstate==0)
9000373c:	2b00      	cmp	r3, #0
9000373e:	d1e0      	bne.n	90003702 <calc_func+0x2c>
					res->crcstate=retval;
90003740:	87e0      	strh	r0, [r4, #62]	; 0x3e
90003742:	e7de      	b.n	90003702 <calc_func+0x2c>
				retval=core_bench_matrix(&(res->mat),dtype,res->crc);
90003744:	f104 0028 	add.w	r0, r4, #40	; 0x28
90003748:	f000 fddd 	bl	90004306 <core_bench_matrix>
				if (res->crcmatrix==0)
9000374c:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
				retval=core_bench_matrix(&(res->mat),dtype,res->crc);
9000374e:	b206      	sxth	r6, r0
				if (res->crcmatrix==0)
90003750:	2b00      	cmp	r3, #0
90003752:	d1d6      	bne.n	90003702 <calc_func+0x2c>
					res->crcmatrix=retval;
90003754:	87a0      	strh	r0, [r4, #60]	; 0x3c
90003756:	e7d4      	b.n	90003702 <calc_func+0x2c>

90003758 <cmp_complex>:
ee_s32 cmp_complex(list_data *a, list_data *b, core_results *res) {
90003758:	b537      	push	{r0, r1, r2, r4, r5, lr}
9000375a:	460d      	mov	r5, r1
9000375c:	4611      	mov	r1, r2
	ee_s16 val1=calc_func(&(a->data16),res);
9000375e:	9201      	str	r2, [sp, #4]
90003760:	f7ff ffb9 	bl	900036d6 <calc_func>
90003764:	4604      	mov	r4, r0
	ee_s16 val2=calc_func(&(b->data16),res);
90003766:	9901      	ldr	r1, [sp, #4]
90003768:	4628      	mov	r0, r5
9000376a:	f7ff ffb4 	bl	900036d6 <calc_func>
}
9000376e:	1a20      	subs	r0, r4, r0
90003770:	b003      	add	sp, #12
90003772:	bd30      	pop	{r4, r5, pc}

90003774 <core_list_insert_new>:

	Returns:
	Pointer to new item.
*/
list_head *core_list_insert_new(list_head *insert_point, list_data *info, list_head **memblock, list_data **datablock
	, list_head *memblock_end, list_data *datablock_end) {
90003774:	b5f0      	push	{r4, r5, r6, r7, lr}
90003776:	4604      	mov	r4, r0
	list_head *newitem;
	
	if ((*memblock+1) >= memblock_end)
90003778:	6810      	ldr	r0, [r2, #0]
9000377a:	9d05      	ldr	r5, [sp, #20]
9000377c:	f100 0608 	add.w	r6, r0, #8
90003780:	42ae      	cmp	r6, r5
90003782:	d215      	bcs.n	900037b0 <core_list_insert_new+0x3c>
		return NULL;
	if ((*datablock+1) >= datablock_end)
90003784:	681d      	ldr	r5, [r3, #0]
90003786:	9f06      	ldr	r7, [sp, #24]
90003788:	f105 0c04 	add.w	ip, r5, #4
9000378c:	4567      	cmp	r7, ip
9000378e:	d90f      	bls.n	900037b0 <core_list_insert_new+0x3c>
		return NULL;
		
	newitem=*memblock;
	(*memblock)++;
90003790:	6016      	str	r6, [r2, #0]
	newitem->next=insert_point->next;
90003792:	6822      	ldr	r2, [r4, #0]
90003794:	6002      	str	r2, [r0, #0]
	insert_point->next=newitem;
90003796:	6020      	str	r0, [r4, #0]
	
	newitem->info=*datablock;
90003798:	6045      	str	r5, [r0, #4]
	(*datablock)++;
9000379a:	681a      	ldr	r2, [r3, #0]
9000379c:	3204      	adds	r2, #4
9000379e:	601a      	str	r2, [r3, #0]
	to->data16=from->data16;
900037a0:	f9b1 2000 	ldrsh.w	r2, [r1]
	copy_info(newitem->info,info);
900037a4:	6843      	ldr	r3, [r0, #4]
	to->data16=from->data16;
900037a6:	801a      	strh	r2, [r3, #0]
	to->idx=from->idx;
900037a8:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
900037ac:	805a      	strh	r2, [r3, #2]
	
	return newitem;
}
900037ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
900037b0:	2000      	movs	r0, #0
900037b2:	e7fc      	b.n	900037ae <core_list_insert_new+0x3a>

900037b4 <core_list_remove>:
*/
list_head *core_list_remove(list_head *item) {
	list_data *tmp;
	list_head *ret=item->next;
	/* swap data pointers */
	tmp=item->info;
900037b4:	e9d0 3200 	ldrd	r3, r2, [r0]
	item->info=ret->info;
900037b8:	6859      	ldr	r1, [r3, #4]
900037ba:	6041      	str	r1, [r0, #4]
	ret->info=tmp;
900037bc:	605a      	str	r2, [r3, #4]
	/* and eliminate item */
	item->next=item->next->next;
900037be:	681a      	ldr	r2, [r3, #0]
900037c0:	6002      	str	r2, [r0, #0]
	ret->next=NULL;
900037c2:	2200      	movs	r2, #0
	return ret;
}
900037c4:	4618      	mov	r0, r3
	ret->next=NULL;
900037c6:	601a      	str	r2, [r3, #0]
}
900037c8:	4770      	bx	lr

900037ca <core_list_find>:

	Returns:
	Found item, or NULL if not found.
*/
list_head *core_list_find(list_head *list,list_data *info) {
	if (info->idx>=0) {
900037ca:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
900037ce:	2b00      	cmp	r3, #0
900037d0:	da0a      	bge.n	900037e8 <core_list_find+0x1e>
		while (list && (list->info->idx != info->idx))
			list=list->next;
		return list;
	} else {
		while (list && ((list->info->data16 & 0xff) != info->data16))
900037d2:	b178      	cbz	r0, 900037f4 <core_list_find+0x2a>
900037d4:	6843      	ldr	r3, [r0, #4]
900037d6:	781a      	ldrb	r2, [r3, #0]
900037d8:	f9b1 3000 	ldrsh.w	r3, [r1]
900037dc:	429a      	cmp	r2, r3
900037de:	d100      	bne.n	900037e2 <core_list_find+0x18>
900037e0:	4770      	bx	lr
			list=list->next;
900037e2:	6800      	ldr	r0, [r0, #0]
900037e4:	e7f5      	b.n	900037d2 <core_list_find+0x8>
			list=list->next;
900037e6:	6800      	ldr	r0, [r0, #0]
		while (list && (list->info->idx != info->idx))
900037e8:	b120      	cbz	r0, 900037f4 <core_list_find+0x2a>
900037ea:	6842      	ldr	r2, [r0, #4]
900037ec:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
900037f0:	429a      	cmp	r2, r3
900037f2:	d1f8      	bne.n	900037e6 <core_list_find+0x1c>
		return list;
	}
}
900037f4:	4770      	bx	lr

900037f6 <core_list_reverse>:
	Returns:
	Found item, or NULL if not found.
*/

list_head *core_list_reverse(list_head *list) {
	list_head *next=NULL, *tmp;
900037f6:	2300      	movs	r3, #0
	while (list) {
900037f8:	b908      	cbnz	r0, 900037fe <core_list_reverse+0x8>
		list->next=next;
		next=list;
		list=tmp;
	}
	return next;
}
900037fa:	4618      	mov	r0, r3
900037fc:	4770      	bx	lr
		tmp=list->next;
900037fe:	6802      	ldr	r2, [r0, #0]
		list->next=next;
90003800:	6003      	str	r3, [r0, #0]
90003802:	4603      	mov	r3, r0
		list=tmp;
90003804:	4610      	mov	r0, r2
90003806:	e7f7      	b.n	900037f8 <core_list_reverse+0x2>

90003808 <core_list_mergesort>:
	Note: 
	We have a special header for the list that will always be first,
	but the algorithm could theoretically modify where the list starts.

 */
list_head *core_list_mergesort(list_head *list, list_cmp cmp, core_results *res) {
90003808:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000380c:	460b      	mov	r3, r1
9000380e:	4607      	mov	r7, r0
    list_head *p, *q, *e, *tail;
    ee_s32 insize, nmerges, psize, qsize, i;

    insize = 1;
90003810:	f04f 0a01 	mov.w	sl, #1
    while (1) {
        p = list;
        list = NULL;
        tail = NULL;

        nmerges = 0;  /* count number of merges we do in this pass */
90003814:	f04f 0900 	mov.w	r9, #0
        p = list;
90003818:	463d      	mov	r5, r7
        tail = NULL;
9000381a:	46cb      	mov	fp, r9
        list = NULL;
9000381c:	464f      	mov	r7, r9

        while (p) {
9000381e:	b93d      	cbnz	r5, 90003830 <core_list_mergesort+0x28>
        }
		
	    tail->next = NULL;

        /* If we have done only one merge, we're finished. */
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
90003820:	f1b9 0f01 	cmp.w	r9, #1
	    tail->next = NULL;
90003824:	f8cb 5000 	str.w	r5, [fp]
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
90003828:	dd32      	ble.n	90003890 <core_list_mergesort+0x88>
            return list;

        /* Otherwise repeat, merging lists twice the size */
        insize *= 2;
9000382a:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
        p = list;
9000382e:	e7f1      	b.n	90003814 <core_list_mergesort+0xc>
            nmerges++;  /* there exists a merge to be done */
90003830:	f109 0901 	add.w	r9, r9, #1
90003834:	462c      	mov	r4, r5
            psize = 0;
90003836:	2600      	movs	r6, #0
			    q = q->next;
90003838:	6824      	ldr	r4, [r4, #0]
                psize++;
9000383a:	3601      	adds	r6, #1
                if (!q) break;
9000383c:	b93c      	cbnz	r4, 9000384e <core_list_mergesort+0x46>
				    list = e;
9000383e:	46d0      	mov	r8, sl
            while (psize > 0 || (qsize > 0 && q)) {
90003840:	b946      	cbnz	r6, 90003854 <core_list_mergesort+0x4c>
90003842:	f1b8 0f00 	cmp.w	r8, #0
90003846:	d000      	beq.n	9000384a <core_list_mergesort+0x42>
90003848:	b9dc      	cbnz	r4, 90003882 <core_list_mergesort+0x7a>
				    list = e;
9000384a:	4625      	mov	r5, r4
9000384c:	e7e7      	b.n	9000381e <core_list_mergesort+0x16>
            for (i = 0; i < insize; i++) {
9000384e:	45b2      	cmp	sl, r6
90003850:	d1f2      	bne.n	90003838 <core_list_mergesort+0x30>
90003852:	e7f4      	b.n	9000383e <core_list_mergesort+0x36>
				} else if (qsize == 0 || !q) {
90003854:	f1b8 0f00 	cmp.w	r8, #0
90003858:	d000      	beq.n	9000385c <core_list_mergesort+0x54>
9000385a:	b94c      	cbnz	r4, 90003870 <core_list_mergesort+0x68>
				    e = p; p = p->next; psize--;
9000385c:	4629      	mov	r1, r5
9000385e:	3e01      	subs	r6, #1
90003860:	682d      	ldr	r5, [r5, #0]
				if (tail) {
90003862:	f1bb 0f00 	cmp.w	fp, #0
90003866:	d011      	beq.n	9000388c <core_list_mergesort+0x84>
				    tail->next = e;
90003868:	f8cb 1000 	str.w	r1, [fp]
				    list = e;
9000386c:	468b      	mov	fp, r1
9000386e:	e7e7      	b.n	90003840 <core_list_mergesort+0x38>
				} else if (cmp(p->info,q->info,res) <= 0) {
90003870:	9201      	str	r2, [sp, #4]
90003872:	9300      	str	r3, [sp, #0]
90003874:	6861      	ldr	r1, [r4, #4]
90003876:	6868      	ldr	r0, [r5, #4]
90003878:	4798      	blx	r3
9000387a:	2800      	cmp	r0, #0
9000387c:	e9dd 3200 	ldrd	r3, r2, [sp]
90003880:	ddec      	ble.n	9000385c <core_list_mergesort+0x54>
				    e = q; q = q->next; qsize--;
90003882:	4621      	mov	r1, r4
90003884:	f108 38ff 	add.w	r8, r8, #4294967295
90003888:	6824      	ldr	r4, [r4, #0]
9000388a:	e7ea      	b.n	90003862 <core_list_mergesort+0x5a>
				    list = e;
9000388c:	460f      	mov	r7, r1
9000388e:	e7ed      	b.n	9000386c <core_list_mergesort+0x64>
    }
#if COMPILER_REQUIRES_SORT_RETURN
	return list;
#endif
}
90003890:	4638      	mov	r0, r7
90003892:	b003      	add	sp, #12
90003894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90003898 <core_bench_list>:
ee_u16 core_bench_list(core_results *res, ee_s16 finder_idx) {
90003898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i=0; i<find_num; i++) {
9000389c:	2700      	movs	r7, #0
ee_u16 core_bench_list(core_results *res, ee_s16 finder_idx) {
9000389e:	b085      	sub	sp, #20
900038a0:	4681      	mov	r9, r0
900038a2:	468a      	mov	sl, r1
	list_head *list=res->list;
900038a4:	6a44      	ldr	r4, [r0, #36]	; 0x24
	ee_u16 found=0,missed=0;
900038a6:	463e      	mov	r6, r7
	ee_s16 find_num=res->seed3;
900038a8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
	ee_u16 found=0,missed=0;
900038ac:	46bb      	mov	fp, r7
	ee_u16 retval=0;
900038ae:	463d      	mov	r5, r7
	info.idx=finder_idx;
900038b0:	f8ad 100e 	strh.w	r1, [sp, #14]
	for (i=0; i<find_num; i++) {
900038b4:	b23b      	sxth	r3, r7
900038b6:	429a      	cmp	r2, r3
900038b8:	dc2e      	bgt.n	90003918 <core_bench_list+0x80>
	retval+=found*4-missed;
900038ba:	ebc6 068b 	rsb	r6, r6, fp, lsl #2
	if (finder_idx>0)
900038be:	f1ba 0f00 	cmp.w	sl, #0
	retval+=found*4-missed;
900038c2:	4435      	add	r5, r6
900038c4:	b2ad      	uxth	r5, r5
	if (finder_idx>0)
900038c6:	dd05      	ble.n	900038d4 <core_bench_list+0x3c>
		list=core_list_mergesort(list,cmp_complex,res);
900038c8:	4620      	mov	r0, r4
900038ca:	464a      	mov	r2, r9
900038cc:	493a      	ldr	r1, [pc, #232]	; (900039b8 <core_bench_list+0x120>)
900038ce:	f7ff ff9b 	bl	90003808 <core_list_mergesort>
900038d2:	4604      	mov	r4, r0
	remover=core_list_remove(list->next);
900038d4:	6820      	ldr	r0, [r4, #0]
900038d6:	f7ff ff6d 	bl	900037b4 <core_list_remove>
	finder=core_list_find(list,&info);
900038da:	a903      	add	r1, sp, #12
	remover=core_list_remove(list->next);
900038dc:	4607      	mov	r7, r0
	finder=core_list_find(list,&info);
900038de:	4620      	mov	r0, r4
900038e0:	f7ff ff73 	bl	900037ca <core_list_find>
	if (!finder)
900038e4:	4606      	mov	r6, r0
900038e6:	b900      	cbnz	r0, 900038ea <core_bench_list+0x52>
		finder=list->next;
900038e8:	6826      	ldr	r6, [r4, #0]
	while (finder) {
900038ea:	2e00      	cmp	r6, #0
900038ec:	d151      	bne.n	90003992 <core_bench_list+0xfa>
	remover=core_list_undo_remove(remover,list->next);
900038ee:	6823      	ldr	r3, [r4, #0]
	list=core_list_mergesort(list,cmp_idx,NULL);
900038f0:	4620      	mov	r0, r4
	tmp=item_removed->info;
900038f2:	687a      	ldr	r2, [r7, #4]
	item_removed->info=item_modified->info;
900038f4:	6859      	ldr	r1, [r3, #4]
900038f6:	6079      	str	r1, [r7, #4]
	item_modified->info=tmp;
900038f8:	605a      	str	r2, [r3, #4]
	item_removed->next=item_modified->next;
900038fa:	681a      	ldr	r2, [r3, #0]
	list=core_list_mergesort(list,cmp_idx,NULL);
900038fc:	492f      	ldr	r1, [pc, #188]	; (900039bc <core_bench_list+0x124>)
	item_removed->next=item_modified->next;
900038fe:	603a      	str	r2, [r7, #0]
	list=core_list_mergesort(list,cmp_idx,NULL);
90003900:	4632      	mov	r2, r6
	item_modified->next=item_removed;
90003902:	601f      	str	r7, [r3, #0]
	list=core_list_mergesort(list,cmp_idx,NULL);
90003904:	f7ff ff80 	bl	90003808 <core_list_mergesort>
90003908:	4604      	mov	r4, r0
	finder=list->next;
9000390a:	6806      	ldr	r6, [r0, #0]
	while (finder) {
9000390c:	2e00      	cmp	r6, #0
9000390e:	d149      	bne.n	900039a4 <core_bench_list+0x10c>
}
90003910:	4628      	mov	r0, r5
90003912:	b005      	add	sp, #20
90003914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		info.data16= (i & 0xff) ;
90003918:	b2db      	uxtb	r3, r3
		this_find=core_list_find(list,&info);
9000391a:	a903      	add	r1, sp, #12
9000391c:	4620      	mov	r0, r4
9000391e:	9201      	str	r2, [sp, #4]
		info.data16= (i & 0xff) ;
90003920:	f8ad 300c 	strh.w	r3, [sp, #12]
		this_find=core_list_find(list,&info);
90003924:	f7ff ff51 	bl	900037ca <core_list_find>
90003928:	4680      	mov	r8, r0
		list=core_list_reverse(list);
9000392a:	4620      	mov	r0, r4
9000392c:	f7ff ff63 	bl	900037f6 <core_list_reverse>
		if (this_find==NULL) {
90003930:	9a01      	ldr	r2, [sp, #4]
		list=core_list_reverse(list);
90003932:	4604      	mov	r4, r0
		if (this_find==NULL) {
90003934:	f1b8 0f00 	cmp.w	r8, #0
90003938:	d112      	bne.n	90003960 <core_bench_list+0xc8>
			retval+=(list->next->info->data16 >> 8) & 1;
9000393a:	6803      	ldr	r3, [r0, #0]
			missed++;
9000393c:	3601      	adds	r6, #1
			retval+=(list->next->info->data16 >> 8) & 1;
9000393e:	685b      	ldr	r3, [r3, #4]
			missed++;
90003940:	b2b6      	uxth	r6, r6
			retval+=(list->next->info->data16 >> 8) & 1;
90003942:	f993 3001 	ldrsb.w	r3, [r3, #1]
90003946:	f003 0301 	and.w	r3, r3, #1
9000394a:	441d      	add	r5, r3
9000394c:	b2ad      	uxth	r5, r5
		if (info.idx>=0)
9000394e:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
90003952:	3701      	adds	r7, #1
90003954:	2b00      	cmp	r3, #0
			info.idx++;
90003956:	bfa4      	itt	ge
90003958:	3301      	addge	r3, #1
9000395a:	f8ad 300e 	strhge.w	r3, [sp, #14]
	for (i=0; i<find_num; i++) {
9000395e:	e7a9      	b.n	900038b4 <core_bench_list+0x1c>
			if (this_find->info->data16 & 0x1) /* use found value */
90003960:	f8d8 3004 	ldr.w	r3, [r8, #4]
			found++;
90003964:	f10b 0b01 	add.w	fp, fp, #1
			if (this_find->info->data16 & 0x1) /* use found value */
90003968:	f9b3 3000 	ldrsh.w	r3, [r3]
			found++;
9000396c:	fa1f fb8b 	uxth.w	fp, fp
			if (this_find->info->data16 & 0x1) /* use found value */
90003970:	07d9      	lsls	r1, r3, #31
			if (this_find->next != NULL) {
90003972:	f8d8 1000 	ldr.w	r1, [r8]
				retval+=(this_find->info->data16 >> 9) & 1;
90003976:	bf42      	ittt	mi
90003978:	f3c3 2340 	ubfxmi	r3, r3, #9, #1
9000397c:	18ed      	addmi	r5, r5, r3
9000397e:	b2ad      	uxthmi	r5, r5
			if (this_find->next != NULL) {
90003980:	2900      	cmp	r1, #0
90003982:	d0e4      	beq.n	9000394e <core_bench_list+0xb6>
				this_find->next = finder->next;
90003984:	680b      	ldr	r3, [r1, #0]
90003986:	f8c8 3000 	str.w	r3, [r8]
				finder->next=list->next;
9000398a:	6803      	ldr	r3, [r0, #0]
9000398c:	600b      	str	r3, [r1, #0]
				list->next=finder;
9000398e:	6001      	str	r1, [r0, #0]
90003990:	e7dd      	b.n	9000394e <core_bench_list+0xb6>
		retval=crc16(list->info->data16,retval);
90003992:	6863      	ldr	r3, [r4, #4]
90003994:	4629      	mov	r1, r5
90003996:	f9b3 0000 	ldrsh.w	r0, [r3]
9000399a:	f000 fe6f 	bl	9000467c <crc16>
		finder=finder->next;
9000399e:	6836      	ldr	r6, [r6, #0]
		retval=crc16(list->info->data16,retval);
900039a0:	4605      	mov	r5, r0
		finder=finder->next;
900039a2:	e7a2      	b.n	900038ea <core_bench_list+0x52>
		retval=crc16(list->info->data16,retval);
900039a4:	6863      	ldr	r3, [r4, #4]
900039a6:	4629      	mov	r1, r5
900039a8:	f9b3 0000 	ldrsh.w	r0, [r3]
900039ac:	f000 fe66 	bl	9000467c <crc16>
		finder=finder->next;
900039b0:	6836      	ldr	r6, [r6, #0]
		retval=crc16(list->info->data16,retval);
900039b2:	4605      	mov	r5, r0
		finder=finder->next;
900039b4:	e7aa      	b.n	9000390c <core_bench_list+0x74>
900039b6:	bf00      	nop
900039b8:	90003759 	.word	0x90003759
900039bc:	900036a9 	.word	0x900036a9

900039c0 <core_list_init>:
list_head *core_list_init(ee_u32 blksize, list_head *memblock, ee_s16 seed) {
900039c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ee_u32 size=(blksize/per_item)-2; /* to accomodate systems with 64b pointers, and make sure same code is executed, set max list elements */
900039c4:	2514      	movs	r5, #20
	list->next=NULL;
900039c6:	2600      	movs	r6, #0
	list->info->data16=(ee_s16)0x8080;
900039c8:	f248 0380 	movw	r3, #32896	; 0x8080
list_head *core_list_init(ee_u32 blksize, list_head *memblock, ee_s16 seed) {
900039cc:	b087      	sub	sp, #28
	list_head *memblock_end=memblock+size;
900039ce:	460c      	mov	r4, r1
list_head *core_list_init(ee_u32 blksize, list_head *memblock, ee_s16 seed) {
900039d0:	4690      	mov	r8, r2
	core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);
900039d2:	aa03      	add	r2, sp, #12
	ee_u32 size=(blksize/per_item)-2; /* to accomodate systems with 64b pointers, and make sure same code is executed, set max list elements */
900039d4:	fbb0 f0f5 	udiv	r0, r0, r5
900039d8:	1e85      	subs	r5, r0, #2
	core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);
900039da:	4620      	mov	r0, r4
	list_head *memblock_end=memblock+size;
900039dc:	eb01 07c5 	add.w	r7, r1, r5, lsl #3
	list->info=datablock;
900039e0:	e9c1 6700 	strd	r6, r7, [r1]
	list->info->idx=0x0000;
900039e4:	807e      	strh	r6, [r7, #2]
	list_data *datablock_end=datablock+size;
900039e6:	eb07 0985 	add.w	r9, r7, r5, lsl #2
	list->info->data16=(ee_s16)0x8080;
900039ea:	f821 3035 	strh.w	r3, [r1, r5, lsl #3]
	memblock++;
900039ee:	f101 0308 	add.w	r3, r1, #8
	core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);
900039f2:	a905      	add	r1, sp, #20
	memblock++;
900039f4:	9303      	str	r3, [sp, #12]
	datablock++;
900039f6:	1d3b      	adds	r3, r7, #4
900039f8:	9304      	str	r3, [sp, #16]
	info.data16=(ee_s16)0xffff;
900039fa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
	core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);
900039fe:	e9cd 7900 	strd	r7, r9, [sp]
	info.data16=(ee_s16)0xffff;
90003a02:	9305      	str	r3, [sp, #20]
	core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);
90003a04:	ab04      	add	r3, sp, #16
90003a06:	f7ff feb5 	bl	90003774 <core_list_insert_new>
	for (i=0; i<size; i++) {
90003a0a:	42ae      	cmp	r6, r5
90003a0c:	d30d      	bcc.n	90003a2a <core_list_init+0x6a>
		if (i<size/5) /* first 20% of the list in order */
90003a0e:	2005      	movs	r0, #5
	finder=list->next;
90003a10:	6823      	ldr	r3, [r4, #0]
	while (finder->next!=NULL) {
90003a12:	2101      	movs	r1, #1
		if (i<size/5) /* first 20% of the list in order */
90003a14:	fbb5 f5f0 	udiv	r5, r5, r0
	while (finder->next!=NULL) {
90003a18:	681a      	ldr	r2, [r3, #0]
90003a1a:	b9ea      	cbnz	r2, 90003a58 <core_list_init+0x98>
	list = core_list_mergesort(list,cmp_idx,NULL);
90003a1c:	4918      	ldr	r1, [pc, #96]	; (90003a80 <core_list_init+0xc0>)
90003a1e:	4620      	mov	r0, r4
90003a20:	f7ff fef2 	bl	90003808 <core_list_mergesort>
}
90003a24:	b007      	add	sp, #28
90003a26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
90003a2a:	b2b2      	uxth	r2, r6
		core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);
90003a2c:	a905      	add	r1, sp, #20
90003a2e:	4620      	mov	r0, r4
	for (i=0; i<size; i++) {
90003a30:	3601      	adds	r6, #1
		ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
90003a32:	ea82 0308 	eor.w	r3, r2, r8
		ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
90003a36:	f002 0207 	and.w	r2, r2, #7
90003a3a:	00db      	lsls	r3, r3, #3
90003a3c:	f003 0378 	and.w	r3, r3, #120	; 0x78
90003a40:	4313      	orrs	r3, r2
		core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);
90003a42:	aa03      	add	r2, sp, #12
		info.data16=(dat<<8) | dat;		/* fill the data with actual data and upper bits with rebuild value */
90003a44:	ea43 2303 	orr.w	r3, r3, r3, lsl #8
		core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);
90003a48:	e9cd 7900 	strd	r7, r9, [sp]
		info.data16=(dat<<8) | dat;		/* fill the data with actual data and upper bits with rebuild value */
90003a4c:	f8ad 3014 	strh.w	r3, [sp, #20]
		core_list_insert_new(list,&info,&memblock,&datablock,memblock_end,datablock_end);
90003a50:	ab04      	add	r3, sp, #16
90003a52:	f7ff fe8f 	bl	90003774 <core_list_insert_new>
	for (i=0; i<size; i++) {
90003a56:	e7d8      	b.n	90003a0a <core_list_init+0x4a>
		if (i<size/5) /* first 20% of the list in order */
90003a58:	428d      	cmp	r5, r1
90003a5a:	685e      	ldr	r6, [r3, #4]
90003a5c:	d903      	bls.n	90003a66 <core_list_init+0xa6>
			finder->info->idx=i++;
90003a5e:	8071      	strh	r1, [r6, #2]
90003a60:	3101      	adds	r1, #1
	for (i=0; i<size; i++) {
90003a62:	4613      	mov	r3, r2
90003a64:	e7d8      	b.n	90003a18 <core_list_init+0x58>
			ee_u16 pat=(ee_u16)(i++ ^ seed); /* get a pseudo random number */
90003a66:	b288      	uxth	r0, r1
			finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
90003a68:	1c43      	adds	r3, r0, #1
			ee_u16 pat=(ee_u16)(i++ ^ seed); /* get a pseudo random number */
90003a6a:	ea80 0008 	eor.w	r0, r0, r8
			finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
90003a6e:	021b      	lsls	r3, r3, #8
90003a70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
90003a74:	4303      	orrs	r3, r0
90003a76:	f3c3 030d 	ubfx	r3, r3, #0, #14
90003a7a:	8073      	strh	r3, [r6, #2]
90003a7c:	e7f0      	b.n	90003a60 <core_list_init+0xa0>
90003a7e:	bf00      	nop
90003a80:	900036a9 	.word	0x900036a9

90003a84 <iterate>:
	NULL.
*/
static ee_u16 list_known_crc[]   =      {(ee_u16)0xd4b0,(ee_u16)0x3340,(ee_u16)0x6a79,(ee_u16)0xe714,(ee_u16)0xe3c1};
static ee_u16 matrix_known_crc[] =      {(ee_u16)0xbe52,(ee_u16)0x1199,(ee_u16)0x5608,(ee_u16)0x1fd7,(ee_u16)0x0747};
static ee_u16 state_known_crc[]  =      {(ee_u16)0x5e47,(ee_u16)0x39bf,(ee_u16)0xe5a4,(ee_u16)0x8e3a,(ee_u16)0x8d84};
void *iterate(void *pres) {
90003a84:	b570      	push	{r4, r5, r6, lr}
	ee_u32 i;
	ee_u16 crc;
	core_results *res=(core_results *)pres;
	ee_u32 iterations=res->iterations;
	res->crc=0;
90003a86:	2500      	movs	r5, #0
void *iterate(void *pres) {
90003a88:	4604      	mov	r4, r0
	ee_u32 iterations=res->iterations;
90003a8a:	69c6      	ldr	r6, [r0, #28]
	res->crclist=0;
	res->crcmatrix=0;
90003a8c:	e9c0 550e 	strd	r5, r5, [r0, #56]	; 0x38
	res->crcstate=0;

	for (i=0; i<iterations; i++) {
90003a90:	42b5      	cmp	r5, r6
90003a92:	d101      	bne.n	90003a98 <iterate+0x14>
		crc=core_bench_list(res,-1);
		res->crc=crcu16(crc,res->crc);
		if (i==0) res->crclist=res->crc;
	}
	return NULL;
}
90003a94:	2000      	movs	r0, #0
90003a96:	bd70      	pop	{r4, r5, r6, pc}
		crc=core_bench_list(res,1);
90003a98:	2101      	movs	r1, #1
90003a9a:	4620      	mov	r0, r4
90003a9c:	f7ff fefc 	bl	90003898 <core_bench_list>
		res->crc=crcu16(crc,res->crc);
90003aa0:	8f21      	ldrh	r1, [r4, #56]	; 0x38
90003aa2:	f000 fdd5 	bl	90004650 <crcu16>
		crc=core_bench_list(res,-1);
90003aa6:	f04f 31ff 	mov.w	r1, #4294967295
		res->crc=crcu16(crc,res->crc);
90003aaa:	8720      	strh	r0, [r4, #56]	; 0x38
		crc=core_bench_list(res,-1);
90003aac:	4620      	mov	r0, r4
90003aae:	f7ff fef3 	bl	90003898 <core_bench_list>
		res->crc=crcu16(crc,res->crc);
90003ab2:	8f21      	ldrh	r1, [r4, #56]	; 0x38
90003ab4:	f000 fdcc 	bl	90004650 <crcu16>
90003ab8:	8720      	strh	r0, [r4, #56]	; 0x38
		if (i==0) res->crclist=res->crc;
90003aba:	b905      	cbnz	r5, 90003abe <iterate+0x3a>
90003abc:	8760      	strh	r0, [r4, #58]	; 0x3a
	for (i=0; i<iterations; i++) {
90003abe:	3501      	adds	r5, #1
90003ac0:	e7e6      	b.n	90003a90 <iterate+0xc>
	...

90003ac4 <core_main>:
#if MAIN_HAS_NOARGC
MAIN_RETURN_TYPE core_main(void) {
	int argc=0;
	char *argv[1];
#else
MAIN_RETURN_TYPE core_main(int argc, char *argv[]) {
90003ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90003ac8:	f6ad 0d2c 	subw	sp, sp, #2092	; 0x82c
90003acc:	460a      	mov	r2, r1
90003ace:	9003      	str	r0, [sp, #12]
	core_results results[MULTITHREAD];
#if (MEM_METHOD==MEM_STACK)
	ee_u8 stack_memblock[TOTAL_DATA_SIZE*MULTITHREAD];
#endif
	/* first call any initializations needed */
	portable_init(&(results[0].port), &argc, argv);
90003ad0:	a903      	add	r1, sp, #12
90003ad2:	f10d 0056 	add.w	r0, sp, #86	; 0x56
90003ad6:	f000 fc49 	bl	9000436c <portable_init>
	/* First some checks to make sure benchmark will run ok */
	if (sizeof(struct list_head_s)>128) {
		ee_printf("list_head structure too big for comparable data!\r\n");
		return MAIN_RETURN_VAL;
	}
	results[0].seed1=get_seed(1);
90003ada:	2001      	movs	r0, #1
90003adc:	f000 fd80 	bl	900045e0 <get_seed_32>
90003ae0:	f8ad 0014 	strh.w	r0, [sp, #20]
	results[0].seed2=get_seed(2);
90003ae4:	2002      	movs	r0, #2
90003ae6:	f000 fd7b 	bl	900045e0 <get_seed_32>
90003aea:	f8ad 0016 	strh.w	r0, [sp, #22]
	results[0].seed3=get_seed(3);
90003aee:	2003      	movs	r0, #3
90003af0:	f000 fd76 	bl	900045e0 <get_seed_32>
90003af4:	f8ad 0018 	strh.w	r0, [sp, #24]
	results[0].iterations=get_seed_32(4);
90003af8:	2004      	movs	r0, #4
90003afa:	f000 fd71 	bl	900045e0 <get_seed_32>
90003afe:	900c      	str	r0, [sp, #48]	; 0x30
#if CORE_DEBUG
	results[0].iterations=1;
#endif
	results[0].execs=get_seed_32(5);
90003b00:	2005      	movs	r0, #5
90003b02:	f000 fd6d 	bl	900045e0 <get_seed_32>
	if (results[0].execs==0) { /* if not supplied, execute all algorithms */
90003b06:	2800      	cmp	r0, #0
90003b08:	f000 815e 	beq.w	90003dc8 <core_main+0x304>
	results[0].execs=get_seed_32(5);
90003b0c:	900d      	str	r0, [sp, #52]	; 0x34
		results[0].execs=ALL_ALGORITHMS_MASK;
	}
		/* put in some default values based on one seed only for easy testing */
	if ((results[0].seed1==0) && (results[0].seed2==0) && (results[0].seed3==0)) { /* validation run */
90003b0e:	9b05      	ldr	r3, [sp, #20]
90003b10:	b92b      	cbnz	r3, 90003b1e <core_main+0x5a>
90003b12:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
90003b16:	b96b      	cbnz	r3, 90003b34 <core_main+0x70>
		results[0].seed1=0;
		results[0].seed2=0;
		results[0].seed3=0x66;
90003b18:	2366      	movs	r3, #102	; 0x66
90003b1a:	f8ad 3018 	strh.w	r3, [sp, #24]
	}
	if ((results[0].seed1==1) && (results[0].seed2==0) && (results[0].seed3==0)) { /* perfromance run */
90003b1e:	9b05      	ldr	r3, [sp, #20]
90003b20:	2b01      	cmp	r3, #1
90003b22:	d107      	bne.n	90003b34 <core_main+0x70>
90003b24:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
90003b28:	b923      	cbnz	r3, 90003b34 <core_main+0x70>
		results[0].seed1=0x3415;
90003b2a:	4bbd      	ldr	r3, [pc, #756]	; (90003e20 <core_main+0x35c>)
90003b2c:	9305      	str	r3, [sp, #20]
		results[0].seed2=0x3415;
		results[0].seed3=0x66;
90003b2e:	2366      	movs	r3, #102	; 0x66
90003b30:	f8ad 3018 	strh.w	r3, [sp, #24]
#error "Please define a way to initialize a memory block."
#endif
	/* Data init */ 
	/* Find out how space much we have based on number of algorithms */
	for (i=0; i<NUM_ALGORITHMS; i++) {
		if ((1<<(ee_u32)i) & results[0].execs)
90003b34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		results[i].err=0;
90003b36:	2300      	movs	r3, #0
		results[i].memblock[0]=stack_memblock+i*TOTAL_DATA_SIZE;
90003b38:	ac16      	add	r4, sp, #88	; 0x58
		if ((1<<(ee_u32)i) & results[0].execs)
90003b3a:	f002 0501 	and.w	r5, r2, #1
90003b3e:	0791      	lsls	r1, r2, #30
		results[i].err=0;
90003b40:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
		if ((1<<(ee_u32)i) & results[0].execs)
90003b44:	4628      	mov	r0, r5
		results[i].memblock[0]=stack_memblock+i*TOTAL_DATA_SIZE;
90003b46:	9407      	str	r4, [sp, #28]
			num_algorithms++;
90003b48:	bf48      	it	mi
90003b4a:	3001      	addmi	r0, #1
		if ((1<<(ee_u32)i) & results[0].execs)
90003b4c:	0753      	lsls	r3, r2, #29
90003b4e:	d501      	bpl.n	90003b54 <core_main+0x90>
			num_algorithms++;
90003b50:	3001      	adds	r0, #1
90003b52:	b280      	uxth	r0, r0
	}
	for (i=0 ; i<MULTITHREAD; i++) 
		results[i].size=results[i].size/num_algorithms;
90003b54:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
	/* Assign pointers */
	for (i=0; i<NUM_ALGORITHMS; i++) {
		ee_u32 ctx;
		if ((1<<(ee_u32)i) & results[0].execs) {
90003b58:	2601      	movs	r6, #1
		results[i].size=results[i].size/num_algorithms;
90003b5a:	fbb3 f0f0 	udiv	r0, r3, r0
90003b5e:	2300      	movs	r3, #0
90003b60:	900b      	str	r0, [sp, #44]	; 0x2c
	ee_u16 i,j=0,num_algorithms=0;
90003b62:	4619      	mov	r1, r3
		if ((1<<(ee_u32)i) & results[0].execs) {
90003b64:	fa06 f703 	lsl.w	r7, r6, r3
90003b68:	4217      	tst	r7, r2
90003b6a:	d008      	beq.n	90003b7e <core_main+0xba>
			for (ctx=0 ; ctx<MULTITHREAD; ctx++)
				results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
90003b6c:	fb00 4c01 	mla	ip, r0, r1, r4
90003b70:	af05      	add	r7, sp, #20
			j++;
90003b72:	3101      	adds	r1, #1
				results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
90003b74:	eb07 0783 	add.w	r7, r7, r3, lsl #2
			j++;
90003b78:	b289      	uxth	r1, r1
				results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
90003b7a:	f8c7 c00c 	str.w	ip, [r7, #12]
	for (i=0; i<NUM_ALGORITHMS; i++) {
90003b7e:	3301      	adds	r3, #1
90003b80:	2b03      	cmp	r3, #3
90003b82:	d1ef      	bne.n	90003b64 <core_main+0xa0>
		}
	}
	/* call inits */
	for (i=0 ; i<MULTITHREAD; i++) {
		if (results[i].execs & ID_LIST) {
90003b84:	b12d      	cbz	r5, 90003b92 <core_main+0xce>
			results[i].list=core_list_init(results[0].size,results[i].memblock[1],results[i].seed1);
90003b86:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
90003b8a:	9908      	ldr	r1, [sp, #32]
90003b8c:	f7ff ff18 	bl	900039c0 <core_list_init>
90003b90:	900e      	str	r0, [sp, #56]	; 0x38
		}
		if (results[i].execs & ID_MATRIX) {
90003b92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90003b94:	079d      	lsls	r5, r3, #30
90003b96:	d50a      	bpl.n	90003bae <core_main+0xea>
			core_init_matrix(results[0].size, results[i].memblock[2], (ee_s32)results[i].seed1 | (((ee_s32)results[i].seed2) << 16), &(results[i].mat) );
90003b98:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
90003b9c:	ab0f      	add	r3, sp, #60	; 0x3c
90003b9e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
90003ba2:	980b      	ldr	r0, [sp, #44]	; 0x2c
90003ba4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
90003ba8:	9909      	ldr	r1, [sp, #36]	; 0x24
90003baa:	f000 fa31 	bl	90004010 <core_init_matrix>
		}
		if (results[i].execs & ID_STATE) {
90003bae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90003bb0:	075c      	lsls	r4, r3, #29
90003bb2:	d505      	bpl.n	90003bc0 <core_main+0xfc>
			core_init_state(results[0].size,results[i].seed1,results[i].memblock[3]);
90003bb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90003bb6:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
90003bba:	980b      	ldr	r0, [sp, #44]	; 0x2c
90003bbc:	f000 fbdc 	bl	90004378 <core_init_state>
		}
	}
	
	/* automatically determine number of iterations if not set */
	if (results[0].iterations==0) { 
90003bc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90003bc2:	bb63      	cbnz	r3, 90003c1e <core_main+0x15a>
		secs_ret secs_passed=0;
		ee_u32 divisor;
		results[0].iterations=1;
90003bc4:	2301      	movs	r3, #1
		while (secs_passed < (secs_ret)1) {
			results[0].iterations*=10;
90003bc6:	260a      	movs	r6, #10
		while (secs_passed < (secs_ret)1) {
90003bc8:	f04f 0800 	mov.w	r8, #0
90003bcc:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 90003e84 <core_main+0x3c0>
		results[0].iterations=1;
90003bd0:	930c      	str	r3, [sp, #48]	; 0x30
			results[0].iterations*=10;
90003bd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90003bd4:	4373      	muls	r3, r6
90003bd6:	930c      	str	r3, [sp, #48]	; 0x30
			start_time();
90003bd8:	f000 fba4 	bl	90004324 <start_time>
			iterate(&results[0]);
90003bdc:	a805      	add	r0, sp, #20
90003bde:	f7ff ff51 	bl	90003a84 <iterate>
			stop_time();
90003be2:	f000 fba7 	bl	90004334 <stop_time>
			secs_passed=time_in_secs(get_time());
90003be6:	f000 fbad 	bl	90004344 <get_time>
90003bea:	f000 fbb3 	bl	90004354 <time_in_secs>
		while (secs_passed < (secs_ret)1) {
90003bee:	4642      	mov	r2, r8
90003bf0:	464b      	mov	r3, r9
90003bf2:	ee10 0a10 	vmov	r0, s0
			secs_passed=time_in_secs(get_time());
90003bf6:	ec55 4b10 	vmov	r4, r5, d0
		while (secs_passed < (secs_ret)1) {
90003bfa:	4629      	mov	r1, r5
90003bfc:	f7fc ff86 	bl	90000b0c <__aeabi_dcmplt>
90003c00:	2800      	cmp	r0, #0
90003c02:	d1e6      	bne.n	90003bd2 <core_main+0x10e>
		}
		/* now we know it executes for at least 1 sec, set actual run time at about 10 secs */
		divisor=(ee_u32)secs_passed;
90003c04:	4620      	mov	r0, r4
90003c06:	4629      	mov	r1, r5
90003c08:	f7fc ffa8 	bl	90000b5c <__aeabi_d2uiz>
		if (divisor==0) /* some machines cast float to int as 0 since this conversion is not defined by ANSI, but we know at least one second passed */
			divisor=1;
		results[0].iterations*=1+10/divisor;
90003c0c:	2801      	cmp	r0, #1
90003c0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90003c10:	bf38      	it	cc
90003c12:	2001      	movcc	r0, #1
90003c14:	fbb6 f0f0 	udiv	r0, r6, r0
90003c18:	fb00 3303 	mla	r3, r0, r3, r3
90003c1c:	930c      	str	r3, [sp, #48]	; 0x30
	}
	/* perform actual benchmark */
	start_time();
90003c1e:	f000 fb81 	bl	90004324 <start_time>
	}
	for (i=0 ; i<default_num_contexts; i++) {
		core_stop_parallel(&results[i]);
	}
#else
	iterate(&results[0]);
90003c22:	a805      	add	r0, sp, #20
90003c24:	f7ff ff2e 	bl	90003a84 <iterate>
#endif
	stop_time();
90003c28:	4e7e      	ldr	r6, [pc, #504]	; (90003e24 <core_main+0x360>)
90003c2a:	f000 fb83 	bl	90004334 <stop_time>
	total_time=get_time();
90003c2e:	f000 fb89 	bl	90004344 <get_time>
	/* get a function of the input to report */
	seedcrc=crc16(results[0].seed1,seedcrc);
90003c32:	2100      	movs	r1, #0
	total_time=get_time();
90003c34:	4605      	mov	r5, r0
	seedcrc=crc16(results[0].seed1,seedcrc);
90003c36:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
90003c3a:	f000 fd1f 	bl	9000467c <crc16>
90003c3e:	4601      	mov	r1, r0
	seedcrc=crc16(results[0].seed2,seedcrc);
90003c40:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
90003c44:	f000 fd1a 	bl	9000467c <crc16>
90003c48:	4601      	mov	r1, r0
	seedcrc=crc16(results[0].seed3,seedcrc);
90003c4a:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
90003c4e:	f000 fd15 	bl	9000467c <crc16>
90003c52:	4601      	mov	r1, r0
	seedcrc=crc16(results[0].size,seedcrc);
90003c54:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	; 0x2c
90003c58:	f000 fd10 	bl	9000467c <crc16>
	
	switch (seedcrc) { /* test known output for common seeds */
90003c5c:	f647 3305 	movw	r3, #31493	; 0x7b05
	seedcrc=crc16(results[0].size,seedcrc);
90003c60:	4607      	mov	r7, r0
	switch (seedcrc) { /* test known output for common seeds */
90003c62:	4298      	cmp	r0, r3
90003c64:	f000 80cd 	beq.w	90003e02 <core_main+0x33e>
90003c68:	f200 80b1 	bhi.w	90003dce <core_main+0x30a>
90003c6c:	f641 03f2 	movw	r3, #6386	; 0x18f2
90003c70:	4298      	cmp	r0, r3
90003c72:	f000 80d0 	beq.w	90003e16 <core_main+0x352>
90003c76:	f644 63af 	movw	r3, #20143	; 0x4eaf
90003c7a:	4298      	cmp	r0, r3
90003c7c:	f000 80c6 	beq.w	90003e0c <core_main+0x348>
90003c80:	f04f 34ff 	mov.w	r4, #4294967295
90003c84:	46a1      	mov	r9, r4
				results[i].err++;
			}
			total_errors+=results[i].err;
		}
	}
	total_errors+=check_data_types();
90003c86:	f000 fcfc 	bl	90004682 <check_data_types>
	/* and report results */
	ee_printf("CoreMark Size    : %lu\r\n",(ee_u32)results[0].size);
90003c8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
	total_errors+=check_data_types();
90003c8c:	4481      	add	r9, r0
	ee_printf("CoreMark Size    : %lu\r\n",(ee_u32)results[0].size);
90003c8e:	4866      	ldr	r0, [pc, #408]	; (90003e28 <core_main+0x364>)
90003c90:	f000 fd2c 	bl	900046ec <iprintf>
	ee_printf("Total ticks      : %lu\r\n",(ee_u32)total_time);
90003c94:	4629      	mov	r1, r5
90003c96:	4865      	ldr	r0, [pc, #404]	; (90003e2c <core_main+0x368>)
	total_errors+=check_data_types();
90003c98:	fa1f fa89 	uxth.w	sl, r9
	ee_printf("Total ticks      : %lu\r\n",(ee_u32)total_time);
90003c9c:	f000 fd26 	bl	900046ec <iprintf>
#if HAS_FLOAT
	ee_printf("Total time (secs): %f\r\n",time_in_secs(total_time));
90003ca0:	4628      	mov	r0, r5
90003ca2:	f000 fb57 	bl	90004354 <time_in_secs>
90003ca6:	4862      	ldr	r0, [pc, #392]	; (90003e30 <core_main+0x36c>)
90003ca8:	ec53 2b10 	vmov	r2, r3, d0
90003cac:	f000 fd1e 	bl	900046ec <iprintf>
	if (time_in_secs(total_time) > 0)
90003cb0:	4628      	mov	r0, r5
90003cb2:	f000 fb4f 	bl	90004354 <time_in_secs>
90003cb6:	2200      	movs	r2, #0
90003cb8:	2300      	movs	r3, #0
90003cba:	ec51 0b10 	vmov	r0, r1, d0
90003cbe:	f7fc ff43 	bl	90000b48 <__aeabi_dcmpgt>
90003cc2:	b1a0      	cbz	r0, 90003cee <core_main+0x22a>
		ee_printf("Iterations/Sec   : %f\r\n",default_num_contexts*results[0].iterations/time_in_secs(total_time));
90003cc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90003cc6:	6830      	ldr	r0, [r6, #0]
90003cc8:	4358      	muls	r0, r3
90003cca:	f7fc fc33 	bl	90000534 <__aeabi_ui2d>
90003cce:	4680      	mov	r8, r0
90003cd0:	4689      	mov	r9, r1
90003cd2:	4628      	mov	r0, r5
90003cd4:	f000 fb3e 	bl	90004354 <time_in_secs>
90003cd8:	4640      	mov	r0, r8
90003cda:	4649      	mov	r1, r9
90003cdc:	ec53 2b10 	vmov	r2, r3, d0
90003ce0:	f7fc fdcc 	bl	9000087c <__aeabi_ddiv>
90003ce4:	4602      	mov	r2, r0
90003ce6:	460b      	mov	r3, r1
90003ce8:	4852      	ldr	r0, [pc, #328]	; (90003e34 <core_main+0x370>)
90003cea:	f000 fcff 	bl	900046ec <iprintf>
#else 
	ee_printf("Total time (secs): %d\r\n",time_in_secs(total_time));
	if (time_in_secs(total_time) > 0)
		ee_printf("Iterations/Sec   : %d\r\n",default_num_contexts*results[0].iterations/time_in_secs(total_time));
#endif
	if (time_in_secs(total_time) < 10) {
90003cee:	4628      	mov	r0, r5
90003cf0:	f000 fb30 	bl	90004354 <time_in_secs>
90003cf4:	2200      	movs	r2, #0
90003cf6:	4b50      	ldr	r3, [pc, #320]	; (90003e38 <core_main+0x374>)
90003cf8:	ec51 0b10 	vmov	r0, r1, d0
90003cfc:	f7fc ff06 	bl	90000b0c <__aeabi_dcmplt>
90003d00:	2800      	cmp	r0, #0
90003d02:	f040 8120 	bne.w	90003f46 <core_main+0x482>
	total_errors+=check_data_types();
90003d06:	fa0f f98a 	sxth.w	r9, sl
		ee_printf("ERROR! Must execute for at least 10 secs for a valid result!\r\n");
		total_errors++;
	}

	ee_printf("Iterations       : %lu\r\n",(ee_u32)default_num_contexts*results[0].iterations);
90003d0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90003d0c:	6831      	ldr	r1, [r6, #0]
90003d0e:	484b      	ldr	r0, [pc, #300]	; (90003e3c <core_main+0x378>)
90003d10:	4359      	muls	r1, r3
90003d12:	f000 fceb 	bl	900046ec <iprintf>
	ee_printf("Compiler version : %s\r\n",COMPILER_VERSION);
90003d16:	494a      	ldr	r1, [pc, #296]	; (90003e40 <core_main+0x37c>)
90003d18:	484a      	ldr	r0, [pc, #296]	; (90003e44 <core_main+0x380>)
90003d1a:	f000 fce7 	bl	900046ec <iprintf>
	ee_printf("Compiler flags   : %s\r\n",COMPILER_FLAGS);
90003d1e:	494a      	ldr	r1, [pc, #296]	; (90003e48 <core_main+0x384>)
90003d20:	484a      	ldr	r0, [pc, #296]	; (90003e4c <core_main+0x388>)
90003d22:	f000 fce3 	bl	900046ec <iprintf>
#if (MULTITHREAD>1)
	ee_printf("Parallel %s : %d\r\n",PARALLEL_METHOD,default_num_contexts);
#endif
	ee_printf("Memory location  : %s\r\n",MEM_LOCATION);
90003d26:	494a      	ldr	r1, [pc, #296]	; (90003e50 <core_main+0x38c>)
90003d28:	484a      	ldr	r0, [pc, #296]	; (90003e54 <core_main+0x390>)
90003d2a:	f000 fcdf 	bl	900046ec <iprintf>
	/* output for verification */
	ee_printf("seedcrc          : 0x%04x\r\n",seedcrc);
90003d2e:	4639      	mov	r1, r7
90003d30:	4849      	ldr	r0, [pc, #292]	; (90003e58 <core_main+0x394>)
90003d32:	f000 fcdb 	bl	900046ec <iprintf>
	if (results[0].execs & ID_LIST)
90003d36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90003d38:	07db      	lsls	r3, r3, #31
90003d3a:	f100 811a 	bmi.w	90003f72 <core_main+0x4ae>
		for (i=0 ; i<default_num_contexts; i++) 
			ee_printf("[%d]crclist       : 0x%04x\r\n",i,results[i].crclist);
	if (results[0].execs & ID_MATRIX) 
90003d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90003d40:	079f      	lsls	r7, r3, #30
90003d42:	f100 812a 	bmi.w	90003f9a <core_main+0x4d6>
		for (i=0 ; i<default_num_contexts; i++) 
			ee_printf("[%d]crcmatrix     : 0x%04x\r\n",i,results[i].crcmatrix);
	if (results[0].execs & ID_STATE)
90003d46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90003d48:	0758      	lsls	r0, r3, #29
90003d4a:	f100 813a 	bmi.w	90003fc2 <core_main+0x4fe>
90003d4e:	2100      	movs	r1, #0
		for (i=0 ; i<default_num_contexts; i++) 
			ee_printf("[%d]crcstate      : 0x%04x\r\n",i,results[i].crcstate);
	for (i=0 ; i<default_num_contexts; i++) 
		ee_printf("[%d]crcfinal      : 0x%04x\r\n",i,results[i].crc);
90003d50:	f04f 0844 	mov.w	r8, #68	; 0x44
90003d54:	f8df a130 	ldr.w	sl, [pc, #304]	; 90003e88 <core_main+0x3c4>
	for (i=0 ; i<default_num_contexts; i++) 
90003d58:	1c4f      	adds	r7, r1, #1
90003d5a:	6833      	ldr	r3, [r6, #0]
90003d5c:	b289      	uxth	r1, r1
90003d5e:	428b      	cmp	r3, r1
90003d60:	f200 8135 	bhi.w	90003fce <core_main+0x50a>
	if (total_errors==0) {
90003d64:	f1b9 0f00 	cmp.w	r9, #0
90003d68:	f040 813a 	bne.w	90003fe0 <core_main+0x51c>
		ee_printf("Correct operation validated. See readme.txt for run and reporting rules.\r\n");
90003d6c:	483b      	ldr	r0, [pc, #236]	; (90003e5c <core_main+0x398>)
90003d6e:	f000 fd43 	bl	900047f8 <puts>
#if HAS_FLOAT
		if (known_id==3) {
90003d72:	2c03      	cmp	r4, #3
90003d74:	d11f      	bne.n	90003db6 <core_main+0x2f2>
			ee_printf("CoreMark 1.0 : %f / %s %s",default_num_contexts*results[0].iterations/time_in_secs(total_time),COMPILER_VERSION,COMPILER_FLAGS);
90003d76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90003d78:	6830      	ldr	r0, [r6, #0]
90003d7a:	4358      	muls	r0, r3
90003d7c:	f7fc fbda 	bl	90000534 <__aeabi_ui2d>
90003d80:	4606      	mov	r6, r0
90003d82:	460f      	mov	r7, r1
90003d84:	4628      	mov	r0, r5
90003d86:	f000 fae5 	bl	90004354 <time_in_secs>
90003d8a:	4630      	mov	r0, r6
90003d8c:	4639      	mov	r1, r7
90003d8e:	ec53 2b10 	vmov	r2, r3, d0
90003d92:	f7fc fd73 	bl	9000087c <__aeabi_ddiv>
90003d96:	460b      	mov	r3, r1
90003d98:	492b      	ldr	r1, [pc, #172]	; (90003e48 <core_main+0x384>)
90003d9a:	4602      	mov	r2, r0
90003d9c:	4830      	ldr	r0, [pc, #192]	; (90003e60 <core_main+0x39c>)
90003d9e:	9101      	str	r1, [sp, #4]
90003da0:	4927      	ldr	r1, [pc, #156]	; (90003e40 <core_main+0x37c>)
90003da2:	9100      	str	r1, [sp, #0]
90003da4:	f000 fca2 	bl	900046ec <iprintf>
#if defined(MEM_LOCATION) && !defined(MEM_LOCATION_UNSPEC)
			ee_printf(" / %s",MEM_LOCATION);
90003da8:	4929      	ldr	r1, [pc, #164]	; (90003e50 <core_main+0x38c>)
90003daa:	482e      	ldr	r0, [pc, #184]	; (90003e64 <core_main+0x3a0>)
90003dac:	f000 fc9e 	bl	900046ec <iprintf>
#endif

#if (MULTITHREAD>1)
			ee_printf(" / %d:%s",default_num_contexts,PARALLEL_METHOD);
#endif
			ee_printf("\r\n");
90003db0:	482d      	ldr	r0, [pc, #180]	; (90003e68 <core_main+0x3a4>)
#endif
	}
	if (total_errors>0)
		ee_printf("Errors detected\r\n");
	if (total_errors<0)
		ee_printf("Cannot validate operation for these seed values, please compare with results on a known platform.\r\n");
90003db2:	f000 fd21 	bl	900047f8 <puts>
#if (MEM_METHOD==MEM_MALLOC)
	for (i=0 ; i<MULTITHREAD; i++) 
		portable_free(results[i].memblock[0]);
#endif
	/* And last call any target specific code for finalizing */
	portable_fini(&(results[0].port));
90003db6:	f10d 0056 	add.w	r0, sp, #86	; 0x56
90003dba:	f000 fada 	bl	90004372 <portable_fini>

	return MAIN_RETURN_VAL;	
}
90003dbe:	2000      	movs	r0, #0
90003dc0:	f60d 0d2c 	addw	sp, sp, #2092	; 0x82c
90003dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		results[0].execs=ALL_ALGORITHMS_MASK;
90003dc8:	2307      	movs	r3, #7
90003dca:	930d      	str	r3, [sp, #52]	; 0x34
90003dcc:	e69f      	b.n	90003b0e <core_main+0x4a>
	switch (seedcrc) { /* test known output for common seeds */
90003dce:	f648 2302 	movw	r3, #35330	; 0x8a02
90003dd2:	4298      	cmp	r0, r3
90003dd4:	d009      	beq.n	90003dea <core_main+0x326>
90003dd6:	f64e 13f5 	movw	r3, #59893	; 0xe9f5
90003dda:	4298      	cmp	r0, r3
90003ddc:	f47f af50 	bne.w	90003c80 <core_main+0x1bc>
			ee_printf("2K performance run parameters for coremark.\r\n");
90003de0:	4822      	ldr	r0, [pc, #136]	; (90003e6c <core_main+0x3a8>)
			known_id=3;
90003de2:	2403      	movs	r4, #3
			ee_printf("2K performance run parameters for coremark.\r\n");
90003de4:	f000 fd08 	bl	900047f8 <puts>
	if (known_id>=0) {
90003de8:	e003      	b.n	90003df2 <core_main+0x32e>
			known_id=0;
90003dea:	2400      	movs	r4, #0
			ee_printf("6k performance run parameters for coremark.\r\n");
90003dec:	4820      	ldr	r0, [pc, #128]	; (90003e70 <core_main+0x3ac>)
90003dee:	f000 fd03 	bl	900047f8 <puts>
				(results[i].crcmatrix!=matrix_known_crc[known_id])) {
90003df2:	4b20      	ldr	r3, [pc, #128]	; (90003e74 <core_main+0x3b0>)
			known_id=3;
90003df4:	f04f 0a00 	mov.w	sl, #0
				(results[i].crcmatrix!=matrix_known_crc[known_id])) {
90003df8:	eb03 0344 	add.w	r3, r3, r4, lsl #1
			known_id=3;
90003dfc:	46d1      	mov	r9, sl
				(results[i].crcmatrix!=matrix_known_crc[known_id])) {
90003dfe:	9302      	str	r3, [sp, #8]
90003e00:	e09b      	b.n	90003f3a <core_main+0x476>
			ee_printf("6k validation run parameters for coremark.\r\n");
90003e02:	481d      	ldr	r0, [pc, #116]	; (90003e78 <core_main+0x3b4>)
			known_id=1;
90003e04:	2401      	movs	r4, #1
			ee_printf("6k validation run parameters for coremark.\r\n");
90003e06:	f000 fcf7 	bl	900047f8 <puts>
	if (known_id>=0) {
90003e0a:	e7f2      	b.n	90003df2 <core_main+0x32e>
			ee_printf("Profile generation run parameters for coremark.\r\n");
90003e0c:	481b      	ldr	r0, [pc, #108]	; (90003e7c <core_main+0x3b8>)
			known_id=2;
90003e0e:	2402      	movs	r4, #2
			ee_printf("Profile generation run parameters for coremark.\r\n");
90003e10:	f000 fcf2 	bl	900047f8 <puts>
	if (known_id>=0) {
90003e14:	e7ed      	b.n	90003df2 <core_main+0x32e>
			ee_printf("2K validation run parameters for coremark.\r\n");
90003e16:	481a      	ldr	r0, [pc, #104]	; (90003e80 <core_main+0x3bc>)
			known_id=4;
90003e18:	2404      	movs	r4, #4
			ee_printf("2K validation run parameters for coremark.\r\n");
90003e1a:	f000 fced 	bl	900047f8 <puts>
	if (known_id>=0) {
90003e1e:	e7e8      	b.n	90003df2 <core_main+0x32e>
90003e20:	34153415 	.word	0x34153415
90003e24:	20000038 	.word	0x20000038
90003e28:	900095f3 	.word	0x900095f3
90003e2c:	9000960c 	.word	0x9000960c
90003e30:	90009625 	.word	0x90009625
90003e34:	9000963d 	.word	0x9000963d
90003e38:	40240000 	.word	0x40240000
90003e3c:	90009693 	.word	0x90009693
90003e40:	900096ac 	.word	0x900096ac
90003e44:	900096c8 	.word	0x900096c8
90003e48:	900096e0 	.word	0x900096e0
90003e4c:	900096ed 	.word	0x900096ed
90003e50:	90009705 	.word	0x90009705
90003e54:	9000970b 	.word	0x9000970b
90003e58:	90009723 	.word	0x90009723
90003e5c:	900097b3 	.word	0x900097b3
90003e60:	900097fd 	.word	0x900097fd
90003e64:	90009817 	.word	0x90009817
90003e68:	9000947b 	.word	0x9000947b
90003e6c:	90009507 	.word	0x90009507
90003e70:	9000947d 	.word	0x9000947d
90003e74:	90009398 	.word	0x90009398
90003e78:	900094aa 	.word	0x900094aa
90003e7c:	900094d6 	.word	0x900094d6
90003e80:	90009534 	.word	0x90009534
90003e84:	3ff00000 	.word	0x3ff00000
90003e88:	90009796 	.word	0x90009796
			results[i].err=0;
90003e8c:	ab05      	add	r3, sp, #20
90003e8e:	f04f 0844 	mov.w	r8, #68	; 0x44
90003e92:	fb08 380b 	mla	r8, r8, fp, r3
90003e96:	2300      	movs	r3, #0
90003e98:	f8a8 3040 	strh.w	r3, [r8, #64]	; 0x40
			if ((results[i].execs & ID_LIST) && 
90003e9c:	f8d8 3020 	ldr.w	r3, [r8, #32]
90003ea0:	07d8      	lsls	r0, r3, #31
90003ea2:	d50f      	bpl.n	90003ec4 <core_main+0x400>
				(results[i].crclist!=list_known_crc[known_id])) {
90003ea4:	4b50      	ldr	r3, [pc, #320]	; (90003fe8 <core_main+0x524>)
90003ea6:	f8b8 203a 	ldrh.w	r2, [r8, #58]	; 0x3a
90003eaa:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
			if ((results[i].execs & ID_LIST) && 
90003eae:	429a      	cmp	r2, r3
90003eb0:	d008      	beq.n	90003ec4 <core_main+0x400>
				ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\r\n",i,results[i].crclist,list_known_crc[known_id]);
90003eb2:	4659      	mov	r1, fp
90003eb4:	484d      	ldr	r0, [pc, #308]	; (90003fec <core_main+0x528>)
90003eb6:	f000 fc19 	bl	900046ec <iprintf>
				results[i].err++;
90003eba:	f8b8 3040 	ldrh.w	r3, [r8, #64]	; 0x40
90003ebe:	3301      	adds	r3, #1
90003ec0:	f8a8 3040 	strh.w	r3, [r8, #64]	; 0x40
			if ((results[i].execs & ID_MATRIX) &&
90003ec4:	ab05      	add	r3, sp, #20
90003ec6:	f04f 0844 	mov.w	r8, #68	; 0x44
90003eca:	fb08 380b 	mla	r8, r8, fp, r3
90003ece:	f8d8 3020 	ldr.w	r3, [r8, #32]
90003ed2:	0799      	lsls	r1, r3, #30
90003ed4:	d50e      	bpl.n	90003ef4 <core_main+0x430>
				(results[i].crcmatrix!=matrix_known_crc[known_id])) {
90003ed6:	9b02      	ldr	r3, [sp, #8]
90003ed8:	f8b8 203c 	ldrh.w	r2, [r8, #60]	; 0x3c
90003edc:	895b      	ldrh	r3, [r3, #10]
			if ((results[i].execs & ID_MATRIX) &&
90003ede:	429a      	cmp	r2, r3
90003ee0:	d008      	beq.n	90003ef4 <core_main+0x430>
				ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\r\n",i,results[i].crcmatrix,matrix_known_crc[known_id]);
90003ee2:	4659      	mov	r1, fp
90003ee4:	4842      	ldr	r0, [pc, #264]	; (90003ff0 <core_main+0x52c>)
90003ee6:	f000 fc01 	bl	900046ec <iprintf>
				results[i].err++;
90003eea:	f8b8 3040 	ldrh.w	r3, [r8, #64]	; 0x40
90003eee:	3301      	adds	r3, #1
90003ef0:	f8a8 3040 	strh.w	r3, [r8, #64]	; 0x40
			if ((results[i].execs & ID_STATE) &&
90003ef4:	ab05      	add	r3, sp, #20
90003ef6:	f04f 0844 	mov.w	r8, #68	; 0x44
90003efa:	fb08 380b 	mla	r8, r8, fp, r3
90003efe:	f8d8 3020 	ldr.w	r3, [r8, #32]
90003f02:	075a      	lsls	r2, r3, #29
90003f04:	d50e      	bpl.n	90003f24 <core_main+0x460>
				(results[i].crcstate!=state_known_crc[known_id])) {
90003f06:	9b02      	ldr	r3, [sp, #8]
90003f08:	f8b8 203e 	ldrh.w	r2, [r8, #62]	; 0x3e
90003f0c:	8a9b      	ldrh	r3, [r3, #20]
			if ((results[i].execs & ID_STATE) &&
90003f0e:	429a      	cmp	r2, r3
90003f10:	d008      	beq.n	90003f24 <core_main+0x460>
				ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\r\n",i,results[i].crcstate,state_known_crc[known_id]);
90003f12:	4659      	mov	r1, fp
90003f14:	4837      	ldr	r0, [pc, #220]	; (90003ff4 <core_main+0x530>)
90003f16:	f000 fbe9 	bl	900046ec <iprintf>
				results[i].err++;
90003f1a:	f8b8 3040 	ldrh.w	r3, [r8, #64]	; 0x40
90003f1e:	3301      	adds	r3, #1
90003f20:	f8a8 3040 	strh.w	r3, [r8, #64]	; 0x40
			total_errors+=results[i].err;
90003f24:	2344      	movs	r3, #68	; 0x44
90003f26:	aa05      	add	r2, sp, #20
90003f28:	f10a 0a01 	add.w	sl, sl, #1
90003f2c:	fb03 210b 	mla	r1, r3, fp, r2
90003f30:	f8b1 0040 	ldrh.w	r0, [r1, #64]	; 0x40
90003f34:	4481      	add	r9, r0
90003f36:	fa0f f989 	sxth.w	r9, r9
		for (i=0 ; i<default_num_contexts; i++) {
90003f3a:	fa1f fb8a 	uxth.w	fp, sl
90003f3e:	6833      	ldr	r3, [r6, #0]
90003f40:	459b      	cmp	fp, r3
90003f42:	d3a3      	bcc.n	90003e8c <core_main+0x3c8>
90003f44:	e69f      	b.n	90003c86 <core_main+0x1c2>
		total_errors++;
90003f46:	f10a 0901 	add.w	r9, sl, #1
		ee_printf("ERROR! Must execute for at least 10 secs for a valid result!\r\n");
90003f4a:	482b      	ldr	r0, [pc, #172]	; (90003ff8 <core_main+0x534>)
90003f4c:	f000 fc54 	bl	900047f8 <puts>
		total_errors++;
90003f50:	fa0f f989 	sxth.w	r9, r9
90003f54:	e6d9      	b.n	90003d0a <core_main+0x246>
			ee_printf("[%d]crclist       : 0x%04x\r\n",i,results[i].crclist);
90003f56:	ab05      	add	r3, sp, #20
90003f58:	4650      	mov	r0, sl
90003f5a:	fb08 3301 	mla	r3, r8, r1, r3
90003f5e:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
90003f60:	f000 fbc4 	bl	900046ec <iprintf>
90003f64:	4639      	mov	r1, r7
		for (i=0 ; i<default_num_contexts; i++) 
90003f66:	1c4f      	adds	r7, r1, #1
90003f68:	6833      	ldr	r3, [r6, #0]
90003f6a:	b289      	uxth	r1, r1
90003f6c:	428b      	cmp	r3, r1
90003f6e:	d8f2      	bhi.n	90003f56 <core_main+0x492>
90003f70:	e6e5      	b.n	90003d3e <core_main+0x27a>
90003f72:	2100      	movs	r1, #0
			ee_printf("[%d]crclist       : 0x%04x\r\n",i,results[i].crclist);
90003f74:	f04f 0844 	mov.w	r8, #68	; 0x44
90003f78:	f8df a088 	ldr.w	sl, [pc, #136]	; 90004004 <core_main+0x540>
90003f7c:	e7f3      	b.n	90003f66 <core_main+0x4a2>
			ee_printf("[%d]crcmatrix     : 0x%04x\r\n",i,results[i].crcmatrix);
90003f7e:	ab05      	add	r3, sp, #20
90003f80:	4650      	mov	r0, sl
90003f82:	fb08 3301 	mla	r3, r8, r1, r3
90003f86:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
90003f88:	f000 fbb0 	bl	900046ec <iprintf>
90003f8c:	4639      	mov	r1, r7
		for (i=0 ; i<default_num_contexts; i++) 
90003f8e:	1c4f      	adds	r7, r1, #1
90003f90:	6833      	ldr	r3, [r6, #0]
90003f92:	b289      	uxth	r1, r1
90003f94:	428b      	cmp	r3, r1
90003f96:	d8f2      	bhi.n	90003f7e <core_main+0x4ba>
90003f98:	e6d5      	b.n	90003d46 <core_main+0x282>
90003f9a:	2100      	movs	r1, #0
			ee_printf("[%d]crcmatrix     : 0x%04x\r\n",i,results[i].crcmatrix);
90003f9c:	f04f 0844 	mov.w	r8, #68	; 0x44
90003fa0:	f8df a064 	ldr.w	sl, [pc, #100]	; 90004008 <core_main+0x544>
90003fa4:	e7f3      	b.n	90003f8e <core_main+0x4ca>
			ee_printf("[%d]crcstate      : 0x%04x\r\n",i,results[i].crcstate);
90003fa6:	ab05      	add	r3, sp, #20
90003fa8:	4650      	mov	r0, sl
90003faa:	fb08 3301 	mla	r3, r8, r1, r3
90003fae:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
90003fb0:	f000 fb9c 	bl	900046ec <iprintf>
90003fb4:	4639      	mov	r1, r7
		for (i=0 ; i<default_num_contexts; i++) 
90003fb6:	1c4f      	adds	r7, r1, #1
90003fb8:	6833      	ldr	r3, [r6, #0]
90003fba:	b289      	uxth	r1, r1
90003fbc:	428b      	cmp	r3, r1
90003fbe:	d8f2      	bhi.n	90003fa6 <core_main+0x4e2>
90003fc0:	e6c5      	b.n	90003d4e <core_main+0x28a>
90003fc2:	2100      	movs	r1, #0
			ee_printf("[%d]crcstate      : 0x%04x\r\n",i,results[i].crcstate);
90003fc4:	f04f 0844 	mov.w	r8, #68	; 0x44
90003fc8:	f8df a040 	ldr.w	sl, [pc, #64]	; 9000400c <core_main+0x548>
90003fcc:	e7f3      	b.n	90003fb6 <core_main+0x4f2>
		ee_printf("[%d]crcfinal      : 0x%04x\r\n",i,results[i].crc);
90003fce:	ab05      	add	r3, sp, #20
90003fd0:	4650      	mov	r0, sl
90003fd2:	fb08 3301 	mla	r3, r8, r1, r3
90003fd6:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
90003fd8:	f000 fb88 	bl	900046ec <iprintf>
90003fdc:	4639      	mov	r1, r7
90003fde:	e6bb      	b.n	90003d58 <core_main+0x294>
		ee_printf("Errors detected\r\n");
90003fe0:	bfcc      	ite	gt
90003fe2:	4806      	ldrgt	r0, [pc, #24]	; (90003ffc <core_main+0x538>)
		ee_printf("Cannot validate operation for these seed values, please compare with results on a known platform.\r\n");
90003fe4:	4806      	ldrle	r0, [pc, #24]	; (90004000 <core_main+0x53c>)
90003fe6:	e6e4      	b.n	90003db2 <core_main+0x2ee>
90003fe8:	90009398 	.word	0x90009398
90003fec:	90009560 	.word	0x90009560
90003ff0:	90009590 	.word	0x90009590
90003ff4:	900095c2 	.word	0x900095c2
90003ff8:	90009655 	.word	0x90009655
90003ffc:	9000981d 	.word	0x9000981d
90004000:	9000982e 	.word	0x9000982e
90004004:	9000973f 	.word	0x9000973f
90004008:	9000975c 	.word	0x9000975c
9000400c:	90009779 	.word	0x90009779

90004010 <core_init_matrix>:
	Matrix dimensions.
	
	Note:
	The seed parameter MUST be supplied from a source that cannot be determined at compile time
*/
ee_u32 core_init_matrix(ee_u32 blksize, void *memblk, ee_s32 seed, mat_params *p) {
90004010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	MATDAT *B;
	ee_s32 order=1;
	MATDAT val;
	ee_u32 i=0,j=0;
	if (seed==0)
		seed=1;
90004014:	2a00      	cmp	r2, #0
90004016:	f04f 0500 	mov.w	r5, #0
9000401a:	bf08      	it	eq
9000401c:	2201      	moveq	r2, #1
9000401e:	462c      	mov	r4, r5
	while (j<blksize) {
90004020:	4285      	cmp	r5, r0
90004022:	d318      	bcc.n	90004056 <core_init_matrix+0x46>
		i++;
		j=i*i*2*4;		
	}
	N=i-1;
	A=(MATDAT *)align_mem(memblk);
90004024:	3901      	subs	r1, #1
	N=i-1;
90004026:	1e60      	subs	r0, r4, #1
	B=A+N*N;

	for (i=0; i<N; i++) {
90004028:	2700      	movs	r7, #0
9000402a:	f1c4 0901 	rsb	r9, r4, #1
	A=(MATDAT *)align_mem(memblk);
9000402e:	f021 0503 	bic.w	r5, r1, #3
	B=A+N*N;
90004032:	fb00 f100 	mul.w	r1, r0, r0
	for (i=0; i<N; i++) {
90004036:	46bc      	mov	ip, r7
	A=(MATDAT *)align_mem(memblk);
90004038:	f105 0e04 	add.w	lr, r5, #4
	B=A+N*N;
9000403c:	ea4f 0841 	mov.w	r8, r1, lsl #1
			val = (seed + order);
			val=matrix_clip(val,0);
			B[i*N+j] = val;
			val =  (val + order);
			val=matrix_clip(val,1);
			A[i*N+j] = val;
90004040:	3502      	adds	r5, #2
	B=A+N*N;
90004042:	eb0e 0141 	add.w	r1, lr, r1, lsl #1
			A[i*N+j] = val;
90004046:	1a6d      	subs	r5, r5, r1
	for (i=0; i<N; i++) {
90004048:	4584      	cmp	ip, r0
9000404a:	eb09 0a04 	add.w	sl, r9, r4
9000404e:	d221      	bcs.n	90004094 <core_init_matrix+0x84>
90004050:	eb01 0b47 	add.w	fp, r1, r7, lsl #1
90004054:	e017      	b.n	90004086 <core_init_matrix+0x76>
		i++;
90004056:	3401      	adds	r4, #1
		j=i*i*2*4;		
90004058:	fb04 f504 	mul.w	r5, r4, r4
9000405c:	00ed      	lsls	r5, r5, #3
9000405e:	e7df      	b.n	90004020 <core_init_matrix+0x10>
			seed = ( ( order * seed ) % 65536 );
90004060:	fb0a f202 	mul.w	r2, sl, r2
90004064:	4256      	negs	r6, r2
90004066:	b292      	uxth	r2, r2
90004068:	b2b6      	uxth	r6, r6
9000406a:	bf58      	it	pl
9000406c:	4272      	negpl	r2, r6
			val = (seed + order);
9000406e:	fa12 f68a 	uxtah	r6, r2, sl
90004072:	b2b6      	uxth	r6, r6
			B[i*N+j] = val;
90004074:	f82b 6b02 	strh.w	r6, [fp], #2
			val =  (val + order);
90004078:	fa16 f68a 	uxtah	r6, r6, sl
			order++;
9000407c:	f10a 0a01 	add.w	sl, sl, #1
			val=matrix_clip(val,1);
90004080:	b2f6      	uxtb	r6, r6
			A[i*N+j] = val;
90004082:	f825 600b 	strh.w	r6, [r5, fp]
		for (j=0; j<N; j++) {
90004086:	45a2      	cmp	sl, r4
90004088:	d1ea      	bne.n	90004060 <core_init_matrix+0x50>
	for (i=0; i<N; i++) {
9000408a:	f10c 0c01 	add.w	ip, ip, #1
9000408e:	4404      	add	r4, r0
90004090:	4407      	add	r7, r0
90004092:	e7d9      	b.n	90004048 <core_init_matrix+0x38>
		}
	}

	p->A=A;
	p->B=B;
90004094:	e9c3 e101 	strd	lr, r1, [r3, #4]
	p->C=(MATRES *)align_mem(B+N*N);
90004098:	4441      	add	r1, r8
	p->N=N;
9000409a:	6018      	str	r0, [r3, #0]
	p->C=(MATRES *)align_mem(B+N*N);
9000409c:	3901      	subs	r1, #1
9000409e:	f021 0103 	bic.w	r1, r1, #3
900040a2:	3104      	adds	r1, #4
900040a4:	60d9      	str	r1, [r3, #12]
#if CORE_DEBUG
	printmat(A,N,"A");
	printmat(B,N,"B");
#endif
	return N;
}
900040a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900040aa <matrix_sum>:
	As long as this value is under the parameter clipval, 
	add 1 to the result if the element is bigger then the previous.
	
	Otherwise, reset the accumulator and add 10 to the result.
*/
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
900040aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	MATRES tmp=0,prev=0,cur=0;
	ee_s16 ret=0;
	ee_u32 i,j;
	for (i=0; i<N; i++) {
900040ae:	2400      	movs	r4, #0
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
900040b0:	4605      	mov	r5, r0
900040b2:	ea4f 0980 	mov.w	r9, r0, lsl #2
900040b6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
	for (i=0; i<N; i++) {
900040ba:	46a4      	mov	ip, r4
	ee_s16 ret=0;
900040bc:	4620      	mov	r0, r4
	MATRES tmp=0,prev=0,cur=0;
900040be:	46a2      	mov	sl, r4
900040c0:	4626      	mov	r6, r4
	for (i=0; i<N; i++) {
900040c2:	45ac      	cmp	ip, r5
900040c4:	d018      	beq.n	900040f8 <matrix_sum+0x4e>
900040c6:	eb01 0784 	add.w	r7, r1, r4, lsl #2
900040ca:	e009      	b.n	900040e0 <matrix_sum+0x36>
		for (j=0; j<N; j++) {
			cur=C[i*N+j];
900040cc:	f857 8b04 	ldr.w	r8, [r7], #4
			tmp+=cur;
900040d0:	b283      	uxth	r3, r0
900040d2:	4446      	add	r6, r8
			if (tmp>clipval) {
900040d4:	42b2      	cmp	r2, r6
900040d6:	da0a      	bge.n	900040ee <matrix_sum+0x44>
				ret+=10;
900040d8:	330a      	adds	r3, #10
				tmp=0;
900040da:	2600      	movs	r6, #0
				ret+=10;
900040dc:	b218      	sxth	r0, r3
			} else {
				ret += (cur>prev) ? 1 : 0;
			}
			prev=cur;
900040de:	46c2      	mov	sl, r8
		for (j=0; j<N; j++) {
900040e0:	4577      	cmp	r7, lr
900040e2:	d1f3      	bne.n	900040cc <matrix_sum+0x22>
	for (i=0; i<N; i++) {
900040e4:	f10c 0c01 	add.w	ip, ip, #1
900040e8:	44ce      	add	lr, r9
900040ea:	442c      	add	r4, r5
900040ec:	e7e9      	b.n	900040c2 <matrix_sum+0x18>
				ret += (cur>prev) ? 1 : 0;
900040ee:	45c2      	cmp	sl, r8
900040f0:	bfb8      	it	lt
900040f2:	3301      	addlt	r3, #1
900040f4:	b218      	sxth	r0, r3
900040f6:	e7f2      	b.n	900040de <matrix_sum+0x34>
		}
	}
	return ret;
}
900040f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

900040fc <matrix_mul_const>:

/* Function: matrix_mul_const
	Multiply a matrix by a constant.
	This could be used as a scaler for instance.
*/
void matrix_mul_const(ee_u32 N, MATRES *C, MATDAT *A, MATDAT val) {
900040fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ee_u32 i,j;
	for (i=0; i<N; i++) {
90004100:	2400      	movs	r4, #0
90004102:	ea4f 0840 	mov.w	r8, r0, lsl #1
90004106:	eb02 0740 	add.w	r7, r2, r0, lsl #1
9000410a:	4626      	mov	r6, r4
9000410c:	4286      	cmp	r6, r0
9000410e:	d010      	beq.n	90004132 <matrix_mul_const+0x36>
90004110:	eb02 0544 	add.w	r5, r2, r4, lsl #1
90004114:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
90004118:	e005      	b.n	90004126 <matrix_mul_const+0x2a>
		for (j=0; j<N; j++) {
			C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
9000411a:	f935 cb02 	ldrsh.w	ip, [r5], #2
9000411e:	fb0c fc03 	mul.w	ip, ip, r3
90004122:	f84e cb04 	str.w	ip, [lr], #4
		for (j=0; j<N; j++) {
90004126:	42bd      	cmp	r5, r7
90004128:	d1f7      	bne.n	9000411a <matrix_mul_const+0x1e>
	for (i=0; i<N; i++) {
9000412a:	3601      	adds	r6, #1
9000412c:	4447      	add	r7, r8
9000412e:	4404      	add	r4, r0
90004130:	e7ec      	b.n	9000410c <matrix_mul_const+0x10>
		}
	}
}
90004132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90004136 <matrix_add_const>:

/* Function: matrix_add_const
	Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
90004136:	b5f0      	push	{r4, r5, r6, r7, lr}
	ee_u32 i,j;
	for (i=0; i<N; i++) {
90004138:	2400      	movs	r4, #0
9000413a:	ea4f 0c40 	mov.w	ip, r0, lsl #1
9000413e:	eb01 0640 	add.w	r6, r1, r0, lsl #1
90004142:	4625      	mov	r5, r4
90004144:	4285      	cmp	r5, r0
90004146:	d00d      	beq.n	90004164 <matrix_add_const+0x2e>
90004148:	eb01 0344 	add.w	r3, r1, r4, lsl #1
9000414c:	e004      	b.n	90004158 <matrix_add_const+0x22>
		for (j=0; j<N; j++) {
			A[i*N+j] += val;
9000414e:	f9b3 7000 	ldrsh.w	r7, [r3]
90004152:	4417      	add	r7, r2
90004154:	f823 7b02 	strh.w	r7, [r3], #2
		for (j=0; j<N; j++) {
90004158:	42b3      	cmp	r3, r6
9000415a:	d1f8      	bne.n	9000414e <matrix_add_const+0x18>
	for (i=0; i<N; i++) {
9000415c:	3501      	adds	r5, #1
9000415e:	4466      	add	r6, ip
90004160:	4404      	add	r4, r0
90004162:	e7ef      	b.n	90004144 <matrix_add_const+0xe>
		}
	}
}
90004164:	bdf0      	pop	{r4, r5, r6, r7, pc}

90004166 <matrix_mul_vect>:

/* Function: matrix_mul_vect
	Multiply a matrix by a vector.
	This is common in many simple filters (e.g. fir where a vector of coefficients is applied to the matrix.)
*/
void matrix_mul_vect(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
90004166:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000416a:	eb01 0c80 	add.w	ip, r1, r0, lsl #2
	ee_u32 i,j;
	for (i=0; i<N; i++) {
9000416e:	2400      	movs	r4, #0
90004170:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
90004174:	4561      	cmp	r1, ip
90004176:	d101      	bne.n	9000417c <matrix_mul_vect+0x16>
		C[i]=0;
		for (j=0; j<N; j++) {
			C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
		}
	}
}
90004178:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (j=0; j<N; j++) {
9000417c:	eb02 0744 	add.w	r7, r2, r4, lsl #1
	for (i=0; i<N; i++) {
90004180:	461e      	mov	r6, r3
90004182:	2500      	movs	r5, #0
			C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
90004184:	f936 8b02 	ldrsh.w	r8, [r6], #2
90004188:	f937 9b02 	ldrsh.w	r9, [r7], #2
		for (j=0; j<N; j++) {
9000418c:	45b6      	cmp	lr, r6
			C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
9000418e:	fb09 5508 	mla	r5, r9, r8, r5
		for (j=0; j<N; j++) {
90004192:	d1f7      	bne.n	90004184 <matrix_mul_vect+0x1e>
90004194:	4404      	add	r4, r0
90004196:	f841 5b04 	str.w	r5, [r1], #4
	for (i=0; i<N; i++) {
9000419a:	e7eb      	b.n	90004174 <matrix_mul_vect+0xe>

9000419c <matrix_mul_matrix>:

/* Function: matrix_mul_matrix
	Multiply a matrix by a matrix.
	Basic code is used in many algorithms, mostly with minor changes such as scaling.
*/
void matrix_mul_matrix(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
9000419c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
900041a0:	9301      	str	r3, [sp, #4]
	ee_u32 i,j,k;
	for (i=0; i<N; i++) {
900041a2:	2300      	movs	r3, #0
void matrix_mul_matrix(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
900041a4:	468b      	mov	fp, r1
900041a6:	0046      	lsls	r6, r0, #1
900041a8:	eb02 0c40 	add.w	ip, r2, r0, lsl #1
	for (i=0; i<N; i++) {
900041ac:	461d      	mov	r5, r3
900041ae:	4285      	cmp	r5, r0
900041b0:	d020      	beq.n	900041f4 <matrix_mul_matrix+0x58>
900041b2:	eb0b 0483 	add.w	r4, fp, r3, lsl #2
		for (j=0; j<N; j++) {
900041b6:	2100      	movs	r1, #0
900041b8:	e009      	b.n	900041ce <matrix_mul_matrix+0x32>
			C[i*N+j]=0;
900041ba:	2700      	movs	r7, #0
			for(k=0;k<N;k++)
900041bc:	4696      	mov	lr, r2
			C[i*N+j]=0;
900041be:	f844 7b04 	str.w	r7, [r4], #4
			for(k=0;k<N;k++)
900041c2:	9f01      	ldr	r7, [sp, #4]
900041c4:	eb07 0841 	add.w	r8, r7, r1, lsl #1
900041c8:	45e6      	cmp	lr, ip
900041ca:	d107      	bne.n	900041dc <matrix_mul_matrix+0x40>
		for (j=0; j<N; j++) {
900041cc:	3101      	adds	r1, #1
900041ce:	4281      	cmp	r1, r0
900041d0:	d1f3      	bne.n	900041ba <matrix_mul_matrix+0x1e>
	for (i=0; i<N; i++) {
900041d2:	3501      	adds	r5, #1
900041d4:	4432      	add	r2, r6
900041d6:	44b4      	add	ip, r6
900041d8:	4403      	add	r3, r0
900041da:	e7e8      	b.n	900041ae <matrix_mul_matrix+0x12>
			{
				C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
900041dc:	f8b8 a000 	ldrh.w	sl, [r8]
900041e0:	44b0      	add	r8, r6
900041e2:	f93e 9b02 	ldrsh.w	r9, [lr], #2
900041e6:	f854 7c04 	ldr.w	r7, [r4, #-4]
900041ea:	fb19 770a 	smlabb	r7, r9, sl, r7
900041ee:	f844 7c04 	str.w	r7, [r4, #-4]
			for(k=0;k<N;k++)
900041f2:	e7e9      	b.n	900041c8 <matrix_mul_matrix+0x2c>
			}
		}
	}
}
900041f4:	b003      	add	sp, #12
900041f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900041fa <matrix_mul_matrix_bitextract>:

/* Function: matrix_mul_matrix_bitextract
	Multiply a matrix by a matrix, and extract some bits from the result.
	Basic code is used in many algorithms, mostly with minor changes such as scaling.
*/
void matrix_mul_matrix_bitextract(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
900041fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
900041fe:	9101      	str	r1, [sp, #4]
	ee_u32 i,j,k;
	for (i=0; i<N; i++) {
90004200:	2100      	movs	r1, #0
void matrix_mul_matrix_bitextract(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
90004202:	469b      	mov	fp, r3
90004204:	ea4f 0c40 	mov.w	ip, r0, lsl #1
90004208:	eb02 0e40 	add.w	lr, r2, r0, lsl #1
	for (i=0; i<N; i++) {
9000420c:	460e      	mov	r6, r1
9000420e:	4286      	cmp	r6, r0
90004210:	d027      	beq.n	90004262 <matrix_mul_matrix_bitextract+0x68>
90004212:	9b01      	ldr	r3, [sp, #4]
		for (j=0; j<N; j++) {
90004214:	2400      	movs	r4, #0
90004216:	eb03 0581 	add.w	r5, r3, r1, lsl #2
9000421a:	e008      	b.n	9000422e <matrix_mul_matrix_bitextract+0x34>
			C[i*N+j]=0;
9000421c:	2300      	movs	r3, #0
9000421e:	eb0b 0944 	add.w	r9, fp, r4, lsl #1
			for(k=0;k<N;k++)
90004222:	4690      	mov	r8, r2
			C[i*N+j]=0;
90004224:	f845 3b04 	str.w	r3, [r5], #4
			for(k=0;k<N;k++)
90004228:	45f0      	cmp	r8, lr
9000422a:	d107      	bne.n	9000423c <matrix_mul_matrix_bitextract+0x42>
		for (j=0; j<N; j++) {
9000422c:	3401      	adds	r4, #1
9000422e:	4284      	cmp	r4, r0
90004230:	d1f4      	bne.n	9000421c <matrix_mul_matrix_bitextract+0x22>
	for (i=0; i<N; i++) {
90004232:	3601      	adds	r6, #1
90004234:	4462      	add	r2, ip
90004236:	44e6      	add	lr, ip
90004238:	4401      	add	r1, r0
9000423a:	e7e8      	b.n	9000420e <matrix_mul_matrix_bitextract+0x14>
			{
				MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
9000423c:	f8b9 a000 	ldrh.w	sl, [r9]
90004240:	44e1      	add	r9, ip
90004242:	f938 3b02 	ldrsh.w	r3, [r8], #2
90004246:	fb1a f303 	smulbb	r3, sl, r3
				C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
9000424a:	f3c3 0a83 	ubfx	sl, r3, #2, #4
9000424e:	f3c3 1346 	ubfx	r3, r3, #5, #7
90004252:	461f      	mov	r7, r3
90004254:	f855 3c04 	ldr.w	r3, [r5, #-4]
90004258:	fb07 330a 	mla	r3, r7, sl, r3
9000425c:	f845 3c04 	str.w	r3, [r5, #-4]
			for(k=0;k<N;k++)
90004260:	e7e2      	b.n	90004228 <matrix_mul_matrix_bitextract+0x2e>
			}
		}
	}
}
90004262:	b003      	add	sp, #12
90004264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90004268 <matrix_test>:
ee_s16 matrix_test(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B, MATDAT val) {
90004268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000426c:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
90004270:	4616      	mov	r6, r2
90004272:	460d      	mov	r5, r1
90004274:	4604      	mov	r4, r0
	MATDAT clipval=matrix_big(val);
90004276:	ea6f 5807 	mvn.w	r8, r7, lsl #20
	matrix_add_const(N,A,val); /* make sure data changes  */
9000427a:	463a      	mov	r2, r7
9000427c:	4631      	mov	r1, r6
ee_s16 matrix_test(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B, MATDAT val) {
9000427e:	4699      	mov	r9, r3
	MATDAT clipval=matrix_big(val);
90004280:	ea6f 5818 	mvn.w	r8, r8, lsr #20
	matrix_add_const(N,A,val); /* make sure data changes  */
90004284:	f7ff ff57 	bl	90004136 <matrix_add_const>
	matrix_mul_const(N,C,A,val);
90004288:	463b      	mov	r3, r7
9000428a:	4629      	mov	r1, r5
9000428c:	4632      	mov	r2, r6
9000428e:	f7ff ff35 	bl	900040fc <matrix_mul_const>
	crc=crc16(matrix_sum(N,C,clipval),crc);
90004292:	4642      	mov	r2, r8
90004294:	f7ff ff09 	bl	900040aa <matrix_sum>
90004298:	2100      	movs	r1, #0
9000429a:	f000 f9ef 	bl	9000467c <crc16>
	matrix_mul_vect(N,C,A,B);
9000429e:	464b      	mov	r3, r9
	crc=crc16(matrix_sum(N,C,clipval),crc);
900042a0:	4682      	mov	sl, r0
	matrix_mul_vect(N,C,A,B);
900042a2:	4632      	mov	r2, r6
900042a4:	4629      	mov	r1, r5
900042a6:	4620      	mov	r0, r4
900042a8:	f7ff ff5d 	bl	90004166 <matrix_mul_vect>
	crc=crc16(matrix_sum(N,C,clipval),crc);
900042ac:	4642      	mov	r2, r8
900042ae:	4629      	mov	r1, r5
900042b0:	f7ff fefb 	bl	900040aa <matrix_sum>
900042b4:	4651      	mov	r1, sl
900042b6:	f000 f9e1 	bl	9000467c <crc16>
	matrix_mul_matrix(N,C,A,B);
900042ba:	464b      	mov	r3, r9
	crc=crc16(matrix_sum(N,C,clipval),crc);
900042bc:	4682      	mov	sl, r0
	matrix_mul_matrix(N,C,A,B);
900042be:	4632      	mov	r2, r6
900042c0:	4629      	mov	r1, r5
900042c2:	4620      	mov	r0, r4
900042c4:	f7ff ff6a 	bl	9000419c <matrix_mul_matrix>
	crc=crc16(matrix_sum(N,C,clipval),crc);
900042c8:	4642      	mov	r2, r8
900042ca:	4629      	mov	r1, r5
900042cc:	f7ff feed 	bl	900040aa <matrix_sum>
900042d0:	4651      	mov	r1, sl
900042d2:	f000 f9d3 	bl	9000467c <crc16>
	matrix_mul_matrix_bitextract(N,C,A,B);
900042d6:	464b      	mov	r3, r9
	crc=crc16(matrix_sum(N,C,clipval),crc);
900042d8:	4682      	mov	sl, r0
	matrix_mul_matrix_bitextract(N,C,A,B);
900042da:	4632      	mov	r2, r6
900042dc:	4629      	mov	r1, r5
900042de:	4620      	mov	r0, r4
900042e0:	f7ff ff8b 	bl	900041fa <matrix_mul_matrix_bitextract>
	crc=crc16(matrix_sum(N,C,clipval),crc);
900042e4:	4642      	mov	r2, r8
900042e6:	4629      	mov	r1, r5
900042e8:	f7ff fedf 	bl	900040aa <matrix_sum>
900042ec:	4651      	mov	r1, sl
900042ee:	f000 f9c5 	bl	9000467c <crc16>
	matrix_add_const(N,A,-val); /* return matrix to initial value */
900042f2:	427a      	negs	r2, r7
	crc=crc16(matrix_sum(N,C,clipval),crc);
900042f4:	4605      	mov	r5, r0
	matrix_add_const(N,A,-val); /* return matrix to initial value */
900042f6:	4631      	mov	r1, r6
900042f8:	4620      	mov	r0, r4
900042fa:	b212      	sxth	r2, r2
900042fc:	f7ff ff1b 	bl	90004136 <matrix_add_const>
}
90004300:	b228      	sxth	r0, r5
90004302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

90004306 <core_bench_matrix>:
ee_u16 core_bench_matrix(mat_params *p, ee_s16 seed, ee_u16 crc) {
90004306:	b513      	push	{r0, r1, r4, lr}
90004308:	4614      	mov	r4, r2
	crc=crc16(matrix_test(N,C,A,B,val),crc);
9000430a:	9100      	str	r1, [sp, #0]
9000430c:	68c1      	ldr	r1, [r0, #12]
9000430e:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
90004312:	6800      	ldr	r0, [r0, #0]
90004314:	f7ff ffa8 	bl	90004268 <matrix_test>
90004318:	4621      	mov	r1, r4
}
9000431a:	b002      	add	sp, #8
9000431c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	crc=crc16(matrix_test(N,C,A,B,val),crc);
90004320:	f000 b9ac 	b.w	9000467c <crc16>

90004324 <start_time>:
	This function will be called right before starting the timed portion of the benchmark.

	Implementation may be capturing a system timer (as implemented in the example code) 
	or zeroing some system parameters - e.g. setting the cpu clocks cycles to 0.
*/
void start_time(void) {
90004324:	b508      	push	{r3, lr}
  return HAL_GetTick();
90004326:	f7fd fa71 	bl	9000180c <HAL_GetTick>
	GETMYTIME(&start_time_val );      
9000432a:	4b01      	ldr	r3, [pc, #4]	; (90004330 <start_time+0xc>)
9000432c:	6018      	str	r0, [r3, #0]
}
9000432e:	bd08      	pop	{r3, pc}
90004330:	200004c0 	.word	0x200004c0

90004334 <stop_time>:
	This function will be called right after ending the timed portion of the benchmark.

	Implementation may be capturing a system timer (as implemented in the example code) 
	or other system parameters - e.g. reading the current value of cpu cycles counter.
*/
void stop_time(void) {
90004334:	b508      	push	{r3, lr}
  return HAL_GetTick();
90004336:	f7fd fa69 	bl	9000180c <HAL_GetTick>
	GETMYTIME(&stop_time_val );      
9000433a:	4b01      	ldr	r3, [pc, #4]	; (90004340 <stop_time+0xc>)
9000433c:	6058      	str	r0, [r3, #4]
}
9000433e:	bd08      	pop	{r3, pc}
90004340:	200004c0 	.word	0x200004c0

90004344 <get_time>:
	This methodology is taken to accomodate any hardware or simulated platform.
	The sample implementation returns millisecs by default, 
	and the resolution is controlled by <TIMER_RES_DIVIDER>
*/
CORE_TICKS get_time(void) {
	CORE_TICKS elapsed=(CORE_TICKS)(MYTIMEDIFF(stop_time_val, start_time_val));
90004344:	4b02      	ldr	r3, [pc, #8]	; (90004350 <get_time+0xc>)
90004346:	e9d3 3000 	ldrd	r3, r0, [r3]
	return elapsed;
}
9000434a:	1ac0      	subs	r0, r0, r3
9000434c:	4770      	bx	lr
9000434e:	bf00      	nop
90004350:	200004c0 	.word	0x200004c0

90004354 <time_in_secs>:
	Convert the value returned by get_time to seconds.

	The <secs_ret> type is used to accomodate systems with no support for floating point.
	Default implementation implemented by the EE_TICKS_PER_SEC macro above.
*/
secs_ret time_in_secs(CORE_TICKS ticks) {
90004354:	b508      	push	{r3, lr}
	secs_ret retval=((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
90004356:	f7fc f8ed 	bl	90000534 <__aeabi_ui2d>
9000435a:	2200      	movs	r2, #0
9000435c:	4b02      	ldr	r3, [pc, #8]	; (90004368 <time_in_secs+0x14>)
9000435e:	f7fc fa8d 	bl	9000087c <__aeabi_ddiv>
	return retval;
}
90004362:	ec41 0b10 	vmov	d0, r0, r1
90004366:	bd08      	pop	{r3, pc}
90004368:	408f4000 	.word	0x408f4000

9000436c <portable_init>:
		ee_printf("ERROR! Please define ee_ptr_int to a type that holds a pointer!\n");
	}
	if (sizeof(ee_u32) != 4) {
		ee_printf("ERROR! Please define ee_u32 to a 32b unsigned type!\n");
	}
	p->portable_id=1;
9000436c:	2301      	movs	r3, #1
9000436e:	7003      	strb	r3, [r0, #0]
}
90004370:	4770      	bx	lr

90004372 <portable_fini>:
/* Function : portable_fini
	Target specific final code 
*/
void portable_fini(core_portable *p)
{
	p->portable_id=0;
90004372:	2300      	movs	r3, #0
90004374:	7003      	strb	r3, [r0, #0]
}
90004376:	4770      	bx	lr

90004378 <core_init_state>:
	Note:
	The seed parameter MUST be supplied from a source that cannot be determined at compile time
*/
void core_init_state(ee_u32 size, ee_s16 seed, ee_u8 *p) {
	ee_u32 total=0,next=0,i;
	ee_u8 *buf=0;
90004378:	2300      	movs	r3, #0
9000437a:	3101      	adds	r1, #1
	next=0;
	while ((total+next+1)<size) {
		if (next>0) {
			for(i=0;i<next;i++)
				*(p+total+i)=buf[i];
			*(p+total+i)=',';
9000437c:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
90004380:	b289      	uxth	r1, r1
void core_init_state(ee_u32 size, ee_s16 seed, ee_u8 *p) {
90004382:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	size--;
90004386:	1e47      	subs	r7, r0, #1
	next=0;
90004388:	461d      	mov	r5, r3
	ee_u32 total=0,next=0,i;
9000438a:	461c      	mov	r4, r3
9000438c:	4e1c      	ldr	r6, [pc, #112]	; (90004400 <core_init_state+0x88>)
	while ((total+next+1)<size) {
9000438e:	eb04 0805 	add.w	r8, r4, r5
90004392:	f108 0e01 	add.w	lr, r8, #1
90004396:	45be      	cmp	lr, r7
90004398:	d304      	bcc.n	900043a4 <core_init_state+0x2c>
			break;
		}
	}
	size++;
	while (total<size) { /* fill the rest with 0 */
		*(p+total)=0;
9000439a:	2300      	movs	r3, #0
	while (total<size) { /* fill the rest with 0 */
9000439c:	4284      	cmp	r4, r0
9000439e:	d32b      	bcc.n	900043f8 <core_init_state+0x80>
		total++;
	}
#if CORE_DEBUG
	ee_printf("State Input: %s\n",start);
#endif
}
900043a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (next>0) {
900043a4:	b155      	cbz	r5, 900043bc <core_init_state+0x44>
900043a6:	4414      	add	r4, r2
900043a8:	441d      	add	r5, r3
				*(p+total+i)=buf[i];
900043aa:	f813 9b01 	ldrb.w	r9, [r3], #1
			for(i=0;i<next;i++)
900043ae:	429d      	cmp	r5, r3
				*(p+total+i)=buf[i];
900043b0:	f804 9b01 	strb.w	r9, [r4], #1
			for(i=0;i<next;i++)
900043b4:	d1f9      	bne.n	900043aa <core_init_state+0x32>
			*(p+total+i)=',';
900043b6:	4674      	mov	r4, lr
900043b8:	f802 c008 	strb.w	ip, [r2, r8]
		switch (seed & 0x7) {
900043bc:	f001 0507 	and.w	r5, r1, #7
900043c0:	f3c1 03c1 	ubfx	r3, r1, #3, #2
900043c4:	2d07      	cmp	r5, #7
900043c6:	d013      	beq.n	900043f0 <core_init_state+0x78>
900043c8:	2d04      	cmp	r5, #4
900043ca:	d80d      	bhi.n	900043e8 <core_init_state+0x70>
900043cc:	3d03      	subs	r5, #3
900043ce:	2d01      	cmp	r5, #1
900043d0:	d905      	bls.n	900043de <core_init_state+0x66>
				buf=intpat[(seed>>3) & 0x3];
900043d2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
				next=4;
900043d6:	2504      	movs	r5, #4
900043d8:	3101      	adds	r1, #1
900043da:	b289      	uxth	r1, r1
900043dc:	e7d7      	b.n	9000438e <core_init_state+0x16>
				buf=floatpat[(seed>>3) & 0x3];
900043de:	eb06 0383 	add.w	r3, r6, r3, lsl #2
900043e2:	691b      	ldr	r3, [r3, #16]
				next=8;
900043e4:	2508      	movs	r5, #8
			break;
900043e6:	e7f7      	b.n	900043d8 <core_init_state+0x60>
				buf=scipat[(seed>>3) & 0x3];
900043e8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
900043ec:	6a1b      	ldr	r3, [r3, #32]
			break;
900043ee:	e7f9      	b.n	900043e4 <core_init_state+0x6c>
				buf=errpat[(seed>>3) & 0x3];
900043f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
900043f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900043f6:	e7f5      	b.n	900043e4 <core_init_state+0x6c>
		*(p+total)=0;
900043f8:	5513      	strb	r3, [r2, r4]
		total++;
900043fa:	3401      	adds	r4, #1
900043fc:	e7ce      	b.n	9000439c <core_init_state+0x24>
900043fe:	bf00      	nop
90004400:	900093b8 	.word	0x900093b8

90004404 <core_state_transition>:
	2 - a valid number has been detected.
	
	The input pointer is updated to point to the end of the token, and the end state is returned (either specific format determined or invalid).
*/

enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
90004404:	b530      	push	{r4, r5, lr}
90004406:	4604      	mov	r4, r0
90004408:	6805      	ldr	r5, [r0, #0]
	ee_u8 *str=*instr;
	ee_u8 NEXT_SYMBOL;
	enum CORE_STATE state=CORE_START;
9000440a:	2000      	movs	r0, #0
	for( ; *str && state != CORE_INVALID; str++ ) {
9000440c:	782b      	ldrb	r3, [r5, #0]
9000440e:	462a      	mov	r2, r5
90004410:	3501      	adds	r5, #1
90004412:	b123      	cbz	r3, 9000441e <core_state_transition+0x1a>
90004414:	2801      	cmp	r0, #1
90004416:	d002      	beq.n	9000441e <core_state_transition+0x1a>
		NEXT_SYMBOL = *str;
		if (NEXT_SYMBOL==',') /* end of this input */ {
90004418:	2b2c      	cmp	r3, #44	; 0x2c
9000441a:	d102      	bne.n	90004422 <core_state_transition+0x1e>
			str++;
9000441c:	462a      	mov	r2, r5
			break;
		default:
			break;
		}
	}
	*instr=str;
9000441e:	6022      	str	r2, [r4, #0]
	return state;
}
90004420:	bd30      	pop	{r4, r5, pc}
		switch(state) {
90004422:	2807      	cmp	r0, #7
90004424:	d8f2      	bhi.n	9000440c <core_state_transition+0x8>
90004426:	a201      	add	r2, pc, #4	; (adr r2, 9000442c <core_state_transition+0x28>)
90004428:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
9000442c:	9000444d 	.word	0x9000444d
90004430:	9000440d 	.word	0x9000440d
90004434:	9000447d 	.word	0x9000447d
90004438:	900044db 	.word	0x900044db
9000443c:	900044a1 	.word	0x900044a1
90004440:	900044bb 	.word	0x900044bb
90004444:	900044ef 	.word	0x900044ef
90004448:	900044ff 	.word	0x900044ff
	retval = ((c>='0') & (c<='9')) ? 1 : 0;
9000444c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
90004450:	2a09      	cmp	r2, #9
90004452:	d90d      	bls.n	90004470 <core_state_transition+0x6c>
			else if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
90004454:	2b2b      	cmp	r3, #43	; 0x2b
90004456:	d00d      	beq.n	90004474 <core_state_transition+0x70>
90004458:	2b2d      	cmp	r3, #45	; 0x2d
9000445a:	d00b      	beq.n	90004474 <core_state_transition+0x70>
			else if( NEXT_SYMBOL == '.' ) {
9000445c:	2b2e      	cmp	r3, #46	; 0x2e
9000445e:	d00b      	beq.n	90004478 <core_state_transition+0x74>
				transition_count[CORE_INVALID]++;
90004460:	684b      	ldr	r3, [r1, #4]
				state = CORE_INVALID;
90004462:	2001      	movs	r0, #1
				transition_count[CORE_INVALID]++;
90004464:	3301      	adds	r3, #1
90004466:	604b      	str	r3, [r1, #4]
			transition_count[CORE_START]++;
90004468:	680b      	ldr	r3, [r1, #0]
9000446a:	3301      	adds	r3, #1
9000446c:	600b      	str	r3, [r1, #0]
			break;
9000446e:	e7cd      	b.n	9000440c <core_state_transition+0x8>
				state = CORE_INT;
90004470:	2004      	movs	r0, #4
90004472:	e7f9      	b.n	90004468 <core_state_transition+0x64>
				state = CORE_S1;
90004474:	2002      	movs	r0, #2
90004476:	e7f7      	b.n	90004468 <core_state_transition+0x64>
				state = CORE_FLOAT;
90004478:	2005      	movs	r0, #5
9000447a:	e7f5      	b.n	90004468 <core_state_transition+0x64>
	retval = ((c>='0') & (c<='9')) ? 1 : 0;
9000447c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
90004480:	688a      	ldr	r2, [r1, #8]
90004482:	2809      	cmp	r0, #9
90004484:	f102 0201 	add.w	r2, r2, #1
90004488:	d904      	bls.n	90004494 <core_state_transition+0x90>
			else if( NEXT_SYMBOL == '.' ) {
9000448a:	2b2e      	cmp	r3, #46	; 0x2e
9000448c:	d105      	bne.n	9000449a <core_state_transition+0x96>
				transition_count[CORE_S1]++;
9000448e:	608a      	str	r2, [r1, #8]
				state = CORE_FLOAT;
90004490:	2005      	movs	r0, #5
90004492:	e7bb      	b.n	9000440c <core_state_transition+0x8>
				state = CORE_INT;
90004494:	2004      	movs	r0, #4
				transition_count[CORE_S1]++;
90004496:	608a      	str	r2, [r1, #8]
90004498:	e7b8      	b.n	9000440c <core_state_transition+0x8>
				transition_count[CORE_S1]++;
9000449a:	608a      	str	r2, [r1, #8]
				state = CORE_INVALID;
9000449c:	2001      	movs	r0, #1
	for( ; *str && state != CORE_INVALID; str++ ) {
9000449e:	e7b5      	b.n	9000440c <core_state_transition+0x8>
			if( NEXT_SYMBOL == '.' ) {
900044a0:	2b2e      	cmp	r3, #46	; 0x2e
900044a2:	d103      	bne.n	900044ac <core_state_transition+0xa8>
				transition_count[CORE_INT]++;
900044a4:	690b      	ldr	r3, [r1, #16]
900044a6:	3301      	adds	r3, #1
900044a8:	610b      	str	r3, [r1, #16]
900044aa:	e7f1      	b.n	90004490 <core_state_transition+0x8c>
	retval = ((c>='0') & (c<='9')) ? 1 : 0;
900044ac:	3b30      	subs	r3, #48	; 0x30
900044ae:	2b09      	cmp	r3, #9
900044b0:	d9ac      	bls.n	9000440c <core_state_transition+0x8>
				transition_count[CORE_INT]++;
900044b2:	690b      	ldr	r3, [r1, #16]
900044b4:	3301      	adds	r3, #1
900044b6:	610b      	str	r3, [r1, #16]
900044b8:	e7f0      	b.n	9000449c <core_state_transition+0x98>
			if( NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e' ) {
900044ba:	f003 02df 	and.w	r2, r3, #223	; 0xdf
900044be:	2a45      	cmp	r2, #69	; 0x45
900044c0:	d104      	bne.n	900044cc <core_state_transition+0xc8>
				transition_count[CORE_FLOAT]++;
900044c2:	694b      	ldr	r3, [r1, #20]
				state = CORE_S2;
900044c4:	2003      	movs	r0, #3
				transition_count[CORE_FLOAT]++;
900044c6:	3301      	adds	r3, #1
900044c8:	614b      	str	r3, [r1, #20]
900044ca:	e79f      	b.n	9000440c <core_state_transition+0x8>
	retval = ((c>='0') & (c<='9')) ? 1 : 0;
900044cc:	3b30      	subs	r3, #48	; 0x30
900044ce:	2b09      	cmp	r3, #9
900044d0:	d99c      	bls.n	9000440c <core_state_transition+0x8>
				transition_count[CORE_FLOAT]++;
900044d2:	694b      	ldr	r3, [r1, #20]
900044d4:	3301      	adds	r3, #1
900044d6:	614b      	str	r3, [r1, #20]
900044d8:	e7e0      	b.n	9000449c <core_state_transition+0x98>
			if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
900044da:	68ca      	ldr	r2, [r1, #12]
900044dc:	2b2b      	cmp	r3, #43	; 0x2b
900044de:	f102 0201 	add.w	r2, r2, #1
				transition_count[CORE_S2]++;
900044e2:	60ca      	str	r2, [r1, #12]
			if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
900044e4:	d001      	beq.n	900044ea <core_state_transition+0xe6>
900044e6:	2b2d      	cmp	r3, #45	; 0x2d
900044e8:	d1d8      	bne.n	9000449c <core_state_transition+0x98>
				state = CORE_EXPONENT;
900044ea:	2006      	movs	r0, #6
				transition_count[CORE_S2]++;
900044ec:	e78e      	b.n	9000440c <core_state_transition+0x8>
	retval = ((c>='0') & (c<='9')) ? 1 : 0;
900044ee:	698a      	ldr	r2, [r1, #24]
900044f0:	3b30      	subs	r3, #48	; 0x30
900044f2:	3201      	adds	r2, #1
900044f4:	2b09      	cmp	r3, #9
				transition_count[CORE_EXPONENT]++;
900044f6:	618a      	str	r2, [r1, #24]
	retval = ((c>='0') & (c<='9')) ? 1 : 0;
900044f8:	d8d0      	bhi.n	9000449c <core_state_transition+0x98>
				state = CORE_SCIENTIFIC;
900044fa:	2007      	movs	r0, #7
900044fc:	e786      	b.n	9000440c <core_state_transition+0x8>
	retval = ((c>='0') & (c<='9')) ? 1 : 0;
900044fe:	3b30      	subs	r3, #48	; 0x30
90004500:	2b09      	cmp	r3, #9
90004502:	d983      	bls.n	9000440c <core_state_transition+0x8>
				transition_count[CORE_INVALID]++;
90004504:	684b      	ldr	r3, [r1, #4]
90004506:	3301      	adds	r3, #1
90004508:	604b      	str	r3, [r1, #4]
9000450a:	e7c7      	b.n	9000449c <core_state_transition+0x98>

9000450c <core_bench_state>:
{
9000450c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90004510:	b093      	sub	sp, #76	; 0x4c
90004512:	4693      	mov	fp, r2
90004514:	4699      	mov	r9, r3
	for (i=0; i<NUM_CORE_STATES; i++) {
90004516:	2300      	movs	r3, #0
90004518:	aa0a      	add	r2, sp, #40	; 0x28
9000451a:	f10d 0808 	add.w	r8, sp, #8
{
9000451e:	4605      	mov	r5, r0
90004520:	460c      	mov	r4, r1
	ee_u8 *p=memblock;
90004522:	9101      	str	r1, [sp, #4]
	for (i=0; i<NUM_CORE_STATES; i++) {
90004524:	4617      	mov	r7, r2
{
90004526:	f9bd a070 	ldrsh.w	sl, [sp, #112]	; 0x70
	ee_u8 *p=memblock;
9000452a:	4641      	mov	r1, r8
{
9000452c:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
		final_counts[i]=track_counts[i]=0;
90004530:	4618      	mov	r0, r3
	for (i=0; i<NUM_CORE_STATES; i++) {
90004532:	3301      	adds	r3, #1
		final_counts[i]=track_counts[i]=0;
90004534:	f842 0b04 	str.w	r0, [r2], #4
90004538:	f841 0b04 	str.w	r0, [r1], #4
	for (i=0; i<NUM_CORE_STATES; i++) {
9000453c:	2b08      	cmp	r3, #8
9000453e:	d1f8      	bne.n	90004532 <core_bench_state+0x26>
	while (*p!=0) {
90004540:	9b01      	ldr	r3, [sp, #4]
90004542:	781b      	ldrb	r3, [r3, #0]
90004544:	b9f3      	cbnz	r3, 90004584 <core_bench_state+0x78>
	while (p < (memblock+blksize)) { /* insert some corruption */
90004546:	4425      	add	r5, r4
	p=memblock;
90004548:	9401      	str	r4, [sp, #4]
	while (p < (memblock+blksize)) { /* insert some corruption */
9000454a:	9a01      	ldr	r2, [sp, #4]
9000454c:	4295      	cmp	r5, r2
9000454e:	d826      	bhi.n	9000459e <core_bench_state+0x92>
	p=memblock;
90004550:	9401      	str	r4, [sp, #4]
	while (*p!=0) {
90004552:	9b01      	ldr	r3, [sp, #4]
90004554:	781b      	ldrb	r3, [r3, #0]
90004556:	bb63      	cbnz	r3, 900045b2 <core_bench_state+0xa6>
	p=memblock;
90004558:	9401      	str	r4, [sp, #4]
	while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
9000455a:	9b01      	ldr	r3, [sp, #4]
9000455c:	429d      	cmp	r5, r3
9000455e:	d835      	bhi.n	900045cc <core_bench_state+0xc0>
	for (i=0; i<NUM_CORE_STATES; i++) {
90004560:	2400      	movs	r4, #0
		crc=crcu32(final_counts[i],crc);
90004562:	4631      	mov	r1, r6
90004564:	f858 0b04 	ldr.w	r0, [r8], #4
90004568:	f000 f87d 	bl	90004666 <crcu32>
9000456c:	4601      	mov	r1, r0
		crc=crcu32(track_counts[i],crc);
9000456e:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
	for (i=0; i<NUM_CORE_STATES; i++) {
90004572:	3401      	adds	r4, #1
		crc=crcu32(track_counts[i],crc);
90004574:	f000 f877 	bl	90004666 <crcu32>
90004578:	4606      	mov	r6, r0
	for (i=0; i<NUM_CORE_STATES; i++) {
9000457a:	2c08      	cmp	r4, #8
9000457c:	d1f1      	bne.n	90004562 <core_bench_state+0x56>
}
9000457e:	b013      	add	sp, #76	; 0x4c
90004580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		enum CORE_STATE fstate=core_state_transition(&p,track_counts);
90004584:	4639      	mov	r1, r7
90004586:	a801      	add	r0, sp, #4
90004588:	f7ff ff3c 	bl	90004404 <core_state_transition>
		final_counts[fstate]++;
9000458c:	ab12      	add	r3, sp, #72	; 0x48
9000458e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
90004592:	f850 3c40 	ldr.w	r3, [r0, #-64]
90004596:	3301      	adds	r3, #1
90004598:	f840 3c40 	str.w	r3, [r0, #-64]
9000459c:	e7d0      	b.n	90004540 <core_bench_state+0x34>
		if (*p!=',')
9000459e:	7813      	ldrb	r3, [r2, #0]
900045a0:	2b2c      	cmp	r3, #44	; 0x2c
			*p^=(ee_u8)seed1;
900045a2:	bf1c      	itt	ne
900045a4:	ea83 030b 	eorne.w	r3, r3, fp
900045a8:	7013      	strbne	r3, [r2, #0]
		p+=step;
900045aa:	9b01      	ldr	r3, [sp, #4]
900045ac:	4453      	add	r3, sl
900045ae:	9301      	str	r3, [sp, #4]
900045b0:	e7cb      	b.n	9000454a <core_bench_state+0x3e>
		enum CORE_STATE fstate=core_state_transition(&p,track_counts);
900045b2:	4639      	mov	r1, r7
900045b4:	a801      	add	r0, sp, #4
900045b6:	f7ff ff25 	bl	90004404 <core_state_transition>
		final_counts[fstate]++;
900045ba:	ab12      	add	r3, sp, #72	; 0x48
900045bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
900045c0:	f850 3c40 	ldr.w	r3, [r0, #-64]
900045c4:	3301      	adds	r3, #1
900045c6:	f840 3c40 	str.w	r3, [r0, #-64]
900045ca:	e7c2      	b.n	90004552 <core_bench_state+0x46>
		if (*p!=',')
900045cc:	781a      	ldrb	r2, [r3, #0]
900045ce:	2a2c      	cmp	r2, #44	; 0x2c
			*p^=(ee_u8)seed2;
900045d0:	bf1c      	itt	ne
900045d2:	ea82 0209 	eorne.w	r2, r2, r9
900045d6:	701a      	strbne	r2, [r3, #0]
		p+=step;
900045d8:	9b01      	ldr	r3, [sp, #4]
900045da:	4453      	add	r3, sl
900045dc:	9301      	str	r3, [sp, #4]
900045de:	e7bc      	b.n	9000455a <core_bench_state+0x4e>

900045e0 <get_seed_32>:
	extern volatile ee_s32 seed3_volatile;
	extern volatile ee_s32 seed4_volatile;
	extern volatile ee_s32 seed5_volatile;
	ee_s32 get_seed_32(int i) {
		ee_s32 retval;
		switch (i) {
900045e0:	3801      	subs	r0, #1
900045e2:	2804      	cmp	r0, #4
900045e4:	d80f      	bhi.n	90004606 <get_seed_32+0x26>
900045e6:	e8df f000 	tbb	[pc, r0]
900045ea:	0603      	.short	0x0603
900045ec:	0a08      	.short	0x0a08
900045ee:	0c          	.byte	0x0c
900045ef:	00          	.byte	0x00
			case 1:
				retval=seed1_volatile;
900045f0:	4b06      	ldr	r3, [pc, #24]	; (9000460c <get_seed_32+0x2c>)
				break;
			case 2:
				retval=seed2_volatile;
900045f2:	6818      	ldr	r0, [r3, #0]
				break;
900045f4:	4770      	bx	lr
				retval=seed2_volatile;
900045f6:	4b06      	ldr	r3, [pc, #24]	; (90004610 <get_seed_32+0x30>)
900045f8:	e7fb      	b.n	900045f2 <get_seed_32+0x12>
			case 3:
				retval=seed3_volatile;
900045fa:	4b06      	ldr	r3, [pc, #24]	; (90004614 <get_seed_32+0x34>)
900045fc:	e7f9      	b.n	900045f2 <get_seed_32+0x12>
				break;
			case 4:
				retval=seed4_volatile;
900045fe:	4b06      	ldr	r3, [pc, #24]	; (90004618 <get_seed_32+0x38>)
90004600:	e7f7      	b.n	900045f2 <get_seed_32+0x12>
				break;
			case 5:
				retval=seed5_volatile;
90004602:	4b06      	ldr	r3, [pc, #24]	; (9000461c <get_seed_32+0x3c>)
90004604:	e7f5      	b.n	900045f2 <get_seed_32+0x12>
	ee_s32 get_seed_32(int i) {
90004606:	2000      	movs	r0, #0
			default:
				retval=0;
				break;
		}
		return retval;
	}
90004608:	4770      	bx	lr
9000460a:	bf00      	nop
9000460c:	200004d0 	.word	0x200004d0
90004610:	200004cc 	.word	0x200004cc
90004614:	20000040 	.word	0x20000040
90004618:	2000003c 	.word	0x2000003c
9000461c:	200004c8 	.word	0x200004c8

90004620 <crcu8>:
/* Function: crc*
	Service functions to calculate 16b CRC code.

*/
ee_u16 crcu8(ee_u8 data, ee_u16 crc )
{
90004620:	b530      	push	{r4, r5, lr}
90004622:	2208      	movs	r2, #8
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
		data >>= 1;

		if (x16 == 1)
		{
		   crc ^= 0x4002;
90004624:	f244 0402 	movw	r4, #16386	; 0x4002
		}
		else 
			carry = 0;
		crc >>= 1;
		if (carry)
		   crc |= 0x8000;
90004628:	4d08      	ldr	r5, [pc, #32]	; (9000464c <crcu8+0x2c>)
		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
9000462a:	ea81 0300 	eor.w	r3, r1, r0
		if (x16 == 1)
9000462e:	0840      	lsrs	r0, r0, #1
90004630:	f013 0301 	ands.w	r3, r3, #1
		   crc ^= 0x4002;
90004634:	bf18      	it	ne
90004636:	4061      	eorne	r1, r4
		crc >>= 1;
90004638:	0849      	lsrs	r1, r1, #1
		if (carry)
9000463a:	b10b      	cbz	r3, 90004640 <crcu8+0x20>
		   crc |= 0x8000;
9000463c:	4329      	orrs	r1, r5
9000463e:	b289      	uxth	r1, r1
	for (i = 0; i < 8; i++)
90004640:	1e53      	subs	r3, r2, #1
90004642:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
90004646:	d1f0      	bne.n	9000462a <crcu8+0xa>
		else
		   crc &= 0x7fff;
    }
	return crc;
} 
90004648:	4608      	mov	r0, r1
9000464a:	bd30      	pop	{r4, r5, pc}
9000464c:	ffff8000 	.word	0xffff8000

90004650 <crcu16>:
ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
90004650:	b510      	push	{r4, lr}
90004652:	4604      	mov	r4, r0
	crc=crcu8( (ee_u8) (newval)				,crc);
90004654:	b2c0      	uxtb	r0, r0
90004656:	f7ff ffe3 	bl	90004620 <crcu8>
9000465a:	4601      	mov	r1, r0
	crc=crcu8( (ee_u8) ((newval)>>8)	,crc);
9000465c:	0a20      	lsrs	r0, r4, #8
	return crc;
}
9000465e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	crc=crcu8( (ee_u8) ((newval)>>8)	,crc);
90004662:	f7ff bfdd 	b.w	90004620 <crcu8>

90004666 <crcu32>:
ee_u16 crcu32(ee_u32 newval, ee_u16 crc) {
90004666:	b510      	push	{r4, lr}
90004668:	4604      	mov	r4, r0
	crc=crc16((ee_s16) newval		,crc);
	crc=crc16((ee_s16) (newval>>16)	,crc);
	return crc;
}
ee_u16 crc16(ee_s16 newval, ee_u16 crc) {
	return crcu16((ee_u16)newval, crc);
9000466a:	b280      	uxth	r0, r0
9000466c:	f7ff fff0 	bl	90004650 <crcu16>
90004670:	4601      	mov	r1, r0
90004672:	0c20      	lsrs	r0, r4, #16
}
90004674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return crcu16((ee_u16)newval, crc);
90004678:	f7ff bfea 	b.w	90004650 <crcu16>

9000467c <crc16>:
9000467c:	b280      	uxth	r0, r0
9000467e:	f7ff bfe7 	b.w	90004650 <crcu16>

90004682 <check_data_types>:
	}
	if (retval>0) {
		ee_printf("ERROR: Please modify the datatypes in core_portme.h!\n");
	}
	return retval;
}
90004682:	2000      	movs	r0, #0
90004684:	4770      	bx	lr
	...

90004688 <__errno>:
90004688:	4b01      	ldr	r3, [pc, #4]	; (90004690 <__errno+0x8>)
9000468a:	6818      	ldr	r0, [r3, #0]
9000468c:	4770      	bx	lr
9000468e:	bf00      	nop
90004690:	20000044 	.word	0x20000044

90004694 <__libc_init_array>:
90004694:	b570      	push	{r4, r5, r6, lr}
90004696:	4d0d      	ldr	r5, [pc, #52]	; (900046cc <__libc_init_array+0x38>)
90004698:	4c0d      	ldr	r4, [pc, #52]	; (900046d0 <__libc_init_array+0x3c>)
9000469a:	1b64      	subs	r4, r4, r5
9000469c:	10a4      	asrs	r4, r4, #2
9000469e:	2600      	movs	r6, #0
900046a0:	42a6      	cmp	r6, r4
900046a2:	d109      	bne.n	900046b8 <__libc_init_array+0x24>
900046a4:	4d0b      	ldr	r5, [pc, #44]	; (900046d4 <__libc_init_array+0x40>)
900046a6:	4c0c      	ldr	r4, [pc, #48]	; (900046d8 <__libc_init_array+0x44>)
900046a8:	f000 ffec 	bl	90005684 <_init>
900046ac:	1b64      	subs	r4, r4, r5
900046ae:	10a4      	asrs	r4, r4, #2
900046b0:	2600      	movs	r6, #0
900046b2:	42a6      	cmp	r6, r4
900046b4:	d105      	bne.n	900046c2 <__libc_init_array+0x2e>
900046b6:	bd70      	pop	{r4, r5, r6, pc}
900046b8:	f855 3b04 	ldr.w	r3, [r5], #4
900046bc:	4798      	blx	r3
900046be:	3601      	adds	r6, #1
900046c0:	e7ee      	b.n	900046a0 <__libc_init_array+0xc>
900046c2:	f855 3b04 	ldr.w	r3, [r5], #4
900046c6:	4798      	blx	r3
900046c8:	3601      	adds	r6, #1
900046ca:	e7f2      	b.n	900046b2 <__libc_init_array+0x1e>
900046cc:	900099c4 	.word	0x900099c4
900046d0:	900099c4 	.word	0x900099c4
900046d4:	900099c4 	.word	0x900099c4
900046d8:	900099c8 	.word	0x900099c8

900046dc <memset>:
900046dc:	4402      	add	r2, r0
900046de:	4603      	mov	r3, r0
900046e0:	4293      	cmp	r3, r2
900046e2:	d100      	bne.n	900046e6 <memset+0xa>
900046e4:	4770      	bx	lr
900046e6:	f803 1b01 	strb.w	r1, [r3], #1
900046ea:	e7f9      	b.n	900046e0 <memset+0x4>

900046ec <iprintf>:
900046ec:	b40f      	push	{r0, r1, r2, r3}
900046ee:	4b0a      	ldr	r3, [pc, #40]	; (90004718 <iprintf+0x2c>)
900046f0:	b513      	push	{r0, r1, r4, lr}
900046f2:	681c      	ldr	r4, [r3, #0]
900046f4:	b124      	cbz	r4, 90004700 <iprintf+0x14>
900046f6:	69a3      	ldr	r3, [r4, #24]
900046f8:	b913      	cbnz	r3, 90004700 <iprintf+0x14>
900046fa:	4620      	mov	r0, r4
900046fc:	f000 fa5e 	bl	90004bbc <__sinit>
90004700:	ab05      	add	r3, sp, #20
90004702:	9a04      	ldr	r2, [sp, #16]
90004704:	68a1      	ldr	r1, [r4, #8]
90004706:	9301      	str	r3, [sp, #4]
90004708:	4620      	mov	r0, r4
9000470a:	f000 fc2f 	bl	90004f6c <_vfiprintf_r>
9000470e:	b002      	add	sp, #8
90004710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90004714:	b004      	add	sp, #16
90004716:	4770      	bx	lr
90004718:	20000044 	.word	0x20000044

9000471c <_puts_r>:
9000471c:	b570      	push	{r4, r5, r6, lr}
9000471e:	460e      	mov	r6, r1
90004720:	4605      	mov	r5, r0
90004722:	b118      	cbz	r0, 9000472c <_puts_r+0x10>
90004724:	6983      	ldr	r3, [r0, #24]
90004726:	b90b      	cbnz	r3, 9000472c <_puts_r+0x10>
90004728:	f000 fa48 	bl	90004bbc <__sinit>
9000472c:	69ab      	ldr	r3, [r5, #24]
9000472e:	68ac      	ldr	r4, [r5, #8]
90004730:	b913      	cbnz	r3, 90004738 <_puts_r+0x1c>
90004732:	4628      	mov	r0, r5
90004734:	f000 fa42 	bl	90004bbc <__sinit>
90004738:	4b2c      	ldr	r3, [pc, #176]	; (900047ec <_puts_r+0xd0>)
9000473a:	429c      	cmp	r4, r3
9000473c:	d120      	bne.n	90004780 <_puts_r+0x64>
9000473e:	686c      	ldr	r4, [r5, #4]
90004740:	6e63      	ldr	r3, [r4, #100]	; 0x64
90004742:	07db      	lsls	r3, r3, #31
90004744:	d405      	bmi.n	90004752 <_puts_r+0x36>
90004746:	89a3      	ldrh	r3, [r4, #12]
90004748:	0598      	lsls	r0, r3, #22
9000474a:	d402      	bmi.n	90004752 <_puts_r+0x36>
9000474c:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000474e:	f000 fad3 	bl	90004cf8 <__retarget_lock_acquire_recursive>
90004752:	89a3      	ldrh	r3, [r4, #12]
90004754:	0719      	lsls	r1, r3, #28
90004756:	d51d      	bpl.n	90004794 <_puts_r+0x78>
90004758:	6923      	ldr	r3, [r4, #16]
9000475a:	b1db      	cbz	r3, 90004794 <_puts_r+0x78>
9000475c:	3e01      	subs	r6, #1
9000475e:	68a3      	ldr	r3, [r4, #8]
90004760:	f816 1f01 	ldrb.w	r1, [r6, #1]!
90004764:	3b01      	subs	r3, #1
90004766:	60a3      	str	r3, [r4, #8]
90004768:	bb39      	cbnz	r1, 900047ba <_puts_r+0x9e>
9000476a:	2b00      	cmp	r3, #0
9000476c:	da38      	bge.n	900047e0 <_puts_r+0xc4>
9000476e:	4622      	mov	r2, r4
90004770:	210a      	movs	r1, #10
90004772:	4628      	mov	r0, r5
90004774:	f000 f848 	bl	90004808 <__swbuf_r>
90004778:	3001      	adds	r0, #1
9000477a:	d011      	beq.n	900047a0 <_puts_r+0x84>
9000477c:	250a      	movs	r5, #10
9000477e:	e011      	b.n	900047a4 <_puts_r+0x88>
90004780:	4b1b      	ldr	r3, [pc, #108]	; (900047f0 <_puts_r+0xd4>)
90004782:	429c      	cmp	r4, r3
90004784:	d101      	bne.n	9000478a <_puts_r+0x6e>
90004786:	68ac      	ldr	r4, [r5, #8]
90004788:	e7da      	b.n	90004740 <_puts_r+0x24>
9000478a:	4b1a      	ldr	r3, [pc, #104]	; (900047f4 <_puts_r+0xd8>)
9000478c:	429c      	cmp	r4, r3
9000478e:	bf08      	it	eq
90004790:	68ec      	ldreq	r4, [r5, #12]
90004792:	e7d5      	b.n	90004740 <_puts_r+0x24>
90004794:	4621      	mov	r1, r4
90004796:	4628      	mov	r0, r5
90004798:	f000 f888 	bl	900048ac <__swsetup_r>
9000479c:	2800      	cmp	r0, #0
9000479e:	d0dd      	beq.n	9000475c <_puts_r+0x40>
900047a0:	f04f 35ff 	mov.w	r5, #4294967295
900047a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
900047a6:	07da      	lsls	r2, r3, #31
900047a8:	d405      	bmi.n	900047b6 <_puts_r+0x9a>
900047aa:	89a3      	ldrh	r3, [r4, #12]
900047ac:	059b      	lsls	r3, r3, #22
900047ae:	d402      	bmi.n	900047b6 <_puts_r+0x9a>
900047b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
900047b2:	f000 faa2 	bl	90004cfa <__retarget_lock_release_recursive>
900047b6:	4628      	mov	r0, r5
900047b8:	bd70      	pop	{r4, r5, r6, pc}
900047ba:	2b00      	cmp	r3, #0
900047bc:	da04      	bge.n	900047c8 <_puts_r+0xac>
900047be:	69a2      	ldr	r2, [r4, #24]
900047c0:	429a      	cmp	r2, r3
900047c2:	dc06      	bgt.n	900047d2 <_puts_r+0xb6>
900047c4:	290a      	cmp	r1, #10
900047c6:	d004      	beq.n	900047d2 <_puts_r+0xb6>
900047c8:	6823      	ldr	r3, [r4, #0]
900047ca:	1c5a      	adds	r2, r3, #1
900047cc:	6022      	str	r2, [r4, #0]
900047ce:	7019      	strb	r1, [r3, #0]
900047d0:	e7c5      	b.n	9000475e <_puts_r+0x42>
900047d2:	4622      	mov	r2, r4
900047d4:	4628      	mov	r0, r5
900047d6:	f000 f817 	bl	90004808 <__swbuf_r>
900047da:	3001      	adds	r0, #1
900047dc:	d1bf      	bne.n	9000475e <_puts_r+0x42>
900047de:	e7df      	b.n	900047a0 <_puts_r+0x84>
900047e0:	6823      	ldr	r3, [r4, #0]
900047e2:	250a      	movs	r5, #10
900047e4:	1c5a      	adds	r2, r3, #1
900047e6:	6022      	str	r2, [r4, #0]
900047e8:	701d      	strb	r5, [r3, #0]
900047ea:	e7db      	b.n	900047a4 <_puts_r+0x88>
900047ec:	90009948 	.word	0x90009948
900047f0:	90009968 	.word	0x90009968
900047f4:	90009928 	.word	0x90009928

900047f8 <puts>:
900047f8:	4b02      	ldr	r3, [pc, #8]	; (90004804 <puts+0xc>)
900047fa:	4601      	mov	r1, r0
900047fc:	6818      	ldr	r0, [r3, #0]
900047fe:	f7ff bf8d 	b.w	9000471c <_puts_r>
90004802:	bf00      	nop
90004804:	20000044 	.word	0x20000044

90004808 <__swbuf_r>:
90004808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000480a:	460e      	mov	r6, r1
9000480c:	4614      	mov	r4, r2
9000480e:	4605      	mov	r5, r0
90004810:	b118      	cbz	r0, 9000481a <__swbuf_r+0x12>
90004812:	6983      	ldr	r3, [r0, #24]
90004814:	b90b      	cbnz	r3, 9000481a <__swbuf_r+0x12>
90004816:	f000 f9d1 	bl	90004bbc <__sinit>
9000481a:	4b21      	ldr	r3, [pc, #132]	; (900048a0 <__swbuf_r+0x98>)
9000481c:	429c      	cmp	r4, r3
9000481e:	d12b      	bne.n	90004878 <__swbuf_r+0x70>
90004820:	686c      	ldr	r4, [r5, #4]
90004822:	69a3      	ldr	r3, [r4, #24]
90004824:	60a3      	str	r3, [r4, #8]
90004826:	89a3      	ldrh	r3, [r4, #12]
90004828:	071a      	lsls	r2, r3, #28
9000482a:	d52f      	bpl.n	9000488c <__swbuf_r+0x84>
9000482c:	6923      	ldr	r3, [r4, #16]
9000482e:	b36b      	cbz	r3, 9000488c <__swbuf_r+0x84>
90004830:	6923      	ldr	r3, [r4, #16]
90004832:	6820      	ldr	r0, [r4, #0]
90004834:	1ac0      	subs	r0, r0, r3
90004836:	6963      	ldr	r3, [r4, #20]
90004838:	b2f6      	uxtb	r6, r6
9000483a:	4283      	cmp	r3, r0
9000483c:	4637      	mov	r7, r6
9000483e:	dc04      	bgt.n	9000484a <__swbuf_r+0x42>
90004840:	4621      	mov	r1, r4
90004842:	4628      	mov	r0, r5
90004844:	f000 f926 	bl	90004a94 <_fflush_r>
90004848:	bb30      	cbnz	r0, 90004898 <__swbuf_r+0x90>
9000484a:	68a3      	ldr	r3, [r4, #8]
9000484c:	3b01      	subs	r3, #1
9000484e:	60a3      	str	r3, [r4, #8]
90004850:	6823      	ldr	r3, [r4, #0]
90004852:	1c5a      	adds	r2, r3, #1
90004854:	6022      	str	r2, [r4, #0]
90004856:	701e      	strb	r6, [r3, #0]
90004858:	6963      	ldr	r3, [r4, #20]
9000485a:	3001      	adds	r0, #1
9000485c:	4283      	cmp	r3, r0
9000485e:	d004      	beq.n	9000486a <__swbuf_r+0x62>
90004860:	89a3      	ldrh	r3, [r4, #12]
90004862:	07db      	lsls	r3, r3, #31
90004864:	d506      	bpl.n	90004874 <__swbuf_r+0x6c>
90004866:	2e0a      	cmp	r6, #10
90004868:	d104      	bne.n	90004874 <__swbuf_r+0x6c>
9000486a:	4621      	mov	r1, r4
9000486c:	4628      	mov	r0, r5
9000486e:	f000 f911 	bl	90004a94 <_fflush_r>
90004872:	b988      	cbnz	r0, 90004898 <__swbuf_r+0x90>
90004874:	4638      	mov	r0, r7
90004876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90004878:	4b0a      	ldr	r3, [pc, #40]	; (900048a4 <__swbuf_r+0x9c>)
9000487a:	429c      	cmp	r4, r3
9000487c:	d101      	bne.n	90004882 <__swbuf_r+0x7a>
9000487e:	68ac      	ldr	r4, [r5, #8]
90004880:	e7cf      	b.n	90004822 <__swbuf_r+0x1a>
90004882:	4b09      	ldr	r3, [pc, #36]	; (900048a8 <__swbuf_r+0xa0>)
90004884:	429c      	cmp	r4, r3
90004886:	bf08      	it	eq
90004888:	68ec      	ldreq	r4, [r5, #12]
9000488a:	e7ca      	b.n	90004822 <__swbuf_r+0x1a>
9000488c:	4621      	mov	r1, r4
9000488e:	4628      	mov	r0, r5
90004890:	f000 f80c 	bl	900048ac <__swsetup_r>
90004894:	2800      	cmp	r0, #0
90004896:	d0cb      	beq.n	90004830 <__swbuf_r+0x28>
90004898:	f04f 37ff 	mov.w	r7, #4294967295
9000489c:	e7ea      	b.n	90004874 <__swbuf_r+0x6c>
9000489e:	bf00      	nop
900048a0:	90009948 	.word	0x90009948
900048a4:	90009968 	.word	0x90009968
900048a8:	90009928 	.word	0x90009928

900048ac <__swsetup_r>:
900048ac:	4b32      	ldr	r3, [pc, #200]	; (90004978 <__swsetup_r+0xcc>)
900048ae:	b570      	push	{r4, r5, r6, lr}
900048b0:	681d      	ldr	r5, [r3, #0]
900048b2:	4606      	mov	r6, r0
900048b4:	460c      	mov	r4, r1
900048b6:	b125      	cbz	r5, 900048c2 <__swsetup_r+0x16>
900048b8:	69ab      	ldr	r3, [r5, #24]
900048ba:	b913      	cbnz	r3, 900048c2 <__swsetup_r+0x16>
900048bc:	4628      	mov	r0, r5
900048be:	f000 f97d 	bl	90004bbc <__sinit>
900048c2:	4b2e      	ldr	r3, [pc, #184]	; (9000497c <__swsetup_r+0xd0>)
900048c4:	429c      	cmp	r4, r3
900048c6:	d10f      	bne.n	900048e8 <__swsetup_r+0x3c>
900048c8:	686c      	ldr	r4, [r5, #4]
900048ca:	89a3      	ldrh	r3, [r4, #12]
900048cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
900048d0:	0719      	lsls	r1, r3, #28
900048d2:	d42c      	bmi.n	9000492e <__swsetup_r+0x82>
900048d4:	06dd      	lsls	r5, r3, #27
900048d6:	d411      	bmi.n	900048fc <__swsetup_r+0x50>
900048d8:	2309      	movs	r3, #9
900048da:	6033      	str	r3, [r6, #0]
900048dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
900048e0:	81a3      	strh	r3, [r4, #12]
900048e2:	f04f 30ff 	mov.w	r0, #4294967295
900048e6:	e03e      	b.n	90004966 <__swsetup_r+0xba>
900048e8:	4b25      	ldr	r3, [pc, #148]	; (90004980 <__swsetup_r+0xd4>)
900048ea:	429c      	cmp	r4, r3
900048ec:	d101      	bne.n	900048f2 <__swsetup_r+0x46>
900048ee:	68ac      	ldr	r4, [r5, #8]
900048f0:	e7eb      	b.n	900048ca <__swsetup_r+0x1e>
900048f2:	4b24      	ldr	r3, [pc, #144]	; (90004984 <__swsetup_r+0xd8>)
900048f4:	429c      	cmp	r4, r3
900048f6:	bf08      	it	eq
900048f8:	68ec      	ldreq	r4, [r5, #12]
900048fa:	e7e6      	b.n	900048ca <__swsetup_r+0x1e>
900048fc:	0758      	lsls	r0, r3, #29
900048fe:	d512      	bpl.n	90004926 <__swsetup_r+0x7a>
90004900:	6b61      	ldr	r1, [r4, #52]	; 0x34
90004902:	b141      	cbz	r1, 90004916 <__swsetup_r+0x6a>
90004904:	f104 0344 	add.w	r3, r4, #68	; 0x44
90004908:	4299      	cmp	r1, r3
9000490a:	d002      	beq.n	90004912 <__swsetup_r+0x66>
9000490c:	4630      	mov	r0, r6
9000490e:	f000 fa59 	bl	90004dc4 <_free_r>
90004912:	2300      	movs	r3, #0
90004914:	6363      	str	r3, [r4, #52]	; 0x34
90004916:	89a3      	ldrh	r3, [r4, #12]
90004918:	f023 0324 	bic.w	r3, r3, #36	; 0x24
9000491c:	81a3      	strh	r3, [r4, #12]
9000491e:	2300      	movs	r3, #0
90004920:	6063      	str	r3, [r4, #4]
90004922:	6923      	ldr	r3, [r4, #16]
90004924:	6023      	str	r3, [r4, #0]
90004926:	89a3      	ldrh	r3, [r4, #12]
90004928:	f043 0308 	orr.w	r3, r3, #8
9000492c:	81a3      	strh	r3, [r4, #12]
9000492e:	6923      	ldr	r3, [r4, #16]
90004930:	b94b      	cbnz	r3, 90004946 <__swsetup_r+0x9a>
90004932:	89a3      	ldrh	r3, [r4, #12]
90004934:	f403 7320 	and.w	r3, r3, #640	; 0x280
90004938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
9000493c:	d003      	beq.n	90004946 <__swsetup_r+0x9a>
9000493e:	4621      	mov	r1, r4
90004940:	4630      	mov	r0, r6
90004942:	f000 f9ff 	bl	90004d44 <__smakebuf_r>
90004946:	89a0      	ldrh	r0, [r4, #12]
90004948:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
9000494c:	f010 0301 	ands.w	r3, r0, #1
90004950:	d00a      	beq.n	90004968 <__swsetup_r+0xbc>
90004952:	2300      	movs	r3, #0
90004954:	60a3      	str	r3, [r4, #8]
90004956:	6963      	ldr	r3, [r4, #20]
90004958:	425b      	negs	r3, r3
9000495a:	61a3      	str	r3, [r4, #24]
9000495c:	6923      	ldr	r3, [r4, #16]
9000495e:	b943      	cbnz	r3, 90004972 <__swsetup_r+0xc6>
90004960:	f010 0080 	ands.w	r0, r0, #128	; 0x80
90004964:	d1ba      	bne.n	900048dc <__swsetup_r+0x30>
90004966:	bd70      	pop	{r4, r5, r6, pc}
90004968:	0781      	lsls	r1, r0, #30
9000496a:	bf58      	it	pl
9000496c:	6963      	ldrpl	r3, [r4, #20]
9000496e:	60a3      	str	r3, [r4, #8]
90004970:	e7f4      	b.n	9000495c <__swsetup_r+0xb0>
90004972:	2000      	movs	r0, #0
90004974:	e7f7      	b.n	90004966 <__swsetup_r+0xba>
90004976:	bf00      	nop
90004978:	20000044 	.word	0x20000044
9000497c:	90009948 	.word	0x90009948
90004980:	90009968 	.word	0x90009968
90004984:	90009928 	.word	0x90009928

90004988 <__sflush_r>:
90004988:	898a      	ldrh	r2, [r1, #12]
9000498a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000498e:	4605      	mov	r5, r0
90004990:	0710      	lsls	r0, r2, #28
90004992:	460c      	mov	r4, r1
90004994:	d458      	bmi.n	90004a48 <__sflush_r+0xc0>
90004996:	684b      	ldr	r3, [r1, #4]
90004998:	2b00      	cmp	r3, #0
9000499a:	dc05      	bgt.n	900049a8 <__sflush_r+0x20>
9000499c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
9000499e:	2b00      	cmp	r3, #0
900049a0:	dc02      	bgt.n	900049a8 <__sflush_r+0x20>
900049a2:	2000      	movs	r0, #0
900049a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900049a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
900049aa:	2e00      	cmp	r6, #0
900049ac:	d0f9      	beq.n	900049a2 <__sflush_r+0x1a>
900049ae:	2300      	movs	r3, #0
900049b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
900049b4:	682f      	ldr	r7, [r5, #0]
900049b6:	602b      	str	r3, [r5, #0]
900049b8:	d032      	beq.n	90004a20 <__sflush_r+0x98>
900049ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
900049bc:	89a3      	ldrh	r3, [r4, #12]
900049be:	075a      	lsls	r2, r3, #29
900049c0:	d505      	bpl.n	900049ce <__sflush_r+0x46>
900049c2:	6863      	ldr	r3, [r4, #4]
900049c4:	1ac0      	subs	r0, r0, r3
900049c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
900049c8:	b10b      	cbz	r3, 900049ce <__sflush_r+0x46>
900049ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
900049cc:	1ac0      	subs	r0, r0, r3
900049ce:	2300      	movs	r3, #0
900049d0:	4602      	mov	r2, r0
900049d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
900049d4:	6a21      	ldr	r1, [r4, #32]
900049d6:	4628      	mov	r0, r5
900049d8:	47b0      	blx	r6
900049da:	1c43      	adds	r3, r0, #1
900049dc:	89a3      	ldrh	r3, [r4, #12]
900049de:	d106      	bne.n	900049ee <__sflush_r+0x66>
900049e0:	6829      	ldr	r1, [r5, #0]
900049e2:	291d      	cmp	r1, #29
900049e4:	d82c      	bhi.n	90004a40 <__sflush_r+0xb8>
900049e6:	4a2a      	ldr	r2, [pc, #168]	; (90004a90 <__sflush_r+0x108>)
900049e8:	40ca      	lsrs	r2, r1
900049ea:	07d6      	lsls	r6, r2, #31
900049ec:	d528      	bpl.n	90004a40 <__sflush_r+0xb8>
900049ee:	2200      	movs	r2, #0
900049f0:	6062      	str	r2, [r4, #4]
900049f2:	04d9      	lsls	r1, r3, #19
900049f4:	6922      	ldr	r2, [r4, #16]
900049f6:	6022      	str	r2, [r4, #0]
900049f8:	d504      	bpl.n	90004a04 <__sflush_r+0x7c>
900049fa:	1c42      	adds	r2, r0, #1
900049fc:	d101      	bne.n	90004a02 <__sflush_r+0x7a>
900049fe:	682b      	ldr	r3, [r5, #0]
90004a00:	b903      	cbnz	r3, 90004a04 <__sflush_r+0x7c>
90004a02:	6560      	str	r0, [r4, #84]	; 0x54
90004a04:	6b61      	ldr	r1, [r4, #52]	; 0x34
90004a06:	602f      	str	r7, [r5, #0]
90004a08:	2900      	cmp	r1, #0
90004a0a:	d0ca      	beq.n	900049a2 <__sflush_r+0x1a>
90004a0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
90004a10:	4299      	cmp	r1, r3
90004a12:	d002      	beq.n	90004a1a <__sflush_r+0x92>
90004a14:	4628      	mov	r0, r5
90004a16:	f000 f9d5 	bl	90004dc4 <_free_r>
90004a1a:	2000      	movs	r0, #0
90004a1c:	6360      	str	r0, [r4, #52]	; 0x34
90004a1e:	e7c1      	b.n	900049a4 <__sflush_r+0x1c>
90004a20:	6a21      	ldr	r1, [r4, #32]
90004a22:	2301      	movs	r3, #1
90004a24:	4628      	mov	r0, r5
90004a26:	47b0      	blx	r6
90004a28:	1c41      	adds	r1, r0, #1
90004a2a:	d1c7      	bne.n	900049bc <__sflush_r+0x34>
90004a2c:	682b      	ldr	r3, [r5, #0]
90004a2e:	2b00      	cmp	r3, #0
90004a30:	d0c4      	beq.n	900049bc <__sflush_r+0x34>
90004a32:	2b1d      	cmp	r3, #29
90004a34:	d001      	beq.n	90004a3a <__sflush_r+0xb2>
90004a36:	2b16      	cmp	r3, #22
90004a38:	d101      	bne.n	90004a3e <__sflush_r+0xb6>
90004a3a:	602f      	str	r7, [r5, #0]
90004a3c:	e7b1      	b.n	900049a2 <__sflush_r+0x1a>
90004a3e:	89a3      	ldrh	r3, [r4, #12]
90004a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90004a44:	81a3      	strh	r3, [r4, #12]
90004a46:	e7ad      	b.n	900049a4 <__sflush_r+0x1c>
90004a48:	690f      	ldr	r7, [r1, #16]
90004a4a:	2f00      	cmp	r7, #0
90004a4c:	d0a9      	beq.n	900049a2 <__sflush_r+0x1a>
90004a4e:	0793      	lsls	r3, r2, #30
90004a50:	680e      	ldr	r6, [r1, #0]
90004a52:	bf08      	it	eq
90004a54:	694b      	ldreq	r3, [r1, #20]
90004a56:	600f      	str	r7, [r1, #0]
90004a58:	bf18      	it	ne
90004a5a:	2300      	movne	r3, #0
90004a5c:	eba6 0807 	sub.w	r8, r6, r7
90004a60:	608b      	str	r3, [r1, #8]
90004a62:	f1b8 0f00 	cmp.w	r8, #0
90004a66:	dd9c      	ble.n	900049a2 <__sflush_r+0x1a>
90004a68:	6a21      	ldr	r1, [r4, #32]
90004a6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
90004a6c:	4643      	mov	r3, r8
90004a6e:	463a      	mov	r2, r7
90004a70:	4628      	mov	r0, r5
90004a72:	47b0      	blx	r6
90004a74:	2800      	cmp	r0, #0
90004a76:	dc06      	bgt.n	90004a86 <__sflush_r+0xfe>
90004a78:	89a3      	ldrh	r3, [r4, #12]
90004a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90004a7e:	81a3      	strh	r3, [r4, #12]
90004a80:	f04f 30ff 	mov.w	r0, #4294967295
90004a84:	e78e      	b.n	900049a4 <__sflush_r+0x1c>
90004a86:	4407      	add	r7, r0
90004a88:	eba8 0800 	sub.w	r8, r8, r0
90004a8c:	e7e9      	b.n	90004a62 <__sflush_r+0xda>
90004a8e:	bf00      	nop
90004a90:	20400001 	.word	0x20400001

90004a94 <_fflush_r>:
90004a94:	b538      	push	{r3, r4, r5, lr}
90004a96:	690b      	ldr	r3, [r1, #16]
90004a98:	4605      	mov	r5, r0
90004a9a:	460c      	mov	r4, r1
90004a9c:	b913      	cbnz	r3, 90004aa4 <_fflush_r+0x10>
90004a9e:	2500      	movs	r5, #0
90004aa0:	4628      	mov	r0, r5
90004aa2:	bd38      	pop	{r3, r4, r5, pc}
90004aa4:	b118      	cbz	r0, 90004aae <_fflush_r+0x1a>
90004aa6:	6983      	ldr	r3, [r0, #24]
90004aa8:	b90b      	cbnz	r3, 90004aae <_fflush_r+0x1a>
90004aaa:	f000 f887 	bl	90004bbc <__sinit>
90004aae:	4b14      	ldr	r3, [pc, #80]	; (90004b00 <_fflush_r+0x6c>)
90004ab0:	429c      	cmp	r4, r3
90004ab2:	d11b      	bne.n	90004aec <_fflush_r+0x58>
90004ab4:	686c      	ldr	r4, [r5, #4]
90004ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90004aba:	2b00      	cmp	r3, #0
90004abc:	d0ef      	beq.n	90004a9e <_fflush_r+0xa>
90004abe:	6e62      	ldr	r2, [r4, #100]	; 0x64
90004ac0:	07d0      	lsls	r0, r2, #31
90004ac2:	d404      	bmi.n	90004ace <_fflush_r+0x3a>
90004ac4:	0599      	lsls	r1, r3, #22
90004ac6:	d402      	bmi.n	90004ace <_fflush_r+0x3a>
90004ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
90004aca:	f000 f915 	bl	90004cf8 <__retarget_lock_acquire_recursive>
90004ace:	4628      	mov	r0, r5
90004ad0:	4621      	mov	r1, r4
90004ad2:	f7ff ff59 	bl	90004988 <__sflush_r>
90004ad6:	6e63      	ldr	r3, [r4, #100]	; 0x64
90004ad8:	07da      	lsls	r2, r3, #31
90004ada:	4605      	mov	r5, r0
90004adc:	d4e0      	bmi.n	90004aa0 <_fflush_r+0xc>
90004ade:	89a3      	ldrh	r3, [r4, #12]
90004ae0:	059b      	lsls	r3, r3, #22
90004ae2:	d4dd      	bmi.n	90004aa0 <_fflush_r+0xc>
90004ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
90004ae6:	f000 f908 	bl	90004cfa <__retarget_lock_release_recursive>
90004aea:	e7d9      	b.n	90004aa0 <_fflush_r+0xc>
90004aec:	4b05      	ldr	r3, [pc, #20]	; (90004b04 <_fflush_r+0x70>)
90004aee:	429c      	cmp	r4, r3
90004af0:	d101      	bne.n	90004af6 <_fflush_r+0x62>
90004af2:	68ac      	ldr	r4, [r5, #8]
90004af4:	e7df      	b.n	90004ab6 <_fflush_r+0x22>
90004af6:	4b04      	ldr	r3, [pc, #16]	; (90004b08 <_fflush_r+0x74>)
90004af8:	429c      	cmp	r4, r3
90004afa:	bf08      	it	eq
90004afc:	68ec      	ldreq	r4, [r5, #12]
90004afe:	e7da      	b.n	90004ab6 <_fflush_r+0x22>
90004b00:	90009948 	.word	0x90009948
90004b04:	90009968 	.word	0x90009968
90004b08:	90009928 	.word	0x90009928

90004b0c <std>:
90004b0c:	2300      	movs	r3, #0
90004b0e:	b510      	push	{r4, lr}
90004b10:	4604      	mov	r4, r0
90004b12:	e9c0 3300 	strd	r3, r3, [r0]
90004b16:	e9c0 3304 	strd	r3, r3, [r0, #16]
90004b1a:	6083      	str	r3, [r0, #8]
90004b1c:	8181      	strh	r1, [r0, #12]
90004b1e:	6643      	str	r3, [r0, #100]	; 0x64
90004b20:	81c2      	strh	r2, [r0, #14]
90004b22:	6183      	str	r3, [r0, #24]
90004b24:	4619      	mov	r1, r3
90004b26:	2208      	movs	r2, #8
90004b28:	305c      	adds	r0, #92	; 0x5c
90004b2a:	f7ff fdd7 	bl	900046dc <memset>
90004b2e:	4b05      	ldr	r3, [pc, #20]	; (90004b44 <std+0x38>)
90004b30:	6263      	str	r3, [r4, #36]	; 0x24
90004b32:	4b05      	ldr	r3, [pc, #20]	; (90004b48 <std+0x3c>)
90004b34:	62a3      	str	r3, [r4, #40]	; 0x28
90004b36:	4b05      	ldr	r3, [pc, #20]	; (90004b4c <std+0x40>)
90004b38:	62e3      	str	r3, [r4, #44]	; 0x2c
90004b3a:	4b05      	ldr	r3, [pc, #20]	; (90004b50 <std+0x44>)
90004b3c:	6224      	str	r4, [r4, #32]
90004b3e:	6323      	str	r3, [r4, #48]	; 0x30
90004b40:	bd10      	pop	{r4, pc}
90004b42:	bf00      	nop
90004b44:	90005515 	.word	0x90005515
90004b48:	90005537 	.word	0x90005537
90004b4c:	9000556f 	.word	0x9000556f
90004b50:	90005593 	.word	0x90005593

90004b54 <_cleanup_r>:
90004b54:	4901      	ldr	r1, [pc, #4]	; (90004b5c <_cleanup_r+0x8>)
90004b56:	f000 b8af 	b.w	90004cb8 <_fwalk_reent>
90004b5a:	bf00      	nop
90004b5c:	90004a95 	.word	0x90004a95

90004b60 <__sfmoreglue>:
90004b60:	b570      	push	{r4, r5, r6, lr}
90004b62:	1e4a      	subs	r2, r1, #1
90004b64:	2568      	movs	r5, #104	; 0x68
90004b66:	4355      	muls	r5, r2
90004b68:	460e      	mov	r6, r1
90004b6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
90004b6e:	f000 f979 	bl	90004e64 <_malloc_r>
90004b72:	4604      	mov	r4, r0
90004b74:	b140      	cbz	r0, 90004b88 <__sfmoreglue+0x28>
90004b76:	2100      	movs	r1, #0
90004b78:	e9c0 1600 	strd	r1, r6, [r0]
90004b7c:	300c      	adds	r0, #12
90004b7e:	60a0      	str	r0, [r4, #8]
90004b80:	f105 0268 	add.w	r2, r5, #104	; 0x68
90004b84:	f7ff fdaa 	bl	900046dc <memset>
90004b88:	4620      	mov	r0, r4
90004b8a:	bd70      	pop	{r4, r5, r6, pc}

90004b8c <__sfp_lock_acquire>:
90004b8c:	4801      	ldr	r0, [pc, #4]	; (90004b94 <__sfp_lock_acquire+0x8>)
90004b8e:	f000 b8b3 	b.w	90004cf8 <__retarget_lock_acquire_recursive>
90004b92:	bf00      	nop
90004b94:	2000426e 	.word	0x2000426e

90004b98 <__sfp_lock_release>:
90004b98:	4801      	ldr	r0, [pc, #4]	; (90004ba0 <__sfp_lock_release+0x8>)
90004b9a:	f000 b8ae 	b.w	90004cfa <__retarget_lock_release_recursive>
90004b9e:	bf00      	nop
90004ba0:	2000426e 	.word	0x2000426e

90004ba4 <__sinit_lock_acquire>:
90004ba4:	4801      	ldr	r0, [pc, #4]	; (90004bac <__sinit_lock_acquire+0x8>)
90004ba6:	f000 b8a7 	b.w	90004cf8 <__retarget_lock_acquire_recursive>
90004baa:	bf00      	nop
90004bac:	20004269 	.word	0x20004269

90004bb0 <__sinit_lock_release>:
90004bb0:	4801      	ldr	r0, [pc, #4]	; (90004bb8 <__sinit_lock_release+0x8>)
90004bb2:	f000 b8a2 	b.w	90004cfa <__retarget_lock_release_recursive>
90004bb6:	bf00      	nop
90004bb8:	20004269 	.word	0x20004269

90004bbc <__sinit>:
90004bbc:	b510      	push	{r4, lr}
90004bbe:	4604      	mov	r4, r0
90004bc0:	f7ff fff0 	bl	90004ba4 <__sinit_lock_acquire>
90004bc4:	69a3      	ldr	r3, [r4, #24]
90004bc6:	b11b      	cbz	r3, 90004bd0 <__sinit+0x14>
90004bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90004bcc:	f7ff bff0 	b.w	90004bb0 <__sinit_lock_release>
90004bd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
90004bd4:	6523      	str	r3, [r4, #80]	; 0x50
90004bd6:	4b13      	ldr	r3, [pc, #76]	; (90004c24 <__sinit+0x68>)
90004bd8:	4a13      	ldr	r2, [pc, #76]	; (90004c28 <__sinit+0x6c>)
90004bda:	681b      	ldr	r3, [r3, #0]
90004bdc:	62a2      	str	r2, [r4, #40]	; 0x28
90004bde:	42a3      	cmp	r3, r4
90004be0:	bf04      	itt	eq
90004be2:	2301      	moveq	r3, #1
90004be4:	61a3      	streq	r3, [r4, #24]
90004be6:	4620      	mov	r0, r4
90004be8:	f000 f820 	bl	90004c2c <__sfp>
90004bec:	6060      	str	r0, [r4, #4]
90004bee:	4620      	mov	r0, r4
90004bf0:	f000 f81c 	bl	90004c2c <__sfp>
90004bf4:	60a0      	str	r0, [r4, #8]
90004bf6:	4620      	mov	r0, r4
90004bf8:	f000 f818 	bl	90004c2c <__sfp>
90004bfc:	2200      	movs	r2, #0
90004bfe:	60e0      	str	r0, [r4, #12]
90004c00:	2104      	movs	r1, #4
90004c02:	6860      	ldr	r0, [r4, #4]
90004c04:	f7ff ff82 	bl	90004b0c <std>
90004c08:	68a0      	ldr	r0, [r4, #8]
90004c0a:	2201      	movs	r2, #1
90004c0c:	2109      	movs	r1, #9
90004c0e:	f7ff ff7d 	bl	90004b0c <std>
90004c12:	68e0      	ldr	r0, [r4, #12]
90004c14:	2202      	movs	r2, #2
90004c16:	2112      	movs	r1, #18
90004c18:	f7ff ff78 	bl	90004b0c <std>
90004c1c:	2301      	movs	r3, #1
90004c1e:	61a3      	str	r3, [r4, #24]
90004c20:	e7d2      	b.n	90004bc8 <__sinit+0xc>
90004c22:	bf00      	nop
90004c24:	90009924 	.word	0x90009924
90004c28:	90004b55 	.word	0x90004b55

90004c2c <__sfp>:
90004c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90004c2e:	4607      	mov	r7, r0
90004c30:	f7ff ffac 	bl	90004b8c <__sfp_lock_acquire>
90004c34:	4b1e      	ldr	r3, [pc, #120]	; (90004cb0 <__sfp+0x84>)
90004c36:	681e      	ldr	r6, [r3, #0]
90004c38:	69b3      	ldr	r3, [r6, #24]
90004c3a:	b913      	cbnz	r3, 90004c42 <__sfp+0x16>
90004c3c:	4630      	mov	r0, r6
90004c3e:	f7ff ffbd 	bl	90004bbc <__sinit>
90004c42:	3648      	adds	r6, #72	; 0x48
90004c44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
90004c48:	3b01      	subs	r3, #1
90004c4a:	d503      	bpl.n	90004c54 <__sfp+0x28>
90004c4c:	6833      	ldr	r3, [r6, #0]
90004c4e:	b30b      	cbz	r3, 90004c94 <__sfp+0x68>
90004c50:	6836      	ldr	r6, [r6, #0]
90004c52:	e7f7      	b.n	90004c44 <__sfp+0x18>
90004c54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
90004c58:	b9d5      	cbnz	r5, 90004c90 <__sfp+0x64>
90004c5a:	4b16      	ldr	r3, [pc, #88]	; (90004cb4 <__sfp+0x88>)
90004c5c:	60e3      	str	r3, [r4, #12]
90004c5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
90004c62:	6665      	str	r5, [r4, #100]	; 0x64
90004c64:	f000 f847 	bl	90004cf6 <__retarget_lock_init_recursive>
90004c68:	f7ff ff96 	bl	90004b98 <__sfp_lock_release>
90004c6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
90004c70:	e9c4 5504 	strd	r5, r5, [r4, #16]
90004c74:	6025      	str	r5, [r4, #0]
90004c76:	61a5      	str	r5, [r4, #24]
90004c78:	2208      	movs	r2, #8
90004c7a:	4629      	mov	r1, r5
90004c7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
90004c80:	f7ff fd2c 	bl	900046dc <memset>
90004c84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
90004c88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
90004c8c:	4620      	mov	r0, r4
90004c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90004c90:	3468      	adds	r4, #104	; 0x68
90004c92:	e7d9      	b.n	90004c48 <__sfp+0x1c>
90004c94:	2104      	movs	r1, #4
90004c96:	4638      	mov	r0, r7
90004c98:	f7ff ff62 	bl	90004b60 <__sfmoreglue>
90004c9c:	4604      	mov	r4, r0
90004c9e:	6030      	str	r0, [r6, #0]
90004ca0:	2800      	cmp	r0, #0
90004ca2:	d1d5      	bne.n	90004c50 <__sfp+0x24>
90004ca4:	f7ff ff78 	bl	90004b98 <__sfp_lock_release>
90004ca8:	230c      	movs	r3, #12
90004caa:	603b      	str	r3, [r7, #0]
90004cac:	e7ee      	b.n	90004c8c <__sfp+0x60>
90004cae:	bf00      	nop
90004cb0:	90009924 	.word	0x90009924
90004cb4:	ffff0001 	.word	0xffff0001

90004cb8 <_fwalk_reent>:
90004cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90004cbc:	4606      	mov	r6, r0
90004cbe:	4688      	mov	r8, r1
90004cc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
90004cc4:	2700      	movs	r7, #0
90004cc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
90004cca:	f1b9 0901 	subs.w	r9, r9, #1
90004cce:	d505      	bpl.n	90004cdc <_fwalk_reent+0x24>
90004cd0:	6824      	ldr	r4, [r4, #0]
90004cd2:	2c00      	cmp	r4, #0
90004cd4:	d1f7      	bne.n	90004cc6 <_fwalk_reent+0xe>
90004cd6:	4638      	mov	r0, r7
90004cd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90004cdc:	89ab      	ldrh	r3, [r5, #12]
90004cde:	2b01      	cmp	r3, #1
90004ce0:	d907      	bls.n	90004cf2 <_fwalk_reent+0x3a>
90004ce2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
90004ce6:	3301      	adds	r3, #1
90004ce8:	d003      	beq.n	90004cf2 <_fwalk_reent+0x3a>
90004cea:	4629      	mov	r1, r5
90004cec:	4630      	mov	r0, r6
90004cee:	47c0      	blx	r8
90004cf0:	4307      	orrs	r7, r0
90004cf2:	3568      	adds	r5, #104	; 0x68
90004cf4:	e7e9      	b.n	90004cca <_fwalk_reent+0x12>

90004cf6 <__retarget_lock_init_recursive>:
90004cf6:	4770      	bx	lr

90004cf8 <__retarget_lock_acquire_recursive>:
90004cf8:	4770      	bx	lr

90004cfa <__retarget_lock_release_recursive>:
90004cfa:	4770      	bx	lr

90004cfc <__swhatbuf_r>:
90004cfc:	b570      	push	{r4, r5, r6, lr}
90004cfe:	460e      	mov	r6, r1
90004d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90004d04:	2900      	cmp	r1, #0
90004d06:	b096      	sub	sp, #88	; 0x58
90004d08:	4614      	mov	r4, r2
90004d0a:	461d      	mov	r5, r3
90004d0c:	da07      	bge.n	90004d1e <__swhatbuf_r+0x22>
90004d0e:	2300      	movs	r3, #0
90004d10:	602b      	str	r3, [r5, #0]
90004d12:	89b3      	ldrh	r3, [r6, #12]
90004d14:	061a      	lsls	r2, r3, #24
90004d16:	d410      	bmi.n	90004d3a <__swhatbuf_r+0x3e>
90004d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
90004d1c:	e00e      	b.n	90004d3c <__swhatbuf_r+0x40>
90004d1e:	466a      	mov	r2, sp
90004d20:	f000 fc5e 	bl	900055e0 <_fstat_r>
90004d24:	2800      	cmp	r0, #0
90004d26:	dbf2      	blt.n	90004d0e <__swhatbuf_r+0x12>
90004d28:	9a01      	ldr	r2, [sp, #4]
90004d2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
90004d2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
90004d32:	425a      	negs	r2, r3
90004d34:	415a      	adcs	r2, r3
90004d36:	602a      	str	r2, [r5, #0]
90004d38:	e7ee      	b.n	90004d18 <__swhatbuf_r+0x1c>
90004d3a:	2340      	movs	r3, #64	; 0x40
90004d3c:	2000      	movs	r0, #0
90004d3e:	6023      	str	r3, [r4, #0]
90004d40:	b016      	add	sp, #88	; 0x58
90004d42:	bd70      	pop	{r4, r5, r6, pc}

90004d44 <__smakebuf_r>:
90004d44:	898b      	ldrh	r3, [r1, #12]
90004d46:	b573      	push	{r0, r1, r4, r5, r6, lr}
90004d48:	079d      	lsls	r5, r3, #30
90004d4a:	4606      	mov	r6, r0
90004d4c:	460c      	mov	r4, r1
90004d4e:	d507      	bpl.n	90004d60 <__smakebuf_r+0x1c>
90004d50:	f104 0347 	add.w	r3, r4, #71	; 0x47
90004d54:	6023      	str	r3, [r4, #0]
90004d56:	6123      	str	r3, [r4, #16]
90004d58:	2301      	movs	r3, #1
90004d5a:	6163      	str	r3, [r4, #20]
90004d5c:	b002      	add	sp, #8
90004d5e:	bd70      	pop	{r4, r5, r6, pc}
90004d60:	ab01      	add	r3, sp, #4
90004d62:	466a      	mov	r2, sp
90004d64:	f7ff ffca 	bl	90004cfc <__swhatbuf_r>
90004d68:	9900      	ldr	r1, [sp, #0]
90004d6a:	4605      	mov	r5, r0
90004d6c:	4630      	mov	r0, r6
90004d6e:	f000 f879 	bl	90004e64 <_malloc_r>
90004d72:	b948      	cbnz	r0, 90004d88 <__smakebuf_r+0x44>
90004d74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90004d78:	059a      	lsls	r2, r3, #22
90004d7a:	d4ef      	bmi.n	90004d5c <__smakebuf_r+0x18>
90004d7c:	f023 0303 	bic.w	r3, r3, #3
90004d80:	f043 0302 	orr.w	r3, r3, #2
90004d84:	81a3      	strh	r3, [r4, #12]
90004d86:	e7e3      	b.n	90004d50 <__smakebuf_r+0xc>
90004d88:	4b0d      	ldr	r3, [pc, #52]	; (90004dc0 <__smakebuf_r+0x7c>)
90004d8a:	62b3      	str	r3, [r6, #40]	; 0x28
90004d8c:	89a3      	ldrh	r3, [r4, #12]
90004d8e:	6020      	str	r0, [r4, #0]
90004d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90004d94:	81a3      	strh	r3, [r4, #12]
90004d96:	9b00      	ldr	r3, [sp, #0]
90004d98:	6163      	str	r3, [r4, #20]
90004d9a:	9b01      	ldr	r3, [sp, #4]
90004d9c:	6120      	str	r0, [r4, #16]
90004d9e:	b15b      	cbz	r3, 90004db8 <__smakebuf_r+0x74>
90004da0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
90004da4:	4630      	mov	r0, r6
90004da6:	f000 fc2d 	bl	90005604 <_isatty_r>
90004daa:	b128      	cbz	r0, 90004db8 <__smakebuf_r+0x74>
90004dac:	89a3      	ldrh	r3, [r4, #12]
90004dae:	f023 0303 	bic.w	r3, r3, #3
90004db2:	f043 0301 	orr.w	r3, r3, #1
90004db6:	81a3      	strh	r3, [r4, #12]
90004db8:	89a0      	ldrh	r0, [r4, #12]
90004dba:	4305      	orrs	r5, r0
90004dbc:	81a5      	strh	r5, [r4, #12]
90004dbe:	e7cd      	b.n	90004d5c <__smakebuf_r+0x18>
90004dc0:	90004b55 	.word	0x90004b55

90004dc4 <_free_r>:
90004dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
90004dc6:	2900      	cmp	r1, #0
90004dc8:	d048      	beq.n	90004e5c <_free_r+0x98>
90004dca:	f851 3c04 	ldr.w	r3, [r1, #-4]
90004dce:	9001      	str	r0, [sp, #4]
90004dd0:	2b00      	cmp	r3, #0
90004dd2:	f1a1 0404 	sub.w	r4, r1, #4
90004dd6:	bfb8      	it	lt
90004dd8:	18e4      	addlt	r4, r4, r3
90004dda:	f000 fc35 	bl	90005648 <__malloc_lock>
90004dde:	4a20      	ldr	r2, [pc, #128]	; (90004e60 <_free_r+0x9c>)
90004de0:	9801      	ldr	r0, [sp, #4]
90004de2:	6813      	ldr	r3, [r2, #0]
90004de4:	4615      	mov	r5, r2
90004de6:	b933      	cbnz	r3, 90004df6 <_free_r+0x32>
90004de8:	6063      	str	r3, [r4, #4]
90004dea:	6014      	str	r4, [r2, #0]
90004dec:	b003      	add	sp, #12
90004dee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
90004df2:	f000 bc2f 	b.w	90005654 <__malloc_unlock>
90004df6:	42a3      	cmp	r3, r4
90004df8:	d90b      	bls.n	90004e12 <_free_r+0x4e>
90004dfa:	6821      	ldr	r1, [r4, #0]
90004dfc:	1862      	adds	r2, r4, r1
90004dfe:	4293      	cmp	r3, r2
90004e00:	bf04      	itt	eq
90004e02:	681a      	ldreq	r2, [r3, #0]
90004e04:	685b      	ldreq	r3, [r3, #4]
90004e06:	6063      	str	r3, [r4, #4]
90004e08:	bf04      	itt	eq
90004e0a:	1852      	addeq	r2, r2, r1
90004e0c:	6022      	streq	r2, [r4, #0]
90004e0e:	602c      	str	r4, [r5, #0]
90004e10:	e7ec      	b.n	90004dec <_free_r+0x28>
90004e12:	461a      	mov	r2, r3
90004e14:	685b      	ldr	r3, [r3, #4]
90004e16:	b10b      	cbz	r3, 90004e1c <_free_r+0x58>
90004e18:	42a3      	cmp	r3, r4
90004e1a:	d9fa      	bls.n	90004e12 <_free_r+0x4e>
90004e1c:	6811      	ldr	r1, [r2, #0]
90004e1e:	1855      	adds	r5, r2, r1
90004e20:	42a5      	cmp	r5, r4
90004e22:	d10b      	bne.n	90004e3c <_free_r+0x78>
90004e24:	6824      	ldr	r4, [r4, #0]
90004e26:	4421      	add	r1, r4
90004e28:	1854      	adds	r4, r2, r1
90004e2a:	42a3      	cmp	r3, r4
90004e2c:	6011      	str	r1, [r2, #0]
90004e2e:	d1dd      	bne.n	90004dec <_free_r+0x28>
90004e30:	681c      	ldr	r4, [r3, #0]
90004e32:	685b      	ldr	r3, [r3, #4]
90004e34:	6053      	str	r3, [r2, #4]
90004e36:	4421      	add	r1, r4
90004e38:	6011      	str	r1, [r2, #0]
90004e3a:	e7d7      	b.n	90004dec <_free_r+0x28>
90004e3c:	d902      	bls.n	90004e44 <_free_r+0x80>
90004e3e:	230c      	movs	r3, #12
90004e40:	6003      	str	r3, [r0, #0]
90004e42:	e7d3      	b.n	90004dec <_free_r+0x28>
90004e44:	6825      	ldr	r5, [r4, #0]
90004e46:	1961      	adds	r1, r4, r5
90004e48:	428b      	cmp	r3, r1
90004e4a:	bf04      	itt	eq
90004e4c:	6819      	ldreq	r1, [r3, #0]
90004e4e:	685b      	ldreq	r3, [r3, #4]
90004e50:	6063      	str	r3, [r4, #4]
90004e52:	bf04      	itt	eq
90004e54:	1949      	addeq	r1, r1, r5
90004e56:	6021      	streq	r1, [r4, #0]
90004e58:	6054      	str	r4, [r2, #4]
90004e5a:	e7c7      	b.n	90004dec <_free_r+0x28>
90004e5c:	b003      	add	sp, #12
90004e5e:	bd30      	pop	{r4, r5, pc}
90004e60:	200004d4 	.word	0x200004d4

90004e64 <_malloc_r>:
90004e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90004e66:	1ccd      	adds	r5, r1, #3
90004e68:	f025 0503 	bic.w	r5, r5, #3
90004e6c:	3508      	adds	r5, #8
90004e6e:	2d0c      	cmp	r5, #12
90004e70:	bf38      	it	cc
90004e72:	250c      	movcc	r5, #12
90004e74:	2d00      	cmp	r5, #0
90004e76:	4606      	mov	r6, r0
90004e78:	db01      	blt.n	90004e7e <_malloc_r+0x1a>
90004e7a:	42a9      	cmp	r1, r5
90004e7c:	d903      	bls.n	90004e86 <_malloc_r+0x22>
90004e7e:	230c      	movs	r3, #12
90004e80:	6033      	str	r3, [r6, #0]
90004e82:	2000      	movs	r0, #0
90004e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90004e86:	f000 fbdf 	bl	90005648 <__malloc_lock>
90004e8a:	4921      	ldr	r1, [pc, #132]	; (90004f10 <_malloc_r+0xac>)
90004e8c:	680a      	ldr	r2, [r1, #0]
90004e8e:	4614      	mov	r4, r2
90004e90:	b99c      	cbnz	r4, 90004eba <_malloc_r+0x56>
90004e92:	4f20      	ldr	r7, [pc, #128]	; (90004f14 <_malloc_r+0xb0>)
90004e94:	683b      	ldr	r3, [r7, #0]
90004e96:	b923      	cbnz	r3, 90004ea2 <_malloc_r+0x3e>
90004e98:	4621      	mov	r1, r4
90004e9a:	4630      	mov	r0, r6
90004e9c:	f000 fb2a 	bl	900054f4 <_sbrk_r>
90004ea0:	6038      	str	r0, [r7, #0]
90004ea2:	4629      	mov	r1, r5
90004ea4:	4630      	mov	r0, r6
90004ea6:	f000 fb25 	bl	900054f4 <_sbrk_r>
90004eaa:	1c43      	adds	r3, r0, #1
90004eac:	d123      	bne.n	90004ef6 <_malloc_r+0x92>
90004eae:	230c      	movs	r3, #12
90004eb0:	6033      	str	r3, [r6, #0]
90004eb2:	4630      	mov	r0, r6
90004eb4:	f000 fbce 	bl	90005654 <__malloc_unlock>
90004eb8:	e7e3      	b.n	90004e82 <_malloc_r+0x1e>
90004eba:	6823      	ldr	r3, [r4, #0]
90004ebc:	1b5b      	subs	r3, r3, r5
90004ebe:	d417      	bmi.n	90004ef0 <_malloc_r+0x8c>
90004ec0:	2b0b      	cmp	r3, #11
90004ec2:	d903      	bls.n	90004ecc <_malloc_r+0x68>
90004ec4:	6023      	str	r3, [r4, #0]
90004ec6:	441c      	add	r4, r3
90004ec8:	6025      	str	r5, [r4, #0]
90004eca:	e004      	b.n	90004ed6 <_malloc_r+0x72>
90004ecc:	6863      	ldr	r3, [r4, #4]
90004ece:	42a2      	cmp	r2, r4
90004ed0:	bf0c      	ite	eq
90004ed2:	600b      	streq	r3, [r1, #0]
90004ed4:	6053      	strne	r3, [r2, #4]
90004ed6:	4630      	mov	r0, r6
90004ed8:	f000 fbbc 	bl	90005654 <__malloc_unlock>
90004edc:	f104 000b 	add.w	r0, r4, #11
90004ee0:	1d23      	adds	r3, r4, #4
90004ee2:	f020 0007 	bic.w	r0, r0, #7
90004ee6:	1ac2      	subs	r2, r0, r3
90004ee8:	d0cc      	beq.n	90004e84 <_malloc_r+0x20>
90004eea:	1a1b      	subs	r3, r3, r0
90004eec:	50a3      	str	r3, [r4, r2]
90004eee:	e7c9      	b.n	90004e84 <_malloc_r+0x20>
90004ef0:	4622      	mov	r2, r4
90004ef2:	6864      	ldr	r4, [r4, #4]
90004ef4:	e7cc      	b.n	90004e90 <_malloc_r+0x2c>
90004ef6:	1cc4      	adds	r4, r0, #3
90004ef8:	f024 0403 	bic.w	r4, r4, #3
90004efc:	42a0      	cmp	r0, r4
90004efe:	d0e3      	beq.n	90004ec8 <_malloc_r+0x64>
90004f00:	1a21      	subs	r1, r4, r0
90004f02:	4630      	mov	r0, r6
90004f04:	f000 faf6 	bl	900054f4 <_sbrk_r>
90004f08:	3001      	adds	r0, #1
90004f0a:	d1dd      	bne.n	90004ec8 <_malloc_r+0x64>
90004f0c:	e7cf      	b.n	90004eae <_malloc_r+0x4a>
90004f0e:	bf00      	nop
90004f10:	200004d4 	.word	0x200004d4
90004f14:	200004d8 	.word	0x200004d8

90004f18 <__sfputc_r>:
90004f18:	6893      	ldr	r3, [r2, #8]
90004f1a:	3b01      	subs	r3, #1
90004f1c:	2b00      	cmp	r3, #0
90004f1e:	b410      	push	{r4}
90004f20:	6093      	str	r3, [r2, #8]
90004f22:	da08      	bge.n	90004f36 <__sfputc_r+0x1e>
90004f24:	6994      	ldr	r4, [r2, #24]
90004f26:	42a3      	cmp	r3, r4
90004f28:	db01      	blt.n	90004f2e <__sfputc_r+0x16>
90004f2a:	290a      	cmp	r1, #10
90004f2c:	d103      	bne.n	90004f36 <__sfputc_r+0x1e>
90004f2e:	f85d 4b04 	ldr.w	r4, [sp], #4
90004f32:	f7ff bc69 	b.w	90004808 <__swbuf_r>
90004f36:	6813      	ldr	r3, [r2, #0]
90004f38:	1c58      	adds	r0, r3, #1
90004f3a:	6010      	str	r0, [r2, #0]
90004f3c:	7019      	strb	r1, [r3, #0]
90004f3e:	4608      	mov	r0, r1
90004f40:	f85d 4b04 	ldr.w	r4, [sp], #4
90004f44:	4770      	bx	lr

90004f46 <__sfputs_r>:
90004f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90004f48:	4606      	mov	r6, r0
90004f4a:	460f      	mov	r7, r1
90004f4c:	4614      	mov	r4, r2
90004f4e:	18d5      	adds	r5, r2, r3
90004f50:	42ac      	cmp	r4, r5
90004f52:	d101      	bne.n	90004f58 <__sfputs_r+0x12>
90004f54:	2000      	movs	r0, #0
90004f56:	e007      	b.n	90004f68 <__sfputs_r+0x22>
90004f58:	f814 1b01 	ldrb.w	r1, [r4], #1
90004f5c:	463a      	mov	r2, r7
90004f5e:	4630      	mov	r0, r6
90004f60:	f7ff ffda 	bl	90004f18 <__sfputc_r>
90004f64:	1c43      	adds	r3, r0, #1
90004f66:	d1f3      	bne.n	90004f50 <__sfputs_r+0xa>
90004f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

90004f6c <_vfiprintf_r>:
90004f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90004f70:	460d      	mov	r5, r1
90004f72:	b09d      	sub	sp, #116	; 0x74
90004f74:	4614      	mov	r4, r2
90004f76:	4698      	mov	r8, r3
90004f78:	4606      	mov	r6, r0
90004f7a:	b118      	cbz	r0, 90004f84 <_vfiprintf_r+0x18>
90004f7c:	6983      	ldr	r3, [r0, #24]
90004f7e:	b90b      	cbnz	r3, 90004f84 <_vfiprintf_r+0x18>
90004f80:	f7ff fe1c 	bl	90004bbc <__sinit>
90004f84:	4b89      	ldr	r3, [pc, #548]	; (900051ac <_vfiprintf_r+0x240>)
90004f86:	429d      	cmp	r5, r3
90004f88:	d11b      	bne.n	90004fc2 <_vfiprintf_r+0x56>
90004f8a:	6875      	ldr	r5, [r6, #4]
90004f8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90004f8e:	07d9      	lsls	r1, r3, #31
90004f90:	d405      	bmi.n	90004f9e <_vfiprintf_r+0x32>
90004f92:	89ab      	ldrh	r3, [r5, #12]
90004f94:	059a      	lsls	r2, r3, #22
90004f96:	d402      	bmi.n	90004f9e <_vfiprintf_r+0x32>
90004f98:	6da8      	ldr	r0, [r5, #88]	; 0x58
90004f9a:	f7ff fead 	bl	90004cf8 <__retarget_lock_acquire_recursive>
90004f9e:	89ab      	ldrh	r3, [r5, #12]
90004fa0:	071b      	lsls	r3, r3, #28
90004fa2:	d501      	bpl.n	90004fa8 <_vfiprintf_r+0x3c>
90004fa4:	692b      	ldr	r3, [r5, #16]
90004fa6:	b9eb      	cbnz	r3, 90004fe4 <_vfiprintf_r+0x78>
90004fa8:	4629      	mov	r1, r5
90004faa:	4630      	mov	r0, r6
90004fac:	f7ff fc7e 	bl	900048ac <__swsetup_r>
90004fb0:	b1c0      	cbz	r0, 90004fe4 <_vfiprintf_r+0x78>
90004fb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90004fb4:	07dc      	lsls	r4, r3, #31
90004fb6:	d50e      	bpl.n	90004fd6 <_vfiprintf_r+0x6a>
90004fb8:	f04f 30ff 	mov.w	r0, #4294967295
90004fbc:	b01d      	add	sp, #116	; 0x74
90004fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90004fc2:	4b7b      	ldr	r3, [pc, #492]	; (900051b0 <_vfiprintf_r+0x244>)
90004fc4:	429d      	cmp	r5, r3
90004fc6:	d101      	bne.n	90004fcc <_vfiprintf_r+0x60>
90004fc8:	68b5      	ldr	r5, [r6, #8]
90004fca:	e7df      	b.n	90004f8c <_vfiprintf_r+0x20>
90004fcc:	4b79      	ldr	r3, [pc, #484]	; (900051b4 <_vfiprintf_r+0x248>)
90004fce:	429d      	cmp	r5, r3
90004fd0:	bf08      	it	eq
90004fd2:	68f5      	ldreq	r5, [r6, #12]
90004fd4:	e7da      	b.n	90004f8c <_vfiprintf_r+0x20>
90004fd6:	89ab      	ldrh	r3, [r5, #12]
90004fd8:	0598      	lsls	r0, r3, #22
90004fda:	d4ed      	bmi.n	90004fb8 <_vfiprintf_r+0x4c>
90004fdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
90004fde:	f7ff fe8c 	bl	90004cfa <__retarget_lock_release_recursive>
90004fe2:	e7e9      	b.n	90004fb8 <_vfiprintf_r+0x4c>
90004fe4:	2300      	movs	r3, #0
90004fe6:	9309      	str	r3, [sp, #36]	; 0x24
90004fe8:	2320      	movs	r3, #32
90004fea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
90004fee:	f8cd 800c 	str.w	r8, [sp, #12]
90004ff2:	2330      	movs	r3, #48	; 0x30
90004ff4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 900051b8 <_vfiprintf_r+0x24c>
90004ff8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
90004ffc:	f04f 0901 	mov.w	r9, #1
90005000:	4623      	mov	r3, r4
90005002:	469a      	mov	sl, r3
90005004:	f813 2b01 	ldrb.w	r2, [r3], #1
90005008:	b10a      	cbz	r2, 9000500e <_vfiprintf_r+0xa2>
9000500a:	2a25      	cmp	r2, #37	; 0x25
9000500c:	d1f9      	bne.n	90005002 <_vfiprintf_r+0x96>
9000500e:	ebba 0b04 	subs.w	fp, sl, r4
90005012:	d00b      	beq.n	9000502c <_vfiprintf_r+0xc0>
90005014:	465b      	mov	r3, fp
90005016:	4622      	mov	r2, r4
90005018:	4629      	mov	r1, r5
9000501a:	4630      	mov	r0, r6
9000501c:	f7ff ff93 	bl	90004f46 <__sfputs_r>
90005020:	3001      	adds	r0, #1
90005022:	f000 80aa 	beq.w	9000517a <_vfiprintf_r+0x20e>
90005026:	9a09      	ldr	r2, [sp, #36]	; 0x24
90005028:	445a      	add	r2, fp
9000502a:	9209      	str	r2, [sp, #36]	; 0x24
9000502c:	f89a 3000 	ldrb.w	r3, [sl]
90005030:	2b00      	cmp	r3, #0
90005032:	f000 80a2 	beq.w	9000517a <_vfiprintf_r+0x20e>
90005036:	2300      	movs	r3, #0
90005038:	f04f 32ff 	mov.w	r2, #4294967295
9000503c:	e9cd 2305 	strd	r2, r3, [sp, #20]
90005040:	f10a 0a01 	add.w	sl, sl, #1
90005044:	9304      	str	r3, [sp, #16]
90005046:	9307      	str	r3, [sp, #28]
90005048:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
9000504c:	931a      	str	r3, [sp, #104]	; 0x68
9000504e:	4654      	mov	r4, sl
90005050:	2205      	movs	r2, #5
90005052:	f814 1b01 	ldrb.w	r1, [r4], #1
90005056:	4858      	ldr	r0, [pc, #352]	; (900051b8 <_vfiprintf_r+0x24c>)
90005058:	f7fb f8da 	bl	90000210 <memchr>
9000505c:	9a04      	ldr	r2, [sp, #16]
9000505e:	b9d8      	cbnz	r0, 90005098 <_vfiprintf_r+0x12c>
90005060:	06d1      	lsls	r1, r2, #27
90005062:	bf44      	itt	mi
90005064:	2320      	movmi	r3, #32
90005066:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9000506a:	0713      	lsls	r3, r2, #28
9000506c:	bf44      	itt	mi
9000506e:	232b      	movmi	r3, #43	; 0x2b
90005070:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90005074:	f89a 3000 	ldrb.w	r3, [sl]
90005078:	2b2a      	cmp	r3, #42	; 0x2a
9000507a:	d015      	beq.n	900050a8 <_vfiprintf_r+0x13c>
9000507c:	9a07      	ldr	r2, [sp, #28]
9000507e:	4654      	mov	r4, sl
90005080:	2000      	movs	r0, #0
90005082:	f04f 0c0a 	mov.w	ip, #10
90005086:	4621      	mov	r1, r4
90005088:	f811 3b01 	ldrb.w	r3, [r1], #1
9000508c:	3b30      	subs	r3, #48	; 0x30
9000508e:	2b09      	cmp	r3, #9
90005090:	d94e      	bls.n	90005130 <_vfiprintf_r+0x1c4>
90005092:	b1b0      	cbz	r0, 900050c2 <_vfiprintf_r+0x156>
90005094:	9207      	str	r2, [sp, #28]
90005096:	e014      	b.n	900050c2 <_vfiprintf_r+0x156>
90005098:	eba0 0308 	sub.w	r3, r0, r8
9000509c:	fa09 f303 	lsl.w	r3, r9, r3
900050a0:	4313      	orrs	r3, r2
900050a2:	9304      	str	r3, [sp, #16]
900050a4:	46a2      	mov	sl, r4
900050a6:	e7d2      	b.n	9000504e <_vfiprintf_r+0xe2>
900050a8:	9b03      	ldr	r3, [sp, #12]
900050aa:	1d19      	adds	r1, r3, #4
900050ac:	681b      	ldr	r3, [r3, #0]
900050ae:	9103      	str	r1, [sp, #12]
900050b0:	2b00      	cmp	r3, #0
900050b2:	bfbb      	ittet	lt
900050b4:	425b      	neglt	r3, r3
900050b6:	f042 0202 	orrlt.w	r2, r2, #2
900050ba:	9307      	strge	r3, [sp, #28]
900050bc:	9307      	strlt	r3, [sp, #28]
900050be:	bfb8      	it	lt
900050c0:	9204      	strlt	r2, [sp, #16]
900050c2:	7823      	ldrb	r3, [r4, #0]
900050c4:	2b2e      	cmp	r3, #46	; 0x2e
900050c6:	d10c      	bne.n	900050e2 <_vfiprintf_r+0x176>
900050c8:	7863      	ldrb	r3, [r4, #1]
900050ca:	2b2a      	cmp	r3, #42	; 0x2a
900050cc:	d135      	bne.n	9000513a <_vfiprintf_r+0x1ce>
900050ce:	9b03      	ldr	r3, [sp, #12]
900050d0:	1d1a      	adds	r2, r3, #4
900050d2:	681b      	ldr	r3, [r3, #0]
900050d4:	9203      	str	r2, [sp, #12]
900050d6:	2b00      	cmp	r3, #0
900050d8:	bfb8      	it	lt
900050da:	f04f 33ff 	movlt.w	r3, #4294967295
900050de:	3402      	adds	r4, #2
900050e0:	9305      	str	r3, [sp, #20]
900050e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 900051c8 <_vfiprintf_r+0x25c>
900050e6:	7821      	ldrb	r1, [r4, #0]
900050e8:	2203      	movs	r2, #3
900050ea:	4650      	mov	r0, sl
900050ec:	f7fb f890 	bl	90000210 <memchr>
900050f0:	b140      	cbz	r0, 90005104 <_vfiprintf_r+0x198>
900050f2:	2340      	movs	r3, #64	; 0x40
900050f4:	eba0 000a 	sub.w	r0, r0, sl
900050f8:	fa03 f000 	lsl.w	r0, r3, r0
900050fc:	9b04      	ldr	r3, [sp, #16]
900050fe:	4303      	orrs	r3, r0
90005100:	3401      	adds	r4, #1
90005102:	9304      	str	r3, [sp, #16]
90005104:	f814 1b01 	ldrb.w	r1, [r4], #1
90005108:	482c      	ldr	r0, [pc, #176]	; (900051bc <_vfiprintf_r+0x250>)
9000510a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
9000510e:	2206      	movs	r2, #6
90005110:	f7fb f87e 	bl	90000210 <memchr>
90005114:	2800      	cmp	r0, #0
90005116:	d03f      	beq.n	90005198 <_vfiprintf_r+0x22c>
90005118:	4b29      	ldr	r3, [pc, #164]	; (900051c0 <_vfiprintf_r+0x254>)
9000511a:	bb1b      	cbnz	r3, 90005164 <_vfiprintf_r+0x1f8>
9000511c:	9b03      	ldr	r3, [sp, #12]
9000511e:	3307      	adds	r3, #7
90005120:	f023 0307 	bic.w	r3, r3, #7
90005124:	3308      	adds	r3, #8
90005126:	9303      	str	r3, [sp, #12]
90005128:	9b09      	ldr	r3, [sp, #36]	; 0x24
9000512a:	443b      	add	r3, r7
9000512c:	9309      	str	r3, [sp, #36]	; 0x24
9000512e:	e767      	b.n	90005000 <_vfiprintf_r+0x94>
90005130:	fb0c 3202 	mla	r2, ip, r2, r3
90005134:	460c      	mov	r4, r1
90005136:	2001      	movs	r0, #1
90005138:	e7a5      	b.n	90005086 <_vfiprintf_r+0x11a>
9000513a:	2300      	movs	r3, #0
9000513c:	3401      	adds	r4, #1
9000513e:	9305      	str	r3, [sp, #20]
90005140:	4619      	mov	r1, r3
90005142:	f04f 0c0a 	mov.w	ip, #10
90005146:	4620      	mov	r0, r4
90005148:	f810 2b01 	ldrb.w	r2, [r0], #1
9000514c:	3a30      	subs	r2, #48	; 0x30
9000514e:	2a09      	cmp	r2, #9
90005150:	d903      	bls.n	9000515a <_vfiprintf_r+0x1ee>
90005152:	2b00      	cmp	r3, #0
90005154:	d0c5      	beq.n	900050e2 <_vfiprintf_r+0x176>
90005156:	9105      	str	r1, [sp, #20]
90005158:	e7c3      	b.n	900050e2 <_vfiprintf_r+0x176>
9000515a:	fb0c 2101 	mla	r1, ip, r1, r2
9000515e:	4604      	mov	r4, r0
90005160:	2301      	movs	r3, #1
90005162:	e7f0      	b.n	90005146 <_vfiprintf_r+0x1da>
90005164:	ab03      	add	r3, sp, #12
90005166:	9300      	str	r3, [sp, #0]
90005168:	462a      	mov	r2, r5
9000516a:	4b16      	ldr	r3, [pc, #88]	; (900051c4 <_vfiprintf_r+0x258>)
9000516c:	a904      	add	r1, sp, #16
9000516e:	4630      	mov	r0, r6
90005170:	f3af 8000 	nop.w
90005174:	4607      	mov	r7, r0
90005176:	1c78      	adds	r0, r7, #1
90005178:	d1d6      	bne.n	90005128 <_vfiprintf_r+0x1bc>
9000517a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9000517c:	07d9      	lsls	r1, r3, #31
9000517e:	d405      	bmi.n	9000518c <_vfiprintf_r+0x220>
90005180:	89ab      	ldrh	r3, [r5, #12]
90005182:	059a      	lsls	r2, r3, #22
90005184:	d402      	bmi.n	9000518c <_vfiprintf_r+0x220>
90005186:	6da8      	ldr	r0, [r5, #88]	; 0x58
90005188:	f7ff fdb7 	bl	90004cfa <__retarget_lock_release_recursive>
9000518c:	89ab      	ldrh	r3, [r5, #12]
9000518e:	065b      	lsls	r3, r3, #25
90005190:	f53f af12 	bmi.w	90004fb8 <_vfiprintf_r+0x4c>
90005194:	9809      	ldr	r0, [sp, #36]	; 0x24
90005196:	e711      	b.n	90004fbc <_vfiprintf_r+0x50>
90005198:	ab03      	add	r3, sp, #12
9000519a:	9300      	str	r3, [sp, #0]
9000519c:	462a      	mov	r2, r5
9000519e:	4b09      	ldr	r3, [pc, #36]	; (900051c4 <_vfiprintf_r+0x258>)
900051a0:	a904      	add	r1, sp, #16
900051a2:	4630      	mov	r0, r6
900051a4:	f000 f880 	bl	900052a8 <_printf_i>
900051a8:	e7e4      	b.n	90005174 <_vfiprintf_r+0x208>
900051aa:	bf00      	nop
900051ac:	90009948 	.word	0x90009948
900051b0:	90009968 	.word	0x90009968
900051b4:	90009928 	.word	0x90009928
900051b8:	90009988 	.word	0x90009988
900051bc:	90009992 	.word	0x90009992
900051c0:	00000000 	.word	0x00000000
900051c4:	90004f47 	.word	0x90004f47
900051c8:	9000998e 	.word	0x9000998e

900051cc <_printf_common>:
900051cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900051d0:	4616      	mov	r6, r2
900051d2:	4699      	mov	r9, r3
900051d4:	688a      	ldr	r2, [r1, #8]
900051d6:	690b      	ldr	r3, [r1, #16]
900051d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
900051dc:	4293      	cmp	r3, r2
900051de:	bfb8      	it	lt
900051e0:	4613      	movlt	r3, r2
900051e2:	6033      	str	r3, [r6, #0]
900051e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
900051e8:	4607      	mov	r7, r0
900051ea:	460c      	mov	r4, r1
900051ec:	b10a      	cbz	r2, 900051f2 <_printf_common+0x26>
900051ee:	3301      	adds	r3, #1
900051f0:	6033      	str	r3, [r6, #0]
900051f2:	6823      	ldr	r3, [r4, #0]
900051f4:	0699      	lsls	r1, r3, #26
900051f6:	bf42      	ittt	mi
900051f8:	6833      	ldrmi	r3, [r6, #0]
900051fa:	3302      	addmi	r3, #2
900051fc:	6033      	strmi	r3, [r6, #0]
900051fe:	6825      	ldr	r5, [r4, #0]
90005200:	f015 0506 	ands.w	r5, r5, #6
90005204:	d106      	bne.n	90005214 <_printf_common+0x48>
90005206:	f104 0a19 	add.w	sl, r4, #25
9000520a:	68e3      	ldr	r3, [r4, #12]
9000520c:	6832      	ldr	r2, [r6, #0]
9000520e:	1a9b      	subs	r3, r3, r2
90005210:	42ab      	cmp	r3, r5
90005212:	dc26      	bgt.n	90005262 <_printf_common+0x96>
90005214:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
90005218:	1e13      	subs	r3, r2, #0
9000521a:	6822      	ldr	r2, [r4, #0]
9000521c:	bf18      	it	ne
9000521e:	2301      	movne	r3, #1
90005220:	0692      	lsls	r2, r2, #26
90005222:	d42b      	bmi.n	9000527c <_printf_common+0xb0>
90005224:	f104 0243 	add.w	r2, r4, #67	; 0x43
90005228:	4649      	mov	r1, r9
9000522a:	4638      	mov	r0, r7
9000522c:	47c0      	blx	r8
9000522e:	3001      	adds	r0, #1
90005230:	d01e      	beq.n	90005270 <_printf_common+0xa4>
90005232:	6823      	ldr	r3, [r4, #0]
90005234:	68e5      	ldr	r5, [r4, #12]
90005236:	6832      	ldr	r2, [r6, #0]
90005238:	f003 0306 	and.w	r3, r3, #6
9000523c:	2b04      	cmp	r3, #4
9000523e:	bf08      	it	eq
90005240:	1aad      	subeq	r5, r5, r2
90005242:	68a3      	ldr	r3, [r4, #8]
90005244:	6922      	ldr	r2, [r4, #16]
90005246:	bf0c      	ite	eq
90005248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
9000524c:	2500      	movne	r5, #0
9000524e:	4293      	cmp	r3, r2
90005250:	bfc4      	itt	gt
90005252:	1a9b      	subgt	r3, r3, r2
90005254:	18ed      	addgt	r5, r5, r3
90005256:	2600      	movs	r6, #0
90005258:	341a      	adds	r4, #26
9000525a:	42b5      	cmp	r5, r6
9000525c:	d11a      	bne.n	90005294 <_printf_common+0xc8>
9000525e:	2000      	movs	r0, #0
90005260:	e008      	b.n	90005274 <_printf_common+0xa8>
90005262:	2301      	movs	r3, #1
90005264:	4652      	mov	r2, sl
90005266:	4649      	mov	r1, r9
90005268:	4638      	mov	r0, r7
9000526a:	47c0      	blx	r8
9000526c:	3001      	adds	r0, #1
9000526e:	d103      	bne.n	90005278 <_printf_common+0xac>
90005270:	f04f 30ff 	mov.w	r0, #4294967295
90005274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90005278:	3501      	adds	r5, #1
9000527a:	e7c6      	b.n	9000520a <_printf_common+0x3e>
9000527c:	18e1      	adds	r1, r4, r3
9000527e:	1c5a      	adds	r2, r3, #1
90005280:	2030      	movs	r0, #48	; 0x30
90005282:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
90005286:	4422      	add	r2, r4
90005288:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
9000528c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
90005290:	3302      	adds	r3, #2
90005292:	e7c7      	b.n	90005224 <_printf_common+0x58>
90005294:	2301      	movs	r3, #1
90005296:	4622      	mov	r2, r4
90005298:	4649      	mov	r1, r9
9000529a:	4638      	mov	r0, r7
9000529c:	47c0      	blx	r8
9000529e:	3001      	adds	r0, #1
900052a0:	d0e6      	beq.n	90005270 <_printf_common+0xa4>
900052a2:	3601      	adds	r6, #1
900052a4:	e7d9      	b.n	9000525a <_printf_common+0x8e>
	...

900052a8 <_printf_i>:
900052a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
900052ac:	460c      	mov	r4, r1
900052ae:	4691      	mov	r9, r2
900052b0:	7e27      	ldrb	r7, [r4, #24]
900052b2:	990c      	ldr	r1, [sp, #48]	; 0x30
900052b4:	2f78      	cmp	r7, #120	; 0x78
900052b6:	4680      	mov	r8, r0
900052b8:	469a      	mov	sl, r3
900052ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
900052be:	d807      	bhi.n	900052d0 <_printf_i+0x28>
900052c0:	2f62      	cmp	r7, #98	; 0x62
900052c2:	d80a      	bhi.n	900052da <_printf_i+0x32>
900052c4:	2f00      	cmp	r7, #0
900052c6:	f000 80d8 	beq.w	9000547a <_printf_i+0x1d2>
900052ca:	2f58      	cmp	r7, #88	; 0x58
900052cc:	f000 80a3 	beq.w	90005416 <_printf_i+0x16e>
900052d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
900052d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
900052d8:	e03a      	b.n	90005350 <_printf_i+0xa8>
900052da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
900052de:	2b15      	cmp	r3, #21
900052e0:	d8f6      	bhi.n	900052d0 <_printf_i+0x28>
900052e2:	a001      	add	r0, pc, #4	; (adr r0, 900052e8 <_printf_i+0x40>)
900052e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
900052e8:	90005341 	.word	0x90005341
900052ec:	90005355 	.word	0x90005355
900052f0:	900052d1 	.word	0x900052d1
900052f4:	900052d1 	.word	0x900052d1
900052f8:	900052d1 	.word	0x900052d1
900052fc:	900052d1 	.word	0x900052d1
90005300:	90005355 	.word	0x90005355
90005304:	900052d1 	.word	0x900052d1
90005308:	900052d1 	.word	0x900052d1
9000530c:	900052d1 	.word	0x900052d1
90005310:	900052d1 	.word	0x900052d1
90005314:	90005461 	.word	0x90005461
90005318:	90005385 	.word	0x90005385
9000531c:	90005443 	.word	0x90005443
90005320:	900052d1 	.word	0x900052d1
90005324:	900052d1 	.word	0x900052d1
90005328:	90005483 	.word	0x90005483
9000532c:	900052d1 	.word	0x900052d1
90005330:	90005385 	.word	0x90005385
90005334:	900052d1 	.word	0x900052d1
90005338:	900052d1 	.word	0x900052d1
9000533c:	9000544b 	.word	0x9000544b
90005340:	680b      	ldr	r3, [r1, #0]
90005342:	1d1a      	adds	r2, r3, #4
90005344:	681b      	ldr	r3, [r3, #0]
90005346:	600a      	str	r2, [r1, #0]
90005348:	f104 0642 	add.w	r6, r4, #66	; 0x42
9000534c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
90005350:	2301      	movs	r3, #1
90005352:	e0a3      	b.n	9000549c <_printf_i+0x1f4>
90005354:	6825      	ldr	r5, [r4, #0]
90005356:	6808      	ldr	r0, [r1, #0]
90005358:	062e      	lsls	r6, r5, #24
9000535a:	f100 0304 	add.w	r3, r0, #4
9000535e:	d50a      	bpl.n	90005376 <_printf_i+0xce>
90005360:	6805      	ldr	r5, [r0, #0]
90005362:	600b      	str	r3, [r1, #0]
90005364:	2d00      	cmp	r5, #0
90005366:	da03      	bge.n	90005370 <_printf_i+0xc8>
90005368:	232d      	movs	r3, #45	; 0x2d
9000536a:	426d      	negs	r5, r5
9000536c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90005370:	485e      	ldr	r0, [pc, #376]	; (900054ec <_printf_i+0x244>)
90005372:	230a      	movs	r3, #10
90005374:	e019      	b.n	900053aa <_printf_i+0x102>
90005376:	f015 0f40 	tst.w	r5, #64	; 0x40
9000537a:	6805      	ldr	r5, [r0, #0]
9000537c:	600b      	str	r3, [r1, #0]
9000537e:	bf18      	it	ne
90005380:	b22d      	sxthne	r5, r5
90005382:	e7ef      	b.n	90005364 <_printf_i+0xbc>
90005384:	680b      	ldr	r3, [r1, #0]
90005386:	6825      	ldr	r5, [r4, #0]
90005388:	1d18      	adds	r0, r3, #4
9000538a:	6008      	str	r0, [r1, #0]
9000538c:	0628      	lsls	r0, r5, #24
9000538e:	d501      	bpl.n	90005394 <_printf_i+0xec>
90005390:	681d      	ldr	r5, [r3, #0]
90005392:	e002      	b.n	9000539a <_printf_i+0xf2>
90005394:	0669      	lsls	r1, r5, #25
90005396:	d5fb      	bpl.n	90005390 <_printf_i+0xe8>
90005398:	881d      	ldrh	r5, [r3, #0]
9000539a:	4854      	ldr	r0, [pc, #336]	; (900054ec <_printf_i+0x244>)
9000539c:	2f6f      	cmp	r7, #111	; 0x6f
9000539e:	bf0c      	ite	eq
900053a0:	2308      	moveq	r3, #8
900053a2:	230a      	movne	r3, #10
900053a4:	2100      	movs	r1, #0
900053a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
900053aa:	6866      	ldr	r6, [r4, #4]
900053ac:	60a6      	str	r6, [r4, #8]
900053ae:	2e00      	cmp	r6, #0
900053b0:	bfa2      	ittt	ge
900053b2:	6821      	ldrge	r1, [r4, #0]
900053b4:	f021 0104 	bicge.w	r1, r1, #4
900053b8:	6021      	strge	r1, [r4, #0]
900053ba:	b90d      	cbnz	r5, 900053c0 <_printf_i+0x118>
900053bc:	2e00      	cmp	r6, #0
900053be:	d04d      	beq.n	9000545c <_printf_i+0x1b4>
900053c0:	4616      	mov	r6, r2
900053c2:	fbb5 f1f3 	udiv	r1, r5, r3
900053c6:	fb03 5711 	mls	r7, r3, r1, r5
900053ca:	5dc7      	ldrb	r7, [r0, r7]
900053cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
900053d0:	462f      	mov	r7, r5
900053d2:	42bb      	cmp	r3, r7
900053d4:	460d      	mov	r5, r1
900053d6:	d9f4      	bls.n	900053c2 <_printf_i+0x11a>
900053d8:	2b08      	cmp	r3, #8
900053da:	d10b      	bne.n	900053f4 <_printf_i+0x14c>
900053dc:	6823      	ldr	r3, [r4, #0]
900053de:	07df      	lsls	r7, r3, #31
900053e0:	d508      	bpl.n	900053f4 <_printf_i+0x14c>
900053e2:	6923      	ldr	r3, [r4, #16]
900053e4:	6861      	ldr	r1, [r4, #4]
900053e6:	4299      	cmp	r1, r3
900053e8:	bfde      	ittt	le
900053ea:	2330      	movle	r3, #48	; 0x30
900053ec:	f806 3c01 	strble.w	r3, [r6, #-1]
900053f0:	f106 36ff 	addle.w	r6, r6, #4294967295
900053f4:	1b92      	subs	r2, r2, r6
900053f6:	6122      	str	r2, [r4, #16]
900053f8:	f8cd a000 	str.w	sl, [sp]
900053fc:	464b      	mov	r3, r9
900053fe:	aa03      	add	r2, sp, #12
90005400:	4621      	mov	r1, r4
90005402:	4640      	mov	r0, r8
90005404:	f7ff fee2 	bl	900051cc <_printf_common>
90005408:	3001      	adds	r0, #1
9000540a:	d14c      	bne.n	900054a6 <_printf_i+0x1fe>
9000540c:	f04f 30ff 	mov.w	r0, #4294967295
90005410:	b004      	add	sp, #16
90005412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90005416:	4835      	ldr	r0, [pc, #212]	; (900054ec <_printf_i+0x244>)
90005418:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
9000541c:	6823      	ldr	r3, [r4, #0]
9000541e:	680e      	ldr	r6, [r1, #0]
90005420:	061f      	lsls	r7, r3, #24
90005422:	f856 5b04 	ldr.w	r5, [r6], #4
90005426:	600e      	str	r6, [r1, #0]
90005428:	d514      	bpl.n	90005454 <_printf_i+0x1ac>
9000542a:	07d9      	lsls	r1, r3, #31
9000542c:	bf44      	itt	mi
9000542e:	f043 0320 	orrmi.w	r3, r3, #32
90005432:	6023      	strmi	r3, [r4, #0]
90005434:	b91d      	cbnz	r5, 9000543e <_printf_i+0x196>
90005436:	6823      	ldr	r3, [r4, #0]
90005438:	f023 0320 	bic.w	r3, r3, #32
9000543c:	6023      	str	r3, [r4, #0]
9000543e:	2310      	movs	r3, #16
90005440:	e7b0      	b.n	900053a4 <_printf_i+0xfc>
90005442:	6823      	ldr	r3, [r4, #0]
90005444:	f043 0320 	orr.w	r3, r3, #32
90005448:	6023      	str	r3, [r4, #0]
9000544a:	2378      	movs	r3, #120	; 0x78
9000544c:	4828      	ldr	r0, [pc, #160]	; (900054f0 <_printf_i+0x248>)
9000544e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
90005452:	e7e3      	b.n	9000541c <_printf_i+0x174>
90005454:	065e      	lsls	r6, r3, #25
90005456:	bf48      	it	mi
90005458:	b2ad      	uxthmi	r5, r5
9000545a:	e7e6      	b.n	9000542a <_printf_i+0x182>
9000545c:	4616      	mov	r6, r2
9000545e:	e7bb      	b.n	900053d8 <_printf_i+0x130>
90005460:	680b      	ldr	r3, [r1, #0]
90005462:	6826      	ldr	r6, [r4, #0]
90005464:	6960      	ldr	r0, [r4, #20]
90005466:	1d1d      	adds	r5, r3, #4
90005468:	600d      	str	r5, [r1, #0]
9000546a:	0635      	lsls	r5, r6, #24
9000546c:	681b      	ldr	r3, [r3, #0]
9000546e:	d501      	bpl.n	90005474 <_printf_i+0x1cc>
90005470:	6018      	str	r0, [r3, #0]
90005472:	e002      	b.n	9000547a <_printf_i+0x1d2>
90005474:	0671      	lsls	r1, r6, #25
90005476:	d5fb      	bpl.n	90005470 <_printf_i+0x1c8>
90005478:	8018      	strh	r0, [r3, #0]
9000547a:	2300      	movs	r3, #0
9000547c:	6123      	str	r3, [r4, #16]
9000547e:	4616      	mov	r6, r2
90005480:	e7ba      	b.n	900053f8 <_printf_i+0x150>
90005482:	680b      	ldr	r3, [r1, #0]
90005484:	1d1a      	adds	r2, r3, #4
90005486:	600a      	str	r2, [r1, #0]
90005488:	681e      	ldr	r6, [r3, #0]
9000548a:	6862      	ldr	r2, [r4, #4]
9000548c:	2100      	movs	r1, #0
9000548e:	4630      	mov	r0, r6
90005490:	f7fa febe 	bl	90000210 <memchr>
90005494:	b108      	cbz	r0, 9000549a <_printf_i+0x1f2>
90005496:	1b80      	subs	r0, r0, r6
90005498:	6060      	str	r0, [r4, #4]
9000549a:	6863      	ldr	r3, [r4, #4]
9000549c:	6123      	str	r3, [r4, #16]
9000549e:	2300      	movs	r3, #0
900054a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
900054a4:	e7a8      	b.n	900053f8 <_printf_i+0x150>
900054a6:	6923      	ldr	r3, [r4, #16]
900054a8:	4632      	mov	r2, r6
900054aa:	4649      	mov	r1, r9
900054ac:	4640      	mov	r0, r8
900054ae:	47d0      	blx	sl
900054b0:	3001      	adds	r0, #1
900054b2:	d0ab      	beq.n	9000540c <_printf_i+0x164>
900054b4:	6823      	ldr	r3, [r4, #0]
900054b6:	079b      	lsls	r3, r3, #30
900054b8:	d413      	bmi.n	900054e2 <_printf_i+0x23a>
900054ba:	68e0      	ldr	r0, [r4, #12]
900054bc:	9b03      	ldr	r3, [sp, #12]
900054be:	4298      	cmp	r0, r3
900054c0:	bfb8      	it	lt
900054c2:	4618      	movlt	r0, r3
900054c4:	e7a4      	b.n	90005410 <_printf_i+0x168>
900054c6:	2301      	movs	r3, #1
900054c8:	4632      	mov	r2, r6
900054ca:	4649      	mov	r1, r9
900054cc:	4640      	mov	r0, r8
900054ce:	47d0      	blx	sl
900054d0:	3001      	adds	r0, #1
900054d2:	d09b      	beq.n	9000540c <_printf_i+0x164>
900054d4:	3501      	adds	r5, #1
900054d6:	68e3      	ldr	r3, [r4, #12]
900054d8:	9903      	ldr	r1, [sp, #12]
900054da:	1a5b      	subs	r3, r3, r1
900054dc:	42ab      	cmp	r3, r5
900054de:	dcf2      	bgt.n	900054c6 <_printf_i+0x21e>
900054e0:	e7eb      	b.n	900054ba <_printf_i+0x212>
900054e2:	2500      	movs	r5, #0
900054e4:	f104 0619 	add.w	r6, r4, #25
900054e8:	e7f5      	b.n	900054d6 <_printf_i+0x22e>
900054ea:	bf00      	nop
900054ec:	90009999 	.word	0x90009999
900054f0:	900099aa 	.word	0x900099aa

900054f4 <_sbrk_r>:
900054f4:	b538      	push	{r3, r4, r5, lr}
900054f6:	4d06      	ldr	r5, [pc, #24]	; (90005510 <_sbrk_r+0x1c>)
900054f8:	2300      	movs	r3, #0
900054fa:	4604      	mov	r4, r0
900054fc:	4608      	mov	r0, r1
900054fe:	602b      	str	r3, [r5, #0]
90005500:	f7fd fe42 	bl	90003188 <_sbrk>
90005504:	1c43      	adds	r3, r0, #1
90005506:	d102      	bne.n	9000550e <_sbrk_r+0x1a>
90005508:	682b      	ldr	r3, [r5, #0]
9000550a:	b103      	cbz	r3, 9000550e <_sbrk_r+0x1a>
9000550c:	6023      	str	r3, [r4, #0]
9000550e:	bd38      	pop	{r3, r4, r5, pc}
90005510:	20004270 	.word	0x20004270

90005514 <__sread>:
90005514:	b510      	push	{r4, lr}
90005516:	460c      	mov	r4, r1
90005518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000551c:	f000 f8a0 	bl	90005660 <_read_r>
90005520:	2800      	cmp	r0, #0
90005522:	bfab      	itete	ge
90005524:	6d63      	ldrge	r3, [r4, #84]	; 0x54
90005526:	89a3      	ldrhlt	r3, [r4, #12]
90005528:	181b      	addge	r3, r3, r0
9000552a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
9000552e:	bfac      	ite	ge
90005530:	6563      	strge	r3, [r4, #84]	; 0x54
90005532:	81a3      	strhlt	r3, [r4, #12]
90005534:	bd10      	pop	{r4, pc}

90005536 <__swrite>:
90005536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000553a:	461f      	mov	r7, r3
9000553c:	898b      	ldrh	r3, [r1, #12]
9000553e:	05db      	lsls	r3, r3, #23
90005540:	4605      	mov	r5, r0
90005542:	460c      	mov	r4, r1
90005544:	4616      	mov	r6, r2
90005546:	d505      	bpl.n	90005554 <__swrite+0x1e>
90005548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000554c:	2302      	movs	r3, #2
9000554e:	2200      	movs	r2, #0
90005550:	f000 f868 	bl	90005624 <_lseek_r>
90005554:	89a3      	ldrh	r3, [r4, #12]
90005556:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000555a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000555e:	81a3      	strh	r3, [r4, #12]
90005560:	4632      	mov	r2, r6
90005562:	463b      	mov	r3, r7
90005564:	4628      	mov	r0, r5
90005566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000556a:	f000 b817 	b.w	9000559c <_write_r>

9000556e <__sseek>:
9000556e:	b510      	push	{r4, lr}
90005570:	460c      	mov	r4, r1
90005572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90005576:	f000 f855 	bl	90005624 <_lseek_r>
9000557a:	1c43      	adds	r3, r0, #1
9000557c:	89a3      	ldrh	r3, [r4, #12]
9000557e:	bf15      	itete	ne
90005580:	6560      	strne	r0, [r4, #84]	; 0x54
90005582:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
90005586:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
9000558a:	81a3      	strheq	r3, [r4, #12]
9000558c:	bf18      	it	ne
9000558e:	81a3      	strhne	r3, [r4, #12]
90005590:	bd10      	pop	{r4, pc}

90005592 <__sclose>:
90005592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90005596:	f000 b813 	b.w	900055c0 <_close_r>
	...

9000559c <_write_r>:
9000559c:	b538      	push	{r3, r4, r5, lr}
9000559e:	4d07      	ldr	r5, [pc, #28]	; (900055bc <_write_r+0x20>)
900055a0:	4604      	mov	r4, r0
900055a2:	4608      	mov	r0, r1
900055a4:	4611      	mov	r1, r2
900055a6:	2200      	movs	r2, #0
900055a8:	602a      	str	r2, [r5, #0]
900055aa:	461a      	mov	r2, r3
900055ac:	f7fd fdde 	bl	9000316c <_write>
900055b0:	1c43      	adds	r3, r0, #1
900055b2:	d102      	bne.n	900055ba <_write_r+0x1e>
900055b4:	682b      	ldr	r3, [r5, #0]
900055b6:	b103      	cbz	r3, 900055ba <_write_r+0x1e>
900055b8:	6023      	str	r3, [r4, #0]
900055ba:	bd38      	pop	{r3, r4, r5, pc}
900055bc:	20004270 	.word	0x20004270

900055c0 <_close_r>:
900055c0:	b538      	push	{r3, r4, r5, lr}
900055c2:	4d06      	ldr	r5, [pc, #24]	; (900055dc <_close_r+0x1c>)
900055c4:	2300      	movs	r3, #0
900055c6:	4604      	mov	r4, r0
900055c8:	4608      	mov	r0, r1
900055ca:	602b      	str	r3, [r5, #0]
900055cc:	f7fd fdf6 	bl	900031bc <_close>
900055d0:	1c43      	adds	r3, r0, #1
900055d2:	d102      	bne.n	900055da <_close_r+0x1a>
900055d4:	682b      	ldr	r3, [r5, #0]
900055d6:	b103      	cbz	r3, 900055da <_close_r+0x1a>
900055d8:	6023      	str	r3, [r4, #0]
900055da:	bd38      	pop	{r3, r4, r5, pc}
900055dc:	20004270 	.word	0x20004270

900055e0 <_fstat_r>:
900055e0:	b538      	push	{r3, r4, r5, lr}
900055e2:	4d07      	ldr	r5, [pc, #28]	; (90005600 <_fstat_r+0x20>)
900055e4:	2300      	movs	r3, #0
900055e6:	4604      	mov	r4, r0
900055e8:	4608      	mov	r0, r1
900055ea:	4611      	mov	r1, r2
900055ec:	602b      	str	r3, [r5, #0]
900055ee:	f7fd fde8 	bl	900031c2 <_fstat>
900055f2:	1c43      	adds	r3, r0, #1
900055f4:	d102      	bne.n	900055fc <_fstat_r+0x1c>
900055f6:	682b      	ldr	r3, [r5, #0]
900055f8:	b103      	cbz	r3, 900055fc <_fstat_r+0x1c>
900055fa:	6023      	str	r3, [r4, #0]
900055fc:	bd38      	pop	{r3, r4, r5, pc}
900055fe:	bf00      	nop
90005600:	20004270 	.word	0x20004270

90005604 <_isatty_r>:
90005604:	b538      	push	{r3, r4, r5, lr}
90005606:	4d06      	ldr	r5, [pc, #24]	; (90005620 <_isatty_r+0x1c>)
90005608:	2300      	movs	r3, #0
9000560a:	4604      	mov	r4, r0
9000560c:	4608      	mov	r0, r1
9000560e:	602b      	str	r3, [r5, #0]
90005610:	f7fd fddc 	bl	900031cc <_isatty>
90005614:	1c43      	adds	r3, r0, #1
90005616:	d102      	bne.n	9000561e <_isatty_r+0x1a>
90005618:	682b      	ldr	r3, [r5, #0]
9000561a:	b103      	cbz	r3, 9000561e <_isatty_r+0x1a>
9000561c:	6023      	str	r3, [r4, #0]
9000561e:	bd38      	pop	{r3, r4, r5, pc}
90005620:	20004270 	.word	0x20004270

90005624 <_lseek_r>:
90005624:	b538      	push	{r3, r4, r5, lr}
90005626:	4d07      	ldr	r5, [pc, #28]	; (90005644 <_lseek_r+0x20>)
90005628:	4604      	mov	r4, r0
9000562a:	4608      	mov	r0, r1
9000562c:	4611      	mov	r1, r2
9000562e:	2200      	movs	r2, #0
90005630:	602a      	str	r2, [r5, #0]
90005632:	461a      	mov	r2, r3
90005634:	f7fd fdcc 	bl	900031d0 <_lseek>
90005638:	1c43      	adds	r3, r0, #1
9000563a:	d102      	bne.n	90005642 <_lseek_r+0x1e>
9000563c:	682b      	ldr	r3, [r5, #0]
9000563e:	b103      	cbz	r3, 90005642 <_lseek_r+0x1e>
90005640:	6023      	str	r3, [r4, #0]
90005642:	bd38      	pop	{r3, r4, r5, pc}
90005644:	20004270 	.word	0x20004270

90005648 <__malloc_lock>:
90005648:	4801      	ldr	r0, [pc, #4]	; (90005650 <__malloc_lock+0x8>)
9000564a:	f7ff bb55 	b.w	90004cf8 <__retarget_lock_acquire_recursive>
9000564e:	bf00      	nop
90005650:	2000426a 	.word	0x2000426a

90005654 <__malloc_unlock>:
90005654:	4801      	ldr	r0, [pc, #4]	; (9000565c <__malloc_unlock+0x8>)
90005656:	f7ff bb50 	b.w	90004cfa <__retarget_lock_release_recursive>
9000565a:	bf00      	nop
9000565c:	2000426a 	.word	0x2000426a

90005660 <_read_r>:
90005660:	b538      	push	{r3, r4, r5, lr}
90005662:	4d07      	ldr	r5, [pc, #28]	; (90005680 <_read_r+0x20>)
90005664:	4604      	mov	r4, r0
90005666:	4608      	mov	r0, r1
90005668:	4611      	mov	r1, r2
9000566a:	2200      	movs	r2, #0
9000566c:	602a      	str	r2, [r5, #0]
9000566e:	461a      	mov	r2, r3
90005670:	f7fd fd6f 	bl	90003152 <_read>
90005674:	1c43      	adds	r3, r0, #1
90005676:	d102      	bne.n	9000567e <_read_r+0x1e>
90005678:	682b      	ldr	r3, [r5, #0]
9000567a:	b103      	cbz	r3, 9000567e <_read_r+0x1e>
9000567c:	6023      	str	r3, [r4, #0]
9000567e:	bd38      	pop	{r3, r4, r5, pc}
90005680:	20004270 	.word	0x20004270

90005684 <_init>:
90005684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90005686:	bf00      	nop
90005688:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000568a:	bc08      	pop	{r3}
9000568c:	469e      	mov	lr, r3
9000568e:	4770      	bx	lr

90005690 <_fini>:
90005690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90005692:	bf00      	nop
90005694:	bcf8      	pop	{r3, r4, r5, r6, r7}
90005696:	bc08      	pop	{r3}
90005698:	469e      	mov	lr, r3
9000569a:	4770      	bx	lr
